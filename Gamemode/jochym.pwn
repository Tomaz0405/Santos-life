#include <a_samp>

#undef  MAX_PLAYERS
#define MAX_PLAYERS   100

#include <creativ_mysql>
#include <creativ_progress>
#include <creativ_sscanf2>
#include <creativ_streamer>
#include <creativ_zcmd>
#include <creativ_md5>
#include <creativ_face>
#include <creativ_synchronizacja>
#include <YSI/y_ini>
#include <creativ_pDoor>
#include <creativ_pPanel>
#include <creativ_pTire>
#include <creativ_pLight>
#include <creativ_j_fader>
#include <creativ_mapandreas>
#include <creativ_dialogs>
#include <creativ_CLEO>
#include <creativ_func_GetPlayerCameraTargetID>
#include <creativ_strlib>
#include <creativ_samp_bcrypt>
#include <creativ_a_npc>
#include <creativ_a_http>
#include <creativ_handling>
#include <creativ_crashdetect>



#define APIKEY "34e3b7f89d58090fa05ea2c5cb862e3cd5ee8bebdd6933749d37d2262fe45939"
#define ALWAYS_RESPONSE  

#define BCRYPT_COST 12
#define DOWNLOAD_REQUEST_EMPTY		0
#define DOWNLOAD_REQUEST_MODEL_FILE	1
#define DOWNLOAD_REQUEST_TEXTURE_FILE	2
#define STREAMER_VISIBLEITENS           50000 

new bool:PlayerPaused[MAX_PLAYERS] = false,
InactiveTime[MAX_PLAYERS];
native gpci(playerid, serial[], maxlen);


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
new Float:handbrake_pos[MAX_VEHICLES][4];
new Kamizelkauid[MAX_PLAYERS];
new dDialogid[MAX_PLAYERS];
new Dostal2[MAX_PLAYERS];
new DzwonekDom[MAX_PLAYERS];
new DzwonekDom2[MAX_PLAYERS];
new C2[MAX_PLAYERS];
new Wywaz[MAX_PLAYERS];
new BW1[MAX_PLAYERS];
new Wywiad[MAX_PLAYERS];
new BW2[MAX_PLAYERS];
new BWwAucie[MAX_PLAYERS];
new HourDB[MAX_PLAYERS];
new MinutesDB[MAX_PLAYERS];
new Namierzanie[MAX_PLAYERS];
new WytrychOrg[MAX_PLAYERS];
new Rabunek[MAX_PLAYERS];
new AimbotWarnings[MAX_PLAYERS];
new oldammo, newammo;
new Text:TextDrawMainInfo[MAX_PLAYERS];
new Text:Duty[MAX_PLAYERS];
new Text:VehicleTD[MAX_PLAYERS];
new Text:VehicleTDP[MAX_PLAYERS];
new Text:AkcjaTD[MAX_PLAYERS];
new Text:SrodekTD[MAX_PLAYERS];
new Text:SrodekTD2[MAX_PLAYERS];
new TintaApasata[MAX_PLAYERS];
new PierwszaPomoc[MAX_PLAYERS];
new PierwszaPomocGracz[MAX_PLAYERS];
new CJVehicle;
new NPCStworzone = 0;

GetPlayerCameraObject(playerid) return Streamer_GetItemStreamerID(playerid, STREAMER_TYPE_OBJECT, GetPlayerCameraTargetObject(playerid));

forward OnIncomingConnection(playerid, ip_address[], port);
#define Loop(%1) for(new %1 = 0, ff = GetMaxPlayers(); %1 < ff; %1++)
#define PRESSED(%0) (((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define RELEASED(%0) \
	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))
stock dShowPlayerDialog(playerid,id,styl,napis[],text[],res[],res2[])
{
	dDialogid[playerid]=id;
	ShowPlayerDialog(playerid,id,styl,napis,text,res,res2);
	return 1;
}
#include "Jochym/system_definicje.pwn"
#include "Jochym/system_koszykowka.pwn"
#include "Jochym/system_laser.pwn"
#include "Jochym/system_newy.pwn"
#include "Jochym/system_enum.pwn"
#include "Jochym/system_danych.pwn"
#include "Jochym/system_pracownik_optymalizacja.pwn"
#include "Jochym/system_usuniete.pwn"
#include "Jochym/system_betatesty.pwn"
#include "Jochym/system_firstperson.pwn"
#include "Jochym/system_boost.pwn"
#include "Jochym/system_lsfd.pwn"
#include <antyfrp>
#pragma dynamic 10000


////////////////////////////////////////////////////////////////////////////////

//
new Vegas_Rand[MAX_PLAYERS][3];
new Text:VegasBG[5];
new Text:Vegas_Player[MAX_PLAYERS][3];
new Text:Vegas_Button[5];
new Text:Vegas_LOS[3][20];
//

new Vegas_Stawki[12] = {
	20,
	50,
	100,
	150,
	200,
	250,
	300,
	350,
	400,
	500,
	1000,
	2000
};

new tekst_global[2048];
new tekst_globals[2048];
new zapyt[1024];
new zapyt2[1024];
//new Indicators[MAX_VEHICLES][4];
//new Text:net4game[MAX_PLAYERS];
new Text:Porada[MAX_PLAYERS];
////////////////////////////////////////////////////////////////////////////////
new Bar:BarEdytor[MAX_PLAYERS];
new Bar:PasekPaliwa[MAX_PLAYERS];
new Bar:PasekNitro[MAX_PLAYERS];
////////////////////////////////////////////////////////////////////////////////
#define LIMIT_UBRAN_SKLEP_M 111
#define LIMIT_UBRAN_SKLEP_W 48
enum SkinInfo
{
	nazwa4[128],id4,cena4
}
enum AttachmentEnum
{
    attachmodel,
    attachname[24]
}

/*stock SetVehicleIndicator(vehicleid, leftindicator=0, rightindicator=0)
{
	if(!leftindicator & !rightindicator) return false;
	new Float:_vX[2], Float:_vY[2], Float:_vZ[2];
	if(rightindicator)
	{
	    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, _vX[0], _vY[0], _vZ[0]);
 		Indicators[vehicleid][0] = CreateDynamicObject(19294, 0, 0, 0,0,0,0);
		AttachDynamicObjectToVehicle(Indicators[vehicleid][0], vehicleid,  _vX[0]/2.23, _vY[0]/2.23, 0.1 ,0,0,0);
 		Indicators[vehicleid][1] = CreateDynamicObject(19294, 0, 0, 0,0,0,0);
		AttachDynamicObjectToVehicle(Indicators[vehicleid][1], vehicleid,  _vX[0]/2.23, -_vY[0]/2.23, 0.1 ,0,0,0);
	}
	if(leftindicator)
	{
	    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, _vX[0], _vY[0], _vZ[0]);
 		Indicators[vehicleid][2] = CreateDynamicObject(19294, 0, 0, 0,0,0,0);
		AttachDynamicObjectToVehicle(Indicators[vehicleid][2], vehicleid,  -_vX[0]/2.23, _vY[0]/2.23, 0.1 ,0,0,0);
 		Indicators[vehicleid][3] = CreateDynamicObject(19294, 0, 0, 0,0,0,0);
		AttachDynamicObjectToVehicle(Indicators[vehicleid][3], vehicleid,  -_vX[0]/2.23, -_vY[0]/2.23, 0.1 ,0,0,0);
	}
	return 1;
}*/
stock antyst(string[])
{
if(strfind(string,"*",true)!=-1 ||
strfind(string,"'",true)!=-1 ||
strfind(string,":",true)!=-1||
strfind(string,"/",true)!=-1||
strfind(string,";",true)!=-1 ||
strfind(string,"|",true)!=-1)
return true;
return false;
}
stock antyrycie(string[])
{
if(strfind(string,"'",true)!=-1 ||
strfind(string,":",true)!=-1||
strfind(string,"/",true)!=-1||
strfind(string,";",true)!=-1)
return true;
return false;
}
stock GetVehicleRelativePos(vehicleid, &Float:x, &Float:y, &Float:z, Float:xoff=0.0, Float:yoff=0.0, Float:zoff=0.0)
{
	new Float:rot;
	GetVehicleZAngle(vehicleid, rot);
	rot = 360 - rot;
	GetVehiclePos(vehicleid, x, y, z);
	x = floatsin(rot,degrees) * yoff + floatcos(rot,degrees) * xoff + x;
	y = floatcos(rot,degrees) * yoff - floatsin(rot,degrees) * xoff + y;
	z = zoff + z;
}
stock Samolot(carid2)
{
	new carid = GetVehicleModel(carid2);
	if(carid == 592 || carid == 577 || carid == 511 || carid == 512 || carid == 593 || carid == 520 || carid == 553 || carid == 476 || carid == 519 || carid == 460 || carid == 513) return 1;
	return 0;
}
stock Rower(carid2)
{
	new carid = GetVehicleModel(carid2);
	if(carid == 509 || carid == 481 || carid == 510) return 1;
	return 0;
}

stock Lodka(carid)
{
	new modelid = GetVehicleModel(carid);
	if(modelid == 430 || modelid == 446 || modelid == 452 || modelid == 453 || modelid == 454 || modelid == 472 || modelid == 473 || modelid == 484 || modelid == 493 || modelid == 595)
	{
		return 1;
	}
	return 0;
}

stock TabZadz(playerid)
{
    if(Dzwoni[playerid] != 0)
	{
		GameTextForPlayer(playerid, "~r~Aktualnie wykonujesz juz polaczenie.", 3000, 5);
		return 0;
	}
	dShowPlayerDialog(playerid, DIALOG_TELEFON_DZWON_KAL, DIALOG_STYLE_INPUT, GUIOPIS "Informacja", "Podaj numer, do którego chcesz siê dodzwoniæ.", "Zadzwoñ", "Zamknij");
	return 1;
}

stock TDWyscig(playerid)
{
    TextDrawHideForPlayer(playerid, Wyscig[playerid]);
	return 1;
}

stock TabKont(playerid)
{
    GameTextForPlayer(playerid, "~r~Aplikacja jest wylaczona.", 3000, 5);
	return 1;
}

stock TabWiad(playerid)
{
    dShowPlayerDialog(playerid, DIALOG_TELEFON_SMS_KAL, DIALOG_STYLE_INPUT, GUIOPIS "Informacja", "Podaj numer, do którego chcesz wys³aæ wiadomoœæ.", "Zatwierdz", "Zamknij");
	return 1;
}

stock SetPlayerToFacePlayer(playerid, targetid)
{
	//czaswykonania = gettime();
	new Float:pXl,Float:pYl,Float:pZl,Float:X,Float:Y,Float:Z,Float:ang;
	if(!IsPlayerConnected(playerid) || !IsPlayerConnected(targetid))
	{
		return 0;
	}
	GetPlayerPos(targetid, X, Y, Z);
	GetPlayerPos(playerid, pXl, pYl, pZl);
	if( Y > pYl )
	{
		ang = (-acos((X - pXl) / floatsqroot((X - pXl)*(X - pXl) + (Y - pYl)*(Y - pYl))) - 90.0);
	}
	else if( Y < pYl && X < pXl )
	{
		ang = (acos((X - pXl) / floatsqroot((X - pXl)*(X - pXl) + (Y - pYl)*(Y - pYl))) - 450.0);
	}
	else if( Y < pYl )
	{
		ang = (acos((X - pXl) / floatsqroot((X - pXl)*(X- - pXl) + (Y - pYl)*(Y - pYl))) - 90.0);
	}
	if(X > pXl)
	{
		ang = (floatabs(floatabs(ang) + 180.0));
	}
	else
	{
		ang = (floatabs(ang) - 180.0);
		SetPlayerFacingAngle(playerid, ang);
	}
	////printf("SetPlayerToFacePlayer: %d sec (%s, UID:%d, GUID:%d)", gettime()-czaswykonania,ZmianaNicku(playerid), DaneGracza[playerid][gUID], DaneGracza[playerid][gGUID]);
	return 0;
}

/*new DodatkiPOSTAC[] = {
	18927,
	18928,
	18929,
	18930,
	18931,
	18932,
	18933,
	18934,
	18935,
	18939,
	18940,
	18941,
	18942,
	18943,
	18955,
	18956,
	18957,
	18958,
	18959,
	18960,
	18961,
	18921,
	18922,
	18923,
	18924,
	18925,
	18953,
	18954,
	19067,
	19069,
	18944,
	18945,
	18946,
	18947,
	18948,
	18949,
	18950,
	18951,
	18976,
	18977,
	18978,
	18979,
	19012,
	19006,
	19007,
	19008,
	19009,
	19010,
	18865,
	18865,
	18866,
	18867,
	18868,
	18869,
	18870,
	18871,
	18872,
	18873,
	18874,
	18638,
	18638,
	-2089,
	-2090
};*/

new AttachmentObjects[][AttachmentEnum] = {
	{18927, "Czapka z daszkiem 1"},
	{18928, "Czapka z daszkiem 2"},
	{18929, "Czapka z daszkiem 3"},
	{18930, "Czapka z daszkiem 4"},
	{18931, "Czapka z daszkiem 5"},
	{18932, "Czapka z daszkiem 6"},
	{18933, "Czapka z daszkiem 7"},
	{18934, "Czapka z daszkiem 8"},
	{18935, "Czapka z daszkiem 9"},
	{18939, "Czapka z daszkiem 10"},
	{18940, "Czapka z daszkiem 11"},
	{18941, "Czapka z daszkiem 12"},
	{18942, "Czapka z daszkiem 13"},
	{18943, "Czapka z daszkiem 14"},
	{18955, "Czapka z daszkiem 15"},
	{18956, "Czapka z daszkiem 16"},
	{18957, "Czapka z daszkiem 17"},
	{18958, "Czapka z daszkiem 18"},
	{18959, "Czapka z daszkiem 19"},
	{18960, "Czapka z daszkiem 20"},
	{18961, "Czapka z daszkiem 21"},
	{18921, "Beret 1"},
	{18922, "Beret 2"},
	{18923, "Beret 3"},
	{18924, "Beret 4"},
	{18925, "Beret 5"},
	{18953, "Czapka zimowa 1"},
	{18954, "Czapka zimowa 2"},
	{19067, "Czapka zimowa 3"},
	{19069, "Czapka zimowa 4"},
	{18944, "Kapelusz"},
	{18945, "Kapelusz"},
	{18946, "Kapelusz"},
	{18947, "Kapelusz"},
	{18948, "Kapelusz"},
	{18949, "Kapelusz"},
	{18950, "Kapelusz"},
	{18951, "Kapelusz"},
	{18976, "Kask 1"},
	{18977, "Kask 2"},
	{18978, "Kask 3"},
	{18979, "Kask 4"},
	{19012, "Okulary"},
	{19006, "Okulary"},
	{19007, "Okulary"},
	{19008, "Okulary"},
	{19009, "Okulary"},
	{19010, "Okulary"},
	{18865, "Telefon"},
	{18865, "Telefon"},
	{18866, "Telefon"},
	{18867, "Telefon"},
	{18868, "Telefon"},
	{18869, "Telefon"},
	{18870, "Telefon"},
	{18871, "Telefon"},
	{18872, "Telefon"},
	{18873, "Telefon"},
	{18874, "Telefon"},
	{18638, "Kask ochronny"},
	{19528, "Czapka druida"},
	{-2089, "Chusta czarna"},
	{-2090, "Bandana czarna"},
	{-3030, "Mikrofon"}
};
new AttachmentBones[][24] = {
	{"Krêgos³up"},
	{"G³owa"},
	{"Lewe ramiê"},
	{"Prawe ramiê"},
	{"Lewa rêka"},
	{"Prawa rêka"},
	{"Lewe udo"},
	{"Prawe udo"},
	{"Lewa stopa"},
	{"Prawa stopa"},
	{"Prawa ³ydka"},
	{"Lewa ³ydka"},
	{"Lewe przedramiê"},
	{"Prawe przedramiê"},
	{"Lewy obojczyk"},
	{"Prawy obojczyk"},
	{"Szyja"},
	{"Szczêka"}
};
new SkinPlayerM[LIMIT_UBRAN_SKLEP_M][SkinInfo] =
{
	{"Ubranie (2)",2,60},
	{"Ubranie (6)",6,110},
	{"Ubranie (7)",7,115},
	{"Ubranie (14)",14,90},
	{"Ubranie (15)",15,95},
	{"Ubranie (17)",17,150},
	{"Ubranie (18)",18,60},
	{"Ubranie (19)",19,110},
	{"Ubranie (20)",20,130},
	{"Ubranie (21)",21,100},
	{"Ubranie (22)",22,160},
	{"Ubranie (23)",23,140},
	{"Ubranie (26)",26,70},
	{"Ubranie (27)",27,75},
	{"Ubranie (29)",29,110},
	{"Ubranie (30)",30,95},
	{"Ubranie (32)",32,75},
	{"Ubranie (33)",33,95},
	{"Ubranie (34)",34,90},
	{"Ubranie (35)",35,160},
	{"Ubranie (43)",43,200},
	{"Ubranie (44)",44,150},
	{"Ubranie (45)",45,45},
	{"Ubranie (46)",46,250},
	{"Ubranie (57)",57,240},
	{"Ubranie (58)",58,100},
	{"Ubranie (59)",59,190},
	{"Ubranie (60)",60,175},
	{"Ubranie (62)",62,40},
	{"Ubranie (67)",67,99},
	{"Ubranie (72)",72,125},
	{"Ubranie (73)",73,125},
	{"Ubranie (78)",78,15},
	{"Ubranie (79)",79,15},
	{"Ubranie (94)",94,75},
	{"Ubranie (98)",98,150},
	{"Ubranie (101)",101,95},
	{"Ubranie (128)",128,165},
	{"Ubranie (132)",132,50},
	{"Ubranie (133)",133,65},
	{"Ubranie (135)",135,45},
	{"Ubranie (143)",143,170},
	{"Ubranie (147)",147,290},
	{"Ubranie (158)",158,50},
	{"Ubranie (159)",159,40},
	{"Ubranie (160)",160,30},
	{"Ubranie (161)",161,80},
	{"Ubranie (170)",170,150},
	{"Ubranie (180)",180,120},
	{"Ubranie (181)",181,75},
	{"Ubranie (184)",184,145},
	{"Ubranie (185)",185,145},
	{"Ubranie (186)",186,315},
	{"Ubranie (187)",187,270},
	{"Ubranie (202)",202,65},
	{"Ubranie (20012)",20012, 320},
	{"Ubranie (20022)",20022, 320},
	{"Ubranie (20023)",20023, 390},
	{"Ubranie (20025)",20025, 310},
	{"Ubranie (20026)",20026, 370},
	{"Ubranie (20027)",20027, 390},
	{"Ubranie (20028)",20028, 390},
	{"Ubranie (20029)",20029, 330},
	{"Ubranie (20030)",20030, 380},
	{"Ubranie (20031)",20031, 310},
	{"Ubranie (20032)",20032, 360},
	{"Ubranie (20033)",20033, 370},
	{"Ubranie (20035)",20035, 420},
	{"Ubranie (20037)",20037, 470},
	{"Ubranie (20038)",20038, 350},
	{"Ubranie (20039)",20039, 350},
	{"Ubranie (20040)",20040, 320},
	{"Ubranie (20041)",20041, 300},
	{"Ubranie (20042)",20042, 300},
	{"Ubranie (20043)",20043, 320},
	{"Ubranie (20044)",20044, 320},
	{"Ubranie (20045)",20045, 340},
	{"Ubranie (20046)",20046, 340},
	{"Ubranie (20047)",20047, 390},
	{"Ubranie (20048)",20048, 330},
	{"Ubranie (20050)",20050, 320},
	{"Ubranie (20053)",20053, 300},
	{"Ubranie (20054)",20054, 390},
	{"Ubranie (20060)",20060, 330},
	{"Ubranie (20064)",20064, 330},
	{"Ubranie (20066)",20066, 350}, 
	{"Ubranie (20067)",20067, 350}, 
	{"Ubranie (20068)",20068, 310}, 
	{"Ubranie (20069)",20069, 310}, 
	{"Ubranie (20070)",20070, 310}, 
	{"Ubranie (20071)",20071, 380}, 
	{"Ubranie (20073)",20073, 380}, 
	{"Ubranie (20075)",20075, 380}, 
	{"Ubranie (20077)",20077, 320}, 
	{"Ubranie (20078)",20078, 320}, 
	{"Ubranie (20079)",20079, 320}, 
	{"Ubranie (20081)",20081, 340}, 
	{"Ubranie (20082)",20082, 340}, 
	{"Ubranie (20086)",20086, 340}, 
	{"Ubranie (20087)",20087, 340}, 
	{"Ubranie (20089)",20089, 370}, 
	{"Ubranie (20093)",20093, 370}, 
	{"Ubranie (20094)",20094, 310}, 
	{"Ubranie (20096)",20096, 390},
	// 7 nowych skinów
	{"Ubranie (20149)",20149, 410},
	{"Ubranie (20161)",20161, 410},
	{"Ubranie (20169)",20169, 410},
	{"Ubranie (20170)",20170, 410},
	{"Ubranie (20172)",20172, 410},
	{"Ubranie (20173)",20173, 410},
	{"Ubranie (20176)",20176, 410}
};

new SkinPlayerW[LIMIT_UBRAN_SKLEP_W][SkinInfo] =
{
	{"Ubranie (9)",9,45},
	{"Ubranie (10)",10,20},
	{"Ubranie (12)",12,80},
	{"Ubranie (31)",31,25},
	{"Ubranie (40)",40,50},
	{"Ubranie (41)",41,50},
	{"Ubranie (10)",10,20},
	{"Ubranie (55)",55,60},
	{"Ubranie (56)",56,40},
	{"Ubranie (76)",76,120},
    {"Ubranie (20003)",20003, 310},
    {"Ubranie (20004)",20004, 360},
    {"Ubranie (20005)",20005, 380},
    {"Ubranie (20006)",20006, 320},
    {"Ubranie (20007)",20007, 330},
    {"Ubranie (20008)",20008, 330},
    {"Ubranie (20009)",20009, 300},
    {"Ubranie (20010)",20010, 300},
    {"Ubranie (20034)",20034, 320},
    {"Ubranie (20051)",20051, 370},
    {"Ubranie (20052)",20052, 370},
	{"Ubranie (20056)",20056, 300},
	{"Ubranie (20057)",20057, 300}, 
	{"Ubranie (20058)",20058, 300}, 
	{"Ubranie (20059)",20059, 340}, 
	{"Ubranie (20061)",20061, 340}, 
	{"Ubranie (20062)",20062, 320}, 
	{"Ubranie (20063)",20063, 320}, 
	{"Ubranie (20080)",20080, 370}, 
	{"Ubranie (20084)",20084, 310}, 
	{"Ubranie (20085)",20085, 370}, 
	{"Ubranie (20088)",20088, 390}, 
	{"Ubranie (20090)",20090, 350}, 
	{"Ubranie (20091)",20091, 350}, 
	{"Ubranie (20092)",20092, 320}, 
	{"Ubranie (20095)",20095, 370},
	// 12 nowych skinów
	{"Ubranie (20151)",20151, 410},
	{"Ubranie (20153)",20153, 410},
	{"Ubranie (20154)",20154, 410},
	{"Ubranie (20155)",20155, 410},
	{"Ubranie (20156)",20156, 410},
	{"Ubranie (20158)",20158, 410},
	{"Ubranie (20159)",20159, 410},
	{"Ubranie (20164)",20164, 410},
	{"Ubranie (20165)",20165, 410},
	{"Ubranie (20167)",20167, 410},
	{"Ubranie (20168)",20168, 410},
	{"Ubranie (20171)",20171, 410}
};
new NazwaBroni[0][50] =
{
	{"Pobity",},
	{"Kastet",},{"Kij golfowy",},{"Palka policyjna",},{"Noz",},{"Kij bassebalowy",},{"Lopata",},{"Kij bilardowy",},{"Katana",},{"Pila Lancuchowa",},
	{"Rozowy Dildo",},{"Maly Vibrator",},{"Duzy Vibrator",},{"Srebrny Vibrator",},{"Kwiaty",},{"Laska",},{"Granaty",},{"Gaz lzawiacy",},{"Koktajl molotova",},
	{" ",},{" ",},{" ",},{"Glock",},{"Glock z Tlumikiem",},{"Desert Eagle",},{"Shotgun",},{"Sawn-off Shotgun",},{"Combat Shotgun",},{"Micro SMG",},
	{"MP5",},{"AK-47",},{"M4",},{"Tec9",},{"Wiejska strzelba",},{"Snajperka",},{"Wyrzutnia Rakiet",},{"Wyrzutnia Rakiet",},{"Miotacz Ognia",},
	{"Minigun",},{"Ladunki wybuchowe",},{"Detonator",},{"Spray",},{"Gasnica",},{"Kamera",},{"Noktowizor",},{"Termowizor",},{"Spadochron",}, {"",}, {"",}, {"",}, {"Wypadek drogowy",}
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum zoneinfo {
	gID,
	gUID,
	gOwner,
	gOwnerP,
	gKolor[64],
	gObiekty,
	gCena,
	gWojna,
	gLimit,
	gMetr,
	gBudowanie,
    Float:gX,
    Float:gY,
    Float:gXX,
    Float:gYY
};
new Lokacja[MAX_ZON][zoneinfo];
new Float:kogutpos[210][3] =
{
	{0.5, 0.8, 0.3},//400 gotowe
	{-0.55, 0.05, 0.8},//401 gotowe
	{-0.5, -0.35, 0.78},//402 gotowe
	{-0.5, 1.9, 1.52},//403 gotowe
	{0.5, 0.5, 0.5},//404 gotowe
	{0.5, 0.65, 0.3},//405 gotowe
	{-1.7, 4.7, 0.4},//406 gotowe
	{0.0, 100.0, 0.0},//407 brak kogutu
	{-0.5, 2.7, 1.0},//408 gotowe
	{0.5, 1.75, 0.35},//409 gotowe
	{0.5, 0.5, 0.4},//410 gotowe
	{-0.5, 0.2, 0.7},//411 gotowe
	{0.5, 0.7, 0.25},//412 gotowe
	{0.5, 1.5, 0.5},//413 gotowe
	{0.5, 1.7, 0.6},//414 gotowe
	{-0.35, -0.1, 0.60},//415 gotowe
	{0.0, 100.0, 0.5},//416 brak kogutu
	{0.0, 100.0, 0.5},//417 brak kogutu
	{0.5, 1.5, 0.35},//418  gotowe
	{-0.5, -0.1, 0.7},//419 gotowe
	{0.0, 100.0, 0.5},//420 brak kogutu
	{-0.5, 0.15, 0.7},//421 gotowe
	{0.5, 0.7, 0.35},//422 gotowe
	{0.0, 100.0, 0.5},//423 brak kogutu
	{0.0, 100.0, 0.5},//424 brak kogutu
	{0.0, 100.0, 0.5},//425 brak kogutu
	{-0.5, 0.1, 0.85},//426 gotowe
	{0.0, 100.0, 0.5},//427 brak kogutu
	{-0.85, 0.8, 1.35},//428 gotowe
	{0.0, 100.0, 0.5},//429 brak kogutu
	{0.0, 100.0, 0.5},//430 brak kogutu
	{-0.65, 5.0, 2.2},//431 gotowe
	{0.0, 100.0, 0.5},//432 brak kogutu
	{-0.5, 1.3, 1.73},//433 gotowe
	{0.0, 100.0, 0.5},//434 brak kogutu
	{0.0, 100.0, 0.5},//435 brak kogutu
	{0.5, 0.5, 0.35},//436 gotowe
	{-0.65, 5.0, 2.1},//437 gotowe
	{0.0, 100.0, 0.5},//438 brak kogutu
	{0.5, 0.4, 0.3},//439 gotowe
	{0.5, 1.5, 0.4},//440 gotowe
	{0.0, 100.0, 0.5},//441 brak kogutu
	{0.5, 1.05, 0.3},//442 gotowe
	{-0.5, 3.4, 1.53},//443 gotowe
	{0.0, 100.0, 0.5},//444 brak kogutu
	{-0.5, 0.0, 0.86},//445 gotowe
	{0.0, 100.0, 0.5},//446 brak kogutu
	{0.0, 100.0, 0.5},//447 brak kogutu
	{0.0, 100.0, 0.5},//448 brak kogutu
	{0.0, 100.0, 0.5},//449 brak kogutu
	{0.5, 100.0, 0.2},//450 brak kogutu
	{0.5, 0.5, 0.2},//451 gotowe
	{0.5, 100.0, 0.3},//452 brak kogutu
	{0.5, 100.0, 0.3},//453 brak kogutu
	{0.5, 100.0, 0.3},//454 brak kogutu
	{-0.6, 1.4, 1.72},//455 gotowe
	{-0.5, 1.6, 1.28},//456 gotowe
	{0.5, 100.0, 0.3},//457 brak kogutu
	{0.5, 0.9, 0.2},//458 gotowe
	{0.5, 1.5, 0.52},//459 gotowe
	{0.5, 100.0, 0.3},//460 brak kogutu
	{0.5, 100.0, 0.3},//461 brak kogutu
	{0.5, 100.0, 0.3},//462 brak kogutu
	{0.5, 100.0, 0.3},//463 brak kogutu
	{0.5, 100.0, 0.3},//464 brak kogutu
	{0.5, 100.0, 0.3},//465 brak kogutu
	{0.5, 0.75, 0.38},//466 gotowe
	{0.5, 0.75, 0.38},//467 gotowe
	{0.5, 100.0, 0.3},//468 brak kogutu
	{0.5, 100.0, 0.3},//469 brak kogutu
	{-0.8, 0.2, 1.12},//470 gotowe
	{0.5, 100.0, 0.3},//471 brak kogutu
	{0.5, 100.0, 0.3},//472 brak kogutu
	{0.5, 100.0, 0.3},//473 brak kogutu
	{-0.51, 0.0, 0.85},//474 gotowe
	{0.5, 0.52, 0.32},//475 gotowe
	{0.5, 100.0, 0.3},//476 brak kogutu
	{-0.5, -0.25, 0.72},//477 gotowe
	{-0.5, 0.5, 0.9},//478 gotowe
	{0.5, 0.65, 0.45},//479 gotowe
	{0.5, 0.4, 0.3},//480 gotowe
	{0.5, 100.0, 0.3},//481 brak kogutu
	{0.5, 1.4, 0.45},//482 gotowe
	{-0.5, 1.9, 1.06},//483 gotowe
	{0.5, 100.0, 0.3},//484 brak kogutu
	{0.5, 100.0, 0.3},//485 brak kogutu
	{0.5, 100.0, 0.3},//486 brak kogutu
	{0.5, 100.0, 0.3},//487 brak kogutu
	{0.5, 100.0, 0.3},//488 brak kogutu
	{-0.6, 0.0, 1.13},//489 gotowe
	{0.5, 100.0, 0.3},//490 brak kogutu
	{0.5, 0.4, 0.3},//491 gotowe
	{0.5, 0.78, 0.4},//492 gotowe
	{0.5, 100.0, 0.3},//493 brak kogutu
	{0.5, 100.0, 0.3},//494 brak kogutu
	{0.5, 100.0, 0.3},//495 brak kogutu
	{0.5, 0.52, 0.37},//496 gotowe
	{0.5, 100.0, 0.3},//497 brak kogutu
	{-0.9, 2.0, 2.07},//498 gotowe
	{0.5, 0.9, 0.45},//499 gotowe
	{0.5, 0.45, 0.32},//500 gotowe
	{0.5, 100.0, 0.45},//501 brak kogutu
	{0.5, 100.0, 0.45},//502 brak kogutu
	{0.5, 100.0, 0.45},//503 brak kogutu
	{0.5, 100.0, 0.45},//504 brak kogutu
	{-0.7, 0.1, 1.12},//505 gotowe
	{0.5, 0.32, 0.25},//506 gotowe
	{0.5, 0.8, 0.3},//507 gotowe
	{0.5, 100.0, 0.45},//508 brak kogutu
	{0.5, 100.0, 0.45},//509 brak kogutu
	{0.5, 100.0, 0.45},//510 brak kogutu
	{0.5, 100.0, 0.45},//511 brak kogutu
	{0.5, 100.0, 0.45},//512 brak kogutu
	{0.5, 100.0, 0.45},//513 brak kogutu
	{-0.65, 1.8, 1.38},//514 gotowe
	{-0.65, 1.8, 1.32},//515 gotowe
	{0.5, 0.8, 0.32},//516 gotowe
	{0.5, 0.76, 0.32},//517 gotowe
	{-0.5, 0.15, 0.73},//518 gotowe
	{0.5, 100.0, 0.45},//519 brak kogutu
	{0.5, 100.0, 0.45},//520 brak kogutu
	{0.5, 100.0, 0.45},//521 brak kogutu
	{0.5, 100.0, 0.45},//522 brak kogutu
	{0.5, 100.0, 0.45},//523 brak kogutu
	{-0.6, 1.7, 0.93},//524 gotowe
	{0.0, -0.47, 1.43},//525 gotowe
	{-0.5, 0.0, 0.67},//526 gotowe
	{-0.5, 0.1, 0.89},//527 gotowe
	{0.5, 100.0, 0.45},//528 brak kogutu
	{-0.5, 0.0, 0.93},//529 gotowe
	{0.5, 100.0, 0.45},//530 brak kogutu
	{0.5, 100.0, 0.45},//531 brak kogutu
	{0.5, 100.0, 0.45},//532 brak kogutu
	{0.5, 0.65, 0.33},//533 gotowe
	{0.5, 0.77, 0.26},//534 gotowe
	{-0.6, 0.4, 0.83},//535 gotowe
	{0.5, 0.68, 0.23},//536 gotowe
	{0.5, 100.0, 0.45},//537 brak kogutu
	{0.5, 100.0, 0.45},//538 brak kogutu
	{0.5, 100.0, 0.45},//539 brak kogutu
	{0.5, 0.68, 0.23},//540 gotowe
	{-0.4, 0.05, 0.66},//541 gotowe
	{0.5, 0.55, 0.4},//542 gotowe
	{-0.7, 0.4, 0.91},//543 gotowe
	{0.5, 100.0, 0.45},//544 brak kogutu
	{-0.5, -0.3, 0.78},//545 gotowe
	{0.5, 0.60, 0.4},//546 gotowe
	{0.5, 0.7, 0.4},//547 gotowe
	{0.5, 100.0, 0.45},//548 brak kogutu
	{-0.55, 0.4, 0.75},//549 gotowe
	{-0.6, 0.1, 0.72},//550 gotowe
	{0.5, 0.8, 0.35},//551 gotowe
	{0.5, 1.33, 0.8},//552 gotowe
	{-0.55, 100.0, 0.75},//553 brak kogutu
	{-0.7, 0.2, 1.06},//554 gotowe
	{-0.55, 100.0, 0.75},//555 brak kogutu
	{-0.55, 100.0, 0.75},//556 brak kogutu
	{-0.55, 100.0, 0.75},//557 brak kogutu
	{-0.5, -0.2, 0.89},//558 gotowe
	{-0.5, 0.0, 0.75},//559 gotowe
	{0.5, 0.8, 0.4},//560 gotowe
	{-0.5, 0.2, 0.81},//561 gotowe
	{-0.5, -0.1, 0.79},//562 gotowe
	{-0.55, 100.0, 0.75},//563 brak kogutu
	{-0.55, 100.0, 0.75},//564 brak kogutu
	{-0.5, 0.0, 0.71},//565 gotowe
	{-0.7, 0.2, 0.87},//566 gotowe
	{-0.55, 100.0, 0.75},//567 brak kogutu
	{-0.55, 100.0, 0.75},//568 brak kogutu
	{-0.55, 100.0, 0.75},//569 brak kogutu
	{-0.55, 100.0, 0.75},//570 brak kogutu
	{-0.55, 100.0, 0.75},//571 brak kogutu
	{-0.55, 100.0, 0.75},//572 brak kogutu
	{-0.55, 100.0, 0.75},//573 brak kogutu
	{-0.55, 100.0, 0.75},//574 brak kogutu
	{-0.55, 100.0, 0.75},//575 brak kogutu
	{0.5, 0.6, 0.48},//576 gotowe
	{-0.55, 100.0, 0.75},//577 brak kogutu
	{-0.7, 3.9, 1.41},//578 gotowe
	{-0.7, 0.1, 1.25},//579 gotowe
	{-0.7, 0.3, 1.06},//580 gotowe
	{-0.55, 100.0, 0.75},//581 brak kogutu
	{-0.55, 100.0, 0.75},//582 brak kogutu
	{-0.55, 100.0, 0.75},//583 brak kogutu
	{-0.55, 100.0, 0.75},//584 brak kogutu
	{-0.6, 0.1, 1.02},//585 gotowe
	{-0.55, 100.0, 0.75},//586 brak kogutu
	{0.5, 0.5, 0.25},//587 gotowe
	{-0.55, 100.0, 0.75},//588 brak kogutu
	{-0.5, 0.0, 1.09},//589 gotowe
	{-0.55, 100.0, 0.75},//590 brak kogutu
	{-0.55, 100.0, 0.75},//591 brak kogutu
	{-0.55, 100.0, 0.75},//592 brak kogutu
	{-0.55, 100.0, 0.75},//593 brak kogutu
	{-0.55, 100.0, 0.75},//594 brak kogutu
	{-0.55, 100.0, 0.75},//595 brak kogutu
	{-0.55, 100.0, 0.75},//596 brak kogutu
	{-0.55, 100.0, 0.75},//597 brak kogutu
	{-0.55, 100.0, 0.75},//598 brak kogutu
	{-0.55, 100.0, 0.75},//599 brak kogutu
	{-0.5, 0.1, 0.8},//600 gotowe
	{-0.55, 100.0, 0.75},//601 brak kogutu
	{-0.5, -0.2, 0.72},//602 gotowe
	{-0.5, -0.2, 0.68},//603 gotowe
	{0.5, 0.7, 0.35},//604 gotowe
	{-0.5, 0.3, 0.91},//605 gotowe
	{-0.55, 100.0, 0.75},//606 brak kogutu
	{-0.55, 100.0, 0.75},//607 brak kogutu
	{-0.55, 100.0, 0.75},//608 brak kogutu
	{-0.9, 2.0, 2.07}//609 gotowe
};
enum kInfo
{
	VID,          //ID Modelu Pojazdu
	Float:PXLP,  //Lewy Przod X
	Float:PYLP, //Lewy Przod Y
	Float:PZLP,//Lewy Przod Z

	Float:PXLT,  //Lewy Ty³ X
	Float:PYLT, //Lewy Ty³ Y
	Float:PZLT,//Lewy Ty³ Z

	Float:PXPP,  //Prawy Przod X
	Float:PYPP, //Prawy Przod Y
	Float:PZPP,//Prawy Przod Z

	Float:PXPT,  //Prawy Ty³ X
	Float:PYPT, //Prawy Ty³ Y
	Float:PZPT //Prawy Ty³ Z
};

stock TOKKEN(playerid, zmienna=0)
{
	//czaswykonania = gettime();
	if(zmienna == 0) zmienna = playerid;
	new text[32];
	format(text, sizeof(text), "%d", zmienna);
	new char1[5], char2[5], char3[5], char4[4], charcode2[5];
	strmid(charcode2, MD5_Hash(text), 0, strlen(MD5_Hash(text)), 255);
	strmid(char1, charcode2[0], 0, 1, 255);
	strmid(char2, charcode2[1], 0, 1, 255);
	strmid(char3, charcode2[2], 0, 1, 255);
	strmid(char4, charcode2[3], 0, 1, 255);
	strdel(tekst_global, 0, 2048);
	format(tekst_global, sizeof(tekst_global), "%s%s%s%s", char1, char2, char3, char4);
	strtoupper(tekst_global);
	////printf("TOKKEN: %d sec (%s, UID:%d, GUID:%d)", gettime()-czaswykonania,ZmianaNicku(playerid), DaneGracza[playerid][gUID], DaneGracza[playerid][gGUID]);
	return tekst_global;
}
stock iban(playerid, zmienna=0)
{
	//czaswykonania = gettime();
	if(zmienna == 0) zmienna = DaneGracza[playerid][gUID];
	new text[32];
	format(text, sizeof(text), "%d", zmienna);
	new char1[5], char2[5], char3[5], char4[4], charcode2[21], char5[5], char6[5], char7[5], char8[5], char9[5], char10[5]
	, char11[5], char12[5], char13[5], char14[5], char15[5], char16[5], char17[5], char18[5], char19[5], char20[5];
	strmid(charcode2, MD5_Hash(text), 0, strlen(MD5_Hash(text)), 255);
	strmid(char1, charcode2[0], 0, 1, 255);
	strmid(char2, charcode2[1], 0, 1, 255);
	strmid(char3, charcode2[2], 0, 1, 255);
	strmid(char4, charcode2[3], 0, 1, 255);
	strmid(char5, charcode2[4], 0, 1, 255);
	strmid(char6, charcode2[5], 0, 1, 255);
	strmid(char7, charcode2[6], 0, 1, 255);
	strmid(char8, charcode2[7], 0, 1, 255);
	strmid(char9, charcode2[8], 0, 1, 255);
	strmid(char10, charcode2[9], 0, 1, 255);
	strmid(char11, charcode2[10], 0, 1, 255);
	strmid(char12, charcode2[11], 0, 1, 255);
	strmid(char13, charcode2[12], 0, 1, 255);
	strmid(char14, charcode2[13], 0, 1, 255);
	strmid(char15, charcode2[14], 0, 1, 255);
	strmid(char16, charcode2[15], 0, 1, 255);
	strmid(char17, charcode2[16], 0, 1, 255);
	strmid(char18, charcode2[17], 0, 1, 255);
	strmid(char19, charcode2[18], 0, 1, 255);
	strmid(char20, charcode2[19], 0, 1, 255);
	strdel(tekst_global, 0, 2048);
	format(tekst_global, sizeof(tekst_global), "%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s", char1, char2, char3, char4, char5, char6, char7, char8, char9
	, char10, char11, char12, char13, char14, char15, char16, char17, char18, char19, char20);
	strtoupper(tekst_global);
	////printf("iban: %d sec (%s, UID:%d, GUID:%d)", gettime()-czaswykonania,ZmianaNicku(playerid), DaneGracza[playerid][gUID], DaneGracza[playerid][gGUID]);
	return tekst_global;
}
stock md5(str[])
{
	return MD5_Hash(str);
}
new NazwyDzialalnosci[29][124] =
{
	{"None"},
	{"Policyjny"}, //gotowe
	{"Przestepcza (Zamawianie: Amunicja)"},
	{"Warsztat"}, //gotowe
	{"27/7"}, //gotowe
	{"Samochodowy"}, //gotowe
	{"Koœcielna"}, //wstrzymana
	{"Bankowa"}, //gotowe
	{"Elektryczna"}, //gotowe
	{"Gastronomia"}, //gotowe
	{"Radio"},
	{"Przestepcza (Zamawianie: Bron)"}, //gotowe
	{"Hotel"},
	{"Rodzinka"}, //gotowe 1/2
	{"Medyczny"},//gotowe
	{"Taxi"},
	{"Przestepcza (Zamawianie: Narkotyki)"},
	{"Silownia"},
	{"Sklep z ubraniami"},
	{"Rzadowy"},
	{"Ochrona"},
	{"Syndykat"},
	{"Nauka Jazdy"},
	{"Transportowa"},
	{"Branza rozrywkowa"},
	{"Siec telefoniczna"},
	{"Strzelnica"},
	{"Ammunation"},
	{"Salon tatuazu"}
};
new TypDokumentu[7][124] =
{
	{"Prawo jazdy"},
	{"Prawo jazdy"},
	{"Licencja na bron"},
	{"Zaswiadzczenie o niekaralnosc"},
	{"Dowod osobisty"},
	{"Zaswiadzczenie o niepoczytalnosci"},
	{"Karta wedkarska"}
};
new TypPojazdow[10][124] =
{
	{"None"},
	{"Tanie"},
	{"Popularne Tanie"},
	{"Popularne"},
	{"Prawie luksusowe"},
	{"Sport & Exclusive"},
	{"£odze"},
	{"Jednoœlady"},
	{"Samoloty & Helikoptery"},
	{"Pojazdy Premium"}
};
stock strtoupper(text[])
{
	//czaswykonania = gettime();
	for(new l = 0; l < strlen(text); l++)
	{
		text[l] = toupper(text[l]);
	}
	////printf("strtoupper: %d sec", gettime()-czaswykonania);
}
stock strtolower(text[])
{
	//czaswykonania = gettime();
	for(new l = 0; l < strlen(text); l++)
	{
		text[l] = tolower(text[l]);
	}
	////printf("strtolower: %d sec", gettime()-czaswykonania);
}
stock UsunPLZnaki(text[])
{
	//czaswykonania = gettime();
	ForeachEx(i, strlen(text))
	{
		if(text[i] == 'ê') text[i] = 'e';
	    if(text[i] == 'ó') text[i] = 'o';
	    if(text[i] == '¹') text[i] = 'a';
	    if(text[i] == 'œ') text[i] = 's';
	    if(text[i] == '³') text[i] = 'l';
	    if(text[i] == '¿') text[i] = 'z';
	    if(text[i] == 'Ÿ') text[i] = 'z';
	    if(text[i] == 'æ') text[i] = 'c';
	    if(text[i] == 'ñ') text[i] = 'n';
	}
	////printf("UsunPlZnaki: %d sec", gettime()-czaswykonania);
}
/*stock UsunZnakiZNicku(text[])
{
	//czaswykonania = gettime();
	ForeachEx(i, strlen(text))
	{
		if(text[i] == 'ê') text[i] = 'e';
	    if(text[i] == 'ó') text[i] = 'o';
	    if(text[i] == '¹') text[i] = 'a';
	    if(text[i] == 'œ') text[i] = 's';
	    if(text[i] == '³') text[i] = 'l';
	    if(text[i] == '¿') text[i] = 'z';
	    if(text[i] == 'Ÿ') text[i] = 'z';
	    if(text[i] == 'æ') text[i] = 'c';
	    if(text[i] == 'ñ') text[i] = 'n';
	    if(text[i] == '!') text[i] = ' ';
	    if(text[i] == '@') text[i] = ' ';
	    if(text[i] == '#') text[i] = ' ';
	    if(text[i] == '$') text[i] = ' ';
	    if(text[i] == '%') text[i] = ' ';
	    if(text[i] == '^') text[i] = ' ';
	    if(text[i] == '&') text[i] = ' ';
	    if(text[i] == '*') text[i] = ' ';
	    if(text[i] == '(') text[i] = ' ';
	    if(text[i] == ')') text[i] = ' ';
	    if(text[i] == '{') text[i] = ' ';
	    if(text[i] == '}') text[i] = ' ';
	    if(text[i] == ';') text[i] = ' ';
	    if(text[i] == ':') text[i] = ' ';
	    if(text[i] == '"') text[i] = ' ';
	    if(text[i] == '/') text[i] = ' ';
	    if(text[i] == '>') text[i] = ' ';
	    if(text[i] == '<') text[i] = ' ';
	    if(text[i] == '.') text[i] = ' ';
	    if(text[i] == ',') text[i] = ' ';
	    if(text[i] == '[') text[i] = ' ';
	    if(text[i] == ']') text[i] = ' ';
	    if(text[i] == '?') text[i] = ' ';
	}
	////printf("UsunPlZnaki: %d sec", gettime()-czaswykonania);
}*/
stock OdswiezEuro(playerid)
{
	if(WlaczEuro == 1)
	{
		new euro[128];
		TextDrawHideForPlayer(playerid, Euro[playerid]);
		if(DaneGracza[playerid][gEuro] <= 9)
		{
			format(euro, sizeof(euro),"~g~EUR~w~00000%d", DaneGracza[playerid][gEuro]);
		}
		if(DaneGracza[playerid][gEuro] <= 99 && DaneGracza[playerid][gEuro] >= 10)
		{
			format(euro, sizeof(euro),"~g~EUR~w~0000%d", DaneGracza[playerid][gEuro]);
		}
		if(DaneGracza[playerid][gEuro] <= 999 && DaneGracza[playerid][gEuro] >= 100)
		{
			format(euro, sizeof(euro),"~g~EUR~w~000%d", DaneGracza[playerid][gEuro]);
		}
		if(DaneGracza[playerid][gEuro] <= 9999 && DaneGracza[playerid][gEuro] >= 1000)
		{
			format(euro, sizeof(euro),"~g~EUR~w~00%d", DaneGracza[playerid][gEuro]);
		}
		if(DaneGracza[playerid][gEuro] <= 99999 && DaneGracza[playerid][gEuro] >= 10000)
		{
			format(euro, sizeof(euro),"~g~EUR~w~0%d", DaneGracza[playerid][gEuro]);
		}
		if(DaneGracza[playerid][gEuro] >= 100000)
		{
			format(euro, sizeof(euro),"~g~EUR~w~%d", DaneGracza[playerid][gEuro]);
		}
		TextDrawSetString(Euro[playerid], euro);
		TextDrawShowForPlayer(playerid, Euro[playerid]);
		return 1;
	}
	return 1;
}

stock GM(playerid, zmienna=0)
{
	//czaswykonania = gettime();
	if(zmienna == 0) zmienna = DaneGracza[playerid][gGUID];
	new text[32];
	format(text, sizeof(text), "%d", zmienna);
	new char1[5], char2[5], char3[5], char4[4], charcode2[5];
	strmid(charcode2, MD5_Hash(text), 0, strlen(MD5_Hash(text)), 255);
	strmid(char1, charcode2[0], 0, 1, 255);
	strmid(char2, charcode2[1], 0, 1, 255);
	strmid(char3, charcode2[2], 0, 1, 255);
	strmid(char4, charcode2[3], 0, 1, 255);
	strdel(tekst_global, 0, 2048);
	format(tekst_global, sizeof(tekst_global), "%s%s%s%s", char1, char2, char3, char4);
	strtoupper(tekst_global);
	////printf("GM: %d sec", gettime()-czaswykonania);
	return tekst_global;
}
stock mysql_check()
{
    //czaswykonania = gettime();
    if(mysql_ping() == (-1))
    {
        mysql_connect(SQL_HOST, SQL_USER, SQL_DB, SQL_PASS);
        for(new i = 0; i < 100; i++)
        {
            if(!mysql_reload())
            {
                SendRconCommand("hostname ["PROJEKT"] - B³¹d po³¹czenia bazy danych!");
                SendRconCommand("password ERROR");
                SetGameModeText(""VER"*");
                mysql_reload();
            }
            else
            {
                SendRconCommand("hostname ["PROJEKT"] - Prace techniczne.");
                SendRconCommand("password ");
                SetGameModeText(""VER"");
            }
        }
    }
    ////printf("mysql_check: %d sec", gettime()-czaswykonania);
    return 1;
}

stock ImieGracza(playerid)
{
	new imie[MAX_PLAYER_NAME];
	GetPlayerName(playerid, imie, sizeof(imie));
	return imie;
}
stock ImieGracza2(playerid)
{
	//czaswykonania = gettime();
	if(DaneGracza[playerid][gTeam] == 0 || DaneGracza[playerid][gTeam] == 2 || DaneGracza[playerid][gTeam] == 3)
	{
		new imie[MAX_PLAYER_NAME], tekst_global1[50];
		GetPlayerName(playerid, imie, sizeof(imie));
		strtolower(imie);
		new imien[50], nazwisko[50];
	    sscanf(imie, "p<_>s[50]s[50]",imien,nazwisko);
		imien[0] = toupper(imien[0]);
		nazwisko[0] = toupper(nazwisko[0]);
		format(tekst_global1, sizeof(tekst_global1), "%s %s", imien,nazwisko);
		////printf("ImieGracza2: %d sec (%s, UID:%d, GUID:%d)", gettime()-czaswykonania,ZmianaNicku(playerid), DaneGracza[playerid][gUID], DaneGracza[playerid][gGUID]);
		return tekst_global1;
	}
	else
	{
	    new imie[MAX_PLAYER_NAME], tekst_global1[50];
		GetPlayerName(playerid, imie, sizeof(imie));
		strtolower(imie);
		new imien[50], nazwisko[50];
	    sscanf(imie, "p<_>s[50]s[50]",imien,nazwisko);
		imien[0] = toupper(imien[0]);
		nazwisko[0] = toupper(nazwisko[0]);
		format(tekst_global1, sizeof(tekst_global1), "%s%s", imien,nazwisko);
		//UsunZnakiZNicku(tekst_global1);
		return tekst_global1;
	}
}
stock KameraLogowania(id)
{
    SetPlayerWorldBounds(id, 20000.00, -20000.00, 20000.00, -20000.00);
	SetPlayerCameraPos(id, 198.782237, -1860.767944, 7.0);
	SetPlayerCameraLookAt(id, 192.639099, -1877.993896, 2.161899);
	Teleportuj(id, 245.427795, -1873.137573, 3.317595);
	
}
stock ImieBota(id)
{
		new tekst_global1[50];
		new imien[50], nazwisko[50];
	    sscanf(Bot[id][bNick], "p<_>s[50]s[50]",imien,nazwisko);
		imien[0] = toupper(imien[0]);
		nazwisko[0] = toupper(nazwisko[0]);
		format(tekst_global1, sizeof(tekst_global1), "%s %s", imien,nazwisko);
		////printf("ImieGracza2: %d sec (%s, UID:%d, GUID:%d)", gettime()-czaswykonania,ZmianaNicku(playerid), DaneGracza[playerid][gUID], DaneGracza[playerid][gGUID]);
		return tekst_global1;
}
stock ImieWlasciciela(id)
{
    new tekst_global1[50];
	if(id >= 0)
	{
		new imien[50], nazwisko[50];
	    sscanf(Wlasciciel[id][wNAME], "p<_>s[50]s[50]",imien,nazwisko);
		imien[0] = toupper(imien[0]);
		nazwisko[0] = toupper(nazwisko[0]);
		format(tekst_global1, sizeof(tekst_global1), "%s %s", imien,nazwisko);
	}
	return tekst_global1;
}
main()
{
	new Rok, Miesiac, Dzien;
	mysql_check();
	getdate(Rok, Miesiac, Dzien);
	print ("\n===========["VER"]===========");

}
////////////////////////////////////////////////////////////////////////////////

#include "Jochym/system_historia.pwn"
#include "Jochym/system_zapis.pwn"
#include "Jochym/system_logi.pwn"
#include "Jochym/system_kary.pwn"
#include "Jochym/system_ryby.pwn"
#include "Jochym/system_grupy.pwn"
#include "Jochym/system_forumpw.pwn"
#include "Jochym/system_nieruchomosci.pwn"
#include "Jochym/system_obiekty.pwn"
#include "Jochym/system_elektryka.pwn"
#include "Jochym/system_roslin.pwn"
#include "Jochym/system_zlomiarz.pwn"
#include "Jochym/system_przedmioty.pwn"
#include "Jochym/system_pojazdy.pwn"
#include "Jochym/system_sannews.pwn"
#include "Jochym/system_fotoradary.pwn"
#include "Jochym/system_textury.pwn"
#include "Jochym/system_tuning.pwn"
#include "Jochym/system_banki.pwn"
#include "Jochym/system_busy.pwn"
#include "Jochym/system_magazyny.pwn"
#include "Jochym/system_oferty.pwn"
#include "Jochym/system_hurtownie.pwn"
#include "Jochym/system_animacje.pwn"
#include "Jochym/system_wyscigi.pwn"
#include "Jochym/system_police.pwn"
#include "Jochym/system_dialogid.pwn"
#include "Jochym/system_poker.pwn"
#include "Jochym/system_mafie.pwn"
#include "Jochym/system_rzad.pwn"
#include "Jochym/system_antycheat.pwn"
#include "Jochym/system_terenow.pwn"
#include "Jochym/system_cornery.pwn"
#include "Jochym/system_dorywcze.pwn"
#include "Jochym/system_cmdadmin.pwn"
#include "Jochym/system_kopi_wnetrz.pwn"
#include "Jochym/system_modele.pwn"
//#include "Jochym/system_aimbot.pwn"

////////////////////////////////////////////////////////////////////////////////
forward ZaladujWynajem();
public ZaladujWynajem()
{
	//czaswykonania = gettime();
	new id = false;
	mysql_query( "SELECT * FROM `jochym_wynajem`" );
	mysql_store_result( );
	while(mysql_fetch_row(zapyt))
	{
	    sscanf(zapyt, "p<|>i", id );
	    sscanf(zapyt, "p<|>dddddds[254]",
	    Wynajem[id][wID],
	   	Wynajem[id][wUID],
	    Wynajem[id][wCzas],
	    Wynajem[id][wDostal],
	    Wynajem[id][wDrzwi],
		Wynajem[id][wKoszt],
		Wynajem[id][wNick]);
	}
	mysql_free_result( );
	printf("Wynajem   - %d", id);
	return 1;
}
forward ZaladujSMS();
public ZaladujSMS()
{
	//czaswykonania = gettime();
	new id = false;
	mysql_query( "SELECT * FROM `jochym_smsy`" );
	mysql_store_result( );
	while(mysql_fetch_row(zapyt))
	{
	    sscanf(zapyt, "p<|>i", id );
	    sscanf(zapyt, "p<|>ddds[64]s[64]s[200]ddddd",
	    SMSY[id][sID],
	    SMSY[id][sNUMER1],
	    SMSY[id][sNUMER2],
	    SMSY[id][sNICK1],
	    SMSY[id][sNICK2],
	    SMSY[id][sTRESC],
		SMSY[id][sDzien],
		SMSY[id][sMiesiac],
		SMSY[id][sRok],
		SMSY[id][sGodzina],
		SMSY[id][sMinuta]);
	}
	mysql_free_result( );
	printf("SMSY   - %d", id);
	return 1;
}
forward ZaladujZgloszenia();
public ZaladujZgloszenia()
{
	//czaswykonania = gettime();
	new id = false;
	mysql_query( "SELECT * FROM `jochym_zgloszenia`" );
	mysql_store_result( );
	while(mysql_fetch_row(zapyt))
	{
	    sscanf(zapyt, "p<|>i", id );
	    sscanf(zapyt, "p<|>ddds[64]fffs[256]ddd",
	    Zgloszenie[id][zID],
        Zgloszenie[id][zUID],
        Zgloszenie[id][zNUMER],
        Zgloszenie[id][zNICK],
        Zgloszenie[id][zX],
        Zgloszenie[id][zY],
        Zgloszenie[id][zZ],
        Zgloszenie[id][zTRESC],
        Zgloszenie[id][zODEBRAL],
        Zgloszenie[id][zZAKONCZONE],
		Zgloszenie[id][zUID_GRUPY]);
	}
	mysql_free_result( );
	printf("Zgloszen   - %d", id);
	return 1;
}
forward ZaladujWlasciciela();
public ZaladujWlasciciela()
{
	//czaswykonania = gettime();
	new id = false;
	mysql_query( "SELECT * FROM `jochym_postacie`" );
	mysql_store_result( );
	while(mysql_fetch_row(zapyt))
	{
	    sscanf(zapyt, "p<|>i", id );
	    sscanf(zapyt, "p<|>dds[100]d",
	    Wlasciciel[id][wID],
	    Wlasciciel[id][wGUID],
	    Wlasciciel[id][wNAME],
		Wlasciciel[id][wCzasOnline]);
	}
	mysql_free_result( );
	printf("Wlascicieli   - %d", id);
	return 1;
}
forward ZaladujOpisy();
public ZaladujOpisy()
{
	//czaswykonania = gettime();
	new id = false;
	mysql_query( "SELECT * FROM `jochym_opisy`" );
	mysql_store_result( );
	while(mysql_fetch_row(zapyt))
	{
	    sscanf(zapyt, "p<|>i", id );
	    sscanf(zapyt, "p<|>ddds[250]",
	    Opisy[id][opID],
	    Opisy[id][opGUID],
	    Opisy[id][opUID],
		Opisy[id][opOpis]);
	}
	mysql_free_result( );
	printf("Opisow   - %d", id);
	return 1;
}
forward ZaladujBazaDNA();
public ZaladujBazaDNA()
{
	//czaswykonania = gettime();
	new id = false;
	mysql_query( "SELECT * FROM `jochym_bazadna`" );
	mysql_store_result( );
	while(mysql_fetch_row(zapyt))
	{
	    sscanf(zapyt, "p<|>i", id );
	    sscanf(zapyt, "p<|>ddds[126]s[255]s[255]",
	    BazaDNA[id][dbID],
	   	BazaDNA[id][dbUID],
	    BazaDNA[id][dbKod],
	    BazaDNA[id][dbData],
	    BazaDNA[id][dbNICK],
	    BazaDNA[id][dbPobral]);
	}
	mysql_free_result( );
	printf("Pobrane DNA - %d", id);
	return 1;
}
forward ZaladujDNA();
public ZaladujDNA()
{
	//czaswykonania = gettime();
	new id = false;
	mysql_query( "SELECT * FROM `jochym_dna`" );
	mysql_store_result( );
	while(mysql_fetch_row(zapyt))
	{
	    sscanf(zapyt, "p<|>i", id );
	    sscanf(zapyt, "p<|>ddds[200]s[200]dds[200]",
	    Dna[id][dID],
	   	Dna[id][dUID],
	    Dna[id][dTyp],
	    Dna[id][dKod],
	    Dna[id][dZapis],
		Dna[id][dGracz],
		Dna[id][dPoszkodowany],
		Dna[id][dKodPoszkodowany]);
	}
	mysql_free_result( );
	printf("Œlady DNA   - %d", id);
	return 1;
}
forward ZaladujTato();
public ZaladujTato()
{
	//czaswykonania = gettime();
	new id = false;
	mysql_query( "SELECT * FROM `jochym_tatuaze`" );
	mysql_store_result( );
	while(mysql_fetch_row(zapyt))
	{
	    sscanf(zapyt, "p<|>i", id );
	    sscanf(zapyt, "p<|>ddddds[200]",
	    Tatuaze[id][tID],
	   	Tatuaze[id][tUID],
	    Tatuaze[id][tGUID],
	    Tatuaze[id][tUIDT],
	    Tatuaze[id][tGUIDT],
		Tatuaze[id][tTATUAZ]);
	}
	mysql_free_result( );
	printf("Tatuaze   - %d", id);
	return 1;
}
forward OdladujBoty();
public OdladujBoty()
{
	ForeachEx(id, MAX_BOT)
	{
	    DestroyDynamicActor(id);
	    DestroyDynamic3DTextLabel(Text3D:Bot[id][bNickTag]);
	    DestroyDynamic3DTextLabel(Text3D:Bot[id][bOpisTag]);
	}
	return 1;
}
stock PlayerObokAktora(playerid, id, range)
{
	if(IsPlayerInRangeOfPoint(playerid, range, Bot[id][bX], Bot[id][bY], Bot[id][bZ]))
	{
	    return true;
	}
	else return false;
}
forward ZaladujBoty();
public ZaladujBoty()
{
	//czaswykonania = gettime();
	new id = false;
	mysql_query( "SELECT * FROM `jochym_boty`" );
	mysql_store_result( );
	while(mysql_fetch_row(zapyt))
	{
	    sscanf(zapyt, "p<|>i", id );
	    sscanf(zapyt, "p<|>dds[32]ffffdfddds[126]ddfdd",
	    Bot[id][bID],
	   	Bot[id][bTyp],
	    Bot[id][bNick],
	    Bot[id][bX],
	    Bot[id][bY],
	    Bot[id][bZ],
		Bot[id][bRot],
		Bot[id][bSkin],
		Bot[id][bHP],
	    Bot[id][bVW],
	    Bot[id][bInterior],
	    Bot[id][bAnim],
		Bot[id][bOpis],
		Bot[id][bReputacja],
		Bot[id][bPieniadze],
		Bot[id][bWysokosc],
		Bot[id][bUkryty],
		Bot[id][bStworzyl]);
	    Bot[id][bID] = CreateDynamicActor(Bot[id][bSkin], Bot[id][bX], Bot[id][bY], Bot[id][bZ], Bot[id][bRot], 1, Bot[id][bHP], Bot[id][bVW], Bot[id][bInterior]);
	    StatusAktora(id);
	     new string[256];
		if(Bot[id][bUkryty] == 0)
		{
			format(string, sizeof(string), "%s", Bot[id][bOpis]);
		}
		else
		{
		    format(string, sizeof(string), "");
		}
 		Bot[id][bOpisTag] = CreateDynamic3DTextLabel(string, 0xAAAAFFFF, Bot[id][bX], Bot[id][bY], Bot[id][bZ]+0.2, 3.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,Bot[id][bVW]);
		if(Bot[id][bAnim] == 1)
		{
		    ApplyDynamicActorAnimation(Bot[id][bID], "RAPPING", "RAP_A_Loop", 4.1, 1, 1, 1, 1, 1);//Rap1
		}
		if(Bot[id][bAnim] == 2)
		{
		    ApplyDynamicActorAnimation(Bot[id][bID], "COP_AMBIENT", "Coplook_loop", 4.1, 1, 1, 1, 1, 1);//ramiona
		}
		if(Bot[id][bAnim] == 3)
		{
		    ApplyDynamicActorAnimation(Bot[id][bID], "GANGS", "leanIDLE", 4.1, 1, 1, 1, 1, 1);//opieraj
		}
		if(Bot[id][bAnim] == 4)
		{
		    ApplyDynamicActorAnimation(Bot[id][bID], "CRACK", "crckdeth2", 4.1, 1, 1, 1, 1, 1);//crack
		}
		if(Bot[id][bAnim] == 5)
		{
		    ApplyDynamicActorAnimation(Bot[id][bID], "ROB_BANK", "SHP_HandsUp_Scr", 4.1, 0, 1, 1, 1, 1);//rece
		}
		if(Bot[id][bAnim] == 6)
		{
		    ApplyDynamicActorAnimation(Bot[id][bID], "FOOD", "FF_Sit_Loop", 4.1, 0, 1, 1, 1, 1);//krzeslo2
		}
		if(Bot[id][bAnim] == 7)
		{
		    ApplyDynamicActorAnimation(Bot[id][bID], "PED", "KO_shot_front", 4.1, 0, 1, 1, 1, 1);//padnij
		}
		if(Bot[id][bAnim] == 8)
		{
		    ApplyDynamicActorAnimation(Bot[id][bID], "BEACH", "batherr", 4.1, 0, 1, 1, 1, 1);//lez2
		}
		if(Bot[id][bAnim] == 9)
		{
		    ApplyDynamicActorAnimation(Bot[id][bID], "BEACH", "ParkSit_M_loop", 4.1, 0, 1, 1, 1, 1);//siad
		}
		if(Bot[id][bAnim] == 10)
		{
		    ApplyDynamicActorAnimation(Bot[id][bID], "DANCING", "DAN_left_A", 4.1, 1, 0, 0, 1, 0);//tancz7
		}
		if(Bot[id][bAnim] == 11)
		{
		    ApplyDynamicActorAnimation(Bot[id][bID], "PED", "IDLE_HBHB", 4.1, 0, 1, 1, 1, 1);//koks
		}
		if(Bot[id][bAnim] == 12)
		{
		    ApplyDynamicActorAnimation(Bot[id][bID], "GRAVEYARD", "mrnF_loop", 4.1, 0, 1, 1, 1, 1);//cry
		}
		if(Bot[id][bAnim] == 13)
		{
		    ApplyDynamicActorAnimation(Bot[id][bID], "STRIP", "STR_Loop_A", 4.1, 1, 0, 0, 1, 0);//tancz5
		}
	}
	mysql_free_result( );
	printf("Boty   - %d", id);
	return 1;
}
forward ZaladujNagrobki();
public ZaladujNagrobki()
{
	//czaswykonania = gettime();
	new Rok, Miesiac, Dzien;
	getdate(Rok, Miesiac, Dzien);
	new id = false;
	mysql_query( "SELECT * FROM `jochym_nagrobki`" );
	mysql_store_result( );
	while(mysql_fetch_row(zapyt))
	{
	    sscanf(zapyt, "p<|>i", id );
	    sscanf(zapyt, "p<|>dds[64]fffddd",
	    Nagrobek[id][cnID],
        Nagrobek[id][cnOBJ],
        Nagrobek[id][cnText],
        Nagrobek[id][cnX],
        Nagrobek[id][cnY],
        Nagrobek[id][cnZ],
        Nagrobek[id][cnDzien],
        Nagrobek[id][cnMiesiac],
		Nagrobek[id][cnPochowal]);
		if(Nagrobek[id][cnMiesiac] == Miesiac)
		{
			new string[64];
			format(string, sizeof(string), "Nagrobek: %s", Nagrobek[id][cnText]);
			Nagrobek[id][cnNagrobekTag] = CreateDynamic3DTextLabel(string, 0x333333EE, Nagrobek[id][cnX], Nagrobek[id][cnY], Nagrobek[id][cnZ]+0.3, 3.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,0);
		}
	}
	mysql_free_result( );
	printf("Nagrobki   - %d", id);
	return 1;
}
forward StworzNagrobek(playerid, obj, text[], Float:x, Float:y, Float:z, dzien, miesiac, pochowal);
public StworzNagrobek(playerid, obj, text[], Float:x, Float:y, Float:z, dzien, miesiac, pochowal)
{
    new itemid = GetFreeSQLUID("jochym_nagrobki", "ID");
	format(zapyt, sizeof(zapyt), "INSERT INTO `jochym_nagrobki` (`ID`, `OBJ`, `Text`, `X`, `Y`, `Z`, `Dzien`, `Miesiac`, `Pochowal`) VALUES ('%d','%d','%s','%f','%f','%f','%d','%d','%d')",
	itemid, obj, text, x, y, z, dzien, miesiac, pochowal);
	mysql_check();
	mysql_query2(zapyt);
	Nagrobek[itemid][cnID] = itemid;
	Nagrobek[itemid][cnOBJ] = obj;
	format(Nagrobek[itemid][cnText], 64, "%s", text);
	Nagrobek[itemid][cnX] = x;
    Nagrobek[itemid][cnY] = y;
    Nagrobek[itemid][cnZ] = z;
    Nagrobek[itemid][cnDzien] = dzien;
    Nagrobek[itemid][cnMiesiac] = miesiac;
	Nagrobek[itemid][cnPochowal] = pochowal;
	OnPlayerText(playerid, "-bomb");
	new string[126];
	format(string, sizeof(string), "Nagrobek: %s", Nagrobek[itemid][cnText]);
	Nagrobek[itemid][cnNagrobekTag] = CreateDynamic3DTextLabel(string, 0x333333EE, Nagrobek[itemid][cnX], Nagrobek[itemid][cnY], Nagrobek[itemid][cnZ]+0.3, 3.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,0);
	mysql_free_result();
	return itemid;
}
forward UsunBota(id);
public UsunBota(id)
{
    format(zapyt, sizeof(zapyt), "DELETE FROM `jochym_boty` WHERE `ID` = '%d'", id);
	mysql_check();
	mysql_query2(zapyt);
	DestroyDynamic3DTextLabel(Text3D:Bot[id][bNickTag]);
 	DestroyDynamic3DTextLabel(Text3D:Bot[id][bOpisTag]);
 	Bot[id][bTyp] = 0;
	Bot[id][bNick] = 0;
	Bot[id][bX] = 0;
	Bot[id][bY] = 0;
	Bot[id][bZ] = 0;
	Bot[id][bRot] = 0;
	Bot[id][bSkin] = 0;
	Bot[id][bHP] = 0;
	Bot[id][bVW] = 0;
	Bot[id][bInterior] = 0;
	Bot[id][bAnim] = 0;
	Bot[id][bOpis] = 0;
	Bot[id][bReputacja] = 0;
	Bot[id][bPieniadze] = 0;
	Bot[id][bWysokosc] = 0;
	Bot[id][bUkryty] = 0;
	Bot[id][bStworzyl] = 0;
	return 1;
}
forward ZapiszBota(id);
public ZapiszBota(id)
{
	strdel(zapyt, 0, 512);
	format(zapyt, sizeof(zapyt),
	"UPDATE `jochym_boty` SET `Typ`= '%d', `Nick`= '%s', `X`= '%f', `Y`= '%f', `Z`= '%f', `ROT`= '%f', `Skin`= '%d', `HP`= '%f', `VW`= '%d', `Interior`= '%d', `Anim`= '%d', `Opis`= '%s', `Reputacja`= '%d', `Pieniadze`= '%d', `Wysokosc`= '%f', `Ukryty`= '%d', `Stworzyl`= '%d' WHERE `ID`= '%d'",
	Bot[id][bTyp],
	Bot[id][bNick],
	Bot[id][bX],
	Bot[id][bY],
	Bot[id][bZ],
	Bot[id][bRot],
	Bot[id][bSkin],
	Bot[id][bHP],
	Bot[id][bVW],
	Bot[id][bInterior],
	Bot[id][bAnim],
	Bot[id][bOpis],
	Bot[id][bReputacja],
	Bot[id][bPieniadze],
	Bot[id][bWysokosc],
	Bot[id][bUkryty],
	Bot[id][bStworzyl],
	Bot[id][bID]);
	mysql_query(zapyt);
	DestroyDynamic3DTextLabel(Text3D:Bot[id][bNickTag]);
	StatusAktora(id);
	return 1;
}
forward StworzWykres(playerid, kwota, typ, klient_uid, klient_guid, grupa);
public StworzWykres(playerid, kwota, typ, klient_uid, klient_guid, grupa)
{
    new itemid = GetFreeSQLUID("jochym_wykres", "ID");
	format(zapyt, sizeof(zapyt), "INSERT INTO `jochym_wykres` (`ID`, `TYP`, `UID`, `GUID`, `KWOTA`, `DATA`, `KLIENT_UID`, `KLIENT_GUID`, `GUID_DZIALALNOSCI`) VALUES ('%d','%d','%d','%d','%d', '%d', '%d', '%d', '%d')",
	itemid, typ, DaneGracza[playerid][gUID], DaneGracza[playerid][gGUID], kwota, gettime(), klient_uid, klient_guid, grupa);
	mysql_check();
	mysql_query2(zapyt);
	mysql_free_result();
	return itemid;
}
forward StworzBota(playerid, typ, nick[32], skin, hp, anim);
public StworzBota(playerid, typ, nick[32], skin, hp, anim)
{
    if(strlen(nick) >= 32) return 1;
	new Float:X, Float:Y, Float:Z, Int, Vw;
	GetPlayerPos(playerid, X, Y, Z);
	Int = GetPlayerInterior(playerid);
	Vw = GetPlayerVirtualWorld(playerid);
	new Float:angles;
	GetPlayerFacingAngle(playerid, angles);
    new itemid = GetFreeSQLUID("jochym_boty", "ID");
	format(zapyt, sizeof(zapyt), "INSERT INTO `jochym_boty` (`ID`, `Typ`, `Nick`, `X`, `Y`, `Z`, `ROT`, `Skin`, `HP`, `VW`, `Interior`, `Anim`, `Opis`, `Reputacja`, `Pieniadze`, `Wysokosc`, `Ukryty`) VALUES ('%d','%d','%s','%f','%f','%f','%f','%d','%f','%d','%d','%d','%s','%d','%d','%f','%d')",
	itemid, typ, nick, X, Y, Z, angles, skin, hp, Vw, Int, anim, "Aby wejsc z aktorem w interakcje kliknij klawisz Y", 0, 200, 1.1, 0);
	mysql_check();
	mysql_query2(zapyt);
	Bot[itemid][bID] = itemid;
	Bot[itemid][bTyp] = typ;
	format(Bot[itemid][bNick], 32, "%s", nick);
	Bot[itemid][bX] = X;
	Bot[itemid][bY] = Y;
	Bot[itemid][bZ] = Z;
	Bot[itemid][bRot] = angles;
	Bot[itemid][bSkin] = skin;
	Bot[itemid][bHP] = hp;
	Bot[itemid][bVW] = Vw;
	Bot[itemid][bInterior] = Int;
	Bot[itemid][bAnim] = anim;
	if(typ == 13)
	{
		format(Bot[itemid][bOpis], 126, " ");
	}
	else
	{
		format(Bot[itemid][bOpis], 126, "Aby wejsc z aktorem w interakcje kliknij klawisz Y");
	}
	Bot[itemid][bReputacja] = 0;
	Bot[itemid][bPieniadze] = 200;
	if(typ == 13)
	{
		Bot[itemid][bWysokosc] = 0.3;
	}
	else
	{
		Bot[itemid][bWysokosc] = 1.1;
	}
	Bot[itemid][bUkryty] = 0;
	Bot[itemid][bStworzyl] = DaneGracza[playerid][gUID];
	Bot[itemid][bID] = CreateDynamicActor(Bot[itemid][bSkin], Bot[itemid][bX], Bot[itemid][bY], Bot[itemid][bZ], Bot[itemid][bRot], 1, Bot[itemid][bHP], Bot[itemid][bVW], Bot[itemid][bInterior]);
    Teleportuj(playerid, X+1, Y+1, Z);
    new string[256];
    StatusAktora(itemid);
	if(Bot[itemid][bUkryty] == 0)
	{
		format(string, sizeof(string), "%s", Bot[itemid][bOpis]);
	}
	else
	{
	    format(string, sizeof(string), "");
	}
	Bot[itemid][bOpisTag] = CreateDynamic3DTextLabel(string, 0xAAAAFFFF, Bot[itemid][bX], Bot[itemid][bY], Bot[itemid][bZ]+0.2, 3.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,Bot[itemid][bVW]);
	if(Bot[itemid][bAnim] == 1)
	{
	    ApplyDynamicActorAnimation(Bot[itemid][bID], "RAPPING", "RAP_A_Loop", 4.1, 1, 1, 1, 1, 1);//Rap1
	}
	if(Bot[itemid][bAnim] == 2)
	{
	    ApplyDynamicActorAnimation(Bot[itemid][bID], "COP_AMBIENT", "Coplook_loop", 4.1, 1, 1, 1, 1, 1);//ramiona
	}
	if(Bot[itemid][bAnim] == 3)
	{
	    ApplyDynamicActorAnimation(Bot[itemid][bID], "GANGS", "leanIDLE", 4.1, 1, 1, 1, 1, 1);//opieraj
	}
	if(Bot[itemid][bAnim] == 4)
	{
	    ApplyDynamicActorAnimation(Bot[itemid][bID], "CRACK", "crckdeth2", 4.1, 1, 1, 1, 1, 1);//crack
	}
	if(Bot[itemid][bAnim] == 5)
	{
	    ApplyDynamicActorAnimation(Bot[itemid][bID], "ROB_BANK", "SHP_HandsUp_Scr", 4.1, 0, 1, 1, 1, 1);//rece
	}
	if(Bot[itemid][bAnim] == 6)
	{
	    ApplyDynamicActorAnimation(Bot[itemid][bID], "FOOD", "FF_Sit_Loop", 4.1, 0, 1, 1, 1, 1);//krzeslo2
	}
	if(Bot[itemid][bAnim] == 7)
	{
	    ApplyDynamicActorAnimation(Bot[itemid][bID], "PED", "KO_shot_front", 4.1, 0, 1, 1, 1, 1);//padnij
	}
	if(Bot[itemid][bAnim] == 8)
	{
	    ApplyDynamicActorAnimation(Bot[itemid][bID], "BEACH", "batherr", 4.1, 0, 1, 1, 1, 1);//lez2
	}
	if(Bot[itemid][bAnim] == 9)
	{
	    ApplyDynamicActorAnimation(Bot[itemid][bID], "BEACH", "ParkSit_M_loop", 4.1, 0, 1, 1, 1, 1);//siad
	}
	if(Bot[itemid][bAnim] == 10)
	{
	    ApplyDynamicActorAnimation(Bot[itemid][bID], "DANCING", "DAN_left_A", 4.1, 1, 0, 0, 1, 0);//tancz7
	}
	if(Bot[itemid][bAnim] == 11)
	{
	    ApplyDynamicActorAnimation(Bot[itemid][bID], "PED", "IDLE_HBHB", 4.1, 0, 1, 1, 1, 1);//koks
	}
	if(Bot[itemid][bAnim] == 12)
	{
	    ApplyDynamicActorAnimation(Bot[itemid][bID], "GRAVEYARD", "mrnF_loop", 4.1, 0, 1, 1, 1, 1);//cry
	}
	if(Bot[itemid][bAnim] == 13)
	{
	    ApplyDynamicActorAnimation(Bot[itemid][bID], "STRIP", "STR_Loop_A", 4.1, 1, 0, 0, 1, 0);//tancz5
	}
	ZapiszBota(itemid);
	mysql_free_result();
	return itemid;
}
forward ZaladujKontakty();
public ZaladujKontakty()
{
	new id = false;
	mysql_query( "SELECT * FROM `jochym_kontakty`" );
	mysql_store_result( );
	while(mysql_fetch_row(zapyt))
	{
	    sscanf(zapyt, "p<|>i", id );
	    sscanf(zapyt, "p<|>ddds[254]",
	    Kontakt[id][kUID],
	    Kontakt[id][kPrzedmiot],
	    Kontakt[id][kNumer],
	    Kontakt[id][kNazwa]);
	}
	mysql_free_result( );
	printf("Kontakty   - %d", id);
	return 1;
}
forward DodajKontakty(playerid, sell, nazwa[]);
public DodajKontakty(playerid, sell, nazwa[])
{
	new index = GetFreeSQLUID("jochym_kontakty", "UID");
	format(zapyt, sizeof(zapyt), "INSERT INTO `jochym_kontakty` (`UID`, `UID_PRZEDMIOTU`, `NUMER`, `NAZWA`) VALUES ('%d','%d','%d','%s')",
	index, DaneGracza[playerid][gTelefon], DaneGracza[sell][gTelefon], nazwa);
	mysql_check();
	mysql_query2(zapyt);
	mysql_free_result();
	Kontakt[index][kUID] = index;
	Kontakt[index][kPrzedmiot] = DaneGracza[playerid][gTelefon];
	Kontakt[index][kNumer] = DaneGracza[sell][gTelefon];
	format(Kontakt[index][kNazwa], 124, "%s", nazwa);
    return index;
}
forward UsunKontakt(uid);
public UsunKontakt(uid)
{
	Kontakt[uid][kUID] = 0;
	Kontakt[uid][kPrzedmiot] = 0;
	Kontakt[uid][kNumer] = 0;
	format(zapyt, sizeof(zapyt), "DELETE FROM `jochym_kontakty` WHERE `UID` = '%d'", uid);
	mysql_check();
	mysql_query2(zapyt);
	return 1;
}
forward Dzwonie(playerid);
public Dzwonie(playerid)
{
	//czaswykonania = gettime();
	new id = DzwoniID[playerid];
	new teksty[64];
	format(teksty, sizeof(teksty), "{FFFF00}Nie odebra³eœ po³¹czenia od numeru: %d.", DaneGracza[playerid][gTelefon]);
	SendClientMessage(playerid, 0xDEDEDE00, "{FFFF00}Rozmówca nie odebra³ telefonu.");
	SendClientMessage(id, 0xDEDEDE00, teksty);
	Dzwoni[id] = 0;
	DzwoniID[id] = 0;
	TextDrawHideForPlayer(playerid, TextNaDrzwi2[playerid]);
	TextDrawHideForPlayer(id, TextNaDrzwi2[id]);
	DzwoniID[playerid] = 0;
	Dzwoni[playerid] = 0;
	Wywiad[playerid] = 0;
	Wywiad[id] = 0;
	////printf("Dzwonie: %d sec (%s, UID:%d, GUID:%d)", gettime()-czaswykonania,ZmianaNicku(playerid), DaneGracza[playerid][gUID], DaneGracza[playerid][gGUID]);
	return 1;
}
public OnVehicleSirenStateChange(playerid, vehicleid, newstate)
{
	new uidk = SprawdzCarUID(vehicleid);
    if(newstate)
	{	
		if(PojazdInfo[uidk][pGPS] == 1)
		{
			if(!Wlascicielpojazdu(vehicleid, playerid))
			{
				GameTextForPlayer(playerid, "~r~Brak uprawnien.", 3000, 5);
				return 0;
			}
			GameTextForPlayer(playerid, "~W~Syrena ~G~wlaczona", 1000, 3);
			new id = PojazdInfo[uidk][pModel] - 400;
			if(kogutpos[id][1] == 100)
			{
				return 0;
			}
			PojazdInfo[uidk][pKogut] = CreateDynamicObject(18646,0,0,0,0,0,0,0);
			AttachDynamicObjectToVehicle(PojazdInfo[uidk][pKogut], vehicleid, kogutpos[id][0], kogutpos[id][1], kogutpos[id][2], 0.0, 0.0, 0.0);
			Streamer_Update(playerid);
			GameTextForPlayer(playerid, "~W~Syrena ~G~wlaczona", 1000, 3);
			return 1;
		}
	}
    else 
	{
		if(PojazdInfo[uidk][pGPS] == 1)
		{
			if(!Wlascicielpojazdu(vehicleid, playerid))
			{
				GameTextForPlayer(playerid, "~r~Brak uprawnien.", 3000, 5);
				return 0;
			}
			GameTextForPlayer(playerid, "~W~Syrena ~r~wylaczona", 1000, 3);
			DestroyDynamicObject(PojazdInfo[uidk][pKogut]);
			return 1;
		}
	}
    return 1;
}
CMD:testani(playerid, cmdtext[])
{
    if(DaneGracza[playerid][gAnim] == 1)
	{
	    new str[64];
	    format(str, sizeof(str), "-%s", DaneGracza[playerid][gAnimacja]);
	    OnPlayerText(playerid, str);
	    SetPVarInt(playerid, "PlayAnim", 0);
		animacja[playerid] = 1;
		return 1;
	}
	return 1;
}
CMD:apos(playerid, cmdtext[])
{
    new bot = GetPVarInt(playerid, "BOTPOS");
    if(bot > 0)
    {
	    new Float:x, Float:y, Float:z, Float:ang;
		GetPlayerPos(playerid, x, y, z);
	    SetDynamicActorPos(Bot[bot][bID], x, y, z);
	    GetPlayerFacingAngle(playerid, ang);
	    SetDynamicActorFacingAngle(Bot[bot][bID], ang);
	    Bot[bot][bX] = x;
		Bot[bot][bY] = y;
		Bot[bot][bZ] = z;
		Bot[bot][bRot] = ang;
		ZapiszBota(bot);
		Teleportuj(playerid, x+1, y+1, z);
	    DestroyDynamic3DTextLabel(Text3D:Bot[bot][bNickTag]);
	    DestroyDynamic3DTextLabel(Text3D:Bot[bot][bOpisTag]);
	    StatusAktora(bot);
	    new string[256];
		if(Bot[bot][bUkryty] == 0)
		{
			format(string, sizeof(string), "%s", Bot[bot][bOpis]);
		}
		else
		{
		    format(string, sizeof(string), "");
		}
		Bot[bot][bOpisTag] = CreateDynamic3DTextLabel(string, 0xAAAAFFFF, Bot[bot][bX], Bot[bot][bY], Bot[bot][bZ]+0.2, 3.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,Bot[bot][bVW]);
		if(Bot[bot][bAnim] == 1)
		{
		    ApplyDynamicActorAnimation(Bot[bot][bID], "RAPPING", "RAP_A_Loop", 4.1, 1, 1, 1, 1, 1);//Rap1
		}
		if(Bot[bot][bAnim] == 2)
		{
		    ApplyDynamicActorAnimation(Bot[bot][bID], "COP_AMBIENT", "Coplook_loop", 4.1, 1, 1, 1, 1, 1);//ramiona
		}
		if(Bot[bot][bAnim] == 3)
		{
		    ApplyDynamicActorAnimation(Bot[bot][bID], "GANGS", "leanIDLE", 4.1, 1, 1, 1, 1, 1);//opieraj
		}
		if(Bot[bot][bAnim] == 4)
		{
		    ApplyDynamicActorAnimation(Bot[bot][bID], "CRACK", "crckdeth2", 4.1, 1, 1, 1, 1, 1);//crack
		}
		if(Bot[bot][bAnim] == 5)
		{
		    ApplyDynamicActorAnimation(Bot[bot][bID], "ROB_BANK", "SHP_HandsUp_Scr", 4.1, 0, 1, 1, 1, 1);//rece
		}
		if(Bot[bot][bAnim] == 6)
		{
		    ApplyDynamicActorAnimation(Bot[bot][bID], "FOOD", "FF_Sit_Loop", 4.1, 0, 1, 1, 1, 1);//krzeslo2
		}
		if(Bot[bot][bAnim] == 7)
		{
		    ApplyDynamicActorAnimation(Bot[bot][bID], "PED", "KO_shot_front", 4.1, 0, 1, 1, 1, 1);//padnij
		}
		if(Bot[bot][bAnim] == 8)
		{
		    ApplyDynamicActorAnimation(Bot[bot][bID], "BEACH", "batherr", 4.1, 0, 1, 1, 1, 1);//lez2
		}
		if(Bot[bot][bAnim] == 9)
		{
		    ApplyDynamicActorAnimation(Bot[bot][bID], "BEACH", "ParkSit_M_loop", 4.1, 0, 1, 1, 1, 1);//siad
		}
		if(Bot[bot][bAnim] == 10)
		{
		    ApplyDynamicActorAnimation(Bot[bot][bID], "DANCING", "DAN_left_A", 4.1, 1, 0, 0, 1, 0);//tancz7
		}
		if(Bot[bot][bAnim] == 11)
		{
		    ApplyDynamicActorAnimation(Bot[bot][bID], "PED", "IDLE_HBHB", 4.1, 0, 1, 1, 1, 1);//koks
		}
		if(Bot[bot][bAnim] == 12)
		{
		    ApplyDynamicActorAnimation(Bot[bot][bID], "GRAVEYARD", "mrnF_loop", 4.1, 0, 1, 1, 1, 1);//cry
		}
		if(Bot[bot][bAnim] == 13)
		{
		    ApplyDynamicActorAnimation(Bot[bot][bID], "STRIP", "STR_Loop_A", 4.1, 1, 0, 0, 1, 0);//tancz5
		}
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "TIP", "Przenios³eœ aktora w nowe miejsce, zosta³ on zapisany.", "Zamknij", "");
		SetPVarInt(playerid, "BOTPOS", 0);
		OdladujBoty();
		ZaladujBoty();
		return 1;
	}
	return 1;
}
CMD:asel(playerid, cmdtext[])
{
    if(GetPlayerCameraTargetDynActor(playerid) != INVALID_ACTOR_ID)
    {
		new bot;
		bot = GetPlayerCameraTargetDynActor(playerid);
		SetPVarInt(playerid, "BOT", bot);
		if(Bot[bot][bStworzyl] == DaneGracza[playerid][gUID])
		{
			new str[1024];
		    format(str, sizeof(str), "%s\n{FFE5B4}Z{FFFFFF}akoñcz edycjê tego aktora", str);
		    format(str, sizeof(str), "%s\n{FFE5B4}Z{FFFFFF}mieñ ubranie aktora\t{FFE5B4}%d", str, Bot[bot][bSkin]);
		    format(str, sizeof(str), "%s\n{FFE5B4}Z{FFFFFF}mieñ tryb interakcji", str);
		    format(str, sizeof(str), "%s\n{FFE5B4}Z{FFFFFF}mieñ imiê aktora", str);
		    format(str, sizeof(str), "%s\n{FFE5B4}D{FFFFFF}ezaktywuj opis aktora", str);
		    format(str, sizeof(str), "%s\n{FFE5B4}Z{FFFFFF}mieñ animacjê aktora", str);
		    format(str, sizeof(str), "%s\n{FFE5B4}Z{FFFFFF}mieñ pozycjê aktora", str);
		    format(str, sizeof(str), "%s\n{FFE5B4}U{FFFFFF}suñ permamentnie aktora", str);
		    new strglowna[256];
		    format(strglowna, sizeof(strglowna), "Edycja aktora %s (UID: %d) beta", ImieBota(bot), bot);
			dShowPlayerDialog(playerid, DIALOG_EDYCJA_AKTORA, DIALOG_STYLE_LIST, strglowna, str, "Wybierz", "Zamknij");
			return 1;
		}
	}
	return 1;
}
CMD:dna(playerid, cmdtext[])
{
    if(zalogowany[playerid] == false)
    {
        return 0;
    }
    if(DaneGracza[playerid][gBW] != 0)
	{
		return 0;
	}
	new	comm1[32], comm2[128];
	if(sscanf(cmdtext, "s[32]S()[128]", comm1, comm2))
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "/dna [pobierz, slady, zbadaj, wyszukaj]", "Zamknij", "");
		return 1;
	}
	else if(!strcmp(comm1,"pobierz",true))
	{
	    new playerid2;
		if(sscanf(comm2, "i", playerid2))
		{
		    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS"DNA", "By pobraæ od gracza jego DNA wpisz: /dna pobierz [id gracza]", "Zamknij", "");
			return 1;
		}
		if(DaneGracza[playerid2][gDNA] == 0)
		{
	        new rok, miesiac, dzien;
			getdate(rok, miesiac, dzien);
			new godzina, minuta, sekunda;
			gettime(godzina, minuta, sekunda);
		    new astr[512], data[126];
		    new kod = DaneGracza[playerid2][gUID]+DaneGracza[playerid2][gGUID];
		    format(data, sizeof(data), "Pobrano DNA [%02d-%02d-%dr] [%02d:%02d:%02d]", dzien, miesiac, rok, godzina, minuta, sekunda);
			format(astr, sizeof(astr), "INSERT INTO `jochym_bazadna` (`UID`, `Kod`, `Data`, `NICK`, `Pobral`) VALUES ('%d', '%d', '%s', '%s', '%s')", DaneGracza[playerid2][gUID], kod, data, ImieGracza2(playerid2), ImieGracza2(playerid));
			mysql_check();
			mysql_query2(astr);
			mysql_free_result();
			DaneGracza[playerid2][gDNA] = kod;
			ZapiszGracza(playerid2);
			new akcjarp[126];
			format(akcjarp,sizeof(akcjarp),"pobiera DNA %s.", ZmianaNicku(playerid2));
			cmd_me(playerid, akcjarp);
		    new akcja[126];
			format(akcja,sizeof(akcja),"*pobiera DNA %s*", ZmianaNicku(playerid2));
			SetPlayerChatBubble(playerid, akcja, FIOLETOWY, 10.0, 4000);
			new akcja2[126];
			format(akcja2,sizeof(akcja2),"pobiera DNA %s", ZmianaNicku(playerid2));
			TextDrawSetString(AkcjaTD[playerid], akcja2);
			TextDrawShowForPlayer(playerid, AkcjaTD[playerid]);
			CzasWyswietlaniaTextuNaDrzwiach[playerid] = 10;
			return 1;
		}
		else
		{
		    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS"DNA", "Ten obywatel jest ju¿ w naszej bazie danych DNA!", "Zamknij", "");
			return 1;
		}
	}
	else if(!strcmp(comm1,"slady",true))
	{
	    new playerid2, found = 0, rekord[1024];
		if(sscanf(comm2, "d", playerid2))
		{
		    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS"DNA", "By sprawdziæ pozostawione œlady DNA na ciele poszkodowanego\nWpisz: /dna [ID Gracza]", "Zamknij", "");
			return 1;
		}
		if(DaneGracza[playerid2][gDNA] == 0)
		{
		    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS"DNA", "Nie pobrano DNA od tego gracza by sprawdziæ œlady na Ciele gracza.", "Rozumiem", "Zamknij");
		    return 1;
		}
		else
		{
		    ForeachEx(d, MAX_DNA)
			{
			    if(Dna[d][dKodPoszkodowany] == DaneGracza[playerid2][gDNA])
			    {
			        if(Dna[d][dTyp] == 1)
			        {
					    format(rekord, sizeof(rekord), "%s\n%d\t%s\t%s", tekst_global, Dna[d][dID], Dna[d][dKod], Dna[d][dZapis]);
						found++;
					}
				}
			}
			if(found != 0) dShowPlayerDialog(playerid, DIALOG_DNA, DIALOG_STYLE_LIST, GUIOPIS"DNA pobrane z cia³a:", tekst_global, "Wybierz", "Anuluj");
			else dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS"DNA", "Nie znaleziono ¿adnych œladów DNA na ciele poszkodowanego.", "Rozumiem", "Zamknij");
			return 1;
		}
	}
	else if(!strcmp(comm1,"zbadaj",true))
	{
	    PrzedmiotyDNA(playerid, playerid, DIALOG_PRZEDMIOT_DNA, GUIOPIS"Pobierz DNA z przedmiotu:", TYP_WLASCICIEL, 0);
	    return 1;
	}
	else if(!strcmp(comm1,"wyszukaj",true))
	{
	    new wyszukaj, found = 0, rekord[1024];
		if(sscanf(comm2, "d", wyszukaj))
		{
		    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS"DNA", "Chcesz wyszukaæ w bazie danych DNA i znaæ dane tej osoby? Wpisz: /dna wyszukaj [kod DNA]", "Zamknij", "");
			return 1;
		}
		ZaladujBazaDNA();
		ForeachEx(d, MAX_POSTACI)
		{
		    if(BazaDNA[d][dbKod] == wyszukaj)
		    {
		        format(rekord, sizeof(rekord), "%s\n%d\t%d\t%d\t%s\t%s", rekord, BazaDNA[d][dbID], BazaDNA[d][dbUID], BazaDNA[d][dbKod], BazaDNA[d][dbData], BazaDNA[d][dbNICK]);
				found++;
		    }
		}
		if(found != 0) dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_LIST, GUIOPIS"Wyszukane DNA w bazie", rekord, "Wybierz", "Anuluj");
		else dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS"DNA", "Nie znaleziono nikogo w naszej bazie danych o takim DNA.", "Rozumiem", "");
		new akcjarp[126];
		format(akcjarp,sizeof(akcjarp),"sprawdza DNA w bazie danych.");
		cmd_me(playerid, akcjarp);
	    new akcja[126];
		format(akcja,sizeof(akcja),"*sprawdza DNA w bazie danych.*");
		SetPlayerChatBubble(playerid, akcja, FIOLETOWY, 10.0, 4000);
		new akcja2[126];
		format(akcja2,sizeof(akcja2),"sprawdza DNA w bazie danych.");
		TextDrawSetString(AkcjaTD[playerid], akcja2);
		TextDrawShowForPlayer(playerid, AkcjaTD[playerid]);
		CzasWyswietlaniaTextuNaDrzwiach[playerid] = 10;
		return 1;
	}
	return 1;
}
CMD:haracz(playerid, cmdtext[])
{
    if(zalogowany[playerid] == false)
    {
        return 0;
    }
    if(DaneGracza[playerid][gBW] != 0)
	{
		return 0;
	}
    if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_ZMOTORYZOWANA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_MAFIE || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_GANGI)
	{
	    //nale¿y
	}
	else
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS"Haracze", "By oferowaæ w³aœcicielowi lokalu haracz, musisz znajdowaæ siê na s³u¿bie organizacji.", "Zamknij", "");
		return 1;
	}
	new found;
	strdel(tekst_global, 0, 2048);
	ForeachEx(n, MAX_NIERUCHOMOSCI)
	{
	    if(BudynekInfo[n][nHaracz] == GrupaInfo[DaneGracza[playerid][gSluzba]][gUID])
		{
			format(tekst_global, sizeof(tekst_global), "%s\n%d\t%s\t$%d", tekst_global, BudynekInfo[n][nUID], BudynekInfo[n][nAdres], BudynekInfo[n][nHaraczC]);
			found++;
		}
	}
	if(found != 0) dShowPlayerDialog(playerid, DIALOG_HARACZ, DIALOG_STYLE_LIST, GUIOPIS"Lista sci¹ganych haraczy:", tekst_global, "Wybierz", "Anuluj");
	else dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Twoja organizacja nie sci¹ga od nikogo haraczy.", "Rozumiem", "Zamknij");
	TextDrawHideForPlayer(playerid, Tutorial[playerid]);
	new msg[254];
	format(msg,254,"Lista ktora wyswietlono zawiera wszystkie~n~biznesy jakie kontroluje twoja~n~organizacja. Pole koszt oznacza~n~ile ten biznes przeznaczyl na haracz.~n~Obecnie twoja organizacja kontroluje~n~~g~%d~w~ biznesy.",found);
	TextDrawSetString(Tutorial[playerid], msg);
	TextDrawShowForPlayer(playerid, Tutorial[playerid]);
	CzasWyswietlaniaTextuNaDrzwiach[playerid] = 10;
	return 1;
}
/*stock ShowPlayerGroups(playerid)
{
	printf("%s (%d) - Debug przed PVAR", ZmianaNicku(playerid), playerid);
    new str[256], find;
    if(GetPVarInt(playerid, "TXDGRUP") == 0)
    {
		printf("%s (%d) - Debug w PVAR", ZmianaNicku(playerid), playerid);
	    SelectTextDraw(playerid, 0x9DB6D3FF);

	    SetPVarInt(playerid, "TXDGRUP", 1);

	    PlayerTextDrawShow(playerid, Textdraw0[playerid]);
	    if(DaneGracza[playerid][gDzialalnosc1] != 0)
		{
		    new uid = DaneGracza[playerid][gDzialalnosc1];
			find = 1;
			new wynik;
			wynik = GetPVarInt(playerid, "w1")+DaneGracza[playerid][gPrzynaleznosci][1];
			if(DaneGracza[playerid][gSluzba] == uid)
			{
			    format(str, sizeof(str), "~r~%d.~w~\t%s (%dmin)", find, GrupaInfo[uid][gNazwa], wynik / 60);
			}
			else
			{
			    format(str, sizeof(str), "%d.\t%s (%dmin)", find, GrupaInfo[uid][gNazwa], wynik / 60);
			}
	        PlayerTextDrawSetString(playerid, Textdraw1[playerid], str);
	        PlayerTextDrawShow(playerid, Textdraw1[playerid]);
	        PlayerTextDrawShow(playerid, Textdraw2[playerid]);
	        PlayerTextDrawShow(playerid, Textdraw3[playerid]);
	        PlayerTextDrawShow(playerid, Textdraw4[playerid]);
	        PlayerTextDrawShow(playerid, Textdraw5[playerid]);
	        PlayerTextDrawShow(playerid, Textdraw6[playerid]);

		}
		if(DaneGracza[playerid][gDzialalnosc2] != 0)
		{
			new uid = DaneGracza[playerid][gDzialalnosc2];
			find = 2;
			new wynik;
			wynik = GetPVarInt(playerid, "w2")+DaneGracza[playerid][gPrzynaleznosci][7];
			if(DaneGracza[playerid][gSluzba] == uid)
			{
			    format(str, sizeof(str), "~r~%d.~w~\t%s (%dmin)", find, GrupaInfo[uid][gNazwa], wynik / 60);
			}
			else
			{
			    format(str, sizeof(str), "%d.\t%s (%dmin)", find, GrupaInfo[uid][gNazwa], wynik / 60);
			}
	        PlayerTextDrawSetString(playerid, Textdraw7[playerid], str);
	        PlayerTextDrawShow(playerid, Textdraw7[playerid]);
	        PlayerTextDrawShow(playerid, Textdraw8[playerid]);
	        PlayerTextDrawShow(playerid, Textdraw9[playerid]);
	        PlayerTextDrawShow(playerid, Textdraw10[playerid]);
	        PlayerTextDrawShow(playerid, Textdraw11[playerid]);
	        PlayerTextDrawShow(playerid, Textdraw12[playerid]);
		}
		if(DaneGracza[playerid][gDzialalnosc3] != 0)
		{
			new uid = DaneGracza[playerid][gDzialalnosc3];
			find = 3;
			new wynik;
			wynik = GetPVarInt(playerid, "w3")+DaneGracza[playerid][gPrzynaleznosci][13];
			if(DaneGracza[playerid][gSluzba] == uid)
			{
			    format(str, sizeof(str), "~r~%d.~w~\t%s (%dmin)", find, GrupaInfo[uid][gNazwa], wynik / 60);
			}
			else
			{
			    format(str, sizeof(str), "%d.\t%s (%dmin)", find, GrupaInfo[uid][gNazwa], wynik / 60);
			}
	        PlayerTextDrawSetString(playerid, Textdraw13[playerid], str);
	        PlayerTextDrawShow(playerid, Textdraw13[playerid]);
	        PlayerTextDrawShow(playerid, Textdraw14[playerid]);
	        PlayerTextDrawShow(playerid, Textdraw15[playerid]);
	        PlayerTextDrawShow(playerid, Textdraw16[playerid]);
	        PlayerTextDrawShow(playerid, Textdraw17[playerid]);
	        PlayerTextDrawShow(playerid, Textdraw18[playerid]);
		}
		if(DaneGracza[playerid][gDzialalnosc4] != 0)
		{
			new uid = DaneGracza[playerid][gDzialalnosc4];
			find = 4;
		    new wynik;
			wynik = GetPVarInt(playerid, "w4")+DaneGracza[playerid][gPrzynaleznosci][19];
		    if(DaneGracza[playerid][gSluzba] == uid)
			{
			    format(str, sizeof(str), "~r~%d.~w~\t%s (%dmin)", find, GrupaInfo[uid][gNazwa], wynik / 60);
			}
			else
			{
			    format(str, sizeof(str), "%d.\t%s (%dmin)", find, GrupaInfo[uid][gNazwa], wynik / 60);
			}
		    PlayerTextDrawSetString(playerid, Textdraw19[playerid], str);
            PlayerTextDrawShow(playerid, Textdraw19[playerid]);
            PlayerTextDrawShow(playerid, Textdraw20[playerid]);
            PlayerTextDrawShow(playerid, Textdraw21[playerid]);
            PlayerTextDrawShow(playerid, Textdraw22[playerid]);
            PlayerTextDrawShow(playerid, Textdraw23[playerid]);
            PlayerTextDrawShow(playerid, Textdraw24[playerid]);
		}
		if(DaneGracza[playerid][gDzialalnosc5] != 0)
		{
			new uid = DaneGracza[playerid][gDzialalnosc5];
			find = 5;
		    new wynik;
			wynik = GetPVarInt(playerid, "w5")+DaneGracza[playerid][gPrzynaleznosci][25];
			if(DaneGracza[playerid][gSluzba] == uid)
			{
			    format(str, sizeof(str), "~r~%d.~w~\t%s (%dmin)", find, GrupaInfo[uid][gNazwa], wynik / 60);
			}
			else
			{
			    format(str, sizeof(str), "%d.\t%s (%dmin)", find, GrupaInfo[uid][gNazwa], wynik / 60);
			}
		    PlayerTextDrawSetString(playerid, Textdraw25[playerid], str);
		    PlayerTextDrawShow(playerid, Textdraw25[playerid]);
            PlayerTextDrawShow(playerid, Textdraw26[playerid]);
            PlayerTextDrawShow(playerid, Textdraw27[playerid]);
            PlayerTextDrawShow(playerid, Textdraw28[playerid]);
            PlayerTextDrawShow(playerid, Textdraw29[playerid]);
            PlayerTextDrawShow(playerid, Textdraw30[playerid]);
		}
		if(DaneGracza[playerid][gDzialalnosc6] != 0)
		{
			new uid = DaneGracza[playerid][gDzialalnosc6];
			find = 6;
		    new wynik;
			wynik = GetPVarInt(playerid, "w6")+DaneGracza[playerid][gPrzynaleznosci][31];
   			if(DaneGracza[playerid][gSluzba] == uid)
			{
			    format(str, sizeof(str), "~r~%d.~w~\t%s (%dmin)", find, GrupaInfo[uid][gNazwa], wynik / 60);
			}
			else
			{
			    format(str, sizeof(str), "%d.\t%s (%dmin)", find, GrupaInfo[uid][gNazwa], wynik / 60);
			}
		    PlayerTextDrawSetString(playerid, Textdraw31[playerid], str);
		    PlayerTextDrawShow(playerid, Textdraw31[playerid]);
            PlayerTextDrawShow(playerid, Textdraw32[playerid]);
            PlayerTextDrawShow(playerid, Textdraw33[playerid]);
            PlayerTextDrawShow(playerid, Textdraw34[playerid]);
            PlayerTextDrawShow(playerid, Textdraw35[playerid]);
            PlayerTextDrawShow(playerid, Textdraw36[playerid]);
		}
	}
	else
	{
		printf("%s (%d) - Debug elseif", ZmianaNicku(playerid), playerid);
	    SetPVarInt(playerid, "TXDGRUP", 0);
	    HidePlayerGroups(playerid);
	}
    return 1;
}*/
stock StatusAktora(id)
{
    new string[256];
    if(Bot[id][bTyp] == 0)
	{
		format(string, sizeof(string), "{b2b2b2}%s • %d\n(Aktor)", ImieBota(id), Bot[id][bID]);
		Bot[id][bNickTag] = CreateDynamic3DTextLabel(string, 0xb2b2b2EE, Bot[id][bX], Bot[id][bY],  Bot[id][bZ]+Bot[id][bWysokosc], 8.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,Bot[id][bVW]);
	}
	if(Bot[id][bTyp] == 1)
	{
		format(string, sizeof(string), "{b2b2b2}%s • %d\n(Naciœnij Y by porozmawiaæ)", ImieBota(id), Bot[id][bID]);
		Bot[id][bNickTag] = CreateDynamic3DTextLabel(string, 0xb2b2b2EE, Bot[id][bX], Bot[id][bY],  Bot[id][bZ]+Bot[id][bWysokosc], 8.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,Bot[id][bVW]);
	}
	if(Bot[id][bTyp] == 2)
	{
		format(string, sizeof(string), "{b2b2b2}%s • %d\n(Naciœnij Y by porozmawiaæ)", ImieBota(id), Bot[id][bID]);
		Bot[id][bNickTag] = CreateDynamic3DTextLabel(string, 0xb2b2b2EE, Bot[id][bX], Bot[id][bY],  Bot[id][bZ]+Bot[id][bWysokosc], 8.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,Bot[id][bVW]);
	}
	if(Bot[id][bTyp] == 3)
	{
		format(string, sizeof(string), "{b2b2b2}%s • %d\n(Naciœnij Y by porozmawiaæ)", ImieBota(id), Bot[id][bID]);
		Bot[id][bNickTag] = CreateDynamic3DTextLabel(string, 0xb2b2b2EE, Bot[id][bX], Bot[id][bY],  Bot[id][bZ]+Bot[id][bWysokosc], 8.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,Bot[id][bVW]);
	}
	if(Bot[id][bTyp] == 4)
	{
		format(string, sizeof(string), "{b2b2b2}Nieznajomy %dF0%d\n(Naciœnij Y by porozmawiaæ)", Bot[id][bTyp], Bot[id][bID]);
		Bot[id][bNickTag] = CreateDynamic3DTextLabel(string, 0xb2b2b2EE, Bot[id][bX], Bot[id][bY],  Bot[id][bZ]+Bot[id][bWysokosc], 8.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,Bot[id][bVW]);
	}
	if(Bot[id][bTyp] == 5)
	{
		format(string, sizeof(string), "{b2b2b2}%s • %d\n(Naciœnij Y by porozmawiaæ)", ImieBota(id), Bot[id][bID]);
		Bot[id][bNickTag] = CreateDynamic3DTextLabel(string, 0xb2b2b2EE, Bot[id][bX], Bot[id][bY],  Bot[id][bZ]+Bot[id][bWysokosc], 8.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,Bot[id][bVW]);
	}
	if(Bot[id][bTyp] == 6)
	{
		format(string, sizeof(string), "{b2b2b2}%s • %d\n(Naciœnij Y by porozmawiaæ)", ImieBota(id), Bot[id][bID]);
		Bot[id][bNickTag] = CreateDynamic3DTextLabel(string, 0xb2b2b2EE, Bot[id][bX], Bot[id][bY],  Bot[id][bZ]+Bot[id][bWysokosc], 8.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,Bot[id][bVW]);
	}
	if(Bot[id][bTyp] == 7)
	{
		format(string, sizeof(string), "{b2b2b2}%s • %d\n(Naciœnij Y by porozmawiaæ)", ImieBota(id), Bot[id][bID]);
		Bot[id][bNickTag] = CreateDynamic3DTextLabel(string, 0xb2b2b2EE, Bot[id][bX], Bot[id][bY],  Bot[id][bZ]+Bot[id][bWysokosc], 8.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,Bot[id][bVW]);
	}
	if(Bot[id][bTyp] == 8)
	{
		format(string, sizeof(string), "{b2b2b2}Nieznajomy %dF0%d\n(Aktor)", Bot[id][bTyp], Bot[id][bID]);
		Bot[id][bNickTag] = CreateDynamic3DTextLabel(string, 0xb2b2b2EE, Bot[id][bX], Bot[id][bY],  Bot[id][bZ]+Bot[id][bWysokosc], 8.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,Bot[id][bVW]);
	}
	if(Bot[id][bTyp] == 9)
	{
		format(string, sizeof(string), "{b2b2b2}%s • %d\n(Naciœnij Y by porozmawiaæ)", ImieBota(id), Bot[id][bID]);
		Bot[id][bNickTag] = CreateDynamic3DTextLabel(string, 0xb2b2b2EE, Bot[id][bX], Bot[id][bY],  Bot[id][bZ]+Bot[id][bWysokosc], 8.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,Bot[id][bVW]);
	}
	if(Bot[id][bTyp] == 10)
	{
		format(string, sizeof(string), "{b2b2b2}%s • %d\n{8372a0}[LSPD]", ImieBota(id), Bot[id][bID]);
		Bot[id][bNickTag] = CreateDynamic3DTextLabel(string, 0xb2b2b2EE, Bot[id][bX], Bot[id][bY],  Bot[id][bZ]+Bot[id][bWysokosc], 8.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,Bot[id][bVW]);
	}
	if(Bot[id][bTyp] == 11)
	{
		format(string, sizeof(string), "{b2b2b2}%s • %d\n(Naciœnij Y by porozmawiaæ)", ImieBota(id), Bot[id][bID]);
		Bot[id][bNickTag] = CreateDynamic3DTextLabel(string, 0xb2b2b2EE, Bot[id][bX], Bot[id][bY],  Bot[id][bZ]+Bot[id][bWysokosc], 8.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,Bot[id][bVW]);
	}
	if(Bot[id][bTyp] == 12)
	{
		format(string, sizeof(string), "{b2b2b2}%s • %d\n(Naciœnij Y by porozmawiaæ)", ImieBota(id), Bot[id][bID]);
		Bot[id][bNickTag] = CreateDynamic3DTextLabel(string, 0xb2b2b2EE, Bot[id][bX], Bot[id][bY],  Bot[id][bZ]+Bot[id][bWysokosc], 8.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,Bot[id][bVW]);
	}
	if(Bot[id][bTyp] == 13)//Zwierzak
	{
		format(string, sizeof(string), "{b2b2b2}%s • %d\n(Zwierzak)", ImieBota(id), Bot[id][bID]);
		Bot[id][bNickTag] = CreateDynamic3DTextLabel(string, 0xb2b2b2EE, Bot[id][bX], Bot[id][bY],  Bot[id][bZ]+Bot[id][bWysokosc], 8.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,Bot[id][bVW]);
	}
	if(Bot[id][bTyp] == 14)
	{
		format(string, sizeof(string), "{b2b2b2}%s • %d\n(Naciœnij Y by porozmawiaæ)", ImieBota(id), Bot[id][bID]);
		Bot[id][bNickTag] = CreateDynamic3DTextLabel(string, 0xb2b2b2EE, Bot[id][bX], Bot[id][bY],  Bot[id][bZ]+Bot[id][bWysokosc], 8.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,Bot[id][bVW]);
	}
	if(Bot[id][bTyp] == 15)
	{
		format(string, sizeof(string), "{b2b2b2}%s • %d\n(Naciœnij Y by porozmawiaæ)", ImieBota(id), Bot[id][bID]);
		Bot[id][bNickTag] = CreateDynamic3DTextLabel(string, 0xb2b2b2EE, Bot[id][bX], Bot[id][bY],  Bot[id][bZ]+Bot[id][bWysokosc], 8.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,Bot[id][bVW]);
	}
	if(Bot[id][bTyp] == 16)
	{
		format(string, sizeof(string), "{b2b2b2}%s • %d\n(Naciœnij Y by porozmawiaæ)", ImieBota(id), Bot[id][bID]);
		Bot[id][bNickTag] = CreateDynamic3DTextLabel(string, 0xb2b2b2EE, Bot[id][bX], Bot[id][bY],  Bot[id][bZ]+Bot[id][bWysokosc], 8.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,Bot[id][bVW]);
	}
	if(Bot[id][bTyp] == 17)
	{
		format(string, sizeof(string), "{b2b2b2}%s • %d\n(Naciœnij Y by porozmawiaæ)", ImieBota(id), Bot[id][bID]);
		Bot[id][bNickTag] = CreateDynamic3DTextLabel(string, 0xb2b2b2EE, Bot[id][bX], Bot[id][bY],  Bot[id][bZ]+Bot[id][bWysokosc], 8.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,Bot[id][bVW]);
	}
}
/*stock HidePlayerGroups(playerid)
{
    SetPVarInt(playerid, "TXDGRUP", 0);
    PlayerTextDrawHide(playerid, Textdraw0[playerid]);
    PlayerTextDrawHide(playerid, Textdraw1[playerid]);
    PlayerTextDrawHide(playerid, Textdraw2[playerid]);
    PlayerTextDrawHide(playerid, Textdraw3[playerid]);
    PlayerTextDrawHide(playerid, Textdraw4[playerid]);
    PlayerTextDrawHide(playerid, Textdraw5[playerid]);
    PlayerTextDrawHide(playerid, Textdraw6[playerid]);
    PlayerTextDrawHide(playerid, Textdraw7[playerid]);
    PlayerTextDrawHide(playerid, Textdraw8[playerid]);
    PlayerTextDrawHide(playerid, Textdraw9[playerid]);
    PlayerTextDrawHide(playerid, Textdraw10[playerid]);
    PlayerTextDrawHide(playerid, Textdraw11[playerid]);
    PlayerTextDrawHide(playerid, Textdraw12[playerid]);
    PlayerTextDrawHide(playerid, Textdraw13[playerid]);
    PlayerTextDrawHide(playerid, Textdraw14[playerid]);
    PlayerTextDrawHide(playerid, Textdraw15[playerid]);
    PlayerTextDrawHide(playerid, Textdraw16[playerid]);
    PlayerTextDrawHide(playerid, Textdraw17[playerid]);
    PlayerTextDrawHide(playerid, Textdraw18[playerid]);
    PlayerTextDrawHide(playerid, Textdraw19[playerid]);
    PlayerTextDrawHide(playerid, Textdraw20[playerid]);
    PlayerTextDrawHide(playerid, Textdraw21[playerid]);
    PlayerTextDrawHide(playerid, Textdraw22[playerid]);
    PlayerTextDrawHide(playerid, Textdraw23[playerid]);
    PlayerTextDrawHide(playerid, Textdraw24[playerid]);
    PlayerTextDrawHide(playerid, Textdraw25[playerid]);
    PlayerTextDrawHide(playerid, Textdraw26[playerid]);
    PlayerTextDrawHide(playerid, Textdraw27[playerid]);
    PlayerTextDrawHide(playerid, Textdraw28[playerid]);
    PlayerTextDrawHide(playerid, Textdraw29[playerid]);
    PlayerTextDrawHide(playerid, Textdraw30[playerid]);
    PlayerTextDrawHide(playerid, Textdraw31[playerid]);
    PlayerTextDrawHide(playerid, Textdraw32[playerid]);
    PlayerTextDrawHide(playerid, Textdraw33[playerid]);
    PlayerTextDrawHide(playerid, Textdraw34[playerid]);
    PlayerTextDrawHide(playerid, Textdraw35[playerid]);
    PlayerTextDrawHide(playerid, Textdraw36[playerid]);
    CancelSelectTextDraw(playerid);
    return 1;
}*/
CMD:namierz(playerid, cmdtext[])
{
    if(zalogowany[playerid] == false)
    {
        return 0;
    }
    if(DaneGracza[playerid][gBW] != 0)
	{
		return 0;
	}
    if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] != DZIALALNOSC_POLICYJNA)
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Namierzanie telefonu", "Nie masz uprawnieñ do u¿ywania tej komendy, lub nie nale¿ysz do org. porz¹dkowych.", "Zamknij", "");
		return 1;
	}
	new numer;
	if(sscanf(cmdtext, "d", numer))
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Namierzanie telefonu:", "Aby kogoœ namierzyæ, za pomoc¹ numeru: /namierz [numer telefonu]", "Zamknij", "");
		return 1;
	}
	if(numer == 0)
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Namierzanie telefonu:", "Nie ma takiego numeru!", "Zamknij", "");
		return 0;
	}
    ForeachEx(id, MAX_PLAYERS)
	{
		if(IsPlayerConnected(id))
		{
			if(zalogowany[id] == true)
			{
				if(DaneGracza[id][gTelefon] == numer && zalogowany[id] == false)
				{
					dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Namierzanie telefonu:", "Ten numer telefonu jest poza zasiêgiem, albo jest nieaktywny.", "Zamknij", "");
					return 1;
				}
				if(DaneGracza[id][gTelefon] == numer && zalogowany[id] == true)
				{
					SetPlayerCameraPos(playerid, -348.734527, 1498.441040, 75.862190+2);//Pozycja miejsca z góry
					SetPlayerCameraLookAt(playerid, -348.734527, 1498.441040, 75.862190);//Pozycja miejsca
					InterpolateCameraPos(playerid, -348.734527, 1498.441040, 75.862190-1, -348.734527, 1498.441040, 75.862190+200, 10000, CAMERA_MOVE);

					TextDrawHideForPlayer(playerid, TextNaDrzwi[playerid]);
					TextDrawSetString(TextNaDrzwi[playerid], "Trwa namierzanie telefonu.~n~Gdy wlasciciel przez niego nie~n~rozmawia, pozycja zostanie~n~pokazana w przyblizeniu.~n~~y~Odczekaj 30 sekund~n~~n~~w~Przerwij LPM.");
					TextDrawShowForPlayer(playerid, TextNaDrzwi[playerid]);
					Namierzanie[playerid] = 30;
					SetPVarInt(playerid, "Namierzanie", 1);
					SetPVarInt(playerid, "NamierzanieID", id);
				}
			}
		}
	}
	return 1;
}
CMD:namierzoff(playerid, cmdtext[])
{
    SetCameraBehindPlayer(playerid);
	return 1;
}
CMD:plus(playerid, cmdtext[])
{
    new playerid2;
	if(sscanf(cmdtext, "i", playerid2))
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "/plus [ID] - daje pozytywny g³os reputacji. Jest te¿ /minus", "Zamknij", "");
		return 1;
	}
	if(zalogowany[playerid2] == false)
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Reputacja", "Gracz jest nie zalogowany, nie mo¿esz daæ mu pozytywnego g³osu reputacji", "Zamknij", "");
		return 1;
	}
	if(playerid == playerid2)
	{
	    return 0;
	}
	if(!PlayerObokPlayera(playerid, playerid2, 10))
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Reputacja:", "Gracz jest zbyt daleko od Ciebie, dlatego nie mo¿esz oddaæ g³osu reputacji.", "Zamknij", "");
		return 1;
	}
    new uisd, global, row[256], czassilka, astr[256];
	format(astr, sizeof(astr), "SELECT `ostatniczas`, `uid` FROM `jochym_plus` WHERE `dostal`= %d AND `uid` = %d LIMIT 1", DaneGracza[playerid2][gUID], DaneGracza[playerid][gUID]);
	mysql_check();
	mysql_query2(astr);
	mysql_store_result();
	mysql_fetch_row(row);
	sscanf(row,  "p<|>dd", uisd, global);
	if(uisd > gettime()+CZAS_LETNI)
	{
	    CzasWyswietlaniaTextuNaDrzwiach[playerid] = 30;
		TextDrawHideForPlayer(playerid, TextNaDrzwi[playerid]);
		TextDrawSetString(TextNaDrzwi[playerid], "Oddales(as) juz glos na tego~n~gracza w ciagu 30dni lub~n~ wykorzystales limit glosow.");
		TextDrawShowForPlayer(playerid, TextNaDrzwi[playerid]);
	}
	else
	{
		if(global == 0)
		{
		    czassilka = (30 * 86400) + gettime()+CZAS_LETNI;
			format(astr, sizeof(astr), "INSERT INTO `jochym_plus` (`uid`, `ostatniczas`, `dostal`) VALUES ('%d', '%d', '%d')", DaneGracza[playerid][gUID], czassilka, DaneGracza[playerid2][gUID]);
			mysql_check();
			mysql_query2(astr);
			mysql_free_result();
		}
		else
		{
		    czassilka = (30 * 86400) + gettime()+CZAS_LETNI;
			new query[256];
			format(query, sizeof(query), "UPDATE `jochym_plus` SET `ostatniczas` = '%d' WHERE `uid` = %d AND `dostal` = %d",czassilka, DaneGracza[playerid][gUID], DaneGracza[playerid2][gUID]);
			mysql_check();
			mysql_query(query);
		}
		GameTextForPlayer(playerid, "~w~Zaglosowano ~g~Pozytywnie~w~.~n~/plus", 3000, 5);
		CzasWyswietlaniaTextuNaDrzwiach[playerid2] = 15;
		TextDrawHideForPlayer(playerid2, TextNaDrzwi3[playerid2]);
		new str[128];
		format(str, sizeof(str), "~g~+~w~ reputacja od %s", ImieGracza2(playerid));
		TextDrawSetString(TextNaDrzwi3[playerid2], str);
		TextDrawShowForPlayer(playerid2, TextNaDrzwi3[playerid2]);
		DaneGracza[playerid2][gReputacja] += 1;
		ZapiszGracza(playerid2);
		RefreshNick(playerid2);
		return 1;
	}
	return 1;
}
CMD:minus(playerid, cmdtext[])
{
	/*new playerid2;
	if(sscanf(cmdtext, "i", playerid2))
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "/minus [ID] - daje negatywny g³os reputacji. Jest te¿ /plus", "Zamknij", "");
		return 1;
	}
	if(zalogowany[playerid2] == false)
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Reputacja", "Gracz jest nie zalogowany, nie mo¿esz daæ mu negatywnego g³osu reputacji", "Zamknij", "");
		return 1;
	}
	if(playerid == playerid2)
	{
	    return 0;
	}
	if(!PlayerObokPlayera(playerid, playerid2, 10))
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Reputacja:", "Gracz jest zbyt daleko od Ciebie, dlatego nie mo¿esz oddaæ g³osu reputacji.", "Zamknij", "");
		return 1;
	}
    new uisd, global, row[256], czassilka, astr[256];
	format(astr, sizeof(astr), "SELECT `ostatniczas`, `uid` FROM `jochym_plus` WHERE `dostal`= %d AND `uid` = %d LIMIT 1", DaneGracza[playerid2][gUID], DaneGracza[playerid][gUID]);
	mysql_check();
	mysql_query2(astr);
	mysql_store_result();
	mysql_fetch_row(row);
	sscanf(row,  "p<|>dd", uisd, global);
	if(uisd > gettime()+CZAS_LETNI)
	{
	    CzasWyswietlaniaTextuNaDrzwiach[playerid] = 30;
		TextDrawHideForPlayer(playerid, TextNaDrzwi[playerid]);
		TextDrawSetString(TextNaDrzwi[playerid], "Oddales(as) juz glos na tego~n~gracza w ciagu 30dni lub~n~ wykorzystales limit glosow.");
		TextDrawShowForPlayer(playerid, TextNaDrzwi[playerid]);
	}
	else
	{
		if(global == 0)
		{
		    czassilka = (30 * 86400) + gettime()+CZAS_LETNI;
			format(astr, sizeof(astr), "INSERT INTO `jochym_plus` (`uid`, `ostatniczas`, `dostal`) VALUES ('%d', '%d', '%d')", DaneGracza[playerid][gUID], czassilka, DaneGracza[playerid2][gUID]);
			mysql_check();
			mysql_query2(astr);
			mysql_free_result();
		}
		else
		{
		    czassilka = (30 * 86400) + gettime()+CZAS_LETNI;
			new query[256];
			format(query, sizeof(query), "UPDATE `jochym_plus` SET `ostatniczas` = '%d' WHERE `uid` = %d AND `dostal` = %d",czassilka, DaneGracza[playerid][gUID], DaneGracza[playerid2][gUID]);
			mysql_check();
			mysql_query(query);
		}
		GameTextForPlayer(playerid, "~w~Zaglosowano ~r~Negatywnie~w~.~n~/minus", 3000, 5);
		DaneGracza[playerid2][gReputacja] -= 1;
		ZapiszGracza(playerid2);
		RefreshNick(playerid2);
		return 1;
	}*/
	dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Reputacja", "Obecnie zablokowaliœmy rozdawanie minusowych puntków reputacji.", "Zamknij", "");
	return 1;
}
CMD:od(playerid, cmdtext[])
{
	if(Dzwoni[playerid] == -1)
	{
		KillTimer(dzwon[DzwoniID[playerid]]);
		GameTextForPlayer(playerid, "~y~Odebrales telefon.", 3000, 5);
		GameTextForPlayer(DzwoniID[playerid], "~y~Rozmowca odebral telefon.", 3000, 5);
		Odebral[playerid] = 1;
		Odebral[DzwoniID[playerid]] = 1;
		TextDrawHideForPlayer(playerid, TextNaDrzwi2[playerid]);
		TextDrawHideForPlayer(DzwoniID[playerid], TextNaDrzwi2[DzwoniID[playerid]]);
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
		SetPlayerSpecialAction(DzwoniID[playerid],SPECIAL_ACTION_USECELLPHONE);
	}
	return 1;
}
CMD:z(playerid, cmdtext[])
{

	if(Dzwoni[playerid] == -1 || Odebral[playerid] == 1 || Dzwoni[playerid] == 1)
	{
		KillTimer(dzwon[DzwoniID[playerid]]);
		KillTimer(dzwon[playerid]);
		GameTextForPlayer(playerid, "~r~Rozmowa Zakonczona.", 3000, 5);
		GameTextForPlayer(DzwoniID[playerid], "~r~Rozmowa Zakonczona.", 3000, 5);
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		SetPlayerSpecialAction(DzwoniID[playerid],SPECIAL_ACTION_STOPUSECELLPHONE);
		new id = DzwoniID[playerid];
		Dzwoni[id] = 0;
		DzwoniID[id] = 0;
		Odebral[id] = 0;
		DzwoniID[playerid] = 0;
		Dzwoni[playerid] = 0;
		Odebral[playerid] = 0;
		Wywiad[playerid] = 0;
		Wywiad[id] = 0;
	}
	return 1;
}
forward Vegas_Losuj(playerid, step);
public Vegas_Losuj(playerid, step)
{
    new str[64];
	if(step == 0)
	{
	    if(Vegas_Rand[playerid][0] == Vegas_Rand[playerid][1] && Vegas_Rand[playerid][1] == Vegas_Rand[playerid][2])
		{
			new automat = GetPVarInt(playerid, "AutomatUID");
			new drzwi = ObiektInfo[automat][objvWorld];
			new owner = BudynekInfo[drzwi][nWlascicielD];
		    new wygrana = Vegas_Stawki[GetPVarInt(playerid, "Vegas_Stawka")] + Vegas_Stawki[GetPVarInt(playerid, "Vegas_Stawka")];
			new wygranakoniec = wygrana / 10;
	        SetPVarInt(playerid, "Vegas_Bank", GetPVarInt(playerid, "Vegas_Bank") + wygrana);
	        format(str, sizeof str, "Wygrales: $%d", wygrana);
	        TextDrawSetString(Vegas_Player[playerid][2], str);
			format(str, sizeof str, "Bank:~n~$%d", GetPVarInt(playerid, "Vegas_Bank"));
			TextDrawSetString(Vegas_Player[playerid][1], str);
			if(owner != 0)
			{
				new grupa = GrupaInfo[owner][gUID];
				GrupaInfo[grupa][gSaldo] += wygranakoniec / 2;
				ZapiszSaldo(grupa);
			}
			new log[256];
			format(log, sizeof(log), "[Hazard] [%s] [ID: %d] przy stawce %d wygra³ %d, obecny stan konta w kasynie %d", ZmianaNicku(playerid), playerid, Vegas_Stawki[GetPVarInt(playerid, "Vegas_Stawka")], wygranakoniec, GetPVarInt(playerid, "Vegas_Bank"));
			Transakcja(T_IC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
	    }
	    else if(Vegas_Rand[playerid][0] == Vegas_Rand[playerid][1] || Vegas_Rand[playerid][1] == Vegas_Rand[playerid][2])
	    {
			new automat = GetPVarInt(playerid, "AutomatUID");
			new drzwi = ObiektInfo[automat][objvWorld];
			new owner = BudynekInfo[drzwi][nWlascicielD];
	        new wygrana = Vegas_Stawki[GetPVarInt(playerid, "Vegas_Stawka")] + Vegas_Stawki[GetPVarInt(playerid, "Vegas_Stawka")]/2;
			new wygranakoniec = wygrana / 10;
	        SetPVarInt(playerid, "Vegas_Bank", GetPVarInt(playerid, "Vegas_Bank") + wygrana);
	        format(str, sizeof str, "Wygrales: $%d", wygrana);
	        TextDrawSetString(Vegas_Player[playerid][2], str);
			format(str, sizeof str, "Bank:~n~$%d", GetPVarInt(playerid, "Vegas_Bank"));
			TextDrawSetString(Vegas_Player[playerid][1], str);
			if(owner != 0)
			{
				new grupa = GrupaInfo[owner][gUID];
				GrupaInfo[grupa][gSaldo] += wygranakoniec / 2;
				ZapiszSaldo(grupa);
			}
			new log[256];
			format(log, sizeof(log), "[Hazard] [%s] [ID: %d] przy stawce %d wygra³ %d, obecny stan konta w kasynie %d", ZmianaNicku(playerid), playerid, Vegas_Stawki[GetPVarInt(playerid, "Vegas_Stawka")], wygranakoniec, GetPVarInt(playerid, "Vegas_Bank"));
			Transakcja(T_IC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
	    }
	    else
	    {
		    TextDrawSetString(Vegas_Player[playerid][2], "Wygrales: 0$");
		    new log[256];
			format(log, sizeof(log), "[Hazard] [%s] [ID: %d] stan konta w kasynie: %d, wygra³ 0$", ZmianaNicku(playerid), playerid, GetPVarInt(playerid, "Vegas_Bank"));
			Transakcja(T_IC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
	    }
	    TextDrawShowForPlayer(playerid, Vegas_Player[playerid][2]);
	    SetPVarInt(playerid, "Vegas_Los", 0);
	}
	else
	{
		TextDrawHideForPlayer(playerid, Vegas_LOS[0][Vegas_Rand[playerid][0]]);
		TextDrawHideForPlayer(playerid, Vegas_LOS[1][Vegas_Rand[playerid][1]]);
		TextDrawHideForPlayer(playerid, Vegas_LOS[2][Vegas_Rand[playerid][2]]);
	    Vegas_Rand[playerid][0] = random(7);
	    Vegas_Rand[playerid][1] = random(7);
	    Vegas_Rand[playerid][2] = random(7);
		TextDrawShowForPlayer(playerid, Vegas_LOS[0][Vegas_Rand[playerid][0]]);
		TextDrawShowForPlayer(playerid, Vegas_LOS[1][Vegas_Rand[playerid][1]]);
		TextDrawShowForPlayer(playerid, Vegas_LOS[2][Vegas_Rand[playerid][2]]);
		SetTimerEx("Vegas_Losuj", 200, 0, "dd", playerid, step - 1);
	}
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
    if(GetPVarInt(playerid, "Namierzony") == 1)
	{
    	DisablePlayerCheckpoint(playerid);
    	SetPVarInt(playerid, "Namierzony", 0);
    	return 1;
	}
	if(GetPVarInt(playerid, "ZgloszeniePD") == 1)
	{
	    DisablePlayerCheckpoint(playerid);
		SetPVarInt(playerid,"ZgloszeniePD", 0);
    	return 1;
	}
	if(GetPVarInt(playerid, "MiejscePaser") == 1)
	{
	    DisablePlayerCheckpoint(playerid);
	    SetPVarInt(playerid, "MiejscePaser", 0);
	}
	if(GetPVarInt(playerid, "PanicButton") == 1)
	{
		DisablePlayerCheckpoint(playerid);
		SetPVarInt(playerid, "PanicButton", 0);
	}
	if(GetPVarInt(playerid, "Magazynier") == 1)
	{
        Dodajkase(playerid, 5);
		RemovePlayerAttachedObject(playerid, 8);
	    DisablePlayerCheckpoint(playerid);
	    ZapiszGracza(playerid);
	    SetPVarInt(playerid, "Magazynier", 0);
	    TextDrawHideForPlayer(playerid, OBJ[playerid]);
	    DaneGracza[playerid][gBlokDorywczej] += 5;
	    ZapiszGracza(playerid);
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	    SetPVarInt(playerid, "Poziom", 0);
	    SetPVarInt(playerid, "BotAkcja", 0);
	    return 1;
	}
	if(GetPVarInt(playerid, "Magazynier") == 2)
	{
        Dodajkase(playerid, 8);
		RemovePlayerAttachedObject(playerid, 8);
	    DisablePlayerCheckpoint(playerid);
	    ZapiszGracza(playerid);
	    SetPVarInt(playerid, "Magazynier", 0);
	    TextDrawHideForPlayer(playerid, OBJ[playerid]);
	    DaneGracza[playerid][gBlokDorywczej] += 8;
	    ZapiszGracza(playerid);
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	    SetPVarInt(playerid, "Poziom", 0);
	    SetPVarInt(playerid, "BotAkcja", 0);
	    return 1;
	}
	if(GetPVarInt(playerid, "Magazynier") == 3)
	{
        Dodajkase(playerid, 10);
		RemovePlayerAttachedObject(playerid, 8);
	    DisablePlayerCheckpoint(playerid);
	    ZapiszGracza(playerid);
	    SetPVarInt(playerid, "Magazynier", 0);
	    TextDrawHideForPlayer(playerid, OBJ[playerid]);
	    DaneGracza[playerid][gBlokDorywczej] += 10;
	    ZapiszGracza(playerid);
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	    SetPVarInt(playerid, "Poziom", 0);
	    SetPVarInt(playerid, "BotAkcja", 0);
	    return 1;
	}
	if(GetPVarInt(playerid, "Gazeciarz") == 1)
	{
	    if(!IsPlayerInAnyVehicle(playerid))
	    {
		    GameTextForPlayer(playerid, "~w~Dostarczyles gazete, jedz dalej!", 3000, 5);
		    SetPlayerCheckpoint(playerid, Gazety[2][snX], Gazety[2][snY], Gazety[2][snZ], 3.0);
			SetPVarInt(playerid, "Gazeciarz", 2);
		}
		else
		{
		    GameTextForPlayer(playerid, "~w~Wysiadz z pojazdu!", 3000, 5);
		}
		return 1;
	}
	if(GetPVarInt(playerid, "Gazeciarz") == 2)
	{
	    if(!IsPlayerInAnyVehicle(playerid))
	    {
		    GameTextForPlayer(playerid, "~w~Dostarczyles gazete, jedz dalej!", 3000, 5);
		    SetPlayerCheckpoint(playerid, Gazety[3][snX], Gazety[3][snY], Gazety[3][snZ], 3.0);
			SetPVarInt(playerid, "Gazeciarz", 3);
		}
		else
		{
		    GameTextForPlayer(playerid, "~w~Wysiadz z pojazdu!", 3000, 5);
		}
		return 1;
	}
	if(GetPVarInt(playerid, "Gazeciarz") == 3)
	{
	    if(!IsPlayerInAnyVehicle(playerid))
	    {
		    GameTextForPlayer(playerid, "~w~Dostarczyles gazete, jedz dalej!", 3000, 5);
		    SetPlayerCheckpoint(playerid, Gazety[4][snX], Gazety[4][snY], Gazety[4][snZ], 3.0);
			SetPVarInt(playerid, "Gazeciarz", 4);
        }
		else
		{
		    GameTextForPlayer(playerid, "~w~Wysiadz z pojazdu!", 3000, 5);
		}
		return 1;
	}
	if(GetPVarInt(playerid, "Gazeciarz") == 4)
	{
	    if(!IsPlayerInAnyVehicle(playerid))
	    {
		    GameTextForPlayer(playerid, "~w~Dostarczyles gazete, jedz dalej!", 3000, 5);
		    SetPlayerCheckpoint(playerid, Gazety[5][snX], Gazety[5][snY], Gazety[5][snZ], 3.0);
			SetPVarInt(playerid, "Gazeciarz", 5);
		}
		else
		{
		    GameTextForPlayer(playerid, "~w~Wysiadz z pojazdu!", 3000, 5);
		}
		return 1;
	}
	if(GetPVarInt(playerid, "Gazeciarz") == 5)
	{
	    if(!IsPlayerInAnyVehicle(playerid))
	    {
		    GameTextForPlayer(playerid, "~w~Dostarczyles gazete, jedz dalej!", 3000, 5);
		    SetPlayerCheckpoint(playerid, Gazety[6][snX], Gazety[6][snY], Gazety[6][snZ], 3.0);
			SetPVarInt(playerid, "Gazeciarz", 6);
		}
		else
		{
		    GameTextForPlayer(playerid, "~w~Wysiadz z pojazdu!", 3000, 5);
		}
		return 1;
	}
	if(GetPVarInt(playerid, "Gazeciarz") == 6)
	{
	    if(!IsPlayerInAnyVehicle(playerid))
	    {
		    GameTextForPlayer(playerid, "~w~Dostarczyles gazete, jedz dalej!", 3000, 5);
		    SetPlayerCheckpoint(playerid, Gazety[7][snX], Gazety[7][snY], Gazety[7][snZ], 3.0);
			SetPVarInt(playerid, "Gazeciarz", 7);
		}
		else
		{
		    GameTextForPlayer(playerid, "~w~Wysiadz z pojazdu!", 3000, 5);
		}
		return 1;
	}
	if(GetPVarInt(playerid, "Gazeciarz") == 7)
	{
	    if(!IsPlayerInAnyVehicle(playerid))
	    {
		    GameTextForPlayer(playerid, "~w~Dostarczyles gazete, jedz dalej!", 3000, 5);
		    SetPlayerCheckpoint(playerid, Gazety[8][snX], Gazety[8][snY], Gazety[8][snZ], 3.0);
			SetPVarInt(playerid, "Gazeciarz", 8);
		}
		else
		{
		    GameTextForPlayer(playerid, "~w~Wysiadz z pojazdu!", 3000, 5);
		}
		return 1;
	}
	if(GetPVarInt(playerid, "Gazeciarz") == 8)
	{
	    if(!IsPlayerInAnyVehicle(playerid))
	    {
		    GameTextForPlayer(playerid, "~w~Dostarczyles gazete, jedz dalej!", 3000, 5);
		    SetPlayerCheckpoint(playerid, Gazety[9][snX], Gazety[9][snY], Gazety[9][snZ], 3.0);
			SetPVarInt(playerid, "Gazeciarz", 9);
		}
		else
		{
		    GameTextForPlayer(playerid, "~w~Wysiadz z pojazdu!", 3000, 5);
		}
		return 1;
	}
	if(GetPVarInt(playerid, "Gazeciarz") == 9)
	{
	    if(!IsPlayerInAnyVehicle(playerid))
	    {
		    GameTextForPlayer(playerid, "~w~Dostarczyles gazete, jedz dalej!", 3000, 5);
		    SetPlayerCheckpoint(playerid, Gazety[10][snX], Gazety[10][snY], Gazety[10][snZ], 3.0);
			SetPVarInt(playerid, "Gazeciarz", 10);
		}
		else
		{
		    GameTextForPlayer(playerid, "~w~Wysiadz z pojazdu!", 3000, 5);
		}
		return 1;
	}
	if(GetPVarInt(playerid, "Gazeciarz") == 10)
	{
	    if(!IsPlayerInAnyVehicle(playerid))
	    {
	 		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "• Gazety:", "Dostarczy³eœ 10 gazet, otrzymujesz wynagrodzenie $150.", "Zamknij", "");
		    Dodajkase(playerid, 150);
			ZapiszGracza(playerid);
			DisablePlayerCheckpoint(playerid);
			SetPVarInt(playerid, "Gazeciarz", 0);
		}
		else
		{
		    GameTextForPlayer(playerid, "~w~Wysiadz z pojazdu!", 3000, 5);
		}
		return 1;
	}
    return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
    new str[64];
	if(GetPVarInt(playerid, "Vegas") == 1)
	{
		if(clickedid == Vegas_Button[0]) //Spin
		{
		    if(GetPVarInt(playerid, "Vegas_Los") == 1)
			{
			    CancelSelectTextDraw(playerid);
			    ShowPlayerDialog(playerid, 8851, DIALOG_STYLE_MSGBOX, "{FF0000}Jednorêki Bandyta", "{FFFFFF}Poczekaj do zakoñczenia losowania.", "Zamknij", "");
				return 1;
			}
		    if(GetPVarInt(playerid, "Vegas_Bank") == 0)
		    {
	    		CancelSelectTextDraw(playerid);
			    ShowPlayerDialog(playerid, 8851, DIALOG_STYLE_MSGBOX, "{FF0000}Jednorêki Bandyta", "{FFFFFF}Aby graæ musisz wp³aciæ pieni¹dze.", "Zamknij", "");
                return 1;
		    }
			if(Vegas_Stawki[GetPVarInt(playerid, "Vegas_Stawka")] > GetPVarInt(playerid, "Vegas_Bank"))
			{
			    CancelSelectTextDraw(playerid);
			    ShowPlayerDialog(playerid, 8851, DIALOG_STYLE_MSGBOX, "{FF0000}Jednorêki Bandyta", "{FFFFFF}Twoja stawka jest za wysoka\nWp³aæ pieni¹dze lub zmniejsz stawkê.", "Zamknij", "");
				return 1;
			}
			SetPVarInt(playerid, "Vegas_Los", 1);
			SetPVarInt(playerid, "Vegas_Bank", GetPVarInt(playerid, "Vegas_Bank") - Vegas_Stawki[GetPVarInt(playerid, "Vegas_Stawka")]);
			format(str, sizeof str, "Bank:~n~$%d", GetPVarInt(playerid, "Vegas_Bank"));
			TextDrawSetString(Vegas_Player[playerid][1], str);
			Vegas_Losuj(playerid, 7);
			TextDrawHideForPlayer(playerid, Vegas_Player[playerid][2]);
		}
		if(clickedid == Vegas_Button[1]) //Stawka
		{
		    if(GetPVarInt(playerid, "Vegas_Los") == 1)
			{
			    CancelSelectTextDraw(playerid);
			    ShowPlayerDialog(playerid, 8851, DIALOG_STYLE_MSGBOX, "{FF0000}Jednorêki Bandyta", "{FFFFFF}Poczekaj do zakoñczenia losowania.", "Zamknij", "");
				return 1;
			}
			new i = GetPVarInt(playerid, "Vegas_Stawka");
			i++;
			if(i >= 12) i = 0;

			format(str, sizeof str, "Stawka:~n~$%d", Vegas_Stawki[i]);
			TextDrawSetString(Vegas_Player[playerid][0], str);
			SetPVarInt(playerid, "Vegas_Stawka", i);
		}
		if(clickedid == Vegas_Button[2]) //Wplac
		{
		    CancelSelectTextDraw(playerid);
			ShowPlayerDialog(playerid, 8850, DIALOG_STYLE_INPUT, "{FF0000}Jednorêki Bandyta", "{FFFFFF}WprowadŸ kwotê, któr¹ chcesz wp³aciæ:", "Wp³aæ", "Anuluj");
		}
		if(clickedid == Vegas_Button[3]) //Wyplac
		{
			Dodajkase(playerid, GetPVarInt(playerid, "Vegas_Bank"));
			format(str, sizeof str, "~ {00AAFF}Wyp³acono $%d", GetPVarInt(playerid, "Vegas_Bank"));
			SendClientMessage(playerid, -1, str);

			SetPVarInt(playerid, "Vegas_Bank", 0);
			TextDrawSetString(Vegas_Player[playerid][1], "Bank:~n~$0");
		}
		if(clickedid == Vegas_Button[4]) //Zamknij
		{
		    if(GetPVarInt(playerid, "Vegas_Los") == 1)
			{
			    CancelSelectTextDraw(playerid);
			    ShowPlayerDialog(playerid, 8851, DIALOG_STYLE_MSGBOX, "{FF0000}Jednorêki Bandyta", "{FFFFFF}Poczekaj do zakoñczenia losowania.", "Zamknij", "");
				return 1;
			}

			if(GetPVarInt(playerid, "Vegas_Bank") > 0)
			{
			    Dodajkase(playerid, GetPVarInt(playerid, "Vegas_Bank"));
				format(str, sizeof str, "~ {00AAFF}Wyp³acono $%d", GetPVarInt(playerid, "Vegas_Bank"));
				SendClientMessage(playerid, -1, str);
			}
			TextDrawSetString(Vegas_Player[playerid][1], "Bank:~n~$0");
			TextDrawSetString(Vegas_Player[playerid][0], "Stawka:~n~$0");

			SetPVarInt(playerid, "Vegas", 0);
			SetPVarInt(playerid, "Vegas_Bank", 0);
			SetPVarInt(playerid, "Vegas_Stawka", 0);

			TextDrawHideForPlayer(playerid, VegasBG[0]);
			TextDrawHideForPlayer(playerid, VegasBG[1]);
			TextDrawHideForPlayer(playerid, VegasBG[2]);
			TextDrawHideForPlayer(playerid, VegasBG[3]);
			TextDrawHideForPlayer(playerid, VegasBG[4]);
			TextDrawHideForPlayer(playerid, Vegas_Player[playerid][0]);
			TextDrawHideForPlayer(playerid, Vegas_Player[playerid][1]);
			TextDrawHideForPlayer(playerid, Vegas_Player[playerid][2]);
			TextDrawHideForPlayer(playerid, Vegas_LOS[0][Vegas_Rand[playerid][0]]);
			TextDrawHideForPlayer(playerid, Vegas_LOS[1][Vegas_Rand[playerid][1]]);
			TextDrawHideForPlayer(playerid, Vegas_LOS[2][Vegas_Rand[playerid][2]]);
			TextDrawHideForPlayer(playerid, Vegas_Button[0]);
			TextDrawHideForPlayer(playerid, Vegas_Button[1]);
			TextDrawHideForPlayer(playerid, Vegas_Button[2]);
			TextDrawHideForPlayer(playerid, Vegas_Button[3]);
			TextDrawHideForPlayer(playerid, Vegas_Button[4]);
			CancelSelectTextDraw(playerid);
		}
	}
	return 1;
}

public OnPlayerRequestDownload(playerid, type, crc)
{
	if(IsPlayerNPC(playerid)) return 1;
	
	new fullurl[256+1];
	new dlfilename[64+1];
	new foundfilename=0;

	if(!IsPlayerConnected(playerid)) return 0;

	if(type == DOWNLOAD_REQUEST_TEXTURE_FILE) {
		foundfilename = FindTextureFileNameFromCRC(crc,dlfilename,64);
	}
	else if(type == DOWNLOAD_REQUEST_MODEL_FILE) {
		foundfilename = FindModelFileNameFromCRC(crc,dlfilename,64);
	}

	if(foundfilename) {
		format(fullurl,256,"%s/%s",baseurl,dlfilename);
		RedirectDownload(playerid,fullurl);
	}
	if(InfoOSkinach == 1)
	{
		new str2[256];
		format(str2, sizeof(str2), "Pobrano: %s", fullurl);
		SendClientMessage(playerid, 0xFFFFFFFF, str2);
	}
	KameraLogowania(playerid);
	return 0;
}

public OnPlayerFinishedDownloading(playerid, virtualworld)
{
	if(IsPlayerNPC(playerid)) return 1;

	if(zalogowany[playerid] == false)
	{
		KameraLogowania(playerid);
		SetPVarInt(playerid, "PobranoModele", 1);
		TextDrawHideForPlayer(playerid, LadowanieModeli);
		new sql[200];
		format(sql, sizeof(sql), "SELECT * FROM `jochym_postacie` WHERE `name` = '%s' LIMIT 1", ImieGracza(playerid));
		mysql_query(sql);
		mysql_store_result();
		if(BetaTesty == 0)
		{
			if(mysql_num_rows() != 0)
			{
				new sql1[200], team;
				format(sql1, sizeof(sql1), "SELECT `ID`, `GUID`, `AKTYWNE`, `is_team`, `Przelogowal` FROM `jochym_postacie` WHERE `name` = '%s' LIMIT 1", ImieGracza(playerid));
				mysql_query(sql1);
				mysql_store_result();
				mysql_fetch_row(sql1);
				sscanf(sql1, "p<|>dddd", DaneGracza[playerid][gUID], DaneGracza[playerid][gGUID], DaneGracza[playerid][gAKTYWNE], team, DaneGracza[playerid][gLogin]);
				if(DaneGracza[playerid][gAKTYWNE] == 1 && (DaneGracza[playerid][gAKTYWNE] < gettime()+CZAS_LETNI && DaneGracza[playerid][gAKTYWNE] != -1))
				{
					new str5[512];//Logowanie dla cz³onka ekipy
					format(str5, sizeof(str5), "{9DB6D3}Witaj na "PROJEKT", nowym innowacyjnym w pe³ni rozwijaj¹cym siê serwerze!\nOd 2016 roku pracowaliœmy nad stworzeniem miejsca dla graczy na serwerze oraz forum, od tamtego czasu..\n[...] zdo³aliœmy zakodowaæ o wiele wiêcej ni¿ konkurencja a to dopiero pocz¹tek naszej przygody!\n\n");
					format(str5, sizeof(str5), "%s\t{9DB6D3}Logujesz siê na postaæ: {FFFFFF}%s{9DB6D3}, która {63D075}istnieje w naszej bazie danych!{9DB6D3}\n\tZaloguj siê albo zmieñ nick by wejœæ na inn¹ postaæ.", str5, ImieGracza2(playerid));
					dShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Panel Logowania:", str5, "Zaloguj sie", "Lista");
					SetPlayerWorldBounds(playerid, 20000.00, -20000.00, 20000.00, -20000.00);
					KameraLogowania(playerid);
				}
				else
				{
					SendClientMessage(playerid, SZARY, "WejdŸ z poprawnym nickname postaci!");
					Kick(playerid);
					SetPlayerWorldBounds(playerid, 20000.00, -20000.00, 20000.00, -20000.00);
					KameraLogowania(playerid);
				}
			}
			else
			{
				DaneGracza[playerid][gLogin] = 1;
				ZapiszGracza(playerid);
				Relog[playerid] = 1;
				new IP[16], sql1[370];
				GetPlayerIp(playerid, IP, sizeof(IP));
				new found = 0;
				strdel(tekst_global, 0, 4048);
				format(tekst_global, sizeof(tekst_global), "UID\tImie i nazwisko\tCzas gry", tekst_global);
				ForeachEx(i, MAX_POSTACI)
				{
					new IPI[16], namei[100], online, team;
					format(sql1, sizeof(sql1), "SELECT `IP`, `name`, `CZAS_ONLINE`, `is_team` FROM `jochym_postacie` WHERE `IP` = '%s' AND `ID` = '%d'", IP, i);
					mysql_query(sql1);
					mysql_store_result();
					mysql_fetch_row(sql1);
					sscanf(sql1, "p<|>s[16]s[100]d", IPI, namei, online);
					new imien[50], nazwisko[50], tekst_global1[50];
					sscanf(namei, "p<_>s[50]s[50]",imien,nazwisko);
					imien[0] = toupper(imien[0]);
					nazwisko[0] = toupper(nazwisko[0]);
					if(team == 1)
					{
						format(tekst_global1, sizeof(tekst_global1), "%s", imien);
					}
					if(team == 0 || team == 2 || team == 3)
					{
						format(tekst_global1, sizeof(tekst_global1), "%s %s", imien,nazwisko);
					}
					if(!strcmp(IP, IPI, true))
					{
						new hours, minutes;
						hours 	= online / 3600;
						minutes = (online - (hours * 3600)) / 60;
						format(tekst_global, sizeof(tekst_global), "%s\n%d\t%s\t%dh %dmin", tekst_global, i, tekst_global1, hours, minutes);
						found++;
					}
				}
				format(tekst_global, sizeof(tekst_global), "%s\n----", tekst_global);
				format(tekst_global, sizeof(tekst_global), "%s\n	Powy¿sze postacie moga byæ Twoje. Wybierz t¹, któr¹ chcesz graæ", tekst_global);
				format(tekst_global, sizeof(tekst_global), "%s\n	lub naciœnij drugi przycisk by przejœæ do menu zmiany nicku.", tekst_global);
				format(tekst_global, sizeof(tekst_global), "%s\n\n•            Nie masz jeszcze w³asnej postaci na "STRONAWWW"!", tekst_global);
				format(tekst_global, sizeof(tekst_global), "%s\n\n•            Zminimalizuj grê i wejdŸ na forum "STRONAWWW"!", tekst_global);
				if(found != 0)
				{
					dShowPlayerDialog(playerid, DIALOG_NICK2, DIALOG_STYLE_TABLIST_HEADERS, "Czy któraœ z tych postaci jest Twoja?", tekst_global, "Zaloguj", "Zmien nick");
				}
				else
				{
					SendClientMessage(playerid, SZARY, "WejdŸ z poprawnym nickname postaci!");
					Kick(playerid);
				}
				KameraLogowania(playerid);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid, 0);
			}
		}
		else
		{
			if(mysql_num_rows() != 0)
			{
				new sql1[200], team;
				format(sql1, sizeof(sql1), "SELECT `ID`, `GUID`, `AKTYWNE`, `is_team`, `Przelogowal` FROM `jochym_postacie` WHERE `name` = '%s' LIMIT 1", ImieGracza(playerid));
				mysql_query(sql1);
				mysql_store_result();
				mysql_fetch_row(sql1);
				sscanf(sql1, "p<|>dddd", DaneGracza[playerid][gUID], DaneGracza[playerid][gGUID], DaneGracza[playerid][gAKTYWNE], team, DaneGracza[playerid][gLogin]);
				if(DaneGracza[playerid][gAKTYWNE] == 1 && (DaneGracza[playerid][gAKTYWNE] < gettime()+CZAS_LETNI && DaneGracza[playerid][gAKTYWNE] != -1))
				{
					if(team == 0)
					{
						new str5[512];//Logowanie dla graczy
						format(str5, sizeof(str5), "{9DB6D3}Witaj na "PROJEKT", nowym innowacyjnym w pe³ni rozwijaj¹cym siê serwerze!\nOd 2016 roku pracowaliœmy nad stworzeniem miejsca dla graczy na serwerze oraz forum, od tamtego czasu..\n[...] zdo³aliœmy zakodowaæ o wiele wiêcej ni¿ konkurencja a to dopiero pocz¹tek naszej przygody!\n\n");
						format(str5, sizeof(str5), "%s\t{9DB6D3}Logujesz siê na postaæ: {FFFFFF}%s{9DB6D3}, która {63D075}istnieje w naszej bazie danych!{9DB6D3}\n\tZaloguj siê albo zmieñ nick by wejœæ na inn¹ postaæ.", str5, ImieGracza2(playerid));
						dShowPlayerDialog(playerid, DIALOG_BETA, DIALOG_STYLE_PASSWORD, "Panel Logowania:", str5, "Zaloguj sie", "Lista");
						SetPlayerWorldBounds(playerid, 20000.00, -20000.00, 20000.00, -20000.00);
						KameraLogowania(playerid);
					}
					else if(team == 1 || team == 2 || team == 3)
					{
						new str5[512];//Logowanie dla cz³onka ekipy
						format(str5, sizeof(str5), "{9DB6D3}Witaj na "PROJEKT", nowym innowacyjnym w pe³ni rozwijaj¹cym siê serwerze!\nOd 2016 roku pracowaliœmy nad stworzeniem miejsca dla graczy na serwerze oraz forum, od tamtego czasu..\n[...] zdo³aliœmy zakodowaæ o wiele wiêcej ni¿ konkurencja a to dopiero pocz¹tek naszej przygody!\n\n");
						format(str5, sizeof(str5), "%s\t{9DB6D3}Logujesz siê na postaæ: {FFFFFF}%s{9DB6D3}, która {63D075}istnieje w naszej bazie danych!{9DB6D3}\n\tZaloguj siê albo zmieñ nick by wejœæ na inn¹ postaæ.", str5, ImieGracza2(playerid));
						dShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Panel Logowania:", str5, "Zaloguj sie", "Lista");
						SetPlayerWorldBounds(playerid, 20000.00, -20000.00, 20000.00, -20000.00);
						KameraLogowania(playerid);
					}
				}
				else
				{
					SendClientMessage(playerid, SZARY, "WejdŸ z poprawnym nickname postaci!");
					Kick(playerid);
					SetPlayerWorldBounds(playerid, 20000.00, -20000.00, 20000.00, -20000.00);
					KameraLogowania(playerid);
				}
			}
			else
			{
				DaneGracza[playerid][gLogin] = 1;
				ZapiszGracza(playerid);
				Relog[playerid] = 1;
				new IP[16], sql1[250];
				new namei[100], team;
				new imien[50], nazwisko[50], tekst_global1[50];
				GetPlayerIp(playerid, IP, sizeof(IP));
				new found = 0;
				strdel(tekst_global, 0, 4048);
				format(tekst_global, sizeof(tekst_global), "UID\tImie i nazwisko\tCzas gry", tekst_global);
				ForeachEx(i, MAX_POSTACI)
				{
					new IPI[16], online;
					format(sql1, sizeof(sql1), "SELECT `IP`, `name`, `CZAS_ONLINE`, `is_team` FROM `jochym_postacie` WHERE `IP` = '%s' AND `ID` = '%d'", IP, i);
					mysql_query(sql1);
					mysql_store_result();
					mysql_fetch_row(sql1);
					sscanf(sql1, "p<|>s[16]s[100]dd", IPI, namei, online, team);
					sscanf(namei, "p<_>s[50]s[50]",imien,nazwisko);
					imien[0] = toupper(imien[0]);
					nazwisko[0] = toupper(nazwisko[0]);
					if(team == 1)
					{
						format(tekst_global1, sizeof(tekst_global1), "%s", imien);
					}
					if(team == 0 || team == 2 || team == 3)
					{	
						format(tekst_global1, sizeof(tekst_global1), "%s %s", imien,nazwisko);
					}
					if(!strcmp(IP, IPI, true))
					{
						new hours, minutes;
						hours 	= online / 3600;
						minutes = (online - (hours * 3600)) / 60;
						format(tekst_global, sizeof(tekst_global), "%s\n%d\t%s\t%dh %dmin", tekst_global, i, tekst_global1, hours, minutes);
						found++;
					}
				}
				format(tekst_global, sizeof(tekst_global), "%s\n----", tekst_global);
				format(tekst_global, sizeof(tekst_global), "%s\n	Powy¿sze postacie moga byæ Twoje. Wybierz t¹, któr¹ chcesz graæ", tekst_global);
				format(tekst_global, sizeof(tekst_global), "%s\n	lub naciœnij drugi przycisk by przejœæ do menu zmiany nicku.", tekst_global);
				format(tekst_global, sizeof(tekst_global), "%s\n\n•            Nie masz jeszcze w³asnej postaci na "STRONAWWW"!", tekst_global);
				format(tekst_global, sizeof(tekst_global), "%s\n\n•            Zminimalizuj grê i wejdŸ na forum "STRONAWWW"!", tekst_global);
				if(found != 0)
				{
					dShowPlayerDialog(playerid, DIALOG_NICK2, DIALOG_STYLE_TABLIST_HEADERS, "Czy któraœ z tych postaci jest Twoja?", tekst_global, "Zaloguj", "Zmien nick");
				}
				else
				{
					SendClientMessage(playerid, SZARY, "WejdŸ z poprawnym nickname postaci!");
					Kick(playerid);
				}
				KameraLogowania(playerid);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid, 0);
			}
		}
	}
	else
	{
		SetCameraBehindPlayer(playerid);
	}
    return 1;
}

public OnGameModeInit()
{
	printf("Poprawnie rozpoczêto pracê skryptu "VER".");
	
	// Streamer limitations.
	Streamer_TickRate(50);
	Streamer_MaxItems(STREAMER_TYPE_OBJECT, MAX_OBIEKT);
	Streamer_VisibleItems(STREAMER_TYPE_OBJECT, MAX_OBIEKT);
	
	//Ustawienia serwera rcon.
	SendRconCommand("hostname "NAZWASERWERA"");
	SendRconCommand("mapname "VER"");
	SendRconCommand("weburl "STRONAWWW"");
	SendRconCommand("language Pobierz 0.3-DL");
	SetGameModeText(""VER"");
	SendRconCommand("unbanip *.*.*.*");


    new p = GetMaxPlayers();
    for (new i=0; i < p; i++) {
            SetPVarInt(i, "laser", 0);
            SetPVarInt(i, "color", 18643);
    }
	
    Baller = 999;
    DestroyObject(Ball);
    Ball = CreateObject(2114, 2782.3027,-2019.0826,13.5547-0.8, 0, 0, 96);
	AddPlayerClass(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);//Stay Within The World Boundries
	
	AntiDeAMX();
	FadeInit();

	ShowNameTags(false);
    ShowPlayerMarkers(false);//Markery
   	AllowInteriorWeapons(false);//Bronie w interiorze
	EnableStuntBonusForAll(false);//Brak kasy za stunty
	DisableInteriorEnterExits();//Brak intów GTA
	EnableVehicleFriendlyFire();
	ManualVehicleEngineAndLights();
	MapAndreas_Init(2);
	
	new godzina, minuta;
	gettime(godzina, minuta);
	SetWorldTime(godzina);
	
	mysql_connect(SQL_HOST, SQL_USER, SQL_DB, SQL_PASS);
	
	if(SerwerPoboczny == 0)
	{
		new str[124];
		strdel(str, 0, 124);
		format(str, sizeof(str), "UPDATE `jochym_postacie` SET `ONLINE` = '0' WHERE `ONLINE` = '%d'", 1);
		mysql_query(str);
		
		strdel(str, 0, 124);
		format(str, sizeof(str), "UPDATE `ips_core_members` SET `online` = '0' WHERE `online` = '%d'", 1);
		mysql_query(str);
		
		//Je¿eli gracz nie trenowa³ danego dnia
		new sql1[200];
		new gmx;
		format(sql1, sizeof(sql1), "SELECT `gmx` FROM `jochym_serwer` WHERE `x` = '%d'", 1);
		mysql_query(sql1);
		mysql_store_result();
		mysql_fetch_row(sql1);
		sscanf(sql1, "p<|>d", gmx);
		if(gmx == 0)
		{
			ForeachEx(i, MAX_POSTACI)
			{
				new id, uid, trenowal, sila, strzelnica, sg0, sg1, sg2, sg3, sg4, sg5, sg6, sg7, sg8, sg9, sg10, blokdorywcza;
				format(sql1, sizeof(sql1), "SELECT `ID`, `GUID`, `TRENOWAL`, `SILA`, `STRZELNICA`, `0`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `BLOKDORYWCZA` FROM `jochym_postacie` WHERE `ID` = '%d' LIMIT 1", i);
				mysql_query(sql1);
				mysql_store_result();
				mysql_fetch_row(sql1);
				sscanf(sql1, "p<|>ddddddddddddddddd", id, uid, trenowal, sila, strzelnica, sg0, sg1, sg2, sg3, sg4, sg5, sg6, sg7, sg8, sg9, sg10, blokdorywcza);
				new year, month, day;
				getdate(year, month, day);
				if(i == id && blokdorywcza != 0)
				{
					new query[256];
					format(query, sizeof(query), "UPDATE `jochym_postacie` SET `BLOKDORYWCZA` = '0' WHERE `ID` = %d", id);
					mysql_check();
					mysql_query(query);
				}
				if(i == id && sila < 3000)
				{
					new query[256];
					format(query, sizeof(query), "UPDATE `jochym_postacie` SET `SILA` = '3000' WHERE `ID` = %d", id);
					mysql_check();
					mysql_query(query);
				}
			}
		}
	}
	
////////////////////////////////////////////////////////////////////////////////
    printf("Uruchomiono proces ladowania modulow");
	ZaladujModele();
    ZaladujZgloszenia();
	ZaladujNagrobki();
	ZaladujBoty();
	ZaladujNasiona();
	ZaladujZlom();
	ZaladujSMS();
	ZaladujTato();
	ZaladujOpisy();
	ZaladujWynajem();
	ZaladujKontakty();
	ZaladujObiekty();
	ZaladujAnimacje();
	ZaladujPrzedmioty();
	ZaladujPojazdy();
	ZaladujDzialalnoscis();
	ZaladujPrzystanki();
	ZaladujNieruchomosci();
	ZaladujElektryke();
	ZaladujTextury();
	ZaladujHurtownie();
	ZaladujMagazyny();
	ZaladujKartoteki();
	ZaladujPoszukiwania();
	ZaladujWyscigAll();
	ZaladujFotoradary();
	ZaladujPaczki();
	ZaladujTereny();
	ZaladujWlasciciela();
	ZaladujCornery();
	ZaladujGazety();
	ZaladujKopieInterioru();
	ZaladujKopieTekstur();
	ZaladujMembers();
	ZaladujHistory();
	ZaladujZadluzenia();
	ZaladujRybak();
	ZaladujForex();
	printf("Zakonczono proces ladowania modulow");
	ZaladujNPC(); // £adowanie NPC
////////////////////////////////////////////////////////////////////////////////
	SetTimer("Minuta", 60000, true);
	SetTimer("AFKDetect", 1000, true);
	SetTimer("AntyAFK", 120000, true);
	SetTimer("CoSekunde",1000, true);
	SetTimer("Reczny",1000, true);
	//SetTimer("MinusAuto",1000, true);
	SetTimer("Przebieg",1000, true);
////////////////////////////////////////////////////////////////////////////////
	flash = TextDrawCreate(-20.000000,2.000000,"|");
	TextDrawUseBox(flash,1);
	TextDrawBoxColor(flash,0xffffff66);
	TextDrawTextSize(flash,660.000000,22.000000);
	TextDrawAlignment(flash,0);
	TextDrawBackgroundColor(flash,0x000000ff);
	TextDrawFont(flash,3);
	TextDrawLetterSize(flash,1.000000,52.200000);
	TextDrawColor(flash,0xffffffff);
	TextDrawSetOutline(flash,1);
	TextDrawSetProportional(flash,1);
	TextDrawSetShadow(flash,1);
////////////////////////////////////////////////////////////////////////////////
	Light = TextDrawCreate(0.0, 0.0, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~");
	TextDrawUseBox(Light, 1);
	TextDrawBoxColor(Light, 0x00000077);
	TextDrawTextSize(Light, 640.0, 400.0);
////////////////////////////////////////////////////////////////////////////////73
	LosSantosFM = TextDrawCreate(13.333320, 438.059326, "~w~Odtwarzany jest standardowy blok muzyczny (Wpisz /radio by zmienic radiostacje lub zaczekaj na prezentera).");
	TextDrawLetterSize(LosSantosFM, 0.140332, 0.903110);
	TextDrawTextSize(LosSantosFM, 640.000000, 0.000000);
	TextDrawAlignment(LosSantosFM, 1);
	TextDrawColor(LosSantosFM, -1);
	TextDrawUseBox(LosSantosFM, 1);
	TextDrawBoxColor(LosSantosFM, 90);
	TextDrawSetShadow(LosSantosFM, 0);
	TextDrawSetOutline(LosSantosFM, 0);
	TextDrawBackgroundColor(LosSantosFM, 60);
	TextDrawFont(LosSantosFM, 1);
	TextDrawSetProportional(LosSantosFM, 1);
	TextDrawSetShadow(LosSantosFM, 0);
	TextDrawShowForAll(LosSantosFM);
	TextDrawShowForAll(Logo);
    TextDrawShowForAll(Weazel);
////////////////////////////////////////////////////////////////////////////////
	CB = TextDrawCreate(160.000000,420.000000,"~y~CB Radio ~>~~w~ Czestotliwosc");
	TextDrawUseBox(CB,1);
	TextDrawBoxColor(CB,0x00000033);
	TextDrawTextSize(CB,595.000000,160.000000);
	TextDrawAlignment(CB,0);
	TextDrawBackgroundColor(CB,0x000000ff);
	TextDrawFont(CB,1);
	TextDrawLetterSize(CB,0.199999,0.899999);
	TextDrawColor(CB,0xffffffff);
	TextDrawSetOutline(CB,1);
	TextDrawSetProportional(CB,1);
	TextDrawShowForAll(CB);
////////////////////////////////////////////////////////////////////////////////
    brudny = TextDrawCreate(-20.000000,2.000000,"|");
	TextDrawUseBox(brudny,1);
	TextDrawBoxColor(brudny,0x523305AA);
	TextDrawTextSize(brudny,660.000000,22.000000);
	TextDrawAlignment(brudny,0);
	TextDrawBackgroundColor(brudny,0x000000ff);
	TextDrawFont(brudny,3);
	TextDrawLetterSize(brudny,1.000000,52.200000);
	TextDrawColor(brudny,0x7D3636AA);
	TextDrawSetOutline(brudny,1);
	TextDrawSetProportional(brudny,1);
	TextDrawSetShadow(brudny,1);
////////////////////////////////////////////////////////////////////////////////
	Textdrawodkar = TextDrawCreate(14.000000, 226.000000, " ");
	TextDrawBackgroundColor(Textdrawodkar, 255);
	TextDrawFont(Textdrawodkar, 1);
	TextDrawLetterSize(Textdrawodkar, 0.300000, 1.200000);
	TextDrawColor(Textdrawodkar, -1);
	TextDrawSetOutline(Textdrawodkar, 1);
	TextDrawSetProportional(Textdrawodkar, 1);
	TextDrawShowForAll(Textdrawodkar);
////////////////////////////////////////////////////////////////////////////////
	Worek = TextDrawCreate(1.000000,1.000000," ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~");
	TextDrawUseBox(Worek,1);
	TextDrawBoxColor(Worek,0x000000ff);
	TextDrawTextSize(Worek,640.000000,0.000000);
	TextDrawAlignment(Worek,0);
	TextDrawBackgroundColor(Worek,0x000000ff);
	TextDrawFont(Worek,3);
	TextDrawLetterSize(Worek,1.000000,1.000000);
	TextDrawColor(Worek,0xffffffff);
	TextDrawSetOutline(Worek,1);
	TextDrawSetProportional(Worek,1);
	TextDrawSetShadow(Worek,1);

	Worek2 = TextDrawCreate(1.000000,1.000000," ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~");
	TextDrawUseBox(Worek2,1);
	TextDrawBoxColor(Worek2,0x000000ff);
	TextDrawTextSize(Worek2,640.000000,0.000000);
	TextDrawAlignment(Worek2,0);
	TextDrawBackgroundColor(Worek2,0x000000ff);
	TextDrawFont(Worek2,3);
	TextDrawLetterSize(Worek2,1.000000,1.000000);
	TextDrawColor(Worek2,0xffffffff);
	TextDrawSetOutline(Worek2,1);
	TextDrawSetProportional(Worek2,1);
	TextDrawSetShadow(Worek2,1);

	Telefon[0] = TextDrawCreate(493.000000, 156.000000, "hud:radardisc");
	TextDrawBackgroundColor(Telefon[0], 255);
	TextDrawFont(Telefon[0], 4);
	TextDrawLetterSize(Telefon[0], 0.500000, 1.000000);
	TextDrawColor(Telefon[0], -1);
	TextDrawSetOutline(Telefon[0], 0);
	TextDrawSetProportional(Telefon[0], 1);
	TextDrawSetShadow(Telefon[0], 1);
	TextDrawUseBox(Telefon[0], 1);
	TextDrawBoxColor(Telefon[0], 255);
	TextDrawTextSize(Telefon[0], 27.000000, 33.000000);

	Telefon[1] = TextDrawCreate(493.000000, 423.000000, "hud:radardisc");
	TextDrawBackgroundColor(Telefon[1], 255);
	TextDrawFont(Telefon[1], 4);
	TextDrawLetterSize(Telefon[1], 0.500000, 1.000000);
	TextDrawColor(Telefon[1], -1);
	TextDrawSetOutline(Telefon[1], 0);
	TextDrawSetProportional(Telefon[1], 1);
	TextDrawSetShadow(Telefon[1], 1);
	TextDrawUseBox(Telefon[1], 1);
	TextDrawBoxColor(Telefon[1], 255);
	TextDrawTextSize(Telefon[1], 27.000000, -33.000000);

	Telefon[2] = TextDrawCreate(615.000000, 423.000000, "hud:radardisc");
	TextDrawBackgroundColor(Telefon[2], 255);
	TextDrawFont(Telefon[2], 4);
	TextDrawLetterSize(Telefon[2], 0.500000, 1.000000);
	TextDrawColor(Telefon[2], -1);
	TextDrawSetOutline(Telefon[2], 0);
	TextDrawSetProportional(Telefon[2], 1);
	TextDrawSetShadow(Telefon[2], 1);
	TextDrawUseBox(Telefon[2], 1);
	TextDrawBoxColor(Telefon[2], 255);
	TextDrawTextSize(Telefon[2], -27.000000, -33.000000);

	Telefon[3] = TextDrawCreate(615.000000, 156.000000, "hud:radardisc");
	TextDrawBackgroundColor(Telefon[3], 255);
	TextDrawFont(Telefon[3], 4);
	TextDrawLetterSize(Telefon[3], 0.500000, 1.000000);
	TextDrawColor(Telefon[3], -1);
	TextDrawSetOutline(Telefon[3], 0);
	TextDrawSetProportional(Telefon[3], 1);
	TextDrawSetShadow(Telefon[3], 1);
	TextDrawUseBox(Telefon[3], 1);
	TextDrawBoxColor(Telefon[3], 255);
	TextDrawTextSize(Telefon[3], -27.000000, 33.000000);

	Telefon[4] = TextDrawCreate(494.000000, 138.000000, "0");
	TextDrawBackgroundColor(Telefon[4], 255);
	TextDrawFont(Telefon[4], 1);
	TextDrawLetterSize(Telefon[4], 2.259998, 10.800010);
	TextDrawColor(Telefon[4], 255);
	TextDrawSetOutline(Telefon[4], 0);
	TextDrawSetProportional(Telefon[4], 1);
	TextDrawSetShadow(Telefon[4], 0);

	Telefon[5] = TextDrawCreate(565.500000, 138.000000, "0");
	TextDrawBackgroundColor(Telefon[5], 255);
	TextDrawFont(Telefon[5], 1);
	TextDrawLetterSize(Telefon[5], 2.259998, 10.800010);
	TextDrawColor(Telefon[5], 255);
	TextDrawSetOutline(Telefon[5], 0);
	TextDrawSetProportional(Telefon[5], 1);
	TextDrawSetShadow(Telefon[5], 0);

	Telefon[14] = TextDrawCreate(494.000000, 336.000000, "0");
	TextDrawBackgroundColor(Telefon[14], 255);
	TextDrawFont(Telefon[14], 1);
	TextDrawLetterSize(Telefon[14], 2.259998, 10.800010);
	TextDrawColor(Telefon[14], 255);
	TextDrawSetOutline(Telefon[14], 0);
	TextDrawSetProportional(Telefon[14], 1);
	TextDrawSetShadow(Telefon[14], 0);

	Telefon[15] = TextDrawCreate(565.500000, 335.000000, "0");
	TextDrawBackgroundColor(Telefon[15], 255);
	TextDrawFont(Telefon[15], 1);
	TextDrawLetterSize(Telefon[15], 2.259998, 10.800010);
	TextDrawColor(Telefon[15], 255);
	TextDrawSetOutline(Telefon[15], 0);
	TextDrawSetProportional(Telefon[15], 1);
	TextDrawSetShadow(Telefon[15], 0);

	Telefon[6] = TextDrawCreate(617.000000, 191.000000, "_");
	TextDrawBackgroundColor(Telefon[6], 255);
	TextDrawFont(Telefon[6], 1);
	TextDrawLetterSize(Telefon[6], 0.500000, 22.200000);
	TextDrawColor(Telefon[6], -1);
	TextDrawSetOutline(Telefon[6], 0);
	TextDrawSetProportional(Telefon[6], 1);
	TextDrawSetShadow(Telefon[6], 1);
	TextDrawUseBox(Telefon[6], 1);
	TextDrawBoxColor(Telefon[6], 255);
	TextDrawTextSize(Telefon[6], 491.000000, 0.000000);

	Telefon[7] = TextDrawCreate(590.000000, 158.000000, "_");
	TextDrawBackgroundColor(Telefon[7], 255);
	TextDrawFont(Telefon[7], 1);
	TextDrawLetterSize(Telefon[7], 0.500000, 29.200004);
	TextDrawColor(Telefon[7], -1);
	TextDrawSetOutline(Telefon[7], 0);
	TextDrawSetProportional(Telefon[7], 1);
	TextDrawSetShadow(Telefon[7], 1);
	TextDrawUseBox(Telefon[7], 1);
	TextDrawBoxColor(Telefon[7], 255);
	TextDrawTextSize(Telefon[7], 518.000000, 0.000000);

	Telefon[8] = TextDrawCreate(606.000000, 174.000000, "_");
	TextDrawBackgroundColor(Telefon[8], 255);
	TextDrawFont(Telefon[8], 1);
	TextDrawLetterSize(Telefon[8], 0.500000, 26.199996);
	TextDrawColor(Telefon[8], -1);
	TextDrawSetOutline(Telefon[8], 0);
	TextDrawSetProportional(Telefon[8], 1);
	TextDrawSetShadow(Telefon[8], 1);
	TextDrawUseBox(Telefon[8], 1);
	TextDrawBoxColor(Telefon[8], 255);
	TextDrawTextSize(Telefon[8], 498.000000, 0.000000);

	Telefon[9] = TextDrawCreate(554.000000, 397.000000, "u");
	TextDrawBackgroundColor(Telefon[9], 255);
	TextDrawAlignment(Telefon[9], 2);
	TextDrawFont(Telefon[9], 2);
	TextDrawLetterSize(Telefon[9], 2.070000, 1.400000);
	TextDrawColor(Telefon[9], -1);
	TextDrawSetOutline(Telefon[9], 0);
	TextDrawSetProportional(Telefon[9], 1);
	TextDrawSetShadow(Telefon[9], 1);
	TextDrawTextSize(Telefon[9], 13.000000, 50.000000);

	Telefon[10] = TextDrawCreate(502.000000, 190.000000, "_");
	TextDrawBackgroundColor(Telefon[10], 255);
	TextDrawFont(Telefon[10], 1);
	TextDrawLetterSize(Telefon[10], 0.500000, 22.000003);
	TextDrawColor(Telefon[10], -1);
	TextDrawSetOutline(Telefon[10], 0);
	TextDrawSetProportional(Telefon[10], 1);
	TextDrawSetShadow(Telefon[10], 1);
	TextDrawUseBox(Telefon[10], 1);
	TextDrawBoxColor(Telefon[10], 842150655);
	TextDrawTextSize(Telefon[10], 606.000000, 0.000000);

	Telefon[11] = TextDrawCreate(535.000000, 157.000000, "-");
	TextDrawBackgroundColor(Telefon[11], 255);
	TextDrawFont(Telefon[11], 1);
	TextDrawLetterSize(Telefon[11], 2.569999, 1.800000);
	TextDrawColor(Telefon[11], 842150655);
	TextDrawSetOutline(Telefon[11], 0);
	TextDrawSetProportional(Telefon[11], 1);
	TextDrawSetShadow(Telefon[11], 0);

	Telefon[12] = TextDrawCreate(568.000000, 163.000000, ".. o");
	TextDrawBackgroundColor(Telefon[12], 255);
	TextDrawFont(Telefon[12], 1);
	TextDrawLetterSize(Telefon[12], 0.400000, 1.400000);
	TextDrawColor(Telefon[12], 842150655);
	TextDrawSetOutline(Telefon[12], 0);
	TextDrawSetProportional(Telefon[12], 1);
	TextDrawSetShadow(Telefon[12], 0);

	Telefon[13] = TextDrawCreate(533.000000, 175.000000, "Jochym");
	TextDrawBackgroundColor(Telefon[13], 255);
	TextDrawFont(Telefon[13], 1);
	TextDrawLetterSize(Telefon[13], 0.250000, 0.899999);
	TextDrawColor(Telefon[13], -1);
	TextDrawSetOutline(Telefon[13], 0);
	TextDrawSetProportional(Telefon[13], 1);
	TextDrawSetShadow(Telefon[13], 0);

	VegasBG[0] = TextDrawCreate(477.375000, 136.250000, "usebox");
	TextDrawLetterSize(VegasBG[0], 0.000000, 15.500000);
	TextDrawTextSize(VegasBG[0], 149.875000, 0.000000);
	TextDrawAlignment(VegasBG[0], 1);
	TextDrawColor(VegasBG[0], 0);
	TextDrawUseBox(VegasBG[0], true);
	TextDrawBoxColor(VegasBG[0], 102);
	TextDrawSetShadow(VegasBG[0], 0);
	TextDrawSetOutline(VegasBG[0], 0);
	TextDrawFont(VegasBG[0], 2);

	VegasBG[1] = TextDrawCreate(369.375000, 123.083328, "Jednoreki Bandyta");
	TextDrawLetterSize(VegasBG[1], 0.685000, 2.300000);
	TextDrawAlignment(VegasBG[1], 1);
	TextDrawColor(VegasBG[1], -1);
	TextDrawSetShadow(VegasBG[1], 0);
	TextDrawSetOutline(VegasBG[1], 1);
	TextDrawBackgroundColor(VegasBG[1], 51);
	TextDrawFont(VegasBG[1], 0);
	TextDrawSetProportional(VegasBG[1], 1);

	VegasBG[2] = TextDrawCreate(238.250000, 147.916656, "usebox");
	TextDrawLetterSize(VegasBG[2], 0.000000, 7.951849);
	TextDrawTextSize(VegasBG[2], 164.250000, 0.000000);
	TextDrawAlignment(VegasBG[2], 1);
	TextDrawColor(VegasBG[2], 0);
	TextDrawUseBox(VegasBG[2], true);
	TextDrawBoxColor(VegasBG[2], 102);
	TextDrawSetShadow(VegasBG[2], 0);
	TextDrawSetOutline(VegasBG[2], 0);
	TextDrawFont(VegasBG[2], 0);

	VegasBG[3] = TextDrawCreate(312.000000, 147.916687, "usebox");
	TextDrawLetterSize(VegasBG[3], 0.000000, 8.060648);
	TextDrawTextSize(VegasBG[3], 241.125000, 0.000000);
	TextDrawAlignment(VegasBG[3], 1);
	TextDrawColor(VegasBG[3], 0);
	TextDrawUseBox(VegasBG[3], true);
	TextDrawBoxColor(VegasBG[3], 102);
	TextDrawSetShadow(VegasBG[3], 0);
	TextDrawSetOutline(VegasBG[3], 0);
	TextDrawFont(VegasBG[3], 0);

	VegasBG[4] = TextDrawCreate(390.750000, 147.916687, "usebox");
	TextDrawLetterSize(VegasBG[4], 0.000000, 8.076849);
	TextDrawTextSize(VegasBG[4], 314.875000, 0.000000);
	TextDrawAlignment(VegasBG[4], 1);
	TextDrawColor(VegasBG[4], 0);
	TextDrawUseBox(VegasBG[4], true);
	TextDrawBoxColor(VegasBG[4], 102);
	TextDrawSetShadow(VegasBG[4], 0);
	TextDrawSetOutline(VegasBG[4], 0);
	TextDrawFont(VegasBG[4], 0);

	Vegas_Button[3] = TextDrawCreate(431.875000, 229.833618, "Wyplac");
	TextDrawLetterSize(Vegas_Button[3], 0.341874, 1.354998);
	TextDrawTextSize(Vegas_Button[3], 27.500000, 68.833358);
	TextDrawAlignment(Vegas_Button[3], 2);
	TextDrawColor(Vegas_Button[3], -1);
	TextDrawUseBox(Vegas_Button[3], true);
	TextDrawBoxColor(Vegas_Button[3], 8388863);
	TextDrawSetShadow(Vegas_Button[3], 1);
	TextDrawSetOutline(Vegas_Button[3], 0);
	TextDrawBackgroundColor(Vegas_Button[3], 51);
	TextDrawFont(Vegas_Button[3], 1);
	TextDrawSetProportional(Vegas_Button[3], 1);
	TextDrawSetSelectable(Vegas_Button[3], true);

	Vegas_Button[0] = TextDrawCreate(205.000000, 230.416702, "Spin");
	TextDrawLetterSize(Vegas_Button[0], 0.356873, 1.296666);
	TextDrawTextSize(Vegas_Button[0], 88.750000, 61.249977);
	TextDrawAlignment(Vegas_Button[0], 2);
	TextDrawColor(Vegas_Button[0], -1);
	TextDrawUseBox(Vegas_Button[0], true);
	TextDrawBoxColor(Vegas_Button[0], 8388863);
	TextDrawSetShadow(Vegas_Button[0], 1);
	TextDrawSetOutline(Vegas_Button[0], 0);
	TextDrawBackgroundColor(Vegas_Button[0], 51);
	TextDrawFont(Vegas_Button[0], 1);
	TextDrawSetProportional(Vegas_Button[0], 1);
	TextDrawSetSelectable(Vegas_Button[0], true);

	Vegas_Button[2] = TextDrawCreate(355.625000, 229.833419, "Wplac");
	TextDrawLetterSize(Vegas_Button[2], 0.390623, 1.319998);
	TextDrawTextSize(Vegas_Button[2], 26.250000, 68.833328);
	TextDrawAlignment(Vegas_Button[2], 2);
	TextDrawColor(Vegas_Button[2], -1);
	TextDrawUseBox(Vegas_Button[2], true);
	TextDrawBoxColor(Vegas_Button[2], 8388863);
	TextDrawSetShadow(Vegas_Button[2], 1);
	TextDrawSetOutline(Vegas_Button[2], 0);
	TextDrawBackgroundColor(Vegas_Button[2], 51);
	TextDrawFont(Vegas_Button[2], 1);
	TextDrawSetProportional(Vegas_Button[2], 1);
	TextDrawSetSelectable(Vegas_Button[2], true);


	Vegas_Button[1] = TextDrawCreate(278.125000, 229.833221, "Stawka");
	TextDrawLetterSize(Vegas_Button[1], 0.336874, 1.308331);
	TextDrawTextSize(Vegas_Button[1], 25.000000, 71.166671);
	TextDrawAlignment(Vegas_Button[1], 2);
	TextDrawColor(Vegas_Button[1], -1);
	TextDrawUseBox(Vegas_Button[1], true);
	TextDrawBoxColor(Vegas_Button[1], 8388863);
	TextDrawSetShadow(Vegas_Button[1], 0);
	TextDrawSetOutline(Vegas_Button[1], 1);
	TextDrawBackgroundColor(Vegas_Button[1], 51);
	TextDrawFont(Vegas_Button[1], 1);
	TextDrawSetProportional(Vegas_Button[1], 1);
	TextDrawSetSelectable(Vegas_Button[1], true);

	Vegas_Button[4] = TextDrawCreate(438.125000, 249.666656, "Zamknij");
	TextDrawLetterSize(Vegas_Button[4], 0.368124, 1.389999);
	TextDrawTextSize(Vegas_Button[4], 20.625000, 57.166652);
	TextDrawAlignment(Vegas_Button[4], 2);
	TextDrawColor(Vegas_Button[4], -1);
	TextDrawUseBox(Vegas_Button[4], true);
	TextDrawBoxColor(Vegas_Button[4], -1523963137);
	TextDrawSetShadow(Vegas_Button[4], 0);
	TextDrawSetOutline(Vegas_Button[4], 1);
	TextDrawBackgroundColor(Vegas_Button[4], 51);
	TextDrawFont(Vegas_Button[4], 3);
	TextDrawSetProportional(Vegas_Button[4], 1);
	TextDrawSetSelectable(Vegas_Button[4], true);

	new Vegas_Textures[7][] = {
		"LD_TATT:9gun2",
		"LD_TATT:7cross3",
		"LD_TATT:4weed",
		"LD_TATT:9crown",
		"LD_TATT:10ls3",
		"LD_TATT:11dice2",
		"LD_TATT:12cross"
	};
	for(new i; i < 7; i++)
	{
		Vegas_LOS[0][i] = TextDrawCreate(168.750000, 148.166656, Vegas_Textures[i]);
		TextDrawLetterSize(Vegas_LOS[0][i], 0.000000, 0.000000);
		TextDrawTextSize(Vegas_LOS[0][i], 65.625000, 71.166687);
		TextDrawAlignment(Vegas_LOS[0][i], 1);
		TextDrawColor(Vegas_LOS[0][i], -1);
		TextDrawSetShadow(Vegas_LOS[0][i], 0);
		TextDrawSetOutline(Vegas_LOS[0][i], 0);
		TextDrawFont(Vegas_LOS[0][i], 4);

		Vegas_LOS[1][i] = TextDrawCreate(245.625000, 148.750000, Vegas_Textures[i]);
		TextDrawLetterSize(Vegas_LOS[1][i], 0.000000, 0.000000);
		TextDrawTextSize(Vegas_LOS[1][i], 62.500000, 71.750000);
		TextDrawAlignment(Vegas_LOS[1][i], 1);
		TextDrawColor(Vegas_LOS[1][i], -1);
		TextDrawSetShadow(Vegas_LOS[1][i], 0);
		TextDrawSetOutline(Vegas_LOS[1][i], 0);
		TextDrawFont(Vegas_LOS[1][i], 4);

		Vegas_LOS[2][i] = TextDrawCreate(319.375000, 148.750000, Vegas_Textures[i]);
		TextDrawLetterSize(Vegas_LOS[2][i], 0.000000, 0.000000);
		TextDrawTextSize(Vegas_LOS[2][i], 67.500000, 72.333343);
		TextDrawAlignment(Vegas_LOS[2][i], 1);
		TextDrawColor(Vegas_LOS[2][i], -1);
		TextDrawSetShadow(Vegas_LOS[2][i], 0);
		TextDrawSetOutline(Vegas_LOS[2][i], 0);
		TextDrawFont(Vegas_LOS[2][i], 4);

		Logo = TextDrawCreate(-0.816833, 416.22961, "mdl-2031:logo");
		TextDrawLetterSize(Logo, 0.000000, 0.000000);
		TextDrawTextSize(Logo, 54.000000, 21.000000);
		TextDrawAlignment(Logo, 1);
		TextDrawColor(Logo, -1);
		TextDrawSetShadow(Logo, 0);
		TextDrawSetOutline(Logo, 0);
		TextDrawBackgroundColor(Logo, 255);
		TextDrawFont(Logo, 4);
		TextDrawSetProportional(Logo, 0);
		TextDrawSetShadow(Logo, 0);
		
		InformacjaMoney = TextDrawCreate(554.333251, 104.133369, "Otrzymujesz codzienny zasilek socjalny w wysokosci ~g~$200");
		TextDrawLetterSize(InformacjaMoney, 0.207999, 0.803555);
		TextDrawTextSize(InformacjaMoney, 0.000000, 111.000000);
		TextDrawAlignment(InformacjaMoney, 2);
		TextDrawColor(InformacjaMoney, -1);
		TextDrawUseBox(InformacjaMoney, 1);
		TextDrawBoxColor(InformacjaMoney, 44);
		TextDrawSetShadow(InformacjaMoney, 0);
		TextDrawSetOutline(InformacjaMoney, 0);
		TextDrawBackgroundColor(InformacjaMoney, 255);
		TextDrawFont(InformacjaMoney, 1);
		TextDrawSetProportional(InformacjaMoney, 1);
		TextDrawSetShadow(InformacjaMoney, 0);

		Weazel = TextDrawCreate(-57.750000, 435.311218, "mdl-2032:weazel");
		TextDrawLetterSize(Weazel, 0.000000, 0.000000);
		TextDrawTextSize(Weazel, 70.000000, 10.000000);
		TextDrawAlignment(Weazel, 1);
		TextDrawColor(Weazel, -1);
		TextDrawSetShadow(Weazel, 0);
		TextDrawSetOutline(Weazel, 0);
		TextDrawBackgroundColor(Weazel, 255);
		TextDrawFont(Weazel, 4);
		TextDrawSetProportional(Weazel, 0);
		TextDrawSetShadow(Weazel, 0);
		
		LadowanieModeli = TextDrawCreate(314.666748, 359.244964, "Aktualizuje i sprawdzam pliki "PREFIXAC" ~p~"lsQv"~w~~n~.. Zaczekaj ..");
		TextDrawLetterSize(LadowanieModeli, 0.282999, 0.927999);
		TextDrawTextSize(LadowanieModeli, 0.000000, 206.000000);
		TextDrawAlignment(LadowanieModeli, 2);
		TextDrawColor(LadowanieModeli, -1);
		TextDrawUseBox(LadowanieModeli, 1);
		TextDrawBoxColor(LadowanieModeli, 1331206762);
		TextDrawSetShadow(LadowanieModeli, 0);
		TextDrawSetOutline(LadowanieModeli, 0);
		TextDrawBackgroundColor(LadowanieModeli, -1);
		TextDrawFont(LadowanieModeli, 1);
		TextDrawSetProportional(LadowanieModeli, 1);
		TextDrawSetShadow(LadowanieModeli, 0);
		
		new year, month, day, dzien[64], miesiac[64];
		getdate(year, month, day);
		new str1[256];
		if(day < 10)
		{
			format(dzien, sizeof(dzien), "0%d", day);
		}
		else
		{
			format(dzien, sizeof(dzien), "%d", day);
		}
		if(month < 10)
		{
			format(miesiac, sizeof(miesiac), "0%d", month);
		}
		else
		{
			format(miesiac, sizeof(miesiac), "%d", month);
		}
		format(str1, sizeof(str1), ""VERSION" (%s.%s.2021r)", dzien, miesiac);
		
		WersjaSkryptu = TextDrawCreate(639.133361, 440.548400, str1);
		TextDrawLetterSize(WersjaSkryptu, 0.101997, 0.724739);
		TextDrawAlignment(WersjaSkryptu, 3);
		TextDrawColor(WersjaSkryptu, -1);
		TextDrawSetShadow(WersjaSkryptu, 0);
		TextDrawSetOutline(WersjaSkryptu, 0);
		TextDrawBackgroundColor(WersjaSkryptu, 255);
		TextDrawFont(WersjaSkryptu, 1);
		TextDrawSetProportional(WersjaSkryptu, 1);
		TextDrawSetShadow(WersjaSkryptu, 0);
		
		AFKInformacja = TextDrawCreate(200.750000, 155.000000, "mdl-2081:AFK");
		TextDrawLetterSize(AFKInformacja, 0.000000, 0.000000);
		TextDrawTextSize(AFKInformacja, 208.000000, 133.000000);
		TextDrawAlignment(AFKInformacja, 1);
		TextDrawColor(AFKInformacja, -1);
		TextDrawSetShadow(AFKInformacja, 0);
		TextDrawSetOutline(AFKInformacja, 0);
		TextDrawBackgroundColor(AFKInformacja, 255);
		TextDrawFont(AFKInformacja, 4);
		TextDrawSetProportional(AFKInformacja, 0);
		TextDrawSetShadow(AFKInformacja, 0);
	}
////////////////////////////////////////////////////////////////////////////////
    ForeachEx(i, MAX_PLAYERS)
	{
////////////////////////////////////////////////////////////////////////////////
  		strdel(tekst_global, 0, 2048);
		format(tekst_global, sizeof(tekst_global), "%s (%d)", ImieGracza2(i), i);
	    DaneGracza[i][gNICK] = CreateDynamic3DTextLabel(tekst_global,0xFFFFFFEE,0.0,0.0,0.13,20.0,i,INVALID_VEHICLE_ID, 1);
		DaneGracza[i][gOpisPostaci] = CreateDynamic3DTextLabel(" ",0xFFFFFFDD,0.0,0.0,-0.6,10.0,i,INVALID_VEHICLE_ID, 1);
////////////////////////////////////////////////////////////////////////////////
		KtoJestOnline[i] = -1;
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
		Wyscig[i] = TextDrawCreate(17.000000,177.000000," ");
		TextDrawAlignment(Wyscig[i],0);
		TextDrawBackgroundColor(Wyscig[i],0x000000ff);
		TextDrawFont(Wyscig[i],1);
		TextDrawLetterSize(Wyscig[i],0.200000,1.000000);
		TextDrawColor(Wyscig[i],0xffffffff);
		TextDrawSetProportional(Wyscig[i],1);
		TextDrawSetShadow(Wyscig[i],1);
////////////////////////////////////////////////////////////////////////////////
		TextDrawMainInfo[i] = TextDrawCreate(430.000000, 145.000000, "_");
        TextDrawBackgroundColor(TextDrawMainInfo[i], 255);
        TextDrawFont(TextDrawMainInfo[i], 1);
        TextDrawLetterSize(TextDrawMainInfo[i], 0.290000, 1.200000);
        TextDrawColor(TextDrawMainInfo[i], -1);
        TextDrawSetOutline(TextDrawMainInfo[i], 1);
        TextDrawSetProportional(TextDrawMainInfo[i], 1);
        TextDrawUseBox(TextDrawMainInfo[i], 1);
        TextDrawBoxColor(TextDrawMainInfo[i], 68);
        TextDrawTextSize(TextDrawMainInfo[i], 608.000000, 10.000000);
////////////////////////////////////////////////////////////////////////////////
		Tutorial[i] = TextDrawCreate(16.000000, 150.000000, "~n~");
		TextDrawAlignment(Tutorial[i], 1);
		TextDrawBackgroundColor(Tutorial[i], 150);
		TextDrawFont(Tutorial[i], 1);
		TextDrawLetterSize(Tutorial[i], 0.210000, 1.000000);
		TextDrawColor(Tutorial[i], -1);
		TextDrawSetOutline(Tutorial[i], 1);
		TextDrawSetProportional(Tutorial[i], 1);
		TextDrawSetShadow(Tutorial[i], 1);
		TextDrawUseBox(Tutorial[i], 1);
		TextDrawBoxColor(Tutorial[i], 100);
		TextDrawTextSize(Tutorial[i], 171.000000, 0);
////////////////////////////////////////////////////////////////////////////////
		Euro[i] = TextDrawCreate(549.333435, 21.585189, "~g~EUR~w~000000");
		TextDrawLetterSize(Euro[i], 0.298000, 1.691257);
		TextDrawAlignment(Euro[i], 1);
		TextDrawColor(Euro[i], -1);
		TextDrawSetShadow(Euro[i], 0);
		TextDrawSetOutline(Euro[i], 0);
		TextDrawBackgroundColor(Euro[i], 255);
		TextDrawFont(Euro[i], 3);
		TextDrawSetProportional(Euro[i], 1);
		TextDrawSetShadow(Euro[i], 0);
/////////////////////////////////////////////////////////////////////////////////
	    TextNaDrzwi[i] = TextDrawCreate(510.000000, 300.000000, "");//Drzwi
		TextDrawAlignment(TextNaDrzwi[i], 2);
		TextDrawBackgroundColor(TextNaDrzwi[i], 255);
		TextDrawFont(TextNaDrzwi[i], 1);
		TextDrawLetterSize(TextNaDrzwi[i], 0.339998, 1.099999);
		TextDrawColor(TextNaDrzwi[i], -1);
		TextDrawSetOutline(TextNaDrzwi[i], 1);
		TextDrawSetProportional(TextNaDrzwi[i], 1);
		TextDrawUseBox(TextNaDrzwi[i], 1);
		TextDrawBoxColor(TextNaDrzwi[i], 55);
		TextDrawTextSize(TextNaDrzwi[i], 93.000000, 191.000000);
////////////////////////////////////////////////////////////////////////////////
	    pomoc[i] = TextDrawCreate(553.000000, 100.000000, "");//Pomoc
		TextDrawAlignment(pomoc[i], 2);
		TextDrawBackgroundColor(pomoc[i], 255);
		TextDrawFont(pomoc[i], 1);
		TextDrawLetterSize(pomoc[i], 0.209998, 1.099999);
		TextDrawColor(pomoc[i], -1);
		TextDrawSetOutline(pomoc[i], 1);
		TextDrawSetProportional(pomoc[i], 1);
		TextDrawUseBox(pomoc[i], 1);
		TextDrawBoxColor(pomoc[i], 55);
		TextDrawTextSize(pomoc[i], 93.000000, 121.000000);
////////////////////////////////////////////////////////////////////////////////
		TextNaDrzwi2[i] = TextDrawCreate(510.000000, 200.000000, "");//Telefon
		TextDrawAlignment(TextNaDrzwi2[i], 2);
		TextDrawBackgroundColor(TextNaDrzwi2[i], 255);
		TextDrawFont(TextNaDrzwi2[i], 1);
		TextDrawLetterSize(TextNaDrzwi2[i], 0.339998, 1.099999);
		TextDrawColor(TextNaDrzwi2[i], -1);
		TextDrawSetOutline(TextNaDrzwi2[i], 1);
		TextDrawSetProportional(TextNaDrzwi2[i], 1);
		TextDrawUseBox(TextNaDrzwi2[i], 1);
		TextDrawBoxColor(TextNaDrzwi2[i], 55);
		TextDrawTextSize(TextNaDrzwi2[i], 93.000000, 191.000000);
////////////////////////////////////////////////////////////////////////////////
		TextNaDrzwi4[i] = TextDrawCreate(100.000000, 230.000000, "");//Sad
		TextDrawAlignment(TextNaDrzwi4[i], 2);
		TextDrawBackgroundColor(TextNaDrzwi4[i], 255);
		TextDrawFont(TextNaDrzwi4[i], 1);
		TextDrawLetterSize(TextNaDrzwi4[i], 0.282498, 1.086663);
		TextDrawColor(TextNaDrzwi4[i], -1);
		TextDrawSetOutline(TextNaDrzwi4[i], 1);
		TextDrawSetProportional(TextNaDrzwi4[i], 1);
		TextDrawTextSize(TextNaDrzwi4[i], 93.000000, 191.000000);
		/*
		Wyrównanie
		Kolor t³a
		Czcionka
		lettersize
		Kolor
		Ustaw Outline
		Ustaw proporcjonalne
		Rozmiar czcionki
		*/
////////////////////////////////////////////////////////////////////////////////
		TextNaDrzwi3[i] = TextDrawCreate(498.333129, 101.229660, "~g~+~w~ reputacja od Maddox Cashville");
		TextDrawLetterSize(TextNaDrzwi3[i], 0.161000, 0.981925);
		TextDrawAlignment(TextNaDrzwi3[i], 1);
		TextDrawColor(TextNaDrzwi3[i], -1);
		TextDrawSetShadow(TextNaDrzwi3[i], 0);
		TextDrawSetOutline(TextNaDrzwi3[i], 0);
		TextDrawBackgroundColor(TextNaDrzwi3[i], 255);
		TextDrawFont(TextNaDrzwi3[i], 1);
		TextDrawSetProportional(TextNaDrzwi3[i], 1);
		TextDrawSetShadow(TextNaDrzwi3[i], 0);
////////////////////////////////////////////////////////////////////////////////
		OBJ2[i] = TextDrawCreate(510.000000,200.000000,"");//200 - góra na minus, dó³ na plus. 510 - lewo na minus, prawo na plus. Metra¿
		TextDrawAlignment(OBJ2[i], 2);
		TextDrawBackgroundColor(OBJ2[i], 255);
		TextDrawFont(OBJ2[i], 1);
		TextDrawLetterSize(OBJ2[i], 0.339998, 1.099999);
		TextDrawColor(OBJ2[i], -1);
		TextDrawSetOutline(OBJ2[i], 1);
		TextDrawSetProportional(OBJ2[i], 1);
		TextDrawUseBox(OBJ2[i], 1);
		TextDrawBoxColor(OBJ2[i], 55);
		TextDrawTextSize(OBJ2[i], 93.000000, 191.000000);
/////////////////////////////////////PORADA/////////////////////////////////////
		Porada[i] = TextDrawCreate(510.000000, 200.000000, "");
		TextDrawAlignment(Porada[i], 2);
		TextDrawBackgroundColor(Porada[i], 255);
		TextDrawFont(Porada[i], 1);
		TextDrawLetterSize(Porada[i], 0.339998, 1.099999);
		TextDrawColor(Porada[i], -1);
		TextDrawSetOutline(Porada[i], 1);
		TextDrawSetProportional(Porada[i], 1);
		TextDrawUseBox(Porada[i], 1);
		TextDrawBoxColor(Porada[i], 55);
		TextDrawTextSize(Porada[i], 93.000000, 191.000000);
////////////////////////////////////////////////////////////////////////////////
	    Licznik[i] = TextDrawCreate(552.000000,146.000000," ");
		TextDrawUseBox(Licznik[i],1);
		TextDrawBoxColor(Licznik[i],0x00000043);
		TextDrawTextSize(Licznik[i],690.000000,124.000000);
		TextDrawAlignment(Licznik[i],2);
		TextDrawBackgroundColor(Licznik[i],0xFFFFFFFF);
		TextDrawFont(Licznik[i],1);
		TextDrawLetterSize(Licznik[i],0.190000,0.659998);
		TextDrawColor(Licznik[i],0x5BC73DFF);
		TextDrawSetProportional(Licznik[i],1);
		TextDrawSetShadow(Licznik[i],0);
////////////////////////////////////////////////////////////////////////////////
		tdmembers1[i] = TextDrawCreate(231.250000, 276.177673, "A-~n~B-~n~C-~n~D-");
		TextDrawLetterSize(tdmembers1[i], 0.279750, 0.747554);
		TextDrawAlignment(tdmembers1[i], 1);
		TextDrawColor(tdmembers1[i], -1);
		TextDrawSetShadow(tdmembers1[i], 0);
		TextDrawSetOutline(tdmembers1[i], 0);
		TextDrawBackgroundColor(tdmembers1[i], 255);
		TextDrawFont(tdmembers1[i], 1);
		TextDrawSetProportional(tdmembers1[i], 1);
		TextDrawSetShadow(tdmembers1[i], 0);

		tdmembers2[i] = TextDrawCreate(231.000000, 303.866638, "E-~n~F-~n~G-~n~H-");
		TextDrawLetterSize(tdmembers2[i], 0.279750, 0.747554);
		TextDrawAlignment(tdmembers2[i], 1);
		TextDrawColor(tdmembers2[i], -1);
		TextDrawSetShadow(tdmembers2[i], 0);
		TextDrawSetOutline(tdmembers2[i], 0);
		TextDrawBackgroundColor(tdmembers2[i], 255);
		TextDrawFont(tdmembers2[i], 1);
		TextDrawSetProportional(tdmembers2[i], 1);
		TextDrawSetShadow(tdmembers2[i], 0);
		
		tdmembers3[i] = TextDrawCreate(231.000000, 331.244110, "I-~n~J-~n~K-~n~L-");
		TextDrawLetterSize(tdmembers3[i], 0.279750, 0.747554);
		TextDrawAlignment(tdmembers3[i], 1);
		TextDrawColor(tdmembers3[i], -1);
		TextDrawSetShadow(tdmembers3[i], 0);
		TextDrawSetOutline(tdmembers3[i], 0);
		TextDrawBackgroundColor(tdmembers3[i], 255);
		TextDrawFont(tdmembers3[i], 1);
		TextDrawSetProportional(tdmembers3[i], 1);
		TextDrawSetShadow(tdmembers3[i], 0);

		tdmembers4[i] = TextDrawCreate(230.500000, 357.688446, "M-~n~N-~n~O-~n~P-");
		TextDrawLetterSize(tdmembers4[i], 0.279750, 0.747554);
		TextDrawAlignment(tdmembers4[i], 1);
		TextDrawColor(tdmembers4[i], -1);
		TextDrawSetShadow(tdmembers4[i], 0);
		TextDrawSetOutline(tdmembers4[i], 0);
		TextDrawBackgroundColor(tdmembers4[i], 255);
		TextDrawFont(tdmembers4[i], 1);
		TextDrawSetProportional(tdmembers4[i], 1);
		TextDrawSetShadow(tdmembers4[i], 0);

		tdmembers5[i] = TextDrawCreate(230.500000, 384.755035, "R-~n~S-~n~T-");
		TextDrawLetterSize(tdmembers5[i], 0.279750, 0.747554);
		TextDrawAlignment(tdmembers5[i], 1);
		TextDrawColor(tdmembers5[i], -1);
		TextDrawSetShadow(tdmembers5[i], 0);
		TextDrawSetOutline(tdmembers5[i], 0);
		TextDrawBackgroundColor(tdmembers5[i], 255);
		TextDrawFont(tdmembers5[i], 1);
		TextDrawSetProportional(tdmembers5[i], 1);
		TextDrawSetShadow(tdmembers5[i], 0);

////////////////////////////////////////////////////////////////////////////////
		OBJ[i] = TextDrawCreate(350.0,300.0," ");
		TextDrawAlignment(OBJ[i],2);
		TextDrawBackgroundColor(OBJ[i],0x000000ff);
		TextDrawLetterSize(OBJ[i],0.344444,1.100000);
		TextDrawColor(OBJ[i],0xffffffff);
		TextDrawSetProportional(OBJ[i],1);
		TextDrawSetShadow(OBJ[i],1);
////////////////////////////////////////////////////////////////////////////////
		Pomiar[i] = TextDrawCreate(544.250000, 316.467376, "~b~Pomiar: ~w~210 km/h~n~~b~Marka:~w~ Sultan~n~~n~~b~Rejestracja:~w~ N/A");
		TextDrawLetterSize(Pomiar[i], 0.200000, 1.000000);
		TextDrawAlignment(Pomiar[i], 1);
		TextDrawColor(Pomiar[i], -1);
		TextDrawSetShadow(Pomiar[i], 0);
		TextDrawSetOutline(Pomiar[i], 0);
		TextDrawBackgroundColor(Pomiar[i], 255);
		TextDrawFont(Pomiar[i], 1);
		TextDrawSetProportional(Pomiar[i], 1);
		TextDrawSetShadow(Pomiar[i], 0);
////////////////////////////////////////////////////////////////////////////////
		/*net4game[i] = TextDrawCreate(5.000000, 425.000000, ""PROJEKT"");
		TextDrawBackgroundColor(net4game[i], 0x333333FF);
		TextDrawFont(net4game[i], 1);
		TextDrawLetterSize(net4game[i], 0.300000, 1.100000);
		TextDrawColor(net4game[i], -1);
		TextDrawSetOutline(net4game[i], 1);
		TextDrawSetProportional(net4game[i], 1);*/

		AFKTD[i] = TextDrawCreate(547.666503, 55.185279, "AFK");
		TextDrawLetterSize(AFKTD[i], 0.278001, 0.904148);
		TextDrawAlignment(AFKTD[i], 1);
		TextDrawColor(AFKTD[i], -65281);
		TextDrawSetShadow(AFKTD[i], 0);
		TextDrawSetOutline(AFKTD[i], 0);
		TextDrawBackgroundColor(AFKTD[i], 255);
		TextDrawFont(AFKTD[i], 1);
		TextDrawSetProportional(AFKTD[i], 1);
		TextDrawSetShadow(AFKTD[i], 0);
///////////////////////////////SRODEK TD////////////////////////////////////////
        SrodekTD[i] = TextDrawCreate(319.5, 231.0, "+1");
		TextDrawBackgroundColor(SrodekTD[i], 0x333333FF);
		TextDrawFont(SrodekTD[i], 3);
		TextDrawLetterSize(SrodekTD[i], 0.300000, 1.100000);
		TextDrawColor(SrodekTD[i], -1);
		TextDrawSetOutline(SrodekTD[i], 1);
		TextDrawSetProportional(SrodekTD[i], 1);
////////////////////////////////////////////////////////////////////////////////
		SrodekTD2[i] = TextDrawCreate(175.0, 231.0, "~r~Srzelaj rowniez w inne tarcze na strzelnicy!");
		TextDrawBackgroundColor(SrodekTD2[i], 0x333333FF);
		TextDrawFont(SrodekTD2[i], 3);
		TextDrawLetterSize(SrodekTD2[i], 0.300000, 1.100000);
		TextDrawColor(SrodekTD2[i], -1);
		TextDrawSetOutline(SrodekTD2[i], 1);
		TextDrawSetProportional(SrodekTD2[i], 1);
///////////////////////////////DUTY TD//////////////////////////////////////////
		/*Duty[i] = TextDrawCreate(498.0, 12.0, "Kings Undergroundsss");
		TextDrawBackgroundColor(Duty[i], 0x333333FF);
		TextDrawFont(Duty[i], 1);
		TextDrawLetterSize(Duty[i], 0.200000, 1.000000);
		TextDrawColor(Duty[i], -1);
		TextDrawSetOutline(Duty[i], 1);
		TextDrawSetProportional(Duty[i], 1);*/
		
		Duty[i] = TextDrawCreate(501.000183, 4.992617, "Maddox Cashville (California Casino)");
		TextDrawUseBox(Duty[i], 1);
		TextDrawBoxColor(Duty[i], 0x00000033);
		TextDrawLetterSize(Duty[i], 0.178663, 1.114662);
		TextDrawTextSize(Duty[i], 638.000000, 0.000000);
		TextDrawAlignment(Duty[i], 1);
		TextDrawColor(Duty[i], -1);
		TextDrawSetShadow(Duty[i], 0);
		TextDrawSetOutline(Duty[i], 0);
		TextDrawBackgroundColor(Duty[i], -1);
		TextDrawFont(Duty[i], 1);
		TextDrawSetProportional(Duty[i], 1);
		TextDrawSetShadow(Duty[i], 0);
//////////////////////////////VehicleInfo///////////////////////////////////////
        VehicleTD[i] = TextDrawCreate(545.0, 395.0, "~b~LCTRL~w~ by uruchomic silnik~n~~b~LPM~w~ by zapalic swiatla");
		TextDrawBackgroundColor(VehicleTD[i], 0x333333FF);
		TextDrawFont(VehicleTD[i], 1);
		TextDrawLetterSize(VehicleTD[i], 0.200000, 1.000000);
		TextDrawColor(VehicleTD[i], -1);
		TextDrawSetOutline(VehicleTD[i], 1);
		TextDrawSetProportional(VehicleTD[i], 1);
////////////////////////////////////////////////////////////////////////////////
		VehicleTDP[i] = TextDrawCreate(545.0, 365.0, "Predkosc: 0km/h~n~Paliwo: 0l");
        TextDrawBackgroundColor(VehicleTDP[i], 0x333333FF);
        TextDrawFont(VehicleTDP[i], 1);
        TextDrawLetterSize(VehicleTDP[i], 0.200000, 1.000000);
        TextDrawColor(VehicleTDP[i], -1);
        TextDrawSetOutline(VehicleTDP[i], 1);
        TextDrawSetProportional(VehicleTDP[i], 1);
/////////////////////////////AKCJA//////////////////////////////////////////////
        AkcjaTD[i] = TextDrawCreate(156.0, 425.0, "aktywuje namierzanie GPS");
		TextDrawBackgroundColor(AkcjaTD[i], 0x333333FF);
		TextDrawFont(AkcjaTD[i], 1);
		TextDrawLetterSize(AkcjaTD[i], 0.200000, 1.000000);
		TextDrawColor(AkcjaTD[i], -1);
		TextDrawSetOutline(AkcjaTD[i], 1);
		TextDrawSetProportional(AkcjaTD[i], 1);
////////////////////////////////////////////////////////////////////////////////
		PasekNitro[i] = CreateProgressBar(527.0,432.0,106.0,_, 0x00FF00FF, 100.0);
		PasekPaliwa[i] = CreateProgressBar(500.0,120.0,106.0,_, 0xFFFFFFFF00, 100.0);
		TabelaRyb[i] = CreateProgressBar(500.0, 135.0, 106.0, _, 0x0000FFFF, 100.0);
		KartyGracza111[i] = CreateProgressBar(256.0,115.0,60.0,7, 0x88b711FF, 100.0);
		KartyGracza222[i] = CreateProgressBar(361.0,248.0,60.0,7, 0x88b711FF, 100.0);
		KartyGracza333[i] = CreateProgressBar(131.0,148.0,60.0,7, 0x88b711FF, 100.0);
		KartyGracza444[i] = CreateProgressBar(474.0,183.0,60.0,7, 0x88b711FF, 100.0);
		KartyGracza555[i] = CreateProgressBar(424.0,113.0,60.0,7, 0x88b711FF, 100.0);
		KartyGracza666[i] = CreateProgressBar(31.0,248.0,60.0,7, 0x88b711FF, 100.0);

		Vegas_Player[i][1] = TextDrawCreate(432.500000, 153.416687, "Bank:~n~$0");
		TextDrawLetterSize(Vegas_Player[i][1], 0.306248, 1.039996);
		TextDrawTextSize(Vegas_Player[i][1], 36.875000, 65.916725);
		TextDrawAlignment(Vegas_Player[i][1], 2);
		TextDrawColor(Vegas_Player[i][1], -1);
		TextDrawUseBox(Vegas_Player[i][1], true);
		TextDrawBoxColor(Vegas_Player[i][1], 255);
		TextDrawSetShadow(Vegas_Player[i][1], 0);
		TextDrawSetOutline(Vegas_Player[i][1], 1);
		TextDrawBackgroundColor(Vegas_Player[i][1], 51);
		TextDrawFont(Vegas_Player[i][1], 1);
		TextDrawSetProportional(Vegas_Player[i][1], 1);

		Vegas_Player[i][0] = TextDrawCreate(431.875000, 180.833282, "Stawka:~n~$10");
		TextDrawLetterSize(Vegas_Player[i][0], 0.282498, 1.086663);
		TextDrawTextSize(Vegas_Player[i][0], 40.625000, 65.333320);
		TextDrawAlignment(Vegas_Player[i][0], 2);
		TextDrawColor(Vegas_Player[i][0], -1);
		TextDrawUseBox(Vegas_Player[i][0], true);
		TextDrawBoxColor(Vegas_Player[i][0], 255);
		TextDrawSetShadow(Vegas_Player[i][0], 0);
		TextDrawSetOutline(Vegas_Player[i][0], 1);
		TextDrawBackgroundColor(Vegas_Player[i][0], 51);
		TextDrawFont(Vegas_Player[i][0], 1);
		TextDrawSetProportional(Vegas_Player[i][0], 1);

		Vegas_Player[i][2] = TextDrawCreate(165.000000, 256.083343, "Wygrales: $0");
		TextDrawLetterSize(Vegas_Player[i][2], 0.549998, 1.681666);
		TextDrawAlignment(Vegas_Player[i][2], 1);
		TextDrawColor(Vegas_Player[i][2], 8388863);
		TextDrawSetShadow(Vegas_Player[i][2], 0);
		TextDrawSetOutline(Vegas_Player[i][2], 1);
		TextDrawBackgroundColor(Vegas_Player[i][2], 51);
		TextDrawFont(Vegas_Player[i][2], 3);
		TextDrawSetProportional(Vegas_Player[i][2], 1);
	}
}

public OnGameModeExit()
{
    ForeachEx(playerid, MAX_PLAYERS)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(zalogowany[playerid] == true)
			{
			    SetPVarInt(playerid, "laser", 0);
			    RemovePlayerAttachedObject(playerid, 0);//lasery
				RemovePlayerAttachedObject(playerid, 8);//kask /pasy
				RemovePlayerAttachedObject(playerid, 8);//kask /pasy
				if(DaneGracza[playerid][gSluzba] != 0)
				{
					ZapiszDuty(DaneGracza[playerid][gSluzba], playerid, DutyNR[playerid]);
				}
			}
		}
	}
	if(SerwerPoboczny == 0)
	{
		new str[124];
		strdel(str, 0, 124);
		format(str, sizeof(str), "UPDATE `jochym_postacie` SET `ONLINE` = '0' WHERE `ONLINE` = '%d'", 1);
		mysql_query(str);
		strdel(str, 0, 124);
		format(str, sizeof(str), "UPDATE `ips_core_members` SET `online` = '0' WHERE `online` = '%d'", 1);
		mysql_query(str);
	}
	FadeExit();
	KillTimer(AFKTimer);
	mysql_close();
	printf("Poprawnie zakoñczono pracê skryptu "VER".");
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	new debugmode[512];
	format(debugmode, sizeof(debugmode), "%s (%d) Pocz¹tek OnPlayerRequestClass BW: %d", ZmianaNicku(playerid), playerid, DaneGracza[playerid][gBW]);
	Debug(1, debugmode);
    if(GetPVarInt(playerid, "OnPlayerSpawnBlock") == 1)
	{
	    return 0;
	}
	if(GetPVarInt(playerid, "PobranoModele") == 0)
	{
		return 0;
	}
	format(debugmode, sizeof(debugmode), "%s (%d) OnPlayerRequestClass po zabezpieczeniu BW: %d", ZmianaNicku(playerid), playerid, DaneGracza[playerid][gBW]);
	Debug(1, debugmode);
	TextDrawHideForPlayer(playerid, LadowanieModeli);
    if (!GetPVarInt(playerid, "color")) SetPVarInt(playerid, "color", 18643);
    SetPlayerWorldBounds(playerid, 20000.00, -20000.00, 20000.00, -20000.00);
    KameraLogowania(playerid);
	ResetPlayerWeapons(playerid);
	if(IsPlayerNPC(playerid))
	{
		new npcname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, npcname, sizeof(npcname));
		if(!strcmp(npcname, "Carl_Johnson", true))
		{
			SetPlayerSkin(playerid, 0);
			PutPlayerInVehicle(playerid, CJVehicle, 0);
		}
		return 1;
	}
	format(debugmode, sizeof(debugmode), "%s (%d) Koniec OnPlayerRequestClass BW: %d", ZmianaNicku(playerid), playerid, DaneGracza[playerid][gBW]);
	Debug(1, debugmode);
   	return 1;
}
stock GetPlayerSpeed(playerid)
{
    new Float:Coord[4];
    GetPlayerVelocity(playerid, Coord[0], Coord[1], Coord[2]);
    Coord[3] = floatsqroot(floatpower(floatabs(Coord[0]), 2.0) + floatpower(floatabs(Coord[1]), 2.0) + floatpower(floatabs(Coord[2]), 2.0)) * 213.3;
    return floatround(Coord[3]);
}

stock GetVehicleInfrontID (vehid)
{
    new Float: temp = 7.0;
    new j = 0;
    for (new i = 1; i <= MAX_VEHICLES; i++)
    {
        new Float: a, Float: x1, Float: y1, Float: z1, Float: x2, Float: y2, Float: z2;
        GetVehiclePos (vehid, x1, y1, z1);
        GetVehicleZAngle (vehid, a);
        if (i != vehid)
        {
            if (GetVehiclePos (i, x2, y2, z2))
            {
                new Float: distance = floatsqroot (floatpower ((x1 - x2), 2) + floatpower ((y1 - y2), 2) + floatpower ((z1 - z2), 2));
                GetVehicleZAngle (vehid, a);
 
                if (distance < 300.0)
                {
                    x1 = x1 + (distance * floatsin(-a, degrees));
                    y1 = y1 + (distance * floatcos(-a, degrees));
 
                    distance = floatsqroot ((floatpower ((x1 - x2), 2)) + (floatpower ((y1 - y2), 2)));
 
                    if (temp > distance)
                    {
                        temp = distance;
                        j = i;
                    }
                }
            }
        }
    }
    if (temp < 7.0) return j;
    return -1;
}

stock VisualAttachWeapon(playerid)
{
	if(zalogowany[playerid] == true)
	{
		if(GetPlayerWeapon(playerid) != 0)
		{
			RemovePlayerAttachedObject(playerid, 2);
		}
		new weaponid, ammos, testuje = 0;
		GetPlayerWeaponData(playerid, 1, weaponid, ammos);
		{
			if (weaponid == 5 && GetPlayerWeapon(playerid) != 5)
			{
				SetPlayerAttachedObject(playerid, 2, 336, 1,0.3, -0.15,-0.15,0,-85,0); // baseball g,d,p
				testuje++;
			}
			else if (weaponid == 3 && GetPlayerWeapon(playerid) != 3)
			{
				SetPlayerAttachedObject(playerid, 2, 334, 8, 0, -0.1, 0.05, 90, 80, 0); // palka pd g,d,p
				testuje++;
			}
			else if (weaponid == 7 && GetPlayerWeapon(playerid) != 7)
			{
				SetPlayerAttachedObject(playerid, 2, 338, 1, 0.3, -0.12,-0.15,0,-85,0);	// kij bilardowyee g,d,p
				testuje++;
			}
		}
		if(testuje == 0)
		{
			RemovePlayerAttachedObject(playerid, 1);
		}
		GetPlayerWeaponData(playerid, 2, weaponid, ammos);
		{
			if (weaponid == 22 && GetPlayerWeapon(playerid) != 22)
			{
				SetPlayerAttachedObject(playerid, 2, 346, 8, -0.05, -0.18,-0.1,-20,0,0);// glock g,t,p
				testuje++;
			}
			if (weaponid == 23 && GetPlayerWeapon(playerid) != 23)
			{
				SetPlayerAttachedObject(playerid, 2, 347, 8, -0.05, -0.18,-0.1,-20,0,0);// paralizator g,t,p
				testuje++;
			}
			if (weaponid == 24 && GetPlayerWeapon(playerid) != 24)
			{
				SetPlayerAttachedObject(playerid, 2, 348, 8, -0.05, -0.18,-0.1,-20,0,0);// deagle g,t,p
				testuje++;
			}
		}
		if(testuje == 0)
		{
			RemovePlayerAttachedObject(playerid, 2);
		}
		GetPlayerWeaponData(playerid, 3, weaponid, ammos);
		{
			if (weaponid == 25 && GetPlayerWeapon(playerid) != 25)
			{
				SetPlayerAttachedObject(playerid, 2, 349, 1, 0.3, -0.13, -0.07, 0, 210, 0);// shotgun g,d,p
				testuje++;
			}
		}
		if(testuje == 0)
		{
			RemovePlayerAttachedObject(playerid, 3);
		}
		GetPlayerWeaponData(playerid, 4, weaponid, ammos);
		{
			if (weaponid == 28 && GetPlayerWeapon(playerid) != 28)
			{
				SetPlayerAttachedObject(playerid, 2, 352, 7, 0.15, 0.1, -0.13  , 90, -80, 0);// uzi g,d,p
				testuje++;
			}
			if (weaponid == 29 && GetPlayerWeapon(playerid) != 29)
			{
				SetPlayerAttachedObject(playerid, 2, 353, 1, -0.1, -0.15,0,0,35,0);// mp5
				testuje++;
			}
			if (weaponid == 32 && GetPlayerWeapon(playerid) != 32)
			{
				SetPlayerAttachedObject(playerid, 2, 372, 7, 0.15, 0.1, -0.13  , 90, -70, 0);// tec g,d,p
				testuje++;
			}
		}
		if(testuje == 0)
		{
			RemovePlayerAttachedObject(playerid, 4);
		}
		GetPlayerWeaponData(playerid, 5, weaponid, ammos);
		{
			if (weaponid == 30 && GetPlayerWeapon(playerid) != 30)
			{
				SetPlayerAttachedObject(playerid, 2, 355, 1, -0.1, -0.15,0,0,35,0);// ak47
				testuje++;
			}
			if (weaponid == 31 && GetPlayerWeapon(playerid) != 31)
			{
				SetPlayerAttachedObject(playerid, 2, 356, 1, -0.1, -0.15,0,0,35,0);// m4a1
				testuje++;
			}
		}
		if(testuje == 0)
		{
			RemovePlayerAttachedObject(playerid, 5);
		}
		GetPlayerWeaponData(playerid, 6, weaponid, ammos);
		{
			if (weaponid == 34 && GetPlayerWeapon(playerid) != 34)
			{
				SetPlayerAttachedObject(playerid, 2, 358, 1, 0.3, -0.13, -0.07, 0, 210, 0);// sniperka g,d,p
				testuje++;
			}
		}
		if(testuje == 0)
		{
			RemovePlayerAttachedObject(playerid, 6);
		}
		if (GetPVarInt(playerid, "laser")) {
			RemovePlayerAttachedObject(playerid, 0);
			if ((IsPlayerInAnyVehicle(playerid)) || (IsPlayerInWater(playerid))) return 1;
			switch (GetPlayerWeapon(playerid)) 
			{
				case 23: 
				{
					if (IsPlayerAiming(playerid)) 
					{
						if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) 
						{
							SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // SP standing aiming
							0.108249, 0.030232, 0.118051, 1.468254, 350.512573, 364.284240);
						} 
						else 
						{
							SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // SP crouched aiming
							0.108249, 0.030232, 0.118051, 1.468254, 349.862579, 364.784240);
						}
					} 
					else 
					{
						if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) 
						{
								SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // SP standing not aiming
								0.078248, 0.027239, 0.113051, -11.131746, 350.602722, 362.384216);
						} 
						else 
						{
								SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // SP crouched not aiming
								0.078248, 0.027239, 0.113051, -11.131746, 350.602722, 362.384216);
						}       
					}       
				}
				case 27: 
				{
					if (IsPlayerAiming(playerid)) 
					{
						if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) 
						{
							SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // SPAS standing aiming
							0.588246, -0.022766, 0.138052, -11.531745, 347.712585, 352.784271);
						} 
						else 
						{
							SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // SPAS crouched aiming
							0.588246, -0.022766, 0.138052, 1.468254, 350.712585, 352.784271);
						}
					} 
					else
					{
						if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) 
						{
								SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // SPAS standing not aiming
								0.563249, -0.01976, 0.134051, -11.131746, 351.602722, 351.384216);
						} 
						else 
						{
								SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // SPAS crouched not aiming
								0.563249, -0.01976, 0.134051, -11.131746, 351.602722, 351.384216);
						}       
					}       
				}
				case 30: 
				{
					if (IsPlayerAiming(playerid)) 
					{
						if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) 
						{
							SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // AK standing aiming
							0.628249, -0.027766, 0.078052, -6.621746, 352.552642, 355.084289);
						} 
						else
						{
							SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // AK crouched aiming
							0.628249, -0.027766, 0.078052, -1.621746, 356.202667, 355.084289);
						}
					} 
					else
					{
						if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) {
								SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // AK standing not aiming
								0.663249, -0.02976, 0.080051, -11.131746, 358.302734, 353.384216);
						} 
						else
						{
								SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // AK crouched not aiming
								0.663249, -0.02976, 0.080051, -11.131746, 358.302734, 353.384216);
						}       
					}       
				}
				case 31: 
				{
					if (IsPlayerAiming(playerid)) 
					{
						if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) 
						{
							SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // M4 standing aiming
							0.528249, -0.020266, 0.068052, -6.621746, 352.552642, 355.084289);
						} 
						else 
						{
								SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // M4 crouched aiming
								0.528249, -0.020266, 0.068052, -1.621746, 356.202667, 355.084289);
						}
					} 
					else
					{
						if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) 
						{
								SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // M4 standing not aiming
								0.503249, -0.02376, 0.065051, -11.131746, 357.302734, 354.484222);
						} 
						else
						{
								SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // M4 crouched not aiming
								0.503249, -0.02376, 0.065051, -11.131746, 357.302734, 354.484222);
						}       
					}       
				}
				case 34: 
				{
					if (IsPlayerAiming(playerid)) {
						return 1;
					} 
					else
					{
						if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) {
							SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // Sniper standing not aiming
							0.658248, -0.03276, 0.133051, -11.631746, 355.302673, 353.584259);
						} else {
							SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // Sniper crouched not aiming
							0.658248, -0.03276, 0.133051, -11.631746, 355.302673, 353.584259);
						}	
					}	
				}
				case 29: 
				{
					if (IsPlayerAiming(playerid)) 
					{
						if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) {
								SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // MP5 standing aiming
								0.298249, -0.02776, 0.158052, -11.631746, 359.302673, 357.584259);
						} else {
								SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // MP5 crouched aiming
								0.298249, -0.02776, 0.158052, 8.368253, 358.302673, 352.584259);
						}
					} 
					else
					{
						if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) {
								SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // MP5 standing not aiming
								0.293249, -0.027759, 0.195051, -12.131746, 354.302734, 352.484222);
						} else {
								SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // MP5 crouched not aiming
								0.293249, -0.027759, 0.195051, -12.131746, 354.302734, 352.484222);
						}       
					}       
				}       
			}       
		}
	}
	return 1;
}

stock AntyAFK02(playerid)
{
	if(InactiveTime[playerid] < 5)
	{
		InactiveTime[playerid] = 0;
	}
	if(InactiveTime[playerid] >= 5)
	{			
		PlayerPaused[playerid] = false;
		InactiveTime[playerid] = 0;
		GraczWrocilZAFK(playerid);
		return 1;
	}
	return 1;
}

public OnPlayerUpdate(playerid)
{
	if(IsPlayerNPC(playerid)) return 1;
	
    if(IsPlayerConnected(playerid) && DaneGracza[playerid][gUID] != 0)
	{
	    if(zalogowany[playerid] == true)
	    {
			if(!GetPlayerVehicleID(playerid) && GetPlayerSpeed(playerid) > 18 && DaneGracza[playerid][gRUN] > (gettime()+CZAS_LETNI))
			{
				new keysa, uda, lra;
				GetPlayerKeys(playerid, keysa, uda, lra);
				if(!(keysa & KEY_WALK) || !(keysa & KEY_JUMP))
				{
					new rok, miesiac, dzien, godzina, minuta, sekunda, tekst[256];
					sekundytodata(DaneGracza[playerid][gRUN], rok, miesiac, dzien, godzina, minuta, sekunda);
					format(tekst, sizeof(tekst), "Nie mozesz biegac majac aktywna blokade biegania.\nPozostalo: %02dd, %02dh, %02dm, %02ds.\nJeœli uwa¿asz, ¿e kara zosta³a nadana nies³usznie mo¿esz od niej apelowaæ na forum (www."PROJEKT").", dzien, godzina, minuta, sekunda);
					dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "• Blokada biegania:", tekst, "Zamknij", "");
					ClearAnimations(playerid, true);
					return 1;
				}
			}
	        new vehiid = GetPlayerVehicleID(playerid);
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				if(Rowery(vehiid))
				{
					new keysa, uda, lra;
					GetPlayerKeys(playerid, keysa, uda, lra);
					new teren = GraczNaTerenie(playerid);
					if(keysa & KEY_ACTION)
					{
						if(teren == 478 || teren == 479 || teren == 516 || teren == 515)
						{
							//Mo¿e skakac na rowerku
						}
						else
						{
							GameTextForPlayer(playerid, "~r~Nie mozesz skakac na rowerze!", 3000, 5);
							new Float:X, Float:Y, Float: Z;
							GetPlayerPos(playerid, X, Y, Z);
							Teleportuj(playerid, X, Y, Z);
							return 1;
						}
					}
				}
			}
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
			    if(!Wlascicielpojazdu(vehiid, playerid))
				{
				    GameTextForPlayer(playerid, "~r~Nie posiadasz uprawnien do prowadzenia tego pojazdu!", 3000, 5);
				    RemovePlayerFromVehicle(playerid);
					RemovePlayerFromVehicle(playerid);
					Frezuj(playerid, 0);
					Frezuj(playerid, 1);
				    return 1;
				}
				if(BlokadaVEH(playerid))
				{
					new rok, miesiac, dzien, godzina, minuta, sekunda, tekst[256];
					sekundytodata(DaneGracza[playerid][gVEH], rok, miesiac, dzien, godzina, minuta, sekunda);
					format(tekst, sizeof(tekst), "Nie mo¿esz prowadziæ pojazdów maj¹c aktywn¹ blokadê prowadzenia pojazdów.\nPozostalo: %02dd, %02dh, %02dm, %02ds.\nJeœli uwa¿asz, ¿e kara zosta³a nadana nies³usznie mo¿esz od niej apelowaæ na forum (www."PROJEKT").", dzien, godzina, minuta, sekunda);
					dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "• Blokada biegania:", tekst, "Zamknij", "");
					RemovePlayerFromVehicle(playerid);
					Frezuj(playerid, 0);
					Frezuj(playerid, 1);
					return 1;
				}
			}
			if(GetPVarInt(playerid, "Suszarka") == 1)
			{
				new keys, keyud, keylf;
			    GetPlayerKeys(playerid, keys, keyud, keylf);
			    if(keys & KEY_SPRINT)
				{
				    if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_POLICYJNA)
					{
					    new weaponid = GetPlayerWeapon(playerid);
					    if(weaponid == 43 && !IsPlayerInAnyVehicle(playerid) || IsPlayerInAnyVehicle(playerid))
					    {
						    new id;
						    id = GetPlayerCameraTargetVehicle(playerid);
					        new vehc1 = SprawdzCarUID(id);
							strdel(tekst_global, 0, 2048);
						    format(tekst_global, sizeof(tekst_global), "~b~Pomiar: ~w~%d km/h~n~~b~Marka:~w~ %s~n~~n~Rejestracja:~w~ %s",
							PredkoscPojazdu(id), GetVehicleModelName(PojazdInfo[vehc1][pModel]), PojazdInfo[vehc1][pTablice]);
							TextDrawSetString(Pomiar[playerid], tekst_global);
							TextDrawShowForPlayer(playerid, Pomiar[playerid]);
							SetTimerEx("NapisUsunsV",15000,0,"d",playerid);
						}
					}
			    }
			}
		    new Float:nHP, Float:nVHP;
			GetPlayerHealth(playerid, nHP);
			GetPlayerHealth(playerid, dHP[playerid]);
			if(DaneGracza[playerid][gZDROWIE] != dHP[playerid] && DaneGracza[playerid][gBW] == 0 && GetPVarInt(playerid, "AdmRepair") == 0)
			{
				if(DaneGracza[playerid][gZDROWIE] < dHP[playerid])
				{
					if(DaneGracza[playerid][gBW] == 0)
					{
						Uderzony(playerid, 0xFF0000AA);
					}
					SetPlayerHealth(playerid, DaneGracza[playerid][gZDROWIE]);
					GetPlayerHealth(playerid, dHP[playerid]);
				}
				else
				{
					SetPlayerHealth(playerid, DaneGracza[playerid][gZDROWIE]);
					GetPlayerHealth(playerid, dHP[playerid]);
				}
			}
			if(DaneGracza[playerid][gWypozyczonyPojazdCZAS] > gettime()+CZAS_LETNI)
			{
				new uidpojazd = DaneGracza[playerid][gWypozyczonyPojazdUID];
				if(PojazdInfo[uidpojazd][pSpawn] == 0)
				{
					DaneGracza[playerid][gWypozyczonyPojazdUID] = 0;
					DaneGracza[playerid][gWypozyczonyPojazdCZAS] = 0;
				}
			}
			if(GetPVarInt(playerid, "SpecujeGracza") != 0)
			{
				new keys, ud, lr;
				GetPlayerKeys( playerid, keys, ud, lr );
				if(keys & KEY_FIRE)
				{
					SetPVarInt(playerid, "SpecujeIDGracza", GetPVarInt(playerid, "SpecujeIDGracza")-1);
					new SpecujeID = GetPVarInt(playerid, "SpecujeIDGracza");
					new g, m, s;
					przelicznikonline(SpecujeID, g, m, s);
					new msg[254];
					format(msg,254,"~y~Specujesz %s (%d) %s~n~~n~~w~Godzin online: ~b~%d~w~h ~b~%d~w~min ~b~%d~w~sec~w~~n~HP: ~b~%0.1f%~w~~n~Gotowka: ~g~$~b~%d~w~~n~Stan konta: ~g~$~b~%d~w~~n~~n~~r~<~w~ LPM - PPM ~r~>.",ZmianaNicku(SpecujeID), SpecujeID, DaneGracza[SpecujeID][nickOOC], g,m,s, DaneGracza[SpecujeID][gZDROWIE], DaneGracza[SpecujeID][gPORTFEL], DaneGracza[SpecujeID][gSTAN_KONTA]);
					TextDrawSetString(Tutorial[playerid], msg);
					TextDrawShowForPlayer(playerid, Tutorial[playerid]);
					SetPlayerInterior(playerid, GetPlayerInterior(SpecujeID));
					SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(SpecujeID));
					SetPVarInt(playerid, "Teleportacja", 1);
					if(GetPlayerVehicleID(SpecujeID) != 0)
					{
						TogglePlayerSpectating(playerid, 1);
						PlayerSpectateVehicle(playerid, GetPlayerVehicleID(SpecujeID));
					}
					else
					{
						TogglePlayerSpectating(playerid, 1);
						PlayerSpectatePlayer(playerid, SpecujeID);
					}
					SetPVarInt(playerid, "Teleportacja", 0);
				}
				if(keys & KEY_HANDBRAKE)
				{
					SetPVarInt(playerid, "SpecujeIDGracza", GetPVarInt(playerid, "SpecujeIDGracza")+1);
					new SpecujeID = GetPVarInt(playerid, "SpecujeIDGracza");
					new g, m, s;
					przelicznikonline(SpecujeID, g, m, s);
					new msg[254];
					format(msg,254,"~y~Specujesz %s (%d) %s~n~~n~~w~Godzin online: ~b~%d~w~h ~b~%d~w~min ~b~%d~w~sec~w~~n~HP: ~b~%0.1f%~w~~n~Gotowka: ~g~$~b~%d~w~~n~Stan konta: ~g~$~b~%d~w~~n~~n~~r~<~w~ LPM - PPM ~r~>.",ZmianaNicku(SpecujeID), SpecujeID, DaneGracza[SpecujeID][nickOOC], g,m,s, DaneGracza[SpecujeID][gZDROWIE], DaneGracza[SpecujeID][gPORTFEL], DaneGracza[SpecujeID][gSTAN_KONTA]);
					TextDrawSetString(Tutorial[playerid], msg);
					TextDrawShowForPlayer(playerid, Tutorial[playerid]);
					SetPlayerInterior(playerid, GetPlayerInterior(SpecujeID));
					SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(SpecujeID));
					SetPVarInt(playerid, "Teleportacja", 1);
					if(GetPlayerVehicleID(SpecujeID) != 0)
					{
						TogglePlayerSpectating(playerid, 1);
						PlayerSpectateVehicle(playerid, GetPlayerVehicleID(SpecujeID));
					}
					else
					{
						TogglePlayerSpectating(playerid, 1);
						PlayerSpectatePlayer(playerid, SpecujeID);
					}
					SetPVarInt(playerid, "Teleportacja", 0);
				}
			}
			if(!IsPlayerInAnyVehicle(playerid) || GetPlayerState(playerid) != PLAYER_STATE_PASSENGER)
			{
			    if(GetPVarInt(playerid, "idobiktu") != 0 && GetPVarInt(playerid, "Drabina") == 0)
				{
					new id = GetPVarInt(playerid, "idobiktu");
					static Float:xp[7],tekst_global_big[500];
					GetDynamicObjectPos( ObiektInfo[id][objSAMP], xp[0], xp[1], xp[2]);
					GetDynamicObjectRot( ObiektInfo[id][objSAMP], xp[4], xp[5], xp[6]);
					format(tekst_global_big, sizeof(tekst_global_big), "~w~Obiekt: ~r~%d:%d  ~w~Model: ~y~%d  ~w~Owner: ~p~%d~n~~n~~r~Pozycja: ~w~%0.2f, %0.2f, %0.2f~n~~r~Rotacja:~w~ %0.2f, %0.2f, %0.2f~n~Brama: ~y~%d (%d : %d)  ~w~Sparowany:~y~ %d",
					ObiektInfo[id][objvWorld], id,ObiektInfo[id][objModel],ObiektInfo[id][objOwnerDz], xp[0], xp[1], xp[2], xp[4], xp[5], xp[6], ObiektInfo[id][objBrama], ObiektInfo[id][objTypOwneraBramy], ObiektInfo[id][objOwnerBrama], ObiektInfo[id][objSprarowanyUID]);
					TextDrawSetString(OBJ[playerid], tekst_global_big);
					TextDrawShowForPlayer(playerid, OBJ[playerid]);
				}
				if( GetPVarInt( playerid, "inedit" ) != 0 )
				{
					if(DaneGracza[playerid][gEdytor] == 1)
					{
						if(edycjaobiektow[playerid] == 1)
						{
							new keys, ud, lr,
								Float:PRECISE,
								typ = 0,
								id = GetPVarInt(playerid, "idobiktu");
							GetPlayerKeys( playerid, keys, ud, lr );

							if( !ud && !lr ) return 1;
							if( keys & 32 )	typ = 1;
							if(typ == 1)
							{
								PRECISE = 1.00;
								if( keys & KEY_WALK )   PRECISE = 0.01;
							}
							else
							{
								PRECISE = 0.10;
								if( keys & KEY_WALK )   PRECISE = 0.01;
								if( keys & KEY_SPRINT ) PRECISE = 2.00;
							}
							if(typ == 0)
							{
								if(ud < 0)//W
								{
									SetDynamicObjectPos(ObiektInfo[id][objSAMP], ObiektInfo[id][objPozX],ObiektInfo[id][objPozY] + PRECISE, ObiektInfo[id][objPozZ]);
								}
								if(ud > 0)//S
								{
									SetDynamicObjectPos(ObiektInfo[id][objSAMP], ObiektInfo[id][objPozX],ObiektInfo[id][objPozY] - PRECISE, ObiektInfo[id][objPozZ]);
								}
								if(lr < 0)//A
								{
									SetDynamicObjectPos(ObiektInfo[id][objSAMP], ObiektInfo[id][objPozX] - PRECISE,ObiektInfo[id][objPozY], ObiektInfo[id][objPozZ]);
								}
								if(lr > 0)//D
								{
									SetDynamicObjectPos(ObiektInfo[id][objSAMP], ObiektInfo[id][objPozX] + PRECISE,ObiektInfo[id][objPozY], ObiektInfo[id][objPozZ]);
								}
							}
							if(typ == 1)
							{
								if(ud < 0)
								{
									PRECISE = 0.10;
									if( keys & KEY_WALK )   PRECISE = 0.01;
									if( keys & KEY_SPRINT ) PRECISE = 1.00;
									SetDynamicObjectPos(ObiektInfo[id][objSAMP], ObiektInfo[id][objPozX],ObiektInfo[id][objPozY], ObiektInfo[id][objPozZ] + PRECISE);
								}
								if(ud > 0)
								{
									PRECISE = 0.10;
									if( keys & KEY_WALK )   PRECISE = 0.01;
									if( keys & KEY_SPRINT ) PRECISE = 1.00;
									SetDynamicObjectPos(ObiektInfo[id][objSAMP], ObiektInfo[id][objPozX],ObiektInfo[id][objPozY], ObiektInfo[id][objPozZ] - PRECISE);
								}
								if(lr < 0)
								{
									if( keys & KEY_SPRINT ) PRECISE = 30.00;
									SetDynamicObjectRot(ObiektInfo[id][objSAMP], ObiektInfo[id][objRotX],ObiektInfo[id][objRotY], ObiektInfo[id][objRotZ] - PRECISE);
								}
								if(lr > 0)
								{
									if( keys & KEY_SPRINT ) PRECISE = 30.00;
									SetDynamicObjectRot(ObiektInfo[id][objSAMP], ObiektInfo[id][objRotX],ObiektInfo[id][objRotY], ObiektInfo[id][objRotZ] + PRECISE);
								}
							}
							GetDynamicObjectPos( ObiektInfo[ id ][ objSAMP ], ObiektInfo[ id ][ objPozX ],ObiektInfo[ id ][ objPozY], ObiektInfo[ id ][ objPozZ ] );
							GetDynamicObjectRot( ObiektInfo[ id ][ objSAMP ], ObiektInfo[ id ][ objRotX ],ObiektInfo[ id ][ objRotY], ObiektInfo[ id ][ objRotZ ] );
						}
					}
				}
			}
			if(!IsPlayerInAnyVehicle(playerid) || GetPlayerState(playerid) != PLAYER_STATE_PASSENGER)
			{
				if(GetPVarInt(playerid, "WybieraUbranie") == 1)
				{
					new Keys,ud,lr;
					GetPlayerKeys(playerid,Keys,ud,lr);
					if(lr > 0)
					{
						if(DaneGracza[playerid][gPLEC] == 0 && SkinIDM[playerid] != LIMIT_UBRAN_SKLEP_M-1)
						{
							SkinIDM[playerid]++;
							SetPlayerSkin(playerid, SkinPlayerM[SkinIDM[playerid]][id4]);
						}
						if(DaneGracza[playerid][gPLEC] == 1 && SkinIDW[playerid] != LIMIT_UBRAN_SKLEP_W-1)
						{
							SkinIDW[playerid]++;
							SetPlayerSkin(playerid, SkinPlayerW[SkinIDW[playerid]][id4]);
						}
					}
					else if(lr < 0)
					{
						if(DaneGracza[playerid][gPLEC] == 0 && SkinIDM[playerid] > 0)
						{
							SkinIDM[playerid]--;
							SetPlayerSkin(playerid, SkinPlayerM[SkinIDM[playerid]][id4]);
						}
						if(DaneGracza[playerid][gPLEC] == 1 && SkinIDW[playerid] > 0)
						{
							SkinIDW[playerid]--;
							SetPlayerSkin(playerid, SkinPlayerW[SkinIDW[playerid]][id4]);
						}
					}
					if(DaneGracza[playerid][gPLEC]==0)
					{
						strdel(tekst_global, 0, 2048);
						format(tekst_global, sizeof(tekst_global), "~r~~h~Zakup ubrania~n~~g~~h~Cena:~w~ $%d  ~g~~h~Ubranie:~w~ %d~n~W celu zakupu nacisnij ~y~~k~~VEHICLE_ENTER_EXIT~~w~.~n~W celu anulowania zakupu nacisnij ~y~~k~~PED_FIREWEAPON~~w~.",SkinPlayerM[SkinIDM[playerid]][cena4],SkinPlayerM[SkinIDM[playerid]][id4]);
						TextDrawSetString(OBJ[playerid], tekst_global);
						TextDrawShowForPlayer(playerid, OBJ[playerid]);
					}
					if(DaneGracza[playerid][gPLEC]==1)
					{
						strdel(tekst_global, 0, 2048);
						format(tekst_global, sizeof(tekst_global), "~r~~h~Zakup ubrania~n~~g~~h~Cena:~w~ $%d  ~g~~h~Ubranie:~w~ %d~n~W celu zakupu nacisnij ~y~~k~~VEHICLE_ENTER_EXIT~~w~.~n~W celu anulowania zakupu nacisnij ~y~~k~~PED_FIREWEAPON~~w~.",SkinPlayerW[SkinIDW[playerid]][cena4],SkinPlayerW[SkinIDW[playerid]][id4]);
						TextDrawSetString(OBJ[playerid], tekst_global);
						TextDrawShowForPlayer(playerid, OBJ[playerid]);
					}
				}
			}
			if(IsPlayerInAnyVehicle(playerid))
			{
				ForeachEx(k, MAX_KOLCZATEK)
				{
					if(KolczatkaInfo[k][kUzyta] == 1)
					{
						new a,b,c,d;
						GetVehicleDamageStatus(GetPlayerVehicleID(playerid), a, b, c, d);
						if(d != 15)
						{
							new Float: x, Float: y;
							x = KolczatkaInfo[k][kPozX];
							y = KolczatkaInfo[k][kPozY];
							for(new Float: xi; xi < 5.2; xi+=0.1)
							{
								GetXYInFrontOfPoint(x, y, KolczatkaInfo[k][kRotZ], xi);
								if(IsPlayerInRangeOfPoint(playerid, 1, x, y, KolczatkaInfo[k][kPozZ]))
								{
									new panels, doors, lights, tires;
									tires = encode_tires(1, 1, 1, 1);
									UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), panels, doors, lights, tires);
									break;
								}
								x = KolczatkaInfo[k][kPozX];
								y = KolczatkaInfo[k][kPozY];
								GetXYInFrontOfPoint(x, y, KolczatkaInfo[k][kRotZ] - 180, xi);
								if(IsPlayerInRangeOfPoint(playerid, 1, x, y, KolczatkaInfo[k][kPozZ]))
								{
									new panels, doors, lights, tires;
									tires = encode_tires(1, 1, 1, 1);
									UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), panels, doors, lights, tires);
									break;
								}
								x = KolczatkaInfo[k][kPozX];
								y = KolczatkaInfo[k][kPozY];
							}
						}
					}
				}
			}
			if(IsPlayerInAnyVehicle(playerid))
			{
				new Keyss,uds,lrs;
				GetPlayerKeys(playerid,Keyss,uds,lrs);
				if(Keyss == 2048 || Keyss == 264192)
				{
					new id = GetVehicleTrailer(GetPlayerVehicleID(playerid));
					if(id != 0)
					{
						if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
						{
							new id_p = SprawdzCarUID(id);
							DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
							GetVehiclePos(id, PojazdInfo[id_p][pOX], PojazdInfo[id_p][pOY], PojazdInfo[id_p][pOZ]);
							SetVehiclePos(id, PojazdInfo[id_p][pOX], PojazdInfo[id_p][pOY], PojazdInfo[id_p][pOZ]);
							SetTimerEx("HolowanyTimer", 2000, 0, "d", id_p);
						}
					}
				}
				new vehicle = GetPlayerVehicleID( playerid );
				if(IsPlayerInAnyVehicle(playerid) || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
				{
					Speedrower(playerid);
				}
				if(GetVehicleModel(vehicle) != 509 && GetVehicleModel(vehicle) != 481 && GetVehicleModel(vehicle) != 510)
				{
				    //new Float:nVHP;
					GetVehicleHealth( vehicle, nVHP );
					new uids = SprawdzCarUID(vehicle);
					if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
						if(Predkosc(playerid) > 10 && PojazdInfo[uids][pSilnik] == 0 && GetPVarInt(playerid, "silnikAC") == 0 && zalogowany[playerid] == true && !Rowery(vehicle) && GetPVarInt(playerid, "ZgasilSilnik") == 0)
						{
							SetVehicleVelocity(vehicle, 0.0, 0.0, 0.0);
							GameTextForPlayer(playerid, "~n~~r~Jazda z zgaszonym silnikiem!", 5000, 3);
						}
						new speed[124];
						if(PojazdInfo[uids][pModel] != 553 || PojazdInfo[uids][pModel] != 487 || PojazdInfo[uids][pModel] != 519 || PojazdInfo[uids][pModel] != 513 || PojazdInfo[uids][pModel] != 593 || PojazdInfo[uids][pModel] != 447)
						{
							if(Predkosc(playerid) >= 250 && !Samolot(vehicle))
							{
							    if((DaneGracza[playerid][gAdmGroup] == 4 || DaneGracza[playerid][gAdmGroup] == 7 || DaneGracza[playerid][gAdmGroup] == 14 || DaneGracza[playerid][gAdmGroup] == 8) && DutyAdmina[playerid] == 1)
							    {
							        //
							    }
							    else
							    {
									format(speed, sizeof(speed), ""PREFIXAC".AntyCheat: SpeedHack (%s, %dKM)", GetVehicleModelName(PojazdInfo[uids][pModel]), Predkosc(playerid));
									NadajKare(playerid,-1, 0, speed, -1);
								}
							}
						}
					}
					if(PojazdInfo[uids][pStan] <= 299 || nVHP <= 299)
				    {
				        nVHP = 300;
				        PojazdInfo[uids][pStan] = 300;
				        new vehid = GetPlayerVehicleID(playerid);
				        SetVehicleHealth(vehid, 300);
					}
					if( nVHP != PojazdInfo[uids][pStan] && ACOFF[uids] == 0)
					{
						if( nVHP < PojazdInfo[uids][pStan]+50 && ACOFF[uids] == 0)
						{
							ForeachEx(is, MAX_PLAYERS)
							{
								if(IsPlayerConnected(is))
								{
									if(zalogowany[is] == true)
									{
										if(PASY[is] == 1)
										{
											if(GetPlayerVehicleID(is) == PojazdInfo[uids][pID])
											{
												if(DaneGracza[is][gZDROWIE] - ((PojazdInfo[uids][pStan] - nVHP) / 14) >= 1)//Nowe BW w samochodzie
												{
													DaneGracza[is][gZDROWIE] -= ((PojazdInfo[uids][pStan] - nVHP) / 14);
													SetPVarInt(is, "Wypadek", 1);
													SetTimerEx("WypadekDel",2000,0,"d", is);
												}
												else
												{
													NoweBW(is, -1, 5, 49);
												}
												
											}
										}
										else
										{
											if(GetPlayerVehicleID(is) == PojazdInfo[uids][pID])
											{
												if(DaneGracza[is][gZDROWIE] - ((PojazdInfo[uids][pStan] - nVHP) / 10) >= 1)
												{
													DaneGracza[is][gZDROWIE] -= ((PojazdInfo[uids][pStan] - nVHP) / 10);
													SetPVarInt(is, "Wypadek", 1);
													SetTimerEx("WypadekDel",2000,0,"d", is);
												}
												else
												{
													NoweBW(is, -1, 5, 49);
												}
											}
										}
									}
								}
							}
							new logtekst[256];
							format(logtekst, sizeof(logtekst), "[CAR] [HP] [%s] [ID: %d UID: %d] uszkodzi³ pojazd %s (%d) z %f na %f.", ZmianaNicku(playerid), playerid, DaneGracza[playerid][gUID], GetVehicleModelName(PojazdInfo[uids][pModel]), PojazdInfo[uids][pUID], PojazdInfo[uids][pStan], nVHP);
							Transakcja(T_VSPAWN, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, logtekst, gettime()+KOREKTA_CZASOWA);
							format(logtekst, sizeof(logtekst), "[CAR] [HP] [%s] [ID: %d UID: %d] uszkodzi³ pojazd %s (%d) z %f na %f.", ZmianaNicku(playerid), playerid, DaneGracza[playerid][gUID], GetVehicleModelName(PojazdInfo[uids][pModel]), PojazdInfo[uids][pUID], PojazdInfo[uids][pStan], nVHP);
							TransakcjaVeh(T_OVEH, PojazdInfo[uids][pUID], PojazdInfo[uids][pID], DaneGracza[playerid][gUID], DaneGracza[playerid][gGUID], -1, -1, -1, -1, logtekst, gettime()+KOREKTA_CZASOWA);
							PojazdInfo[uids][pStan] = nVHP;
							PojazdInfo[uids][pTempomat] = (gettime()+CZAS_LETNI)+(30*60);
							ZapiszPojazd(uids, 1);
							if(PojazdInfo[uids][pStan] < 350 && PojazdInfo[uids][pSilnik] == 1)
							{
								//SetVehicleVelocity(vehicle, 0.0, 0.0, 0.0);
								PojazdInfo[uids][pSilnik] = 0;
								new eng, lights, alarm, drs, bonnet, boot, obj,bzstr[124];
								GetVehicleParamsEx(vehicle, eng, lights, alarm, drs, bonnet, boot, obj);
								SetVehicleParamsEx(vehicle, PojazdInfo[uids][pSilnik], lights, 0, drs, bonnet, boot, obj);
								format(bzstr, sizeof(bzstr), "**W pojezdzie %s zgas³ silnik, poniewa¿ jego uszkodzenia s¹ zbyt wielkie**", GetVehicleModelName(PojazdInfo[uids][pModel]));
								SendVehText(15.0, vehicle, bzstr, KOLOR_DO, KOLOR_DO, KOLOR_DO, KOLOR_DO, KOLOR_DO);
								KillTimer(PojazdInfo[uids][pTimer]);
								SetTimerEx("Reczny",5000,0,"d",vehicle,playerid);
							}
						}
						else
						{
							if(GetPlayerState(playerid)==PLAYER_STATE_DRIVER)
							{
								if(AntyCheatWizualizacja[playerid] == 0)//Dodaæ warunek dla administracji
								{
									if(DaneGracza[playerid][gAdmGroup] == 4 || DaneGracza[playerid][gAdmGroup] == 7|| DaneGracza[playerid][gAdmGroup] == 14 || DaneGracza[playerid][gAdmGroup] == 8 || DaneGracza[playerid][gGUID] == 3)
									{
										//
									}
									else
									{
										SetVehicleHealth(vehicle, PojazdInfo[uids][pStan]);
										NadajKare(playerid,-1, 2, "Anty Cheat System (Naprawa silnika pojazdu)", 30);
									}
								}
							}
						}
					}
				}
			}
			else
			{
				PASY[playerid] = 0;
			}
		}
		AntyAFK02(playerid);
		VisualAttachWeapon(playerid);
	}
	return 1;
}
stock CheckAccountExists(account[])
{
	new string[128];
	format(string, sizeof(string), "SELECT * FROM jochym_postacie WHERE name = '%s'", account);
	mysql_query(string);
	mysql_store_result();
	new value;
	value = mysql_num_rows();
	mysql_free_result();
	return value;
}
forward GetPlayerCountry(index, response_code, data[]);
public GetPlayerCountry(index, response_code, data[])
{
    new buffer[358];
	new str[230], city[3], pName[MAX_PLAYER_NAME];
	GetPlayerName(index, pName, sizeof(pName));
	format(buffer, sizeof(buffer), "%s", data);
	strmid(str, buffer, 4, strlen(buffer));
	strmid(city, str, strfind(str, ";", true) + 1, strfind(str, ";", true) + 3);
	SetPVarString(index, "PrefixCountry", city);
	return 1;
}
public OnPlayerConnect(playerid)
{
	SetPlayerWorldBounds(playerid, 20000.00, -20000.00, 20000.00, -20000.00);
    if(IsPlayerNPC(playerid)) return 1;
	
    //Kamera logowania
	new IP[30], str[300], pName[MAX_PLAYER_NAME];
    GetPlayerName(playerid, pName, sizeof(pName));
    GetPlayerIp(playerid, IP, sizeof(IP));
	
	if(DaneGracza[playerid][gLogin] == 0 || Relog[playerid] == 0)
	{
		format(str, sizeof(str),"api.ipinfodb.com/v3/ip-country/?key="APIKEY"&ip=%s", IP);
		HTTP(playerid, HTTP_GET, str, "", "GetPlayerCountry");
	}
	
	//new serial[64];
    //gpci(playerid, serial, sizeof(serial));
	//printf("%s (%d) serial (%s)",pName, playerid, serial);
	
	SetPVarInt(playerid, "TXDGRUP", 0);
    SetPlayerWorldBounds(playerid, 20000.00, -20000.00, 20000.00, -20000.00);
    EnablePlayerCameraTarget(playerid, 1);
    guyfps[playerid] = 0;
	aim[playerid] = 0;
	jongkok[playerid] = 0;
	swim[playerid] = 0;
    KameraLogowania(playerid);
    StopPlayerFade(playerid);
	SetPVarInt(playerid, "AntyBugArmour", 0);
	SetPVarInt(playerid, "DlugGracza", 0);
	SetPVarInt(playerid, "ZadluzeniePoTerminie", 0);
	SetPVarInt(playerid, "DlugID", 0);
	SetPVarInt(playerid, "SynchroPostaci", 0);
	SetPVarInt(playerid, "TXDGRUP", 0);
    SetPVarInt(playerid, "UdzialWRozprawie", 0);
    SetPVarInt(playerid, "AdmRepair", 0);
    SetPVarInt(playerid, "WZIALPACZKA", 0);
    SetPVarInt(playerid, "Incognito", 0);
    SetPVarInt(playerid, "blindfold", 0);
    SetPVarInt(playerid, "OKIENKOOPLATY", 0);
    SetPVarInt(playerid, "DrabinaUzyl", 0);
    SetPVarFloat(playerid, "DrabinaX", 0);
    SetPVarFloat(playerid, "DrabinaY", 0);
    SetPVarFloat(playerid, "DrabinaZ", 0);
    SetPVarFloat(playerid, "DrabinaA", 0);
    SetPVarFloat(playerid, "DrabinaX1", 0);
    SetPVarFloat(playerid, "DrabinaX2", 0);
    SetPVarFloat(playerid, "DrabinaX3", 0);
    SetPVarInt(playerid, "STRZAL", 0);
    SetPVarInt(playerid, "VPOMOC", 0);
    SetPVarInt(playerid, "Poziom", 0);
	SetPVarInt(playerid, "BotAkcja", 0);
	SetPVarInt(playerid, "ODLOZONYOBIEKT", 0);
	SetPVarInt(playerid, "Drabina", 0);
    SetPVarInt(playerid, "AntyVehicle", 0);
    SetPVarInt(playerid, "BW1", 0);
    DeletePVar( playerid, "BusKoszt" );
    DeletePVar( playerid, "BusCzas" );
    DeletePVar( playerid, "BusDo" );
    DeletePVar( playerid, "BusPrzystanek" );
    BUSS[playerid] = 0;
    AimbotWarnings[playerid] = 0;
    TextDrawHideForPlayer(playerid, CB);
    DeletePVar(playerid, "Object1"); DeletePVar(playerid, "Object2"); DeletePVar(playerid, "Object3"); DeletePVar(playerid, "Object4"); DeletePVar(playerid, "Object5"); DeletePVar(playerid, "Object6");
    if(IsValidDynamicObject(GetPVarInt(playerid, "Object1"))) DestroyDynamicObject(GetPVarInt(playerid, "Object1"));
    if(IsValidDynamicObject(GetPVarInt(playerid, "Object2"))) DestroyDynamicObject(GetPVarInt(playerid, "Object2"));
    if(IsValidDynamicObject(GetPVarInt(playerid, "Object3"))) DestroyDynamicObject(GetPVarInt(playerid, "Object3"));
    if(IsValidDynamicObject(GetPVarInt(playerid, "Object4"))) DestroyDynamicObject(GetPVarInt(playerid, "Object4"));
    if(IsValidDynamicObject(GetPVarInt(playerid, "Object5"))) DestroyDynamicObject(GetPVarInt(playerid, "Object5"));
    if(IsValidDynamicObject(GetPVarInt(playerid, "Object6"))) DestroyDynamicObject(GetPVarInt(playerid, "Object6"));
    if(GetPVarInt(playerid, "Object7") != 0)
    {
	    new id = GetPVarInt(playerid, "Object7");
	    new uid = GetPVarInt(playerid, "DrabinaUID");
	    if(GetPVarInt(playerid, "Object7") == id)
		{
		    UsunObiekt(id);
		    PrzedmiotInfo[uid][pUzywany] = 0;
		    ZapiszPrzedmiot(uid);
		    DeletePVar(playerid, "Object7");
            SetPVarInt(playerid, "Drabina", 0);
            DeletePVar(playerid, "DrabinaUID");
		}
    }
    DeletePVar(playerid, "BoomboxObject"); DeletePVar(playerid, "BoomboxURL");
    DeletePVar(playerid, "bposX"); DeletePVar(playerid, "bposY"); DeletePVar(playerid, "bposZ"); DeletePVar(playerid, "bboxareaid");
    DeletePVar(playerid, "bboxareaidv");
    if(IsValidDynamicObject(GetPVarInt(playerid, "BoomboxObject"))) DestroyDynamicObject(GetPVarInt(playerid, "BoomboxObject"));
    DeletePVar(playerid, "BoomboxObjectveh"); DeletePVar(playerid, "BoomboxURLveh");
    DeletePVar(playerid, "bposXveh"); DeletePVar(playerid, "bposYveh"); DeletePVar(playerid, "bposZveh"); DeletePVar(playerid, "bboxareaidveh");
    DeletePVar(playerid, "bboxareaidvveh");
    if(IsValidDynamicObject(GetPVarInt(playerid, "BoomboxObjectveh"))) DestroyDynamicObject(GetPVarInt(playerid, "BoomboxObjectveh"));
    PreloadAnimLib(playerid);
	dDialogid[playerid]=0;
	BW1[playerid] = 0;
	BW2[playerid] = -1;
	WybralMozliwoscPoker[playerid] = 0;
	GraWPokera[playerid] = 0;
	WpisalKase[playerid] = 0;
	BWwAucie[playerid] = 0;
    SetPVarInt(playerid, "C2", 0);
    SetPVarInt(playerid, "C3", 0);
	DzwonekDom[playerid]=0;
	DzwonekDom2[playerid]=0;
    SetPVarInt(playerid, "Namierzony", 0);
	UpdateDynamic3DTextLabelText(DaneGracza[playerid][gOpisPostaci], 0xAAAAFFFF, " ");
	OstrzezeniaAir[playerid] = 0;
	DaneGracza[playerid][gPokerZetony] = -1;
	GangZonePL[playerid] = false;
	WybralMozliwoscPoker[playerid] = 0;
	FadePlayerConnect(playerid);
    SetPlayerColor(playerid, CZARNY);
    ResetPlayerWeapons(playerid);
	DaneGracza[playerid][gKajdanki] = -1;
	TextDrawShowForPlayer(playerid, LosSantosFM);
	TextDrawShowForPlayer(playerid, Logo);
	TextDrawShowForPlayer(playerid, WersjaSkryptu);
    TextDrawShowForPlayer(playerid, Weazel);
	if(DaneGracza[playerid][gLogin] == 0 || Relog[playerid] == 0)
	{
		TextDrawShowForPlayer(playerid, LadowanieModeli);
	}
	//UsunieteObjekty(playerid);
	new go,
		mi,
	    se;
	gettime(go, mi, se);
	if(go == 1 || go == 2 || go == 3 || go == 4 || go == 5)
	{
		SetPlayerTime(playerid, go, 0);	
	}
	if(go == 6 || go == 7)
	{
		SetPlayerTime(playerid, 6, 0);
	}
	if(go == 8 || go == 9 || go == 10 || go == 11 || go == 12 || go == 13 || go == 14 || go == 15 || go == 16 || go == 17)
	{
		SetPlayerTime(playerid, go, 0);
	}
	if(go == 18 || go == 19)
	{
		SetPlayerTime(playerid, 20, 0);
	}
	if(go == 20 || go == 21)
	{
		SetPlayerTime(playerid, 21, 0);
	}
	if(go == 22 || go == 23 || go == 24 || go == 0)
	{
		SetPlayerTime(playerid, 24, 0);
	}
	if(GetPVarInt(playerid, "PobranoModele") == 1)
	{
		new sql[200];
		format(sql, sizeof(sql), "SELECT * FROM `jochym_postacie` WHERE `name` = '%s' LIMIT 1", ImieGracza(playerid));
		mysql_query(sql);
		mysql_store_result();
		if(BetaTesty == 0)
		{
			if(mysql_num_rows() != 0)
			{
				new sql1[200], team;
				format(sql1, sizeof(sql1), "SELECT `ID`, `GUID`, `AKTYWNE`, `is_team`, `Przelogowal` FROM `jochym_postacie` WHERE `name` = '%s' LIMIT 1", ImieGracza(playerid));
				mysql_query(sql1);
				mysql_store_result();
				mysql_fetch_row(sql1);
				sscanf(sql1, "p<|>dddd", DaneGracza[playerid][gUID], DaneGracza[playerid][gGUID], DaneGracza[playerid][gAKTYWNE], team, DaneGracza[playerid][gLogin]);
				if(DaneGracza[playerid][gAKTYWNE] == 1 && (DaneGracza[playerid][gAKTYWNE] < gettime()+CZAS_LETNI && DaneGracza[playerid][gAKTYWNE] != -1))
				{
					new str5[512];//Logowanie dla cz³onka ekipy
					format(str5, sizeof(str5), "{9DB6D3}Witaj na "PROJEKT", nowym innowacyjnym w pe³ni rozwijaj¹cym siê serwerze!\nOd 2016 roku pracowaliœmy nad stworzeniem miejsca dla graczy na serwerze oraz forum, od tamtego czasu..\n[...] zdo³aliœmy zakodowaæ o wiele wiêcej ni¿ konkurencja a to dopiero pocz¹tek naszej przygody!\n\n");
					format(str5, sizeof(str5), "%s\t{9DB6D3}Logujesz siê na postaæ: {FFFFFF}%s{9DB6D3}, która {63D075}istnieje w naszej bazie danych!{9DB6D3}\n\tZaloguj siê albo zmieñ nick by wejœæ na inn¹ postaæ.", str5, ImieGracza2(playerid));
					dShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Panel Logowania:", str5, "Zaloguj sie", "Lista");
					SetPlayerWorldBounds(playerid, 20000.00, -20000.00, 20000.00, -20000.00);
					KameraLogowania(playerid);
				}
				else
				{
					SendClientMessage(playerid, SZARY, "WejdŸ z poprawnym nickname postaci!");
					Kick(playerid);
					SetPlayerWorldBounds(playerid, 20000.00, -20000.00, 20000.00, -20000.00);
					KameraLogowania(playerid);
				}
			}
			else
			{
				DaneGracza[playerid][gLogin] = 1;
				ZapiszGracza(playerid);
				Relog[playerid] = 1;
				new sql1[250];
				new namei[100], team;
				new imien[50], nazwisko[50], tekst_global1[50];
				GetPlayerIp(playerid, IP, sizeof(IP));
				new found = 0;
				strdel(tekst_global, 0, 4048);
				format(tekst_global, sizeof(tekst_global), "UID\tImie i nazwisko\tCzas gry", tekst_global);
				ForeachEx(i, MAX_POSTACI)
				{
					new IPI[16], online;
					format(sql1, sizeof(sql1), "SELECT `IP`, `name`, `CZAS_ONLINE`, `is_team` FROM `jochym_postacie` WHERE `IP` = '%s' AND `ID` = '%d'", IP, i);
					mysql_query(sql1);
					mysql_store_result();
					mysql_fetch_row(sql1);
					sscanf(sql1, "p<|>s[16]s[100]dd", IPI, namei, online, team);
					sscanf(namei, "p<_>s[50]s[50]",imien,nazwisko);
					imien[0] = toupper(imien[0]);
					nazwisko[0] = toupper(nazwisko[0]);
					if(team == 1)
					{
						format(tekst_global1, sizeof(tekst_global1), "%s", imien);
					}
					if(team == 0 || team == 2 || team == 3)
					{	
						format(tekst_global1, sizeof(tekst_global1), "%s %s", imien,nazwisko);
					}
					if(!strcmp(IP, IPI, true))
					{
						new hours, minutes;
						hours 	= online / 3600;
						minutes = (online - (hours * 3600)) / 60;
						format(tekst_global, sizeof(tekst_global), "%s\n%d\t%s\t%dh %dmin", tekst_global, i, tekst_global1, hours, minutes);
						found++;
					}
				}
				format(tekst_global, sizeof(tekst_global), "%s\n----", tekst_global);
				format(tekst_global, sizeof(tekst_global), "%s\n	Powy¿sze postacie moga byæ Twoje. Wybierz t¹, któr¹ chcesz graæ", tekst_global);
				format(tekst_global, sizeof(tekst_global), "%s\n	lub naciœnij drugi przycisk by przejœæ do menu zmiany nicku.", tekst_global);
				format(tekst_global, sizeof(tekst_global), "%s\n\n•            Nie masz jeszcze w³asnej postaci na "STRONAWWW"!", tekst_global);
				format(tekst_global, sizeof(tekst_global), "%s\n\n•            Zminimalizuj grê i wejdŸ na forum "STRONAWWW"!", tekst_global);
				if(found != 0)
				{
					dShowPlayerDialog(playerid, DIALOG_NICK2, DIALOG_STYLE_TABLIST_HEADERS, "Czy któraœ z tych postaci jest Twoja?", tekst_global, "Zaloguj", "Zmien nick");
				}
				else
				{
					SendClientMessage(playerid, SZARY, "WejdŸ z poprawnym nickname postaci!");
					Kick(playerid);
				}
				KameraLogowania(playerid);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid, 0);
			}
		}
		else
		{
			if(mysql_num_rows() != 0)
			{
				new sql1[200], team;
				format(sql1, sizeof(sql1), "SELECT `ID`, `GUID`, `AKTYWNE`, `is_team`, `Przelogowal` FROM `jochym_postacie` WHERE `name` = '%s' LIMIT 1", ImieGracza(playerid));
				mysql_query(sql1);
				mysql_store_result();
				mysql_fetch_row(sql1);
				sscanf(sql1, "p<|>dddd", DaneGracza[playerid][gUID], DaneGracza[playerid][gGUID], DaneGracza[playerid][gAKTYWNE], team, DaneGracza[playerid][gLogin]);
				if(DaneGracza[playerid][gAKTYWNE] == 1 && (DaneGracza[playerid][gAKTYWNE] < gettime()+CZAS_LETNI && DaneGracza[playerid][gAKTYWNE] != -1))
				{
					if(team == 0)
					{
						new str5[512];//Logowanie dla graczy
						format(str5, sizeof(str5), "{9DB6D3}Witaj na "PROJEKT", nowym innowacyjnym w pe³ni rozwijaj¹cym siê serwerze!\nOd 2016 roku pracowaliœmy nad stworzeniem miejsca dla graczy na serwerze oraz forum, od tamtego czasu..\n[...] zdo³aliœmy zakodowaæ o wiele wiêcej ni¿ konkurencja a to dopiero pocz¹tek naszej przygody!\n\n");
						format(str5, sizeof(str5), "%s\t{9DB6D3}Logujesz siê na postaæ: {FFFFFF}%s{9DB6D3}, która {63D075}istnieje w naszej bazie danych!{9DB6D3}\n\tZaloguj siê albo zmieñ nick by wejœæ na inn¹ postaæ.", str5, ImieGracza2(playerid));
						dShowPlayerDialog(playerid, DIALOG_BETA, DIALOG_STYLE_PASSWORD, "Panel Logowania:", str5, "Zaloguj sie", "Zmien nick");
						SetPlayerWorldBounds(playerid, 20000.00, -20000.00, 20000.00, -20000.00);
						KameraLogowania(playerid);
					}
					else if(team == 1 || team == 2 || team == 3)
					{
						new str5[512];//Logowanie dla cz³onka ekipy
						format(str5, sizeof(str5), "{9DB6D3}Witaj na "PROJEKT", nowym innowacyjnym w pe³ni rozwijaj¹cym siê serwerze!\nOd 2016 roku pracowaliœmy nad stworzeniem miejsca dla graczy na serwerze oraz forum, od tamtego czasu..\n[...] zdo³aliœmy zakodowaæ o wiele wiêcej ni¿ konkurencja a to dopiero pocz¹tek naszej przygody!\n\n");
						format(str5, sizeof(str5), "%s\t{9DB6D3}Logujesz siê na postaæ: {FFFFFF}%s{9DB6D3}, która {63D075}istnieje w naszej bazie danych!{9DB6D3}\n\tZaloguj siê albo zmieñ nick by wejœæ na inn¹ postaæ.", str5, ImieGracza2(playerid));
						dShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Panel Logowania:", str5, "Zaloguj sie", "Lista");
						SetPlayerWorldBounds(playerid, 20000.00, -20000.00, 20000.00, -20000.00);
						KameraLogowania(playerid);
					}
				}
				else
				{
					SendClientMessage(playerid, SZARY, "WejdŸ z poprawnym nickname postaci!");
					Kick(playerid);
					SetPlayerWorldBounds(playerid, 20000.00, -20000.00, 20000.00, -20000.00);
					KameraLogowania(playerid);
				}
			}
			else
			{
				DaneGracza[playerid][gLogin] = 1;
				ZapiszGracza(playerid);
				Relog[playerid] = 1;
				new sql1[250];
				new namei[100], team;
				new imien[50], nazwisko[50], tekst_global1[50];
				GetPlayerIp(playerid, IP, sizeof(IP));
				new found = 0;
				strdel(tekst_global, 0, 4048);
				format(tekst_global, sizeof(tekst_global), "UID\tImie i nazwisko\tCzas gry", tekst_global);
				ForeachEx(i, MAX_POSTACI)
				{
					new IPI[16], online;
					format(sql1, sizeof(sql1), "SELECT `IP`, `name`, `CZAS_ONLINE`, `is_team` FROM `jochym_postacie` WHERE `IP` = '%s' AND `ID` = '%d'", IP, i);
					mysql_query(sql1);
					mysql_store_result();
					mysql_fetch_row(sql1);
					sscanf(sql1, "p<|>s[16]s[100]dd", IPI, namei, online, team);
					sscanf(namei, "p<_>s[50]s[50]",imien,nazwisko);
					imien[0] = toupper(imien[0]);
					nazwisko[0] = toupper(nazwisko[0]);
					if(team == 1)
					{
						format(tekst_global1, sizeof(tekst_global1), "%s", imien);
					}
					if(team == 0 || team == 2 || team == 3)
					{	
						format(tekst_global1, sizeof(tekst_global1), "%s %s", imien,nazwisko);
					}
					if(!strcmp(IP, IPI, true))
					{
						new hours, minutes;
						hours 	= online / 3600;
						minutes = (online - (hours * 3600)) / 60;
						format(tekst_global, sizeof(tekst_global), "%s\n%d\t%s\t%dh %dmin", tekst_global, i, tekst_global1, hours, minutes);
						found++;
					}
				}
				format(tekst_global, sizeof(tekst_global), "%s\n----", tekst_global);
				format(tekst_global, sizeof(tekst_global), "%s\n	Powy¿sze postacie moga byæ Twoje. Wybierz t¹, któr¹ chcesz graæ", tekst_global);
				format(tekst_global, sizeof(tekst_global), "%s\n	lub naciœnij drugi przycisk by przejœæ do menu zmiany nicku.", tekst_global);
				format(tekst_global, sizeof(tekst_global), "%s\n\n•            Nie masz jeszcze w³asnej postaci na "STRONAWWW"!", tekst_global);
				format(tekst_global, sizeof(tekst_global), "%s\n\n•            Zminimalizuj grê i wejdŸ na forum "STRONAWWW"!", tekst_global);
				if(found != 0)
				{
					dShowPlayerDialog(playerid, DIALOG_NICK2, DIALOG_STYLE_TABLIST_HEADERS, "Czy któraœ z tych postaci jest Twoja?", tekst_global, "Zaloguj", "Zmien nick");
				}
				else
				{
					SendClientMessage(playerid, SZARY, "WejdŸ z poprawnym nickname postaci!");
					Kick(playerid);
				}
				KameraLogowania(playerid);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid, 0);
			}
		}
	}
	else
	{
		KameraLogowania(playerid);
	}
	PoziomLakieru[playerid] = -1;
	MalowanieKolor[playerid][0] = -1;
	MalowanieKolor[playerid][1] = -1;
	DaneGracza[playerid][gSznur] = -1;
	MalowanieKolor[playerid][1] = -1;
	ResetPlayerWeapons(playerid);
	OfertaInfo[playerid][oSprzedajacy] = -1;
	OfertaInfo[playerid][oKlient] = -1;
	DestroyDynamic3DTextLabel(Text3D:Opisek[playerid]);
	zalogowany[playerid] = false;
    OferujeA[playerid] = -1;
	SetPlayerColor(playerid, CZARNY);
	DaneGracza[playerid][gKOLOR] = CZARNY;
	connectplayer(playerid);
	if(Relog[playerid] == 0)
	{
		//connectplayer(playerid);
	}
	else
	{
		Relog[playerid] = 0;
		DaneGracza[playerid][gLogin] = 1;
	}
	//if(IsPlayerNPC(playerid)) return Kick(playerid);
	return 1;
}
stock connectplayer(playerid)
{
	////////////////////////////////////////////////////////////////////////////////
	//if(Relog[playerid] == 0)
	//{
		TextOferty0[playerid] = CreatePlayerTextDraw(playerid, 408.499969, 130.000000, "Oferta, wybierz jedna z opcji:");
		PlayerTextDrawBackgroundColor(playerid, TextOferty0[playerid], 255);
		PlayerTextDrawFont(playerid, TextOferty0[playerid], 1);
		PlayerTextDrawLetterSize(playerid, TextOferty0[playerid], 0.230000, 0.899999);
		PlayerTextDrawColor(playerid, TextOferty0[playerid], -1);
		PlayerTextDrawSetOutline(playerid, TextOferty0[playerid], 1);
		PlayerTextDrawSetProportional(playerid, TextOferty0[playerid], 1);
		PlayerTextDrawUseBox(playerid, TextOferty0[playerid], 1);
		PlayerTextDrawBoxColor(playerid, TextOferty0[playerid], 50269196);
		PlayerTextDrawTextSize(playerid, TextOferty0[playerid], 629.299194, 1.399999);

		Lokalizacja[playerid] = CreatePlayerTextDraw(playerid,3.000000, 422.500000, " ");
		PlayerTextDrawBackgroundColor(playerid,Lokalizacja[playerid], 8448863);
		PlayerTextDrawFont(playerid,Lokalizacja[playerid], 3);
		PlayerTextDrawLetterSize(playerid,Lokalizacja[playerid], 0.240000, 1.200000);
		PlayerTextDrawColor(playerid,Lokalizacja[playerid], -1);
		PlayerTextDrawSetOutline(playerid,Lokalizacja[playerid], 1);
		PlayerTextDrawSetProportional(playerid,Lokalizacja[playerid], 1);

		TextOferty1[playerid] = CreatePlayerTextDraw(playerid, 519.000000, 141.700012, " ");
		PlayerTextDrawAlignment(playerid, TextOferty1[playerid], 2);
		PlayerTextDrawBackgroundColor(playerid, TextOferty1[playerid], 255);
		PlayerTextDrawFont(playerid, TextOferty1[playerid], 1);
		PlayerTextDrawLetterSize(playerid, TextOferty1[playerid], 0.319999, 0.899999);
		PlayerTextDrawColor(playerid, TextOferty1[playerid], -1);
		PlayerTextDrawSetOutline(playerid, TextOferty1[playerid], 0);
		PlayerTextDrawSetProportional(playerid, TextOferty1[playerid], 1);
		PlayerTextDrawSetShadow(playerid, TextOferty1[playerid], 1);
		PlayerTextDrawUseBox(playerid, TextOferty1[playerid], 1);
		PlayerTextDrawBoxColor(playerid, TextOferty1[playerid], 926365495);
		PlayerTextDrawTextSize(playerid, TextOferty1[playerid], 608.000000, 221.000000);

		TextOferty2[playerid] = CreatePlayerTextDraw(playerid, 617.000000, 128.499969, "x");
		PlayerTextDrawBackgroundColor(playerid, TextOferty2[playerid], 255);
		PlayerTextDrawFont(playerid, TextOferty2[playerid], 1);
		PlayerTextDrawLetterSize(playerid, TextOferty2[playerid], 0.389999, 1.000000);
		PlayerTextDrawColor(playerid, TextOferty2[playerid], -1);
		PlayerTextDrawSetOutline(playerid, TextOferty2[playerid], 0);
		PlayerTextDrawSetProportional(playerid, TextOferty2[playerid], 1);
		PlayerTextDrawSetShadow(playerid, TextOferty2[playerid], 1);
		PlayerTextDrawTextSize(playerid, TextOferty2[playerid], 626.000000, 10.000000);

		TextOferty3[playerid] = CreatePlayerTextDraw(playerid, 425.000000, 224.000000, "Gotowka");
		PlayerTextDrawBackgroundColor(playerid, TextOferty3[playerid], 255);
		PlayerTextDrawFont(playerid, TextOferty3[playerid], 1);
		PlayerTextDrawLetterSize(playerid, TextOferty3[playerid], 0.230000, 1.000000);
		PlayerTextDrawColor(playerid, TextOferty3[playerid], 0xA9C4E400);
		PlayerTextDrawSetOutline(playerid, TextOferty3[playerid], 0);
		PlayerTextDrawSetProportional(playerid, TextOferty3[playerid], 1);
		PlayerTextDrawSetShadow(playerid, TextOferty3[playerid], 1);
		PlayerTextDrawTextSize(playerid, TextOferty3[playerid], 460.000000, 10.000000);

		TextOferty4[playerid] = CreatePlayerTextDraw(playerid, 493.000000, 224.000000, "Konto Bankowe");
		PlayerTextDrawBackgroundColor(playerid, TextOferty4[playerid], 255);
		PlayerTextDrawFont(playerid, TextOferty4[playerid], 1);
		PlayerTextDrawLetterSize(playerid, TextOferty4[playerid], 0.230000, 1.000000);
		PlayerTextDrawColor(playerid, TextOferty4[playerid], 0xA9C4E400);
		PlayerTextDrawSetOutline(playerid, TextOferty4[playerid], 0);
		PlayerTextDrawSetProportional(playerid, TextOferty4[playerid], 1);
		PlayerTextDrawSetShadow(playerid, TextOferty4[playerid], 1);
		PlayerTextDrawTextSize(playerid, TextOferty4[playerid], 552.000000, 10.000000);

		TextOferty5[playerid] = CreatePlayerTextDraw(playerid, 583.000000, 224.000000, "Odrzuc");
		PlayerTextDrawBackgroundColor(playerid, TextOferty5[playerid], 255);
		PlayerTextDrawFont(playerid, TextOferty5[playerid], 1);
		PlayerTextDrawLetterSize(playerid, TextOferty5[playerid], 0.230000, 1.000000);
		PlayerTextDrawColor(playerid, TextOferty5[playerid], -872414977);
		PlayerTextDrawSetOutline(playerid, TextOferty5[playerid], 0);
		PlayerTextDrawSetProportional(playerid, TextOferty5[playerid], 1);
		PlayerTextDrawSetShadow(playerid, TextOferty5[playerid], 1);
		PlayerTextDrawTextSize(playerid, TextOferty5[playerid], 611.000000, 10.000000);

		TextOferty6[playerid] = CreatePlayerTextDraw(playerid, 475.000000, 224.000000, "Akceptuj");
		PlayerTextDrawBackgroundColor(playerid, TextOferty6[playerid], 255);
		PlayerTextDrawFont(playerid, TextOferty6[playerid], 1);
		PlayerTextDrawLetterSize(playerid, TextOferty6[playerid], 0.230000, 1.000000);
		PlayerTextDrawColor(playerid, TextOferty6[playerid], -1967713793);
		PlayerTextDrawSetOutline(playerid, TextOferty6[playerid], 0);
		PlayerTextDrawSetProportional(playerid, TextOferty6[playerid], 1);
		PlayerTextDrawSetShadow(playerid, TextOferty6[playerid], 1);
		PlayerTextDrawTextSize(playerid, TextOferty6[playerid], 508.000000, 10.000000);

		TextOferty7[playerid] = CreatePlayerTextDraw(playerid, 539.000000, 224.000000, "Odrzuc");
		PlayerTextDrawBackgroundColor(playerid, TextOferty7[playerid], 255);
		PlayerTextDrawFont(playerid, TextOferty7[playerid], 1);
		PlayerTextDrawLetterSize(playerid, TextOferty7[playerid], 0.230000, 1.000000);
		PlayerTextDrawColor(playerid, TextOferty7[playerid], -872414977);
		PlayerTextDrawSetOutline(playerid, TextOferty7[playerid], 0);
		PlayerTextDrawSetProportional(playerid, TextOferty7[playerid], 1);
		PlayerTextDrawSetShadow(playerid, TextOferty7[playerid], 1);
		PlayerTextDrawTextSize(playerid, TextOferty7[playerid], 566.000000, 10.000000);

		////////////////////////////////Poker////////////////////////////////////////////////////////
		Poker1[playerid] = CreatePlayerTextDraw(playerid, 310.000000, 310.000000, "Pula zakladow ~r~$0");
		PlayerTextDrawAlignment(playerid, Poker1[playerid], 2);
		PlayerTextDrawBackgroundColor(playerid, Poker1[playerid], 0xFFFF0000);
		PlayerTextDrawFont(playerid, Poker1[playerid], 1);
		PlayerTextDrawLetterSize(playerid, Poker1[playerid], 0.40000, 1.800000);
		PlayerTextDrawColor(playerid, Poker1[playerid], 0xA9C4E4FF);
		PlayerTextDrawSetOutline(playerid, Poker1[playerid], 1);
		PlayerTextDrawSetProportional(playerid, Poker1[playerid], 1);
		PlayerTextDrawSetShadow(playerid, Poker1[playerid], 0);
		PlayerTextDrawUseBox(playerid, Poker1[playerid], 0);
		PlayerTextDrawBoxColor(playerid, Poker1[playerid], 0xDEDEDEFF);
		PlayerTextDrawTextSize(playerid, Poker1[playerid], 600.000000, 317.000000);

		Poker2[playerid] = CreatePlayerTextDraw(playerid, 545.000000, 220.000000, "Twoje Mozliwosci");
		PlayerTextDrawAlignment(playerid, Poker2[playerid], 2);
		PlayerTextDrawBackgroundColor(playerid, Poker2[playerid], 0xFFFFFFFF);
		PlayerTextDrawFont(playerid, Poker2[playerid], 1);
		PlayerTextDrawLetterSize(playerid, Poker2[playerid], 0.230000, 1.000000);
		PlayerTextDrawColor(playerid, Poker2[playerid], 0x000000FF);
		PlayerTextDrawSetOutline(playerid, Poker2[playerid], 0);
		PlayerTextDrawSetProportional(playerid, Poker2[playerid], 1);
		PlayerTextDrawSetShadow(playerid, Poker2[playerid], 0);
		PlayerTextDrawUseBox(playerid, Poker2[playerid], 1);
		PlayerTextDrawBoxColor(playerid, Poker2[playerid], 0xDEDEDEFF);
		PlayerTextDrawTextSize(playerid, Poker2[playerid], 600.000000, 120.000000);

		Poker3[playerid] = CreatePlayerTextDraw(playerid, 545.000000, 233.000000, "Sprawdzam");
		PlayerTextDrawAlignment(playerid, Poker3[playerid], 2);
		PlayerTextDrawBackgroundColor(playerid, Poker3[playerid], 0xA9C4E4FF);
		PlayerTextDrawFont(playerid, Poker3[playerid], 1);
		PlayerTextDrawLetterSize(playerid, Poker3[playerid], 0.230000, 1.000000);
		PlayerTextDrawColor(playerid, Poker3[playerid], 0x000000FF);
		PlayerTextDrawSetOutline(playerid, Poker3[playerid], 0);
		PlayerTextDrawSetProportional(playerid, Poker3[playerid], 1);
		PlayerTextDrawSetShadow(playerid, Poker3[playerid], 0);
		PlayerTextDrawUseBox(playerid, Poker3[playerid], 1);
		PlayerTextDrawSetSelectable(playerid, Poker3[playerid], 1);
		PlayerTextDrawBoxColor(playerid, Poker3[playerid], 0xFFFFFFFF);
		PlayerTextDrawTextSize(playerid, Poker3[playerid], 10.000000, 120.000000);

		Poker4[playerid] = CreatePlayerTextDraw(playerid, 545.000000, 246.000000, "Przebijam");
		PlayerTextDrawAlignment(playerid, Poker4[playerid], 2);
		PlayerTextDrawBackgroundColor(playerid, Poker4[playerid], 0xA9C4E4FF);
		PlayerTextDrawFont(playerid, Poker4[playerid], 1);
		PlayerTextDrawLetterSize(playerid, Poker4[playerid], 0.230000, 1.000000);
		PlayerTextDrawColor(playerid, Poker4[playerid], 0x000000FF);
		PlayerTextDrawSetOutline(playerid, Poker4[playerid], 0);
		PlayerTextDrawSetProportional(playerid, Poker4[playerid], 1);
		PlayerTextDrawSetShadow(playerid, Poker4[playerid], 0);
		PlayerTextDrawUseBox(playerid, Poker4[playerid], 1);
		PlayerTextDrawSetSelectable(playerid, Poker4[playerid], 1);
		PlayerTextDrawBoxColor(playerid, Poker4[playerid], 0xFFFFFFFF);
		PlayerTextDrawTextSize(playerid, Poker4[playerid], 10.000000, 120.000000);

		Poker5[playerid] = CreatePlayerTextDraw(playerid, 545.000000, 259.000000, "Pasuje");
		PlayerTextDrawAlignment(playerid, Poker5[playerid], 2);
		PlayerTextDrawBackgroundColor(playerid, Poker5[playerid], 0xA9C4E4FF);
		PlayerTextDrawFont(playerid, Poker5[playerid], 1);
		PlayerTextDrawLetterSize(playerid, Poker5[playerid], 0.230000, 1.000000);
		PlayerTextDrawColor(playerid, Poker5[playerid], 0x000000FF);
		PlayerTextDrawSetOutline(playerid, Poker5[playerid], 0);
		PlayerTextDrawSetProportional(playerid, Poker5[playerid], 1);
		PlayerTextDrawSetShadow(playerid, Poker5[playerid], 0);
		PlayerTextDrawUseBox(playerid, Poker5[playerid], 1);
		PlayerTextDrawSetSelectable(playerid, Poker5[playerid], 1);
		PlayerTextDrawBoxColor(playerid, Poker5[playerid], 0xFFFFFFFF);
		PlayerTextDrawTextSize(playerid, Poker5[playerid], 10.000000, 120.000000);

		Poker6[playerid] = CreatePlayerTextDraw(playerid, 545.000000, 272.000000, "Opuszczam Stol");
		PlayerTextDrawAlignment(playerid, Poker6[playerid], 2);
		PlayerTextDrawBackgroundColor(playerid, Poker6[playerid], 0xFFFFFFFF);
		PlayerTextDrawFont(playerid, Poker6[playerid], 1);
		PlayerTextDrawLetterSize(playerid, Poker6[playerid], 0.230000, 1.000000);
		PlayerTextDrawColor(playerid, Poker6[playerid], 0x000000FF);
		PlayerTextDrawSetOutline(playerid, Poker6[playerid], 0);
		PlayerTextDrawSetProportional(playerid, Poker6[playerid], 1);
		PlayerTextDrawSetShadow(playerid, Poker6[playerid], 0);
		PlayerTextDrawUseBox(playerid, Poker6[playerid], 1);
		PlayerTextDrawSetSelectable(playerid, Poker6[playerid], 1);
		PlayerTextDrawBoxColor(playerid, Poker6[playerid], 0x860000FF);
		PlayerTextDrawTextSize(playerid, Poker6[playerid], 10.000000, 120.000000);

		KartyGracza[playerid] = CreatePlayerTextDraw(playerid, 547.500000, 335.000000, "Twoje karty");
		PlayerTextDrawAlignment(playerid, KartyGracza[playerid], 2);
		PlayerTextDrawBackgroundColor(playerid, KartyGracza[playerid], 0xFFFFFFFF);
		PlayerTextDrawFont(playerid, KartyGracza[playerid], 1);
		PlayerTextDrawLetterSize(playerid, KartyGracza[playerid], 0.230000, 1.000000);
		PlayerTextDrawColor(playerid, KartyGracza[playerid], 0x000000FF);
		PlayerTextDrawSetOutline(playerid, KartyGracza[playerid], 0);
		PlayerTextDrawSetProportional(playerid, KartyGracza[playerid], 1);
		PlayerTextDrawSetShadow(playerid, KartyGracza[playerid], 0);
		PlayerTextDrawUseBox(playerid, KartyGracza[playerid], 1);
		PlayerTextDrawBoxColor(playerid, KartyGracza[playerid], 0xDEDEDEFF);
		PlayerTextDrawTextSize(playerid, KartyGracza[playerid], 600.000000, 122.000000);

		KartaGracza1[playerid] = CreatePlayerTextDraw(playerid, 550.000000, 350.000000, "LD_CARD:cdback");
		PlayerTextDrawFont(playerid, KartaGracza1[playerid], 4);
		PlayerTextDrawColor(playerid, KartaGracza1[playerid], 0xFFFFFFFF);
		PlayerTextDrawTextSize(playerid, KartaGracza1[playerid], 60.000000, 80.000000);

		KartaGracza2[playerid] = CreatePlayerTextDraw(playerid, 485.000000, 350.000000, "LD_CARD:cdback");
		PlayerTextDrawFont(playerid, KartaGracza2[playerid], 4);
		PlayerTextDrawColor(playerid, KartaGracza2[playerid], 0xFFFFFFFF);
		PlayerTextDrawTextSize(playerid, KartaGracza2[playerid], 60.000000, 80.000000);

		WylosowaneKarty[playerid] = CreatePlayerTextDraw(playerid, 310.000000, 335.000000, "Karty na stole");
		PlayerTextDrawAlignment(playerid, WylosowaneKarty[playerid], 2);
		PlayerTextDrawBackgroundColor(playerid, WylosowaneKarty[playerid], 0xFFFFFFFF);
		PlayerTextDrawFont(playerid, WylosowaneKarty[playerid], 1);
		PlayerTextDrawLetterSize(playerid, WylosowaneKarty[playerid], 0.230000, 1.000000);
		PlayerTextDrawColor(playerid, WylosowaneKarty[playerid], 0x000000FF);
		PlayerTextDrawSetOutline(playerid, WylosowaneKarty[playerid], 0);
		PlayerTextDrawSetProportional(playerid, WylosowaneKarty[playerid], 1);
		PlayerTextDrawSetShadow(playerid, WylosowaneKarty[playerid], 0);
		PlayerTextDrawUseBox(playerid, WylosowaneKarty[playerid], 1);
		PlayerTextDrawBoxColor(playerid, WylosowaneKarty[playerid], 0xDEDEDEFF);
		PlayerTextDrawTextSize(playerid, WylosowaneKarty[playerid], 600.000000, 317.000000);

		WylosowaneKarty1[playerid] = CreatePlayerTextDraw(playerid, 150.000000, 350.000000, "LD_CARD:cdback");
		PlayerTextDrawFont(playerid, WylosowaneKarty1[playerid], 4);
		PlayerTextDrawColor(playerid, WylosowaneKarty1[playerid], 0xFFFFFFFF);
		PlayerTextDrawTextSize(playerid, WylosowaneKarty1[playerid], 60.000000, 80.000000);

		WylosowaneKarty2[playerid] = CreatePlayerTextDraw(playerid, 215.000000, 350.000000, "LD_CARD:cdback");
		PlayerTextDrawFont(playerid, WylosowaneKarty2[playerid], 4);
		PlayerTextDrawColor(playerid, WylosowaneKarty2[playerid], 0xFFFFFFFF);
		PlayerTextDrawTextSize(playerid, WylosowaneKarty2[playerid], 60.000000, 80.000000);

		WylosowaneKarty3[playerid] = CreatePlayerTextDraw(playerid, 280.000000, 350.000000, "LD_CARD:cdback");
		PlayerTextDrawFont(playerid, WylosowaneKarty3[playerid], 4);
		PlayerTextDrawColor(playerid, WylosowaneKarty3[playerid], 0xFFFFFFFF);
		PlayerTextDrawTextSize(playerid, WylosowaneKarty3[playerid], 60.000000, 80.000000);

		WylosowaneKarty4[playerid] = CreatePlayerTextDraw(playerid, 345.000000, 350.000000, "LD_CARD:cdback");
		PlayerTextDrawFont(playerid, WylosowaneKarty4[playerid], 4);
		PlayerTextDrawColor(playerid, WylosowaneKarty4[playerid], 0xFFFFFFFF);
		PlayerTextDrawTextSize(playerid, WylosowaneKarty4[playerid], 60.000000, 80.000000);

		WylosowaneKarty5[playerid] = CreatePlayerTextDraw(playerid, 410.000000, 350.000000, "LD_CARD:cdback");
		PlayerTextDrawFont(playerid, WylosowaneKarty5[playerid], 4);
		PlayerTextDrawColor(playerid, WylosowaneKarty5[playerid], 0xFFFFFFFF);
		PlayerTextDrawTextSize(playerid, WylosowaneKarty5[playerid], 60.000000, 80.000000);

		//////////////////////Gracz przy stoliku, stanowisko 1//////////////////////////////////////////////

		KartaGracza3[playerid] = CreatePlayerTextDraw(playerid, 255.000000, 67.000000, "LD_CARD:cdback");
		PlayerTextDrawFont(playerid, KartaGracza3[playerid], 4);
		PlayerTextDrawColor(playerid, KartaGracza3[playerid], 0xFFFFFFFF);
		PlayerTextDrawTextSize(playerid, KartaGracza3[playerid], 30.000000, 45.000000);

		KartaGracza4[playerid] = CreatePlayerTextDraw(playerid, 287.000000, 67.000000, "LD_CARD:cdback");
		PlayerTextDrawFont(playerid, KartaGracza4[playerid], 4);
		PlayerTextDrawColor(playerid, KartaGracza4[playerid], 0xFFFFFFFF);
		PlayerTextDrawTextSize(playerid, KartaGracza4[playerid], 30.000000, 45.000000);

		KartyGracza1[playerid] = CreatePlayerTextDraw(playerid, 286.000000, 115.000000, "Oczekiwanie...");
		PlayerTextDrawAlignment(playerid, KartyGracza1[playerid], 2);
		PlayerTextDrawBackgroundColor(playerid, KartyGracza1[playerid], 0xFFFFFFFF);
		PlayerTextDrawFont(playerid, KartyGracza1[playerid], 1);
		PlayerTextDrawLetterSize(playerid, KartyGracza1[playerid], 0.180000, 0.800000);
		PlayerTextDrawColor(playerid, KartyGracza1[playerid], 0x000000FF);
		PlayerTextDrawSetOutline(playerid, KartyGracza1[playerid], 0);
		PlayerTextDrawSetProportional(playerid, KartyGracza1[playerid], 1);
		PlayerTextDrawSetShadow(playerid, KartyGracza1[playerid], 0);
		PlayerTextDrawUseBox(playerid, KartyGracza1[playerid], 1);
		PlayerTextDrawBoxColor(playerid, KartyGracza1[playerid], 0xFFFFFFFF);
		PlayerTextDrawTextSize(playerid, KartyGracza1[playerid], 600.000000, 59.500000);

		KartyGracza11[playerid] = CreatePlayerTextDraw(playerid, 286.000000, 127.000000, "$0");
		PlayerTextDrawAlignment(playerid, KartyGracza11[playerid], 2);
		PlayerTextDrawBackgroundColor(playerid, KartyGracza11[playerid], 0xFFFFFFFF);
		PlayerTextDrawFont(playerid, KartyGracza11[playerid], 1);
		PlayerTextDrawLetterSize(playerid, KartyGracza11[playerid], 0.180000, 0.800000);
		PlayerTextDrawColor(playerid, KartyGracza11[playerid], 0x000000FF);
		PlayerTextDrawSetOutline(playerid, KartyGracza11[playerid], 0);
		PlayerTextDrawSetProportional(playerid, KartyGracza11[playerid], 1);
		PlayerTextDrawSetShadow(playerid, KartyGracza11[playerid], 0);
		PlayerTextDrawUseBox(playerid, KartyGracza11[playerid], 1);
		PlayerTextDrawBoxColor(playerid, KartyGracza11[playerid], 0xDEDEDEFF);
		PlayerTextDrawTextSize(playerid, KartyGracza11[playerid], 600.000000, 59.500000);

		//////////////////////Gracz przy stoliku, stanowisko 2//////////////////////////////////////////////

		KartaGracza5[playerid] = CreatePlayerTextDraw(playerid, 360.000000, 200.000000, "LD_CARD:cdback");
		PlayerTextDrawFont(playerid, KartaGracza5[playerid], 4);
		PlayerTextDrawColor(playerid, KartaGracza5[playerid], 0xFFFFFFFF);
		PlayerTextDrawTextSize(playerid, KartaGracza5[playerid], 30.000000, 45.000000);

		KartaGracza6[playerid] = CreatePlayerTextDraw(playerid, 392.000000, 200.000000, "LD_CARD:cdback");
		PlayerTextDrawFont(playerid, KartaGracza6[playerid], 4);
		PlayerTextDrawColor(playerid, KartaGracza6[playerid], 0xFFFFFFFF);
		PlayerTextDrawTextSize(playerid, KartaGracza6[playerid], 30.000000, 45.000000);

		KartyGracza2[playerid] = CreatePlayerTextDraw(playerid, 391.000000, 248.000000, "Oczekiwanie...");
		PlayerTextDrawAlignment(playerid, KartyGracza2[playerid], 2);
		PlayerTextDrawBackgroundColor(playerid, KartyGracza2[playerid], 0xFFFFFFFF);
		PlayerTextDrawFont(playerid, KartyGracza2[playerid], 1);
		PlayerTextDrawLetterSize(playerid, KartyGracza2[playerid], 0.180000, 0.800000);
		PlayerTextDrawColor(playerid, KartyGracza2[playerid], 0x000000FF);
		PlayerTextDrawSetOutline(playerid, KartyGracza2[playerid], 0);
		PlayerTextDrawSetProportional(playerid, KartyGracza2[playerid], 1);
		PlayerTextDrawSetShadow(playerid, KartyGracza2[playerid], 0);
		PlayerTextDrawUseBox(playerid, KartyGracza2[playerid], 1);
		PlayerTextDrawBoxColor(playerid, KartyGracza2[playerid], 0xFFFFFFFF);
		PlayerTextDrawTextSize(playerid, KartyGracza2[playerid], 600.000000, 59.500000);

		KartyGracza22[playerid] = CreatePlayerTextDraw(playerid, 391.000000, 260.000000, "$0");
		PlayerTextDrawAlignment(playerid, KartyGracza22[playerid], 2);
		PlayerTextDrawBackgroundColor(playerid, KartyGracza22[playerid], 0xFFFFFFFF);
		PlayerTextDrawFont(playerid, KartyGracza22[playerid], 1);
		PlayerTextDrawLetterSize(playerid, KartyGracza22[playerid], 0.180000, 0.800000);
		PlayerTextDrawColor(playerid, KartyGracza22[playerid], 0x000000FF);
		PlayerTextDrawSetOutline(playerid, KartyGracza22[playerid], 0);
		PlayerTextDrawSetProportional(playerid, KartyGracza22[playerid], 1);
		PlayerTextDrawSetShadow(playerid, KartyGracza22[playerid], 0);
		PlayerTextDrawUseBox(playerid, KartyGracza22[playerid], 1);
		PlayerTextDrawBoxColor(playerid, KartyGracza22[playerid], 0xDEDEDEFF);
		PlayerTextDrawTextSize(playerid, KartyGracza22[playerid], 600.000000, 59.500000);

		/////////////////////Gracz przy stoliku, stanowisko 3//////////////////////////////////////////////

		KartaGracza7[playerid] = CreatePlayerTextDraw(playerid, 130.000000, 100.000000, "LD_CARD:cdback");
		PlayerTextDrawFont(playerid, KartaGracza7[playerid], 4);
		PlayerTextDrawColor(playerid, KartaGracza7[playerid], 0xFFFFFFFF);
		PlayerTextDrawTextSize(playerid, KartaGracza7[playerid], 30.000000, 45.000000);

		KartaGracza8[playerid] = CreatePlayerTextDraw(playerid, 162.000000, 100.000000, "LD_CARD:cdback");
		PlayerTextDrawFont(playerid, KartaGracza8[playerid], 4);
		PlayerTextDrawColor(playerid, KartaGracza8[playerid], 0xFFFFFFFF);
		PlayerTextDrawTextSize(playerid, KartaGracza8[playerid], 30.000000, 45.000000);

		KartyGracza3[playerid] = CreatePlayerTextDraw(playerid, 161.000000, 148.000000, "Oczekiwanie...");
		PlayerTextDrawAlignment(playerid, KartyGracza3[playerid], 2);
		PlayerTextDrawBackgroundColor(playerid, KartyGracza3[playerid], 0xFFFFFFFF);
		PlayerTextDrawFont(playerid, KartyGracza3[playerid], 1);
		PlayerTextDrawLetterSize(playerid, KartyGracza3[playerid], 0.180000, 0.800000);
		PlayerTextDrawColor(playerid, KartyGracza3[playerid], 0x000000FF);
		PlayerTextDrawSetOutline(playerid, KartyGracza3[playerid], 0);
		PlayerTextDrawSetProportional(playerid, KartyGracza3[playerid], 1);
		PlayerTextDrawSetShadow(playerid, KartyGracza3[playerid], 0);
		PlayerTextDrawUseBox(playerid, KartyGracza3[playerid], 1);
		PlayerTextDrawBoxColor(playerid, KartyGracza3[playerid], 0xFFFFFFFF);
		PlayerTextDrawTextSize(playerid, KartyGracza3[playerid], 600.000000, 59.500000);

		KartyGracza33[playerid] = CreatePlayerTextDraw(playerid, 161.000000, 160.000000, "$0");
		PlayerTextDrawAlignment(playerid, KartyGracza33[playerid], 2);
		PlayerTextDrawBackgroundColor(playerid, KartyGracza33[playerid], 0xFFFFFFFF);
		PlayerTextDrawFont(playerid, KartyGracza33[playerid], 1);
		PlayerTextDrawLetterSize(playerid, KartyGracza33[playerid], 0.180000, 0.800000);
		PlayerTextDrawColor(playerid, KartyGracza33[playerid], 0x000000FF);
		PlayerTextDrawSetOutline(playerid, KartyGracza33[playerid], 0);
		PlayerTextDrawSetProportional(playerid, KartyGracza33[playerid], 1);
		PlayerTextDrawSetShadow(playerid, KartyGracza33[playerid], 0);
		PlayerTextDrawUseBox(playerid, KartyGracza33[playerid], 1);
		PlayerTextDrawBoxColor(playerid, KartyGracza33[playerid], 0xDEDEDEFF);
		PlayerTextDrawTextSize(playerid, KartyGracza33[playerid], 600.000000, 59.500000);

		/////////////////////Gracz przy stoliku, stanowisko 4//////////////////////////////////////////////

		KartaGracza9[playerid] = CreatePlayerTextDraw(playerid, 473.000000, 135.000000, "LD_CARD:cdback");
		PlayerTextDrawFont(playerid, KartaGracza9[playerid], 4);
		PlayerTextDrawColor(playerid, KartaGracza9[playerid], 0xFFFFFFFF);
		PlayerTextDrawTextSize(playerid, KartaGracza9[playerid], 30.000000, 45.000000);

		KartaGracza10[playerid] = CreatePlayerTextDraw(playerid, 505.000000, 135.000000, "LD_CARD:cdback");
		PlayerTextDrawFont(playerid, KartaGracza10[playerid], 4);
		PlayerTextDrawColor(playerid, KartaGracza10[playerid], 0xFFFFFFFF);
		PlayerTextDrawTextSize(playerid, KartaGracza10[playerid], 30.000000, 45.000000);

		KartyGracza4[playerid] = CreatePlayerTextDraw(playerid, 504.000000, 183.000000, "Oczekiwanie...");
		PlayerTextDrawAlignment(playerid, KartyGracza4[playerid], 2);
		PlayerTextDrawBackgroundColor(playerid, KartyGracza4[playerid], 0xFFFFFFFF);
		PlayerTextDrawFont(playerid, KartyGracza4[playerid], 1);
		PlayerTextDrawLetterSize(playerid, KartyGracza4[playerid], 0.180000, 0.800000);
		PlayerTextDrawColor(playerid, KartyGracza4[playerid], 0x000000FF);
		PlayerTextDrawSetOutline(playerid, KartyGracza4[playerid], 0);
		PlayerTextDrawSetProportional(playerid, KartyGracza4[playerid], 1);
		PlayerTextDrawSetShadow(playerid, KartyGracza4[playerid], 0);
		PlayerTextDrawUseBox(playerid, KartyGracza4[playerid], 1);
		PlayerTextDrawBoxColor(playerid, KartyGracza4[playerid], 0xFFFFFFFF);
		PlayerTextDrawTextSize(playerid, KartyGracza4[playerid], 600.000000, 59.500000);

		KartyGracza44[playerid] = CreatePlayerTextDraw(playerid, 504.000000, 195.000000, "$0");
		PlayerTextDrawAlignment(playerid, KartyGracza44[playerid], 2);
		PlayerTextDrawBackgroundColor(playerid, KartyGracza44[playerid], 0xFFFFFFFF);
		PlayerTextDrawFont(playerid, KartyGracza44[playerid], 1);
		PlayerTextDrawLetterSize(playerid, KartyGracza44[playerid], 0.180000, 0.800000);
		PlayerTextDrawColor(playerid, KartyGracza44[playerid], 0x000000FF);
		PlayerTextDrawSetOutline(playerid, KartyGracza44[playerid], 0);
		PlayerTextDrawSetProportional(playerid, KartyGracza44[playerid], 1);
		PlayerTextDrawSetShadow(playerid, KartyGracza44[playerid], 0);
		PlayerTextDrawUseBox(playerid, KartyGracza44[playerid], 1);
		PlayerTextDrawBoxColor(playerid, KartyGracza44[playerid], 0xDEDEDEFF);
		PlayerTextDrawTextSize(playerid, KartyGracza44[playerid], 600.000000, 59.500000);

		/////////////////////Gracz przy stoliku, stanowisko 5//////////////////////////////////////////////

		KartaGracza11[playerid] = CreatePlayerTextDraw(playerid, 423.000000, 65.000000, "LD_CARD:cdback");
		PlayerTextDrawFont(playerid, KartaGracza11[playerid], 4);
		PlayerTextDrawColor(playerid, KartaGracza11[playerid], 0xFFFFFFFF);
		PlayerTextDrawTextSize(playerid, KartaGracza11[playerid], 30.000000, 45.000000);

		KartaGracza12[playerid] = CreatePlayerTextDraw(playerid, 455.000000, 65.000000, "LD_CARD:cdback");
		PlayerTextDrawFont(playerid, KartaGracza12[playerid], 4);
		PlayerTextDrawColor(playerid, KartaGracza12[playerid], 0xFFFFFFFF);
		PlayerTextDrawTextSize(playerid, KartaGracza12[playerid], 30.000000, 45.000000);

		KartyGracza5[playerid] = CreatePlayerTextDraw(playerid, 454.000000, 113.000000, "Oczekiwanie...");
		PlayerTextDrawAlignment(playerid, KartyGracza5[playerid], 2);
		PlayerTextDrawBackgroundColor(playerid, KartyGracza5[playerid], 0xFFFFFFFF);
		PlayerTextDrawFont(playerid, KartyGracza5[playerid], 1);
		PlayerTextDrawLetterSize(playerid, KartyGracza5[playerid], 0.180000, 0.800000);
		PlayerTextDrawColor(playerid, KartyGracza5[playerid], 0x000000FF);
		PlayerTextDrawSetOutline(playerid, KartyGracza5[playerid], 0);
		PlayerTextDrawSetProportional(playerid, KartyGracza5[playerid], 1);
		PlayerTextDrawSetShadow(playerid, KartyGracza5[playerid], 0);
		PlayerTextDrawUseBox(playerid, KartyGracza5[playerid], 1);
		PlayerTextDrawBoxColor(playerid, KartyGracza5[playerid], 0xFFFFFFFF);
		PlayerTextDrawTextSize(playerid, KartyGracza5[playerid], 600.000000, 59.500000);

		KartyGracza55[playerid] = CreatePlayerTextDraw(playerid, 454.000000, 125.000000, "$0");
		PlayerTextDrawAlignment(playerid, KartyGracza55[playerid], 2);
		PlayerTextDrawBackgroundColor(playerid, KartyGracza55[playerid], 0xFFFFFFFF);
		PlayerTextDrawFont(playerid, KartyGracza55[playerid], 1);
		PlayerTextDrawLetterSize(playerid, KartyGracza55[playerid], 0.180000, 0.800000);
		PlayerTextDrawColor(playerid, KartyGracza55[playerid], 0x000000FF);
		PlayerTextDrawSetOutline(playerid, KartyGracza55[playerid], 0);
		PlayerTextDrawSetProportional(playerid, KartyGracza55[playerid], 1);
		PlayerTextDrawSetShadow(playerid, KartyGracza55[playerid], 0);
		PlayerTextDrawUseBox(playerid, KartyGracza55[playerid], 1);
		PlayerTextDrawBoxColor(playerid, KartyGracza55[playerid], 0xDEDEDEFF);
		PlayerTextDrawTextSize(playerid, KartyGracza55[playerid], 600.000000, 59.500000);

		/////////////////////Gracz przy stoliku, stanowisko 6//////////////////////////////////////////////

		KartaGracza13[playerid] = CreatePlayerTextDraw(playerid, 30.000000, 200.000000, "LD_CARD:cdback");
		PlayerTextDrawFont(playerid, KartaGracza13[playerid], 4);
		PlayerTextDrawColor(playerid, KartaGracza13[playerid], 0xFFFFFFFF);
		PlayerTextDrawTextSize(playerid, KartaGracza13[playerid], 30.000000, 45.000000);

		KartaGracza14[playerid] = CreatePlayerTextDraw(playerid, 62.000000, 200.000000, "LD_CARD:cdback");
		PlayerTextDrawFont(playerid, KartaGracza14[playerid], 4);
		PlayerTextDrawColor(playerid, KartaGracza14[playerid], 0xFFFFFFFF);
		PlayerTextDrawTextSize(playerid, KartaGracza14[playerid], 30.000000, 45.000000);

		KartyGracza6[playerid] = CreatePlayerTextDraw(playerid, 61.000000, 248.000000, "Oczekiwanie...");
		PlayerTextDrawAlignment(playerid, KartyGracza6[playerid], 2);
		PlayerTextDrawBackgroundColor(playerid, KartyGracza6[playerid], 0xFFFFFFFF);
		PlayerTextDrawFont(playerid, KartyGracza6[playerid], 1);
		PlayerTextDrawLetterSize(playerid, KartyGracza6[playerid], 0.180000, 0.800000);
		PlayerTextDrawColor(playerid, KartyGracza6[playerid], 0x000000FF);
		PlayerTextDrawSetOutline(playerid, KartyGracza6[playerid], 0);
		PlayerTextDrawSetProportional(playerid, KartyGracza6[playerid], 1);
		PlayerTextDrawSetShadow(playerid, KartyGracza6[playerid], 0);
		PlayerTextDrawUseBox(playerid, KartyGracza6[playerid], 1);
		PlayerTextDrawBoxColor(playerid, KartyGracza6[playerid], 0xFFFFFFFF);
		PlayerTextDrawTextSize(playerid, KartyGracza6[playerid], 600.000000, 59.500000);

		KartyGracza66[playerid] = CreatePlayerTextDraw(playerid, 61.000000, 260.000000, "$0");
		PlayerTextDrawAlignment(playerid, KartyGracza66[playerid], 2);
		PlayerTextDrawBackgroundColor(playerid, KartyGracza66[playerid], 0xFFFFFFFF);
		PlayerTextDrawFont(playerid, KartyGracza66[playerid], 1);
		PlayerTextDrawLetterSize(playerid, KartyGracza66[playerid], 0.180000, 0.800000);
		PlayerTextDrawColor(playerid, KartyGracza66[playerid], 0x000000FF);
		PlayerTextDrawSetOutline(playerid, KartyGracza66[playerid], 0);
		PlayerTextDrawSetProportional(playerid, KartyGracza66[playerid], 1);
		PlayerTextDrawSetShadow(playerid, KartyGracza66[playerid], 0);
		PlayerTextDrawUseBox(playerid, KartyGracza66[playerid], 1);
		PlayerTextDrawBoxColor(playerid, KartyGracza66[playerid], 0xDEDEDEFF);
		PlayerTextDrawTextSize(playerid, KartyGracza66[playerid], 600.000000, 59.500000);

		/*Textdraw0[playerid] = CreatePlayerTextDraw(playerid, 72.000000, 147.000000, "~w~Slot            Nazwa grupy                                                          Opcje");
	    PlayerTextDrawBackgroundColor(playerid, Textdraw0[playerid], 0x333333FF);
	    PlayerTextDrawFont(playerid, Textdraw0[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw0[playerid], 0.259999, 1.000000);
	    PlayerTextDrawColor(playerid, Textdraw0[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw0[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw0[playerid], 1);

	    Textdraw1[playerid] = CreatePlayerTextDraw(playerid, 73.000000, 161.000000, "1               Los Santos Government");
	    PlayerTextDrawBackgroundColor(playerid, Textdraw1[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw1[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw1[playerid], 0.259999, 1.000000);
	    PlayerTextDrawColor(playerid, Textdraw1[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw1[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw1[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw1[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw1[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw1[playerid], 564.000000, 0.000000);

	    Textdraw2[playerid] = CreatePlayerTextDraw(playerid, 327.000000, 162.000000, "Info");
	    PlayerTextDrawAlignment(playerid, Textdraw2[playerid], 2);
	    PlayerTextDrawBackgroundColor(playerid, Textdraw2[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw2[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw2[playerid], 0.239997, 0.799996);
	    PlayerTextDrawColor(playerid, Textdraw2[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw2[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw2[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw2[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw2[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw2[playerid], 10.000000, 47.000000);
	    PlayerTextDrawSetSelectable(playerid, Textdraw2[playerid], 1);

	    Textdraw3[playerid] = CreatePlayerTextDraw(playerid, 380.000000, 162.000000, "Pojazdy");
	    PlayerTextDrawAlignment(playerid, Textdraw3[playerid], 2);
	    PlayerTextDrawBackgroundColor(playerid, Textdraw3[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw3[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw3[playerid], 0.239997, 0.799996);
	    PlayerTextDrawColor(playerid, Textdraw3[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw3[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw3[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw3[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw3[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw3[playerid], 10.000000, 47.000000);
	    PlayerTextDrawSetSelectable(playerid, Textdraw3[playerid], 1);

	    Textdraw4[playerid] = CreatePlayerTextDraw(playerid, 433.000000, 162.000000, "Sluzba");
	    PlayerTextDrawAlignment(playerid, Textdraw4[playerid], 2);
	    PlayerTextDrawBackgroundColor(playerid, Textdraw4[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw4[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw4[playerid], 0.239997, 0.799996);
	    PlayerTextDrawColor(playerid, Textdraw4[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw4[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw4[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw4[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw4[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw4[playerid], 10.000000, 47.000000);
	    PlayerTextDrawSetSelectable(playerid, Textdraw4[playerid], 1);

	    Textdraw5[playerid] = CreatePlayerTextDraw(playerid, 486.000000, 162.000000, "Magazyn");
	    PlayerTextDrawAlignment(playerid, Textdraw5[playerid], 2);
	    PlayerTextDrawBackgroundColor(playerid, Textdraw5[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw5[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw5[playerid], 0.239997, 0.799996);
	    PlayerTextDrawColor(playerid, Textdraw5[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw5[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw5[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw5[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw5[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw5[playerid], 10.000000, 47.000000);
	    PlayerTextDrawSetSelectable(playerid, Textdraw5[playerid], 1);

	    Textdraw6[playerid] = CreatePlayerTextDraw(playerid, 539.000000, 162.000000, "On-line");
	    PlayerTextDrawAlignment(playerid, Textdraw6[playerid], 2);
	    PlayerTextDrawBackgroundColor(playerid, Textdraw6[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw6[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw6[playerid], 0.239997, 0.799996);
	    PlayerTextDrawColor(playerid, Textdraw6[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw6[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw6[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw6[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw6[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw6[playerid], 10.000000, 47.000000);
	    PlayerTextDrawSetSelectable(playerid, Textdraw6[playerid], 1);

	    Textdraw7[playerid] = CreatePlayerTextDraw(playerid, 73.000000, 174.000000, "2               Los Santos Police Department");
	    PlayerTextDrawBackgroundColor(playerid, Textdraw7[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw7[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw7[playerid], 0.259999, 1.000000);
	    PlayerTextDrawColor(playerid, Textdraw7[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw7[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw7[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw7[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw7[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw7[playerid], 564.000000, 0.000000);

	    Textdraw8[playerid] = CreatePlayerTextDraw(playerid, 327.000000, 175.000000, "Info");
	    PlayerTextDrawAlignment(playerid, Textdraw8[playerid], 2);
	    PlayerTextDrawBackgroundColor(playerid, Textdraw8[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw8[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw8[playerid], 0.239997, 0.799996);
	    PlayerTextDrawColor(playerid, Textdraw8[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw8[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw8[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw8[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw8[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw8[playerid], 10.000000, 47.000000);
	    PlayerTextDrawSetSelectable(playerid, Textdraw8[playerid], 1);

	    Textdraw9[playerid] = CreatePlayerTextDraw(playerid, 380.000000, 175.000000, "Pojazdy");
	    PlayerTextDrawAlignment(playerid, Textdraw9[playerid], 2);
	    PlayerTextDrawBackgroundColor(playerid, Textdraw9[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw9[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw9[playerid], 0.239997, 0.799996);
	    PlayerTextDrawColor(playerid, Textdraw9[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw9[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw9[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw9[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw9[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw9[playerid], 10.000000, 47.000000);
	    PlayerTextDrawSetSelectable(playerid, Textdraw9[playerid], 1);

	    Textdraw10[playerid] = CreatePlayerTextDraw(playerid, 433.000000, 175.000000, "Sluzba");
	    PlayerTextDrawAlignment(playerid, Textdraw10[playerid], 2);
	    PlayerTextDrawBackgroundColor(playerid, Textdraw10[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw10[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw10[playerid], 0.239997, 0.799996);
	    PlayerTextDrawColor(playerid, Textdraw10[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw10[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw10[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw10[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw10[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw10[playerid], 10.000000, 47.000000);
	    PlayerTextDrawSetSelectable(playerid, Textdraw10[playerid], 1);

	    Textdraw11[playerid] = CreatePlayerTextDraw(playerid, 486.000000, 175.000000, "Magazyn");
	    PlayerTextDrawAlignment(playerid, Textdraw11[playerid], 2);
	    PlayerTextDrawBackgroundColor(playerid, Textdraw11[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw11[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw11[playerid], 0.239997, 0.799996);
	    PlayerTextDrawColor(playerid, Textdraw11[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw11[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw11[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw11[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw11[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw11[playerid], 10.000000, 47.000000);
	    PlayerTextDrawSetSelectable(playerid, Textdraw11[playerid], 1);

	    Textdraw12[playerid] = CreatePlayerTextDraw(playerid, 539.000000, 175.000000, "On-line");
	    PlayerTextDrawAlignment(playerid, Textdraw12[playerid], 2);
	    PlayerTextDrawBackgroundColor(playerid, Textdraw12[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw12[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw12[playerid], 0.239997, 0.799996);
	    PlayerTextDrawColor(playerid, Textdraw12[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw12[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw12[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw12[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw12[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw12[playerid], 10.000000, 47.000000);
	    PlayerTextDrawSetSelectable(playerid, Textdraw12[playerid], 1);

	    Textdraw13[playerid] = CreatePlayerTextDraw(playerid, 73.000000, 187.000000, "3               Los Santos Fire Department");
	    PlayerTextDrawBackgroundColor(playerid, Textdraw13[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw13[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw13[playerid], 0.259999, 1.000000);
	    PlayerTextDrawColor(playerid, Textdraw13[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw13[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw13[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw13[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw13[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw13[playerid], 564.000000, 0.000000);

	    Textdraw14[playerid] = CreatePlayerTextDraw(playerid, 327.000000, 188.000000, "Info");
	    PlayerTextDrawAlignment(playerid, Textdraw14[playerid], 2);
	    PlayerTextDrawBackgroundColor(playerid, Textdraw14[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw14[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw14[playerid], 0.239997, 0.799996);
	    PlayerTextDrawColor(playerid, Textdraw14[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw14[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw14[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw14[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw14[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw14[playerid], 10.000000, 47.000000);
	    PlayerTextDrawSetSelectable(playerid, Textdraw14[playerid], 1);

	    Textdraw15[playerid] = CreatePlayerTextDraw(playerid, 380.000000, 188.000000, "Pojazdy");
	    PlayerTextDrawAlignment(playerid, Textdraw15[playerid], 2);
	    PlayerTextDrawBackgroundColor(playerid, Textdraw15[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw15[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw15[playerid], 0.239997, 0.799996);
	    PlayerTextDrawColor(playerid, Textdraw15[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw15[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw15[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw15[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw15[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw15[playerid], 10.000000, 47.000000);
	    PlayerTextDrawSetSelectable(playerid, Textdraw15[playerid], 1);

	    Textdraw16[playerid] = CreatePlayerTextDraw(playerid, 433.000000, 188.000000, "Sluzba");
	    PlayerTextDrawAlignment(playerid, Textdraw16[playerid], 2);
	    PlayerTextDrawBackgroundColor(playerid, Textdraw16[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw16[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw16[playerid], 0.239997, 0.799996);
	    PlayerTextDrawColor(playerid, Textdraw16[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw16[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw16[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw16[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw16[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw16[playerid], 10.000000, 47.000000);
	    PlayerTextDrawSetSelectable(playerid, Textdraw16[playerid], 1);

	    Textdraw17[playerid] = CreatePlayerTextDraw(playerid, 486.000000, 188.000000, "Magazyn");
	    PlayerTextDrawAlignment(playerid, Textdraw17[playerid], 2);
	    PlayerTextDrawBackgroundColor(playerid, Textdraw17[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw17[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw17[playerid], 0.239997, 0.799996);
	    PlayerTextDrawColor(playerid, Textdraw17[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw17[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw17[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw17[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw17[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw17[playerid], 10.000000, 47.000000);
	    PlayerTextDrawSetSelectable(playerid, Textdraw17[playerid], 1);

	    Textdraw18[playerid] = CreatePlayerTextDraw(playerid, 539.000000, 188.000000, "On-line");
	    PlayerTextDrawAlignment(playerid, Textdraw18[playerid], 2);
	    PlayerTextDrawBackgroundColor(playerid, Textdraw18[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw18[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw18[playerid], 0.239997, 0.799996);
	    PlayerTextDrawColor(playerid, Textdraw18[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw18[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw18[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw18[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw18[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw18[playerid], 10.000000, 47.000000);
	    PlayerTextDrawSetSelectable(playerid, Textdraw18[playerid], 1);

	    Textdraw19[playerid] = CreatePlayerTextDraw(playerid, 73.000000, 200.000000, "4               Department of Justice");
	    PlayerTextDrawBackgroundColor(playerid, Textdraw19[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw19[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw19[playerid], 0.259999, 1.000000);
	    PlayerTextDrawColor(playerid, Textdraw19[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw19[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw19[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw19[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw19[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw19[playerid], 564.000000, 0.000000);

	    Textdraw20[playerid] = CreatePlayerTextDraw(playerid, 327.000000, 201.000000, "Info");
	    PlayerTextDrawAlignment(playerid, Textdraw20[playerid], 2);
	    PlayerTextDrawBackgroundColor(playerid, Textdraw20[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw20[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw20[playerid], 0.239997, 0.799996);
	    PlayerTextDrawColor(playerid, Textdraw20[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw20[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw20[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw20[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw20[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw20[playerid], 10.000000, 47.000000);
	    PlayerTextDrawSetSelectable(playerid, Textdraw20[playerid], 1);

	    Textdraw21[playerid] = CreatePlayerTextDraw(playerid, 380.000000, 201.000000, "Pojazdy");
	    PlayerTextDrawAlignment(playerid, Textdraw21[playerid], 2);
	    PlayerTextDrawBackgroundColor(playerid, Textdraw21[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw21[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw21[playerid], 0.239997, 0.799996);
	    PlayerTextDrawColor(playerid, Textdraw21[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw21[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw21[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw21[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw21[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw21[playerid], 10.000000, 47.000000);
	    PlayerTextDrawSetSelectable(playerid, Textdraw21[playerid], 1);

	    Textdraw22[playerid] = CreatePlayerTextDraw(playerid, 433.000000, 201.000000, "Sluzba");
	    PlayerTextDrawAlignment(playerid, Textdraw22[playerid], 2);
	    PlayerTextDrawBackgroundColor(playerid, Textdraw22[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw22[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw22[playerid], 0.239997, 0.799996);
	    PlayerTextDrawColor(playerid, Textdraw22[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw22[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw22[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw22[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw22[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw22[playerid], 10.000000, 47.000000);
	    PlayerTextDrawSetSelectable(playerid, Textdraw22[playerid], 1);

	    Textdraw23[playerid] = CreatePlayerTextDraw(playerid, 486.000000, 201.000000, "Magazyn");
	    PlayerTextDrawAlignment(playerid, Textdraw23[playerid], 2);
	    PlayerTextDrawBackgroundColor(playerid, Textdraw23[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw23[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw23[playerid], 0.239997, 0.799996);
	    PlayerTextDrawColor(playerid, Textdraw23[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw23[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw23[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw23[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw23[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw23[playerid], 10.000000, 47.000000);
	    PlayerTextDrawSetSelectable(playerid, Textdraw23[playerid], 1);

	    Textdraw24[playerid] = CreatePlayerTextDraw(playerid, 539.000000, 201.000000, "On-line");
	    PlayerTextDrawAlignment(playerid, Textdraw24[playerid], 2);
	    PlayerTextDrawBackgroundColor(playerid, Textdraw24[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw24[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw24[playerid], 0.239997, 0.799996);
	    PlayerTextDrawColor(playerid, Textdraw24[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw24[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw24[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw24[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw24[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw24[playerid], 10.000000, 47.000000);
	    PlayerTextDrawSetSelectable(playerid, Textdraw24[playerid], 1);

	    Textdraw25[playerid] = CreatePlayerTextDraw(playerid, 73.000000, 213.000000, "5               Federal Bureau Of Investigation");
	    PlayerTextDrawBackgroundColor(playerid, Textdraw25[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw25[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw25[playerid], 0.259999, 1.000000);
	    PlayerTextDrawColor(playerid, Textdraw25[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw25[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw25[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw25[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw25[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw25[playerid], 564.000000, 0.000000);

	    Textdraw26[playerid] = CreatePlayerTextDraw(playerid, 327.000000, 214.000000, "Info");
	    PlayerTextDrawAlignment(playerid, Textdraw26[playerid], 2);
	    PlayerTextDrawBackgroundColor(playerid, Textdraw26[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw26[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw26[playerid], 0.239997, 0.799996);
	    PlayerTextDrawColor(playerid, Textdraw26[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw26[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw26[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw26[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw26[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw26[playerid], 10.000000, 47.000000);
	    PlayerTextDrawSetSelectable(playerid, Textdraw26[playerid], 1);

	    Textdraw27[playerid] = CreatePlayerTextDraw(playerid, 380.000000, 214.000000, "Pojazdy");
	    PlayerTextDrawAlignment(playerid, Textdraw27[playerid], 2);
	    PlayerTextDrawBackgroundColor(playerid, Textdraw27[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw27[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw27[playerid], 0.239997, 0.799996);
	    PlayerTextDrawColor(playerid, Textdraw27[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw27[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw27[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw27[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw27[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw27[playerid], 10.000000, 47.000000);
	    PlayerTextDrawSetSelectable(playerid, Textdraw27[playerid], 1);

	    Textdraw28[playerid] = CreatePlayerTextDraw(playerid, 433.000000, 214.000000, "Sluzba");
	    PlayerTextDrawAlignment(playerid, Textdraw28[playerid], 2);
	    PlayerTextDrawBackgroundColor(playerid, Textdraw28[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw28[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw28[playerid], 0.239997, 0.799996);
	    PlayerTextDrawColor(playerid, Textdraw28[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw28[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw28[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw28[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw28[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw28[playerid], 10.000000, 47.000000);
	    PlayerTextDrawSetSelectable(playerid, Textdraw28[playerid], 1);

	    Textdraw29[playerid] = CreatePlayerTextDraw(playerid, 486.000000, 214.000000, "Magazyn");
	    PlayerTextDrawAlignment(playerid, Textdraw29[playerid], 2);
	    PlayerTextDrawBackgroundColor(playerid, Textdraw29[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw29[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw29[playerid], 0.239997, 0.799996);
	    PlayerTextDrawColor(playerid, Textdraw29[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw29[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw29[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw29[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw29[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw29[playerid], 10.000000, 47.000000);
	    PlayerTextDrawSetSelectable(playerid, Textdraw29[playerid], 1);

	    Textdraw30[playerid] = CreatePlayerTextDraw(playerid, 539.000000, 214.000000, "On-line");
	    PlayerTextDrawAlignment(playerid, Textdraw30[playerid], 2);
	    PlayerTextDrawBackgroundColor(playerid, Textdraw30[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw30[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw30[playerid], 0.239997, 0.799996);
	    PlayerTextDrawColor(playerid, Textdraw30[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw30[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw30[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw30[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw30[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw30[playerid], 10.000000, 47.000000);
	    PlayerTextDrawSetSelectable(playerid, Textdraw30[playerid], 1);

	    //

	    Textdraw31[playerid] = CreatePlayerTextDraw(playerid, 73.000000, 226.000000, "6               Kings Undeground");
	    PlayerTextDrawBackgroundColor(playerid, Textdraw31[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw31[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw31[playerid], 0.259999, 1.000000);
	    PlayerTextDrawColor(playerid, Textdraw31[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw31[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw31[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw31[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw31[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw31[playerid], 564.000000, 0.000000);

		Textdraw32[playerid] = CreatePlayerTextDraw(playerid, 327.000000, 227.000000, "Info");
	    PlayerTextDrawAlignment(playerid, Textdraw32[playerid], 2);
	    PlayerTextDrawBackgroundColor(playerid, Textdraw32[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw32[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw32[playerid], 0.239997, 0.799996);
	    PlayerTextDrawColor(playerid, Textdraw32[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw32[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw32[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw32[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw32[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw32[playerid], 10.000000, 47.000000);
	    PlayerTextDrawSetSelectable(playerid, Textdraw32[playerid], 1);

		Textdraw33[playerid] = CreatePlayerTextDraw(playerid, 380.000000, 227.000000, "Pojazdy");
	    PlayerTextDrawAlignment(playerid, Textdraw33[playerid], 2);
	    PlayerTextDrawBackgroundColor(playerid, Textdraw33[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw33[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw33[playerid], 0.239997, 0.799996);
	    PlayerTextDrawColor(playerid, Textdraw33[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw33[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw33[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw33[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw33[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw33[playerid], 10.000000, 47.000000);
	    PlayerTextDrawSetSelectable(playerid, Textdraw33[playerid], 1);

	    Textdraw34[playerid] = CreatePlayerTextDraw(playerid, 433.000000, 227.000000, "Sluzba");
	    PlayerTextDrawAlignment(playerid, Textdraw34[playerid], 2);
	    PlayerTextDrawBackgroundColor(playerid, Textdraw34[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw34[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw34[playerid], 0.239997, 0.799996);
	    PlayerTextDrawColor(playerid, Textdraw34[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw34[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw34[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw34[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw34[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw34[playerid], 10.000000, 47.000000);
	    PlayerTextDrawSetSelectable(playerid, Textdraw34[playerid], 1);

	    Textdraw35[playerid] = CreatePlayerTextDraw(playerid, 486.000000, 227.000000, "Magazyn");
	    PlayerTextDrawAlignment(playerid, Textdraw35[playerid], 2);
	    PlayerTextDrawBackgroundColor(playerid, Textdraw35[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw35[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw35[playerid], 0.239997, 0.799996);
	    PlayerTextDrawColor(playerid, Textdraw35[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw35[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw35[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw35[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw35[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw35[playerid], 10.000000, 47.000000);
	    PlayerTextDrawSetSelectable(playerid, Textdraw35[playerid], 1);

	    Textdraw36[playerid] = CreatePlayerTextDraw(playerid, 539.000000, 227.000000, "On-line");
	    PlayerTextDrawAlignment(playerid, Textdraw36[playerid], 2);
	    PlayerTextDrawBackgroundColor(playerid, Textdraw36[playerid], 255);
	    PlayerTextDrawFont(playerid, Textdraw36[playerid], 1);
	    PlayerTextDrawLetterSize(playerid, Textdraw36[playerid], 0.239997, 0.799996);
	    PlayerTextDrawColor(playerid, Textdraw36[playerid], -1);
	    PlayerTextDrawSetOutline(playerid, Textdraw36[playerid], 1);
	    PlayerTextDrawSetProportional(playerid, Textdraw36[playerid], 1);
	    PlayerTextDrawUseBox(playerid, Textdraw36[playerid], 1);
	    PlayerTextDrawBoxColor(playerid, Textdraw36[playerid], 85);
	    PlayerTextDrawTextSize(playerid, Textdraw36[playerid], 10.000000, 47.000000);
	    PlayerTextDrawSetSelectable(playerid, Textdraw36[playerid], 1);*/
	    return 1;
	//}
	//return 1;
}
/*stock ZaldujTextDrawGrup(playerid)
{
	Textdraw0[playerid] = CreatePlayerTextDraw(playerid, 72.000000, 147.000000, "~w~Slot            Nazwa grupy                                                          Opcje");
	PlayerTextDrawBackgroundColor(playerid, Textdraw0[playerid], 0x333333FF);
	PlayerTextDrawFont(playerid, Textdraw0[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw0[playerid], 0.259999, 1.000000);
	PlayerTextDrawColor(playerid, Textdraw0[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw0[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw0[playerid], 1);

	Textdraw1[playerid] = CreatePlayerTextDraw(playerid, 73.000000, 161.000000, "1               Los Santos Government");
	PlayerTextDrawBackgroundColor(playerid, Textdraw1[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw1[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw1[playerid], 0.259999, 1.000000);
	PlayerTextDrawColor(playerid, Textdraw1[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw1[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw1[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw1[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw1[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw1[playerid], 564.000000, 0.000000);

	Textdraw2[playerid] = CreatePlayerTextDraw(playerid, 327.000000, 162.000000, "Info");
	PlayerTextDrawAlignment(playerid, Textdraw2[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, Textdraw2[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw2[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw2[playerid], 0.239997, 0.799996);
	PlayerTextDrawColor(playerid, Textdraw2[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw2[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw2[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw2[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw2[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw2[playerid], 10.000000, 47.000000);
	PlayerTextDrawSetSelectable(playerid, Textdraw2[playerid], 1);

	Textdraw3[playerid] = CreatePlayerTextDraw(playerid, 380.000000, 162.000000, "Pojazdy");
	PlayerTextDrawAlignment(playerid, Textdraw3[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, Textdraw3[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw3[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw3[playerid], 0.239997, 0.799996);
	PlayerTextDrawColor(playerid, Textdraw3[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw3[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw3[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw3[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw3[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw3[playerid], 10.000000, 47.000000);
	PlayerTextDrawSetSelectable(playerid, Textdraw3[playerid], 1);

	Textdraw4[playerid] = CreatePlayerTextDraw(playerid, 433.000000, 162.000000, "Sluzba");
	PlayerTextDrawAlignment(playerid, Textdraw4[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, Textdraw4[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw4[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw4[playerid], 0.239997, 0.799996);
	PlayerTextDrawColor(playerid, Textdraw4[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw4[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw4[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw4[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw4[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw4[playerid], 10.000000, 47.000000);
	PlayerTextDrawSetSelectable(playerid, Textdraw4[playerid], 1);

	Textdraw5[playerid] = CreatePlayerTextDraw(playerid, 486.000000, 162.000000, "Magazyn");
	PlayerTextDrawAlignment(playerid, Textdraw5[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, Textdraw5[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw5[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw5[playerid], 0.239997, 0.799996);
	PlayerTextDrawColor(playerid, Textdraw5[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw5[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw5[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw5[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw5[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw5[playerid], 10.000000, 47.000000);
	PlayerTextDrawSetSelectable(playerid, Textdraw5[playerid], 1);

	Textdraw6[playerid] = CreatePlayerTextDraw(playerid, 539.000000, 162.000000, "On-line");
	PlayerTextDrawAlignment(playerid, Textdraw6[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, Textdraw6[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw6[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw6[playerid], 0.239997, 0.799996);
	PlayerTextDrawColor(playerid, Textdraw6[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw6[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw6[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw6[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw6[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw6[playerid], 10.000000, 47.000000);
	PlayerTextDrawSetSelectable(playerid, Textdraw6[playerid], 1);

	Textdraw7[playerid] = CreatePlayerTextDraw(playerid, 73.000000, 174.000000, "2               Los Santos Police Department");
	PlayerTextDrawBackgroundColor(playerid, Textdraw7[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw7[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw7[playerid], 0.259999, 1.000000);
	PlayerTextDrawColor(playerid, Textdraw7[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw7[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw7[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw7[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw7[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw7[playerid], 564.000000, 0.000000);

	Textdraw8[playerid] = CreatePlayerTextDraw(playerid, 327.000000, 175.000000, "Info");
	PlayerTextDrawAlignment(playerid, Textdraw8[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, Textdraw8[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw8[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw8[playerid], 0.239997, 0.799996);
	PlayerTextDrawColor(playerid, Textdraw8[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw8[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw8[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw8[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw8[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw8[playerid], 10.000000, 47.000000);
	PlayerTextDrawSetSelectable(playerid, Textdraw8[playerid], 1);

	Textdraw9[playerid] = CreatePlayerTextDraw(playerid, 380.000000, 175.000000, "Pojazdy");
	PlayerTextDrawAlignment(playerid, Textdraw9[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, Textdraw9[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw9[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw9[playerid], 0.239997, 0.799996);
	PlayerTextDrawColor(playerid, Textdraw9[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw9[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw9[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw9[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw9[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw9[playerid], 10.000000, 47.000000);
	PlayerTextDrawSetSelectable(playerid, Textdraw9[playerid], 1);

	Textdraw10[playerid] = CreatePlayerTextDraw(playerid, 433.000000, 175.000000, "Sluzba");
	PlayerTextDrawAlignment(playerid, Textdraw10[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, Textdraw10[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw10[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw10[playerid], 0.239997, 0.799996);
	PlayerTextDrawColor(playerid, Textdraw10[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw10[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw10[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw10[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw10[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw10[playerid], 10.000000, 47.000000);
	PlayerTextDrawSetSelectable(playerid, Textdraw10[playerid], 1);

	Textdraw11[playerid] = CreatePlayerTextDraw(playerid, 486.000000, 175.000000, "Magazyn");
	PlayerTextDrawAlignment(playerid, Textdraw11[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, Textdraw11[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw11[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw11[playerid], 0.239997, 0.799996);
	PlayerTextDrawColor(playerid, Textdraw11[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw11[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw11[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw11[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw11[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw11[playerid], 10.000000, 47.000000);
	PlayerTextDrawSetSelectable(playerid, Textdraw11[playerid], 1);

	Textdraw12[playerid] = CreatePlayerTextDraw(playerid, 539.000000, 175.000000, "On-line");
	PlayerTextDrawAlignment(playerid, Textdraw12[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, Textdraw12[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw12[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw12[playerid], 0.239997, 0.799996);
	PlayerTextDrawColor(playerid, Textdraw12[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw12[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw12[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw12[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw12[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw12[playerid], 10.000000, 47.000000);
	PlayerTextDrawSetSelectable(playerid, Textdraw12[playerid], 1);

	Textdraw13[playerid] = CreatePlayerTextDraw(playerid, 73.000000, 187.000000, "3               Los Santos Fire Department");
	PlayerTextDrawBackgroundColor(playerid, Textdraw13[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw13[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw13[playerid], 0.259999, 1.000000);
	PlayerTextDrawColor(playerid, Textdraw13[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw13[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw13[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw13[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw13[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw13[playerid], 564.000000, 0.000000);

	Textdraw14[playerid] = CreatePlayerTextDraw(playerid, 327.000000, 188.000000, "Info");
	PlayerTextDrawAlignment(playerid, Textdraw14[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, Textdraw14[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw14[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw14[playerid], 0.239997, 0.799996);
	PlayerTextDrawColor(playerid, Textdraw14[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw14[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw14[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw14[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw14[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw14[playerid], 10.000000, 47.000000);
	PlayerTextDrawSetSelectable(playerid, Textdraw14[playerid], 1);

	Textdraw15[playerid] = CreatePlayerTextDraw(playerid, 380.000000, 188.000000, "Pojazdy");
	PlayerTextDrawAlignment(playerid, Textdraw15[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, Textdraw15[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw15[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw15[playerid], 0.239997, 0.799996);
	PlayerTextDrawColor(playerid, Textdraw15[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw15[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw15[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw15[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw15[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw15[playerid], 10.000000, 47.000000);
	PlayerTextDrawSetSelectable(playerid, Textdraw15[playerid], 1);

	Textdraw16[playerid] = CreatePlayerTextDraw(playerid, 433.000000, 188.000000, "Sluzba");
	PlayerTextDrawAlignment(playerid, Textdraw16[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, Textdraw16[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw16[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw16[playerid], 0.239997, 0.799996);
	PlayerTextDrawColor(playerid, Textdraw16[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw16[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw16[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw16[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw16[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw16[playerid], 10.000000, 47.000000);
	PlayerTextDrawSetSelectable(playerid, Textdraw16[playerid], 1);

	Textdraw17[playerid] = CreatePlayerTextDraw(playerid, 486.000000, 188.000000, "Magazyn");
	PlayerTextDrawAlignment(playerid, Textdraw17[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, Textdraw17[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw17[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw17[playerid], 0.239997, 0.799996);
	PlayerTextDrawColor(playerid, Textdraw17[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw17[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw17[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw17[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw17[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw17[playerid], 10.000000, 47.000000);
	PlayerTextDrawSetSelectable(playerid, Textdraw17[playerid], 1);

	Textdraw18[playerid] = CreatePlayerTextDraw(playerid, 539.000000, 188.000000, "On-line");
	PlayerTextDrawAlignment(playerid, Textdraw18[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, Textdraw18[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw18[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw18[playerid], 0.239997, 0.799996);
	PlayerTextDrawColor(playerid, Textdraw18[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw18[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw18[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw18[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw18[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw18[playerid], 10.000000, 47.000000);
	PlayerTextDrawSetSelectable(playerid, Textdraw18[playerid], 1);

	Textdraw19[playerid] = CreatePlayerTextDraw(playerid, 73.000000, 200.000000, "4               Department of Justice");
	PlayerTextDrawBackgroundColor(playerid, Textdraw19[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw19[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw19[playerid], 0.259999, 1.000000);
	PlayerTextDrawColor(playerid, Textdraw19[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw19[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw19[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw19[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw19[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw19[playerid], 564.000000, 0.000000);

	Textdraw20[playerid] = CreatePlayerTextDraw(playerid, 327.000000, 201.000000, "Info");
	PlayerTextDrawAlignment(playerid, Textdraw20[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, Textdraw20[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw20[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw20[playerid], 0.239997, 0.799996);
	PlayerTextDrawColor(playerid, Textdraw20[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw20[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw20[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw20[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw20[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw20[playerid], 10.000000, 47.000000);
	PlayerTextDrawSetSelectable(playerid, Textdraw20[playerid], 1);

	Textdraw21[playerid] = CreatePlayerTextDraw(playerid, 380.000000, 201.000000, "Pojazdy");
	PlayerTextDrawAlignment(playerid, Textdraw21[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, Textdraw21[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw21[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw21[playerid], 0.239997, 0.799996);
	PlayerTextDrawColor(playerid, Textdraw21[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw21[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw21[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw21[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw21[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw21[playerid], 10.000000, 47.000000);
	PlayerTextDrawSetSelectable(playerid, Textdraw21[playerid], 1);

	Textdraw22[playerid] = CreatePlayerTextDraw(playerid, 433.000000, 201.000000, "Sluzba");
	PlayerTextDrawAlignment(playerid, Textdraw22[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, Textdraw22[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw22[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw22[playerid], 0.239997, 0.799996);
	PlayerTextDrawColor(playerid, Textdraw22[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw22[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw22[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw22[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw22[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw22[playerid], 10.000000, 47.000000);
	PlayerTextDrawSetSelectable(playerid, Textdraw22[playerid], 1);

	Textdraw23[playerid] = CreatePlayerTextDraw(playerid, 486.000000, 201.000000, "Magazyn");
	PlayerTextDrawAlignment(playerid, Textdraw23[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, Textdraw23[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw23[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw23[playerid], 0.239997, 0.799996);
	PlayerTextDrawColor(playerid, Textdraw23[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw23[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw23[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw23[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw23[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw23[playerid], 10.000000, 47.000000);
	PlayerTextDrawSetSelectable(playerid, Textdraw23[playerid], 1);

	Textdraw24[playerid] = CreatePlayerTextDraw(playerid, 539.000000, 201.000000, "On-line");
	PlayerTextDrawAlignment(playerid, Textdraw24[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, Textdraw24[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw24[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw24[playerid], 0.239997, 0.799996);
	PlayerTextDrawColor(playerid, Textdraw24[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw24[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw24[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw24[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw24[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw24[playerid], 10.000000, 47.000000);
	PlayerTextDrawSetSelectable(playerid, Textdraw24[playerid], 1);

	Textdraw25[playerid] = CreatePlayerTextDraw(playerid, 73.000000, 213.000000, "5               Federal Bureau Of Investigation");
	PlayerTextDrawBackgroundColor(playerid, Textdraw25[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw25[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw25[playerid], 0.259999, 1.000000);
	PlayerTextDrawColor(playerid, Textdraw25[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw25[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw25[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw25[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw25[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw25[playerid], 564.000000, 0.000000);

	Textdraw26[playerid] = CreatePlayerTextDraw(playerid, 327.000000, 214.000000, "Info");
	PlayerTextDrawAlignment(playerid, Textdraw26[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, Textdraw26[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw26[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw26[playerid], 0.239997, 0.799996);
	PlayerTextDrawColor(playerid, Textdraw26[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw26[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw26[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw26[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw26[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw26[playerid], 10.000000, 47.000000);
	PlayerTextDrawSetSelectable(playerid, Textdraw26[playerid], 1);

	Textdraw27[playerid] = CreatePlayerTextDraw(playerid, 380.000000, 214.000000, "Pojazdy");
	PlayerTextDrawAlignment(playerid, Textdraw27[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, Textdraw27[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw27[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw27[playerid], 0.239997, 0.799996);
	PlayerTextDrawColor(playerid, Textdraw27[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw27[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw27[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw27[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw27[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw27[playerid], 10.000000, 47.000000);
	PlayerTextDrawSetSelectable(playerid, Textdraw27[playerid], 1);

	Textdraw28[playerid] = CreatePlayerTextDraw(playerid, 433.000000, 214.000000, "Sluzba");
	PlayerTextDrawAlignment(playerid, Textdraw28[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, Textdraw28[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw28[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw28[playerid], 0.239997, 0.799996);
	PlayerTextDrawColor(playerid, Textdraw28[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw28[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw28[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw28[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw28[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw28[playerid], 10.000000, 47.000000);
	PlayerTextDrawSetSelectable(playerid, Textdraw28[playerid], 1);

	Textdraw29[playerid] = CreatePlayerTextDraw(playerid, 486.000000, 214.000000, "Magazyn");
	PlayerTextDrawAlignment(playerid, Textdraw29[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, Textdraw29[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw29[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw29[playerid], 0.239997, 0.799996);
	PlayerTextDrawColor(playerid, Textdraw29[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw29[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw29[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw29[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw29[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw29[playerid], 10.000000, 47.000000);
	PlayerTextDrawSetSelectable(playerid, Textdraw29[playerid], 1);

	Textdraw30[playerid] = CreatePlayerTextDraw(playerid, 539.000000, 214.000000, "On-line");
	PlayerTextDrawAlignment(playerid, Textdraw30[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, Textdraw30[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw30[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw30[playerid], 0.239997, 0.799996);
	PlayerTextDrawColor(playerid, Textdraw30[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw30[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw30[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw30[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw30[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw30[playerid], 10.000000, 47.000000);
	PlayerTextDrawSetSelectable(playerid, Textdraw30[playerid], 1);

	//

	Textdraw31[playerid] = CreatePlayerTextDraw(playerid, 73.000000, 226.000000, "6               Kings Undeground");
	PlayerTextDrawBackgroundColor(playerid, Textdraw31[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw31[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw31[playerid], 0.259999, 1.000000);
	PlayerTextDrawColor(playerid, Textdraw31[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw31[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw31[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw31[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw31[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw31[playerid], 564.000000, 0.000000);

	Textdraw32[playerid] = CreatePlayerTextDraw(playerid, 327.000000, 227.000000, "Info");
	PlayerTextDrawAlignment(playerid, Textdraw32[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, Textdraw32[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw32[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw32[playerid], 0.239997, 0.799996);
	PlayerTextDrawColor(playerid, Textdraw32[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw32[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw32[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw32[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw32[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw32[playerid], 10.000000, 47.000000);
	PlayerTextDrawSetSelectable(playerid, Textdraw32[playerid], 1);

	Textdraw33[playerid] = CreatePlayerTextDraw(playerid, 380.000000, 227.000000, "Pojazdy");
	PlayerTextDrawAlignment(playerid, Textdraw33[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, Textdraw33[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw33[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw33[playerid], 0.239997, 0.799996);
	PlayerTextDrawColor(playerid, Textdraw33[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw33[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw33[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw33[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw33[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw33[playerid], 10.000000, 47.000000);
	PlayerTextDrawSetSelectable(playerid, Textdraw33[playerid], 1);

	Textdraw34[playerid] = CreatePlayerTextDraw(playerid, 433.000000, 227.000000, "Sluzba");
	PlayerTextDrawAlignment(playerid, Textdraw34[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, Textdraw34[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw34[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw34[playerid], 0.239997, 0.799996);
	PlayerTextDrawColor(playerid, Textdraw34[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw34[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw34[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw34[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw34[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw34[playerid], 10.000000, 47.000000);
	PlayerTextDrawSetSelectable(playerid, Textdraw34[playerid], 1);

	Textdraw35[playerid] = CreatePlayerTextDraw(playerid, 486.000000, 227.000000, "Magazyn");
	PlayerTextDrawAlignment(playerid, Textdraw35[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, Textdraw35[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw35[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw35[playerid], 0.239997, 0.799996);
	PlayerTextDrawColor(playerid, Textdraw35[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw35[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw35[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw35[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw35[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw35[playerid], 10.000000, 47.000000);
	PlayerTextDrawSetSelectable(playerid, Textdraw35[playerid], 1);

	Textdraw36[playerid] = CreatePlayerTextDraw(playerid, 539.000000, 227.000000, "On-line");
	PlayerTextDrawAlignment(playerid, Textdraw36[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, Textdraw36[playerid], 255);
	PlayerTextDrawFont(playerid, Textdraw36[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw36[playerid], 0.239997, 0.799996);
	PlayerTextDrawColor(playerid, Textdraw36[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Textdraw36[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw36[playerid], 1);
	PlayerTextDrawUseBox(playerid, Textdraw36[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Textdraw36[playerid], 85);
	PlayerTextDrawTextSize(playerid, Textdraw36[playerid], 10.000000, 47.000000);
	PlayerTextDrawSetSelectable(playerid, Textdraw36[playerid], 1);
}*/
stock PreloadAnimLib(playerid)
{
	static AnimLibraries[][] =
	{
		"AIRPORT","Attractors","BAR","BASEBALL","BD_FIRE","BEACH","benchpress",
		"BF_injection","BIKED","BIKEH","BIKELEAP","BIKES","BIKEV","BIKE_DBZ","BMX",
		"BOMBER","BOX","BSKTBALL","BUDDY","BUS","CAMERA","CAR","CARRY","CAR_CHAT",
		"CASINO","CHAINSAW","CHOPPA","CLOTHES","COACH","COLT45","COP_AMBIENT",
		"COP_DVBYZ","CRACK","CRIB","DAM_JUMP","DANCING","DEALER","DILDO","DODGE",
		"DOZER","DRIVEBYS","FAT","FIGHT_B","FIGHT_C","FIGHT_D","FIGHT_E","FINALE",
		"FINALE2","FLAME","Flowers","FOOD","Freeweights","GANGS","GHANDS",
		"GHETTO_DB","goggles","GRAFFITI","GRAVEYARD","GRENADE","GYMNASIUM",
		"HAIRCUTS","HEIST9","INT_HOUSE","INT_OFFICE","INT_SHOP","JST_BUISNESS",
		"KART","KISSING","KNIFE","LAPDAN1","LAPDAN2","LAPDAN3","LOWRIDER",
		"MD_CHASE","MD_END","MEDIC","MISC","MTB","MUSCULAR","NEVADA","ON_LOOKERS",
		"OTB","PARACHUTE","PARK","PAULNMAC","ped","PLAYER_DVBYS","PLAYIDLES",
		"POLICE","POOL","POOR","PYTHON","QUAD","QUAD_DBZ","RAPPING","RIFLE","RIOT",
		"ROB_BANK","ROCKET","RUSTLER","RYDER","SCRATCHING","SHAMAL","SHOP",
		"SHOTGUN","SILENCED","SKATE","SMOKING","SNIPER","SPRAYCAN","STRIP",
		"SUNBATHE","SWAT","SWEET","SWIM","SWORD","TANK","TATTOOS","TEC","TRAIN",
		"TRUCK","UZI","VAN","VENDING","VORTEX","WAYFARER","WEAPONS","WUZI"
	};
	for(new l; l < sizeof(AnimLibraries); l++) ApplyAnimation(playerid, AnimLibraries[l], "null", 0.0, 0, 0, 0, 0, 0);
}
public OnPlayerEnterDynamicArea(playerid, areaid)
{
    foreach(Player, i)
    {
        if(GetPVarType(i, "bboxareaid"))
        {
            if(!IsPlayerInAnyVehicle(playerid))
		    {
				new vehicleid=GetPlayerVehicleID(playerid);
				new uida = SprawdzCarUID(vehicleid);
				SetPVarInt(playerid, "AreaPlayer", areaid);
				if(PojazdInfo[uida][pAudioStream] == 0 && Discman[playerid] == 0)
				{
		            new station[256];
		            GetPVarString(i, "BoomboxURL", station, sizeof(station));
		            if(areaid == GetPVarInt(i, "bboxareaid"))
		            {
		                SetPVarInt(playerid, "AreaPlyeri", i);
		                PlayAudioStreamForPlayer(playerid, station, GetPVarFloat(i, "bposX"), GetPVarFloat(i, "bposY"), GetPVarFloat(i, "bposZ"), 50.0, 1);
		                return 1;
					}
				}
			}
		}
		if(GetPVarType(i, "bboxareaidveh"))
        {
            if(!IsPlayerInAnyVehicle(playerid))
		    {
				new vehicleid=GetPlayerVehicleID(playerid);
				new uida = SprawdzCarUID(vehicleid);
				SetPVarInt(playerid, "AreaPlayer", areaid);
				if(PojazdInfo[uida][pAudioStream] == 0 && Discman[playerid] == 0)
				{
		            new station[256];
		            GetPVarString(i, "BoomboxURLveh", station, sizeof(station));
		            if(areaid == GetPVarInt(i, "bboxareaidveh"))
		            {
		                SetPVarInt(playerid, "AreaPlyeri", i);
		                PlayAudioStreamForPlayer(playerid, station, GetPVarFloat(i, "bposXveh"), GetPVarFloat(i, "bposYveh"), GetPVarFloat(i, "bposZveh"), 50.0, 1);
		                return 1;
					}
				}
			}
		}
    }
    return 1;
}
public OnPlayerLeaveDynamicArea(playerid, areaid)
{
    foreach(Player, i)
    {
        if(GetPVarType(i, "bboxareaid"))
        {
            if(!IsPlayerInAnyVehicle(playerid))
		    {
				new vehicleid=GetPlayerVehicleID(playerid);
				new uida = SprawdzCarUID(vehicleid);
				SetPVarInt(playerid, "AreaPlayer", 0);
				if(PojazdInfo[uida][pAudioStream] == 0 && Discman[playerid] == 0)
				{
		            if(areaid == GetPVarInt(i, "bboxareaid"))
		            {
		                SetPVarInt(playerid, "AreaPlyeri", 0);
		                StopAudioStreamForPlayer(playerid);
		                return 1;
		            }
				}
			}
		}
        if(GetPVarType(i, "bboxareaidveh"))
		{
            if(!IsPlayerInAnyVehicle(playerid))
		    {
				new vehicleid=GetPlayerVehicleID(playerid);
				new uida = SprawdzCarUID(vehicleid);
				SetPVarInt(playerid, "AreaPlayer", 0);
				if(PojazdInfo[uida][pAudioStream] == 0 && Discman[playerid] == 0)
				{
		            if(areaid == GetPVarInt(i, "bboxareaidveh"))
		            {
		                SetPVarInt(playerid, "AreaPlyeri", 0);
		                StopAudioStreamForPlayer(playerid);
		                return 1;
		            }
				}
			}
        }
    }
    return 1;
}
public OnPlayerDisconnect(playerid, reason)
{
	if(GetPVarInt(playerid, "idobiktu") != 0 || GetPVarInt(playerid, "inedit") != 0)
	{
		cmd_md(playerid, "");
	}
	if(GetPVarInt(playerid, "Vegas_Bank") != 0)
	{
	    Dodajkase(playerid, GetPVarInt(playerid, "Vegas_Bank"));
	    new log[256];
		format(log, sizeof(log), "[Leave] [%s] [ID: %d] zwrócono kasê z jednorekiego bandyty %d$", ZmianaNicku(playerid), playerid, GetPVarInt(playerid, "Vegas_Bank"));
		Transakcja(T_IC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
        SetPVarInt(playerid, "Vegas_Bank", 0);
	}
    new log[256];
	format(log, sizeof(log), "[Leave] [%s] has left the server (%d)", ZmianaNicku(playerid), playerid);
	Transakcja(T_IC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
	SetPVarInt(playerid, "AntyVehicle", 0);
    if(GetPVarInt(playerid, "Bandana") != 0)
	{
        Nieznajomy[playerid] = 0;
		RemovePlayerAttachedObject(playerid, 0);
	    PrzedmiotInfo[GetPVarInt(playerid, "Bandana")][pUzywany] = 0;
	    DeletePVar(playerid, "Bandana");
    }
	//HidePlayerGroups(playerid);
    StopPlayerFade(playerid);
    OdladujUprawnieniaGrup(playerid);
	new city[32];
	format(city, sizeof(city), "PL");
	SetPVarInt(playerid, "AntyBugArmour", 0);
	SetPVarString(playerid, "PrefixCountry", city);
	SetPVarInt(playerid, "TXDGRUP", 0);
	SetPVarInt(playerid, "SynchroPostaci", 0);
    SetPVarInt(playerid, "UdzialWRozprawie", 0);
    SetPVarInt(playerid, "AdmRepair", 0);
    SetPVarInt(playerid, "WZIALPACZKA", 0);
    SetPVarInt(playerid, "Incognito", 0);
    SetPVarInt(playerid, "blindfold", 0);
    SetPVarInt(playerid, "DrabinaUzyl", 0);
    SetPVarFloat(playerid, "DrabinaX", 0);
    SetPVarFloat(playerid, "DrabinaY", 0);
    SetPVarFloat(playerid, "DrabinaZ", 0);
    SetPVarFloat(playerid, "DrabinaA", 0);
    SetPVarFloat(playerid, "DrabinaX1", 0);
    SetPVarFloat(playerid, "DrabinaX2", 0);
    SetPVarFloat(playerid, "DrabinaX3", 0);
    SetPVarInt(playerid, "STRZAL", 0);
    SetPVarInt(playerid, "VPOMOC", 0);
    SetPVarInt(playerid, "Poziom", 0);
	SetPVarInt(playerid, "BotAkcja", 0);
	SetPVarInt(playerid, "ODLOZONYOBIEKT", 0);
	SetPVarInt(playerid, "Drabina", 0);
    SetPVarInt(playerid, "BW1", 0);
    DeletePVar( playerid, "BusKoszt" );
    DeletePVar( playerid, "BusCzas" );
    DeletePVar( playerid, "BusDo" );
    DeletePVar( playerid, "BusPrzystanek" );
    BUSS[playerid] = 0;
	DaneGracza[playerid][gWGRZE] = 0;
	ZapiszWGrze(playerid);
    BW1[playerid] = 0;
	BW2[playerid] = -1;
	BWwAucie[playerid] = 0;
    SetPVarInt(playerid, "laser", 0);
    RemovePlayerAttachedObject(playerid, 0);
    HavingBall[playerid] = 0;
    Anim[playerid] = 0;
    if(HavingBall[playerid]) Baller = 999;
    if(GetPVarType(playerid, "Object1"))
    {
        DestroyDynamicObject(GetPVarInt(playerid, "Object1"));
        DeletePVar(playerid, "Object1");
	}
	if(GetPVarType(playerid, "Object2"))
    {
        DestroyDynamicObject(GetPVarInt(playerid, "Object2"));
        DeletePVar(playerid, "Object2");
	}
	if(GetPVarType(playerid, "Object3"))
    {
        DestroyDynamicObject(GetPVarInt(playerid, "Object3"));
        DeletePVar(playerid, "Object3");
	}
	if(GetPVarType(playerid, "Object4"))
    {
        DestroyDynamicObject(GetPVarInt(playerid, "Object4"));
        DeletePVar(playerid, "Object4");
	}
	if(GetPVarType(playerid, "Object5"))
    {
        DestroyDynamicObject(GetPVarInt(playerid, "Object5"));
        DeletePVar(playerid, "Object5");
	}
	if(GetPVarType(playerid, "Object6"))
    {
        DestroyDynamicObject(GetPVarInt(playerid, "Object6"));
        DeletePVar(playerid, "Object6");
	}
	if(GetPVarInt(playerid, "Object7") != 0)
    {
	    new id = GetPVarInt(playerid, "Object7");
	    new uid = GetPVarInt(playerid, "DrabinaUID");
	    if(GetPVarInt(playerid, "Object7") == id)
		{
		    UsunObiekt(id);
		    PrzedmiotInfo[uid][pUzywany] = 0;
		    ZapiszPrzedmiot(uid);
		    DeletePVar(playerid, "Object7");
            SetPVarInt(playerid, "Drabina", 0);
            DeletePVar(playerid, "DrabinaUID");
		}
    }
    if(GetPVarType(playerid, "BoomboxObject"))
    {
        DestroyDynamicObject(GetPVarInt(playerid, "BoomboxObject"));
        if(GetPVarType(playerid, "bboxareaid"))
        {
            foreach(Player,i)
            {
                if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "bboxareaid")))
                {
                    StopAudioStreamForPlayer(i);
                }
            }
        }
    }
    if(GetPVarType(playerid, "BoomboxObjectveh"))
    {
        DestroyDynamicObject(GetPVarInt(playerid, "BoomboxObjectveh"));
        if(GetPVarType(playerid, "bboxareaidveh"))
        {
            foreach(Player,i)
            {
                if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "bboxareaidveh")))
                {
                    StopAudioStreamForPlayer(i);
                }
            }
        }
    }
    TextDrawHideForPlayer(playerid, CB);
    TextDrawSetString(Vegas_Player[playerid][1], "Bank:~n~$0");
	TextDrawSetString(Vegas_Player[playerid][0], "Stawka:~n~$10");
	DaneGracza[playerid][gSpam] = 0;
	ALK[playerid] = 0;
	DaneGracza[playerid][gTYPCHODZENIA] = 0;
	DaneGracza[playerid][gAKCES] = 0;
	DaneGracza[playerid][gPOSZ] = 0;
	if(DaneGracza[playerid][gPaczkaUID] != 0)
	{
		PaczkaInfo[DaneGracza[playerid][gPaczkaUID]][xZAJETY] = 0;
		DaneGracza[playerid][gPaczkaUID] = 0;
		DaneGracza[playerid][gPaczkaM] = 0;
		DaneGracza[playerid][gPaczkaT] = 0;
	}
	UpdateDynamic3DTextLabelText(DaneGracza[playerid][gOpisPostaci], 0xAAAAFFFF, " ");
	DzwoniID[playerid] = 0;
	Dzwoni[playerid] = 0;
	DaneGracza[playerid][gAdmGroup] = 0;
	Discman[playerid] = 0;
	Odebral[playerid] = 0;
	ObiektInfo[UzywaBudkiUID[playerid]][objPoker][0] = 0;
	DeletePVar(playerid,"uidbudka");
	PlayerTextDrawHide(playerid, Lokalizacja[playerid]);
	GangZonePL[playerid] = false;
	if(Pracuje[playerid] != 0)
	{
		new uid = SprawdzCarUID(Pracuje[playerid]);
		SetVehicleToRespawn(Pracuje[playerid]);
		PojazdInfo[uid][pStan] = 1000.0;
		PojazdInfo[uid][pPaliwo] = 100;
		SetVehicleHealth(Pracuje[playerid], PojazdInfo[uid][pStan] );
		RepairVehicle(Pracuje[playerid]);
		Pracuje[playerid] = 0;
		DaneGracza[playerid][gSwp] = 0;
	}
	if(DaneGracza[playerid][gWywiad] != 0)
	{
		DaneGracza[DaneGracza[playerid][gWywiad]][gWywiad] = 0;
		DaneGracza[playerid][gWywiad] = 0;
	}
	karnet[playerid] = 0;
	silka[playerid] = 0;
	if(taxijedz[playerid] != 0)
	{
		new vuid = GetPVarInt(playerid, "przejazuid");
		new guid = GetPVarInt(playerid, "przejazguid");
		new cena = GetPVarInt(playerid, "przejazcena");
		new Float:przejechal, Float:cenak;
		przejechal = (PojazdInfo[vuid][pPrzebieg]/1000)-GetPVarFloat(playerid, "przejechanes");
		cenak = przejechal*cena;
		new procent = floatround(cenak/10);
		if(procent > 20)
		{
			procent = 20;
		}
		DaneGracza[GetPVarInt(playerid, "przejazt")][gPremia] += procent;
		GrupaInfo[guid][gSaldo] += (floatround(cenak)-procent);
		Dodajkase( playerid, -floatround( cenak ) );
		new taxisstr[124];
		format(taxisstr, sizeof(taxisstr), "~b~~h~~h~Przychod: $%d",floatround( cenak ));
		GameTextForPlayer(GetPVarInt(playerid, "przejazt"),taxisstr,5000,4);
		DisablePlayerCheckpoint(GetPVarInt(playerid, "przejazt"));
		taxijedz[playerid] = 0;
	}
	if(DaneGracza[playerid][gTworzyWyscig] != 0)
	{
		GrupaInfo[TrasaDuty[playerid]][gSaldo] += 1000;
		ZapiszSaldo(TrasaDuty[playerid]);
		UsunWyscig(TrasaDuty[playerid], DaneGracza[playerid][gTworzyWyscigNazwa], TrasaDutyNr[playerid]);
		TrasaDuty[playerid] = 0;
		TrasaDutyNr[playerid] = 0;
	}
	if(Tag[playerid] != -1)
	{
		UpdateDynamic3DTextLabelText(ObiektInfo[Tag[playerid]][objNapis], 0xC2A2DAFF, " ");
		RoznicaLakieru[playerid] = 0;
		ObiektInfo[Tag[playerid]][gZajety] = 0;
		Tag[playerid] = -1;
		LakierujeCzas[playerid] = 0;
	}
	if(LakierujeCzas[playerid] != 0)
	{
		GameTextForPlayer(playerid,"~n~~g~Malowanie przerwane!", 3000,4);
		RoznicaLakieru[playerid] = 0;
		UpdateDynamic3DTextLabelText(Vopis[MalowanieKolor[playerid][3]], 0xAAAAFFFF, " ");
		LakierujeCzas[playerid] = 0;
		GameTextForPlayer(NaprawiaID[playerid], "~n~~g~Gracz ktory lakierowal ci pojazd wyszedl z serwera!", 5000, 3);
        NaprawianieVW[playerid] = 0;
	}
	if(UzywaBudkiUID[playerid] != 0)
	{
		ObiektInfo[UzywaBudkiUID[playerid]][objPoker][0] = 0;
	}
	///////////////////////////////////////////////////////////////////////
	WybralMozliwoscPoker[playerid] = 0;
	GraWPokera[playerid] = 0;
	WpisalKase[playerid] = 0;
	if(DaneGracza[playerid][gPokerZetony] != -1)
	{
		new kasa = DaneGracza[playerid][gPokerZetony] / 10;
		Dodajkase(playerid, kasa);
		DaneGracza[playerid][gPokerZetony] = -1;
	}
	new id_pokera = DaneGracza[playerid][gPoker];
	for(new i = 0; i < 30; i++)
	{
		if(DaneGracza[playerid][gPokerObj][i] != 0)
		{
			DestroyDynamicObject(DaneGracza[playerid][gPokerObj][i]);
			DaneGracza[playerid][gPokerObj][i] = 0;
			DaneGracza[playerid][gNumeryObiektowPostawionych][i] = 0;
		}
	}
	CancelSelectTextDraw(playerid);
	for(new i = 0; i < 6; i++)
	{
		if(ObiektInfo[id_pokera][objPoker][i] != -1)
		{
			UsunBaryGracz(ObiektInfo[id_pokera][objPoker][i]);
		}
	}
	for(new i = 0; i < 6; i++)
	{
		if(ObiektInfo[id_pokera][objPoker][i] == playerid)
		{
			ObiektInfo[id_pokera][gAktualniGracze][i] = -1;
			break;
		}
	}
	new ilosc_oczekujacych_graczy = 0;
	if(DaneGracza[playerid][gRundaPokerCzas] != 0)
	{
		for(new i = 0; i < 6; i++)
		{
			if(ObiektInfo[id_pokera][objPoker][i] != -1 && DaneGracza[ObiektInfo[id_pokera][objPoker][i]][gRundaPokerCzas] != 0)
			{
				ilosc_oczekujacych_graczy++;
			}
		}
		DaneGracza[playerid][gRundaPokerCzas] = 0;
		if(ilosc_oczekujacych_graczy < 2)
		{
			for(new i = 0; i < 6; i++)
			{
				if(ObiektInfo[id_pokera][objPoker][i] != -1)
				{
					DaneGracza[ObiektInfo[id_pokera][objPoker][i]][gRundaPokerCzas] = 0;
					RozpocznijPokera(ObiektInfo[id_pokera][objPoker][i], DaneGracza[ObiektInfo[id_pokera][objPoker][i]][gPoker]);
				}
			}
		}
	}
	OdswiezTexdrawyPoker(id_pokera, 0);
	new ilosc = SprawdzIloscGraczy(id_pokera);
	if(ilosc >= 2)
	{
		SprawdzKolejGracza(playerid);
	}
	else
	{
		KoniecRundy(id_pokera);
	}
	for(new i = 0; i < 6; i++)
	{
		if(ObiektInfo[id_pokera][objPoker][i] == playerid)
		{
			ObiektInfo[id_pokera][objPoker][i] = -1;
			DaneGracza[playerid][gPoker] = 0;
			DaneGracza[playerid][gPokerStanowisko] = -1;
			DaneGracza[playerid][gPokerPostawione] = 0;
			DaneGracza[playerid][gPokerKarty][0] = 0;
			DaneGracza[playerid][gPokerKarty][1] = 0;
			DaneGracza[playerid][gInformacjePoker][0] = 0;
			DaneGracza[playerid][gInformacjePoker][1] = 0;
			DaneGracza[playerid][gInformacjePoker][2] = 0;
			DaneGracza[playerid][gInformacjePoker][3] = 0;
			DaneGracza[playerid][gInformacjePoker][4] = 0;
			DaneGracza[playerid][gInformacjePoker][5] = 0;
			DaneGracza[playerid][gInformacjePoker][6] = 0;
			break;
		}
	}
	PlayerTextDrawHide(playerid,KartyGracza[playerid]);
	PlayerTextDrawHide(playerid,KartyGracza1[playerid]);
	PlayerTextDrawHide(playerid,KartyGracza11[playerid]);
	PlayerTextDrawHide(playerid,KartyGracza2[playerid]);
	PlayerTextDrawHide(playerid,KartyGracza22[playerid]);
	PlayerTextDrawHide(playerid,KartyGracza3[playerid]);
	PlayerTextDrawHide(playerid,KartyGracza33[playerid]);
	PlayerTextDrawHide(playerid,KartyGracza4[playerid]);
	PlayerTextDrawHide(playerid,KartyGracza44[playerid]);
	PlayerTextDrawHide(playerid,KartyGracza5[playerid]);
	PlayerTextDrawHide(playerid,KartyGracza55[playerid]);
	PlayerTextDrawHide(playerid,KartyGracza6[playerid]);
	PlayerTextDrawHide(playerid,KartyGracza66[playerid]);
	PlayerTextDrawHide(playerid,Poker1[playerid]);
	PlayerTextDrawHide(playerid,Poker2[playerid]);
	PlayerTextDrawHide(playerid,Poker3[playerid]);
	PlayerTextDrawHide(playerid,Poker4[playerid]);
	PlayerTextDrawHide(playerid,Poker5[playerid]);
	PlayerTextDrawHide(playerid,Poker6[playerid]);
	PlayerTextDrawHide(playerid,KartaGracza1[playerid]);
	PlayerTextDrawHide(playerid,KartaGracza2[playerid]);
	PlayerTextDrawHide(playerid,KartaGracza3[playerid]);
	PlayerTextDrawHide(playerid,KartaGracza4[playerid]);
	PlayerTextDrawHide(playerid,KartaGracza5[playerid]);
	PlayerTextDrawHide(playerid,KartaGracza6[playerid]);
	PlayerTextDrawHide(playerid,KartaGracza7[playerid]);
	PlayerTextDrawHide(playerid,KartaGracza8[playerid]);
	PlayerTextDrawHide(playerid,KartaGracza9[playerid]);
	PlayerTextDrawHide(playerid,KartaGracza10[playerid]);
	PlayerTextDrawHide(playerid,KartaGracza11[playerid]);
	PlayerTextDrawHide(playerid,KartaGracza12[playerid]);
	PlayerTextDrawHide(playerid,KartaGracza13[playerid]);
	PlayerTextDrawHide(playerid,KartaGracza14[playerid]);
	PlayerTextDrawHide(playerid,WylosowaneKarty[playerid]);
	PlayerTextDrawHide(playerid,WylosowaneKarty1[playerid]);
	PlayerTextDrawHide(playerid,WylosowaneKarty2[playerid]);
	PlayerTextDrawHide(playerid,WylosowaneKarty3[playerid]);
	PlayerTextDrawHide(playerid,WylosowaneKarty4[playerid]);
	PlayerTextDrawHide(playerid,WylosowaneKarty5[playerid]);
	Frezuj(playerid,1);
	SetCameraBehindPlayer(playerid);
	//////////////////////////////////////////////////////////
	//KillTimer(DaneGracza[playerid][gTimerGlodu]);
	KillTimer(DaneGracza[playerid][gTimerParliator]);
	TextDrawHideForPlayer(playerid, Worek);
	TextDrawHideForPlayer(playerid, Worek2);
	if(DaneGracza[playerid][gBronUID] != 0)
	{
		UsunBronieGracza(playerid);
		PrzedmiotInfo[DaneGracza[playerid][gBronUID]][pUzywany] = 0;
		ZapiszPrzedmiot(DaneGracza[playerid][gBronUID]);
		DaneGracza[playerid][gBronUID] = 0;
		DaneGracza[playerid][gBronAmmo] = 0;
		DeletePVar(playerid, "UzywanaBron");
		ZapiszGracza(playerid);
	}
    if(DaneGracza[playerid][gSluzba] != 0)
	{
		ZapiszDuty(DaneGracza[playerid][gSluzba], playerid, DutyNR[playerid]);
	}
    DutyAdmina[playerid] = 0;
	Wedkuje[playerid] = 0;
    Wylogowany[playerid] = 0;
    new uids = GetPVarInt(playerid, "inedit");
	obiektinedit[uids] = false;
    Rekawiczki[playerid] = 0;
    DutyDZ[playerid] = 0;
	Rolki[playerid] = 0;
	Dostal[playerid] = 0;
	Dostal2[playerid] = 0;
	GPS[playerid] = 0;
	PASY[playerid] = 0;
	Amfeta[playerid] = 0;
	Kokaina[playerid] = 0;
	Extasa[playerid] = 0;
	Marycha[playerid] = 0;
	LSD[playerid] = 0;
	Grzyby[playerid] = 0;
	Hera[playerid] = 0;
	Mefedron[playerid] = 0;
	Tag[playerid] = -1;
	OpisekJaki[playerid] = 0;
	taxijedz[playerid] = 0;
	TrasaDuty[playerid] = 0;
	RoznicaLakieru[playerid] = 0;
	spanuje[playerid] = 0;
    DutyNR[playerid] = 0;
	////////////////////////////////////////////////////////////////////////////
	WybralMozliwoscPoker[playerid] = 0;
	////////////////////////////////////////////////////////////////////////////
    FrezzPlayer[playerid] = 0;
	PoziomLakieru[playerid] = -1;
    Nieznajomy[playerid] = 0;
    SetPVarInt(playerid, "UkrytyN", 0);
    FadePlayerDisconnect(playerid);
    DestroyDynamic3DTextLabel(Text3D:NapisWyszedl[playerid]);
    DestroyDynamic3DTextLabel(Text3D:Opisek[playerid]);
    OstatnieDrzwi[playerid] = 0;
    new Float:Pose[3];
	GetPlayerPos(playerid,Pose[0],Pose[1],Pose[2]);
	new sstr[256];
	new rok, miesiac, dzien, godzina, minuta, sekunda;
	getdate(rok, miesiac, dzien);
	gettime(godzina, minuta, sekunda);
	if(reason==0)
	{
		DaneGracza[playerid][gQS] = gettime()+1200;
		GetPlayerPos(playerid, DaneGracza[playerid][gX],DaneGracza[playerid][gY],DaneGracza[playerid][gZ]);
		DaneGracza[playerid][gVW] = GetPlayerVirtualWorld(playerid);
		DaneGracza[playerid][gINT] = GetPlayerInterior(playerid);
		Transakcja(T_WYSZEDL, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, "time out", gettime()+KOREKTA_CZASOWA);
    	format(sstr,sizeof(sstr),"%s\n(time-out)\n%d.%02d.%02d - %02d:%02d",ZmianaNicku(playerid), rok, miesiac, dzien, godzina, minuta);
		NapisWyszedl[playerid]=CreateDynamic3DTextLabel(sstr,0xDEDEDECC,Pose[0],Pose[1],Pose[2],10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,-1,-1,-1,10.0);
		ZapiszGracza(playerid);
	}
	else if(reason==1)
	{
	    DaneGracza[playerid][gQS] = gettime()+1200;
		GetPlayerPos(playerid, DaneGracza[playerid][gX],DaneGracza[playerid][gY],DaneGracza[playerid][gZ]);
		DaneGracza[playerid][gVW] = GetPlayerVirtualWorld(playerid);
		DaneGracza[playerid][gINT] = GetPlayerInterior(playerid);
		Transakcja(T_WYSZEDL, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, "/q", gettime()+KOREKTA_CZASOWA);
    	format(sstr,sizeof(sstr),"%s\n(/q)\n%d.%02d.%02d - %02d:%02d",ZmianaNicku(playerid), rok, miesiac, dzien, godzina, minuta);
		NapisWyszedl[playerid]=CreateDynamic3DTextLabel(sstr,0xDEDEDECC,Pose[0],Pose[1],Pose[2],10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,-1,-1,-1,10.0);
		ZapiszGracza(playerid);
	}
	else if(reason==2)
	{
		if(DaneGracza[playerid][gQS] == 0)
		{
			DaneGracza[playerid][gQS] = gettime()+1200;
			GetPlayerPos(playerid, DaneGracza[playerid][gX],DaneGracza[playerid][gY],DaneGracza[playerid][gZ]);
			DaneGracza[playerid][gVW] = GetPlayerVirtualWorld(playerid);
			DaneGracza[playerid][gINT] = GetPlayerInterior(playerid);
			format(sstr,sizeof(sstr),"%s\n(kick/ban)\n%d.%02d.%02d - %02d:%02d",ZmianaNicku(playerid), rok, miesiac, dzien, godzina, minuta);
			Transakcja(T_WYSZEDL, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, "kick/ban", gettime()+KOREKTA_CZASOWA);
			NapisWyszedl[playerid]=CreateDynamic3DTextLabel(sstr,0xDEDEDECC,Pose[0],Pose[1],Pose[2],10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,-1,-1,-1,10.0);
			ZapiszGracza(playerid);
		}
		else
		{
		    DaneGracza[playerid][gQS] = gettime()+1200;
			GetPlayerPos(playerid, DaneGracza[playerid][gX],DaneGracza[playerid][gY],DaneGracza[playerid][gZ]);
			DaneGracza[playerid][gVW] = GetPlayerVirtualWorld(playerid);
			DaneGracza[playerid][gINT] = GetPlayerInterior(playerid);
			format(sstr,sizeof(sstr),"%s\n(qs)\n%d.%02d.%02d - %02d:%02d",ZmianaNicku(playerid), rok, miesiac, dzien, godzina, minuta);
			Transakcja(T_WYSZEDL, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, "/qs", gettime()+KOREKTA_CZASOWA);
			NapisWyszedl[playerid]=CreateDynamic3DTextLabel(sstr,0xDEDEDECC,Pose[0],Pose[1],Pose[2],10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,-1,-1,-1,10.0);
			ZapiszGracza(playerid);
		}
	}
	else if(reason==1000)
	{
        DaneGracza[playerid][gQS] = gettime()+1200;
		GetPlayerPos(playerid, DaneGracza[playerid][gX],DaneGracza[playerid][gY],DaneGracza[playerid][gZ]);
		DaneGracza[playerid][gVW] = GetPlayerVirtualWorld(playerid);
		DaneGracza[playerid][gINT] = GetPlayerInterior(playerid);
		Transakcja(T_WYSZEDL, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, "relog/admin", gettime()+KOREKTA_CZASOWA);
    	format(sstr,sizeof(sstr),"%s\n(relog/admin)\n%d.%02d.%02d - %02d:%02d",ZmianaNicku(playerid), rok, miesiac, dzien, godzina, minuta);
		NapisWyszedl[playerid]=CreateDynamic3DTextLabel(sstr,0xDEDEDECC,Pose[0],Pose[1],Pose[2],10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,-1,-1,-1,10.0);
		ZapiszGracza(playerid);
	}
	else if(reason==1002)
	{
	    DaneGracza[playerid][gQS] = gettime()+1200;
		GetPlayerPos(playerid, DaneGracza[playerid][gX],DaneGracza[playerid][gY],DaneGracza[playerid][gZ]);
		DaneGracza[playerid][gVW] = GetPlayerVirtualWorld(playerid);
		DaneGracza[playerid][gINT] = GetPlayerInterior(playerid);
		Transakcja(T_WYSZEDL, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, "/login", gettime()+KOREKTA_CZASOWA);
    	format(sstr,sizeof(sstr),"%s\n(/login)\n%d.%02d.%02d - %02d:%02d",ZmianaNicku(playerid), rok, miesiac, dzien, godzina, minuta);
		NapisWyszedl[playerid]=CreateDynamic3DTextLabel(sstr,0xDEDEDECC,Pose[0],Pose[1],Pose[2],10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,-1,-1,-1,10.0);
		ZapiszGracza(playerid);
	}
	SetTimerEx("NapisUsuns",10000,0,"d",playerid);
	strdel(tekst_global, 0, 2048);
	format(tekst_global, sizeof(tekst_global), " ", playerid);
	UpdateDynamic3DTextLabelText(DaneGracza[playerid][gNICK], 0xf5deb355, tekst_global);
	new str[512];
	strdel(str, 0, 512);
    format(str, sizeof(str), "UPDATE `jochym_postacie` SET `ONLINE` = '0' WHERE `ID` = '%d'", DaneGracza[playerid][gUID]);
    mysql_query(str);
    strdel(str, 0, 512);
	format(str, sizeof(str), "UPDATE `ips_core_members` SET `online` = '0' WHERE `member_id` = '%d'", DaneGracza[playerid][gGUID]);
	mysql_query(str);
	DaneGracza[playerid][gOSTATNIO_NA_SERWERZE] = gettime();
	ZapiszGracza(playerid);
	ZapiszBankKasa(playerid);
	ZapiszGraczaGlobal(playerid, 1);
////////////////////////////////////////////////////////////////////////////////
	DaneGracza[playerid][gONLINE] = 0;
	DaneGracza[playerid][gGUID] = 0;
	Edytors[playerid] = 0;
	NaprawiaID[playerid] = 0;
	NaprawianieVW[playerid] = 0;
	NaprawiaODL[playerid] = 0;
	UzywaBudkiUID[playerid] = 0;
    NaprawiaVeh[playerid] = 0;
    NaprawiaIUID[playerid] = 0;
    animacja[playerid] = 0;
	LakierujeCzas[playerid] = 0;
    NaprawiaCzas[playerid] = 0;
    NaprawianieCena[playerid] = 0;
	DaneGracza[playerid][gUID] = 0;
	////////////////////////////////////////////////////////////////////////////
	DaneGracza[playerid][gPokx] = 0;
	DaneGracza[playerid][gPoky] = 0;
	DaneGracza[playerid][gPokz] = 0;
	////////////////////////////////////////////////////////////////////////////
	DaneGracza[playerid][gTworzyWyscig] = 0;
	DaneGracza[playerid][gTworzyWyscigCP] = 0;
	DaneGracza[playerid][gTworzyWyscigNazwa] = 0;
	DaneGracza[playerid][gWyscig] = 0;
	////////////////////////////////////////////////////////////////////////////
	DaneGracza[playerid][gPokr] = 0;
	////////////////////////////////////////////////////////////////////////////
	DaneGracza[playerid][gRaport] = 0;
	DaneGracza[playerid][gPytanie] = 0;
	DaneGracza[playerid][gAJ] = 0;
	DaneGracza[playerid][gCZAS_ONLINE] = 0;
	DaneGracza[playerid][gGODZIN] = 0;
	DaneGracza[playerid][gMINUT] = 0;
	DaneGracza[playerid][gZarzadzajElektryka] = 0;
	DaneGracza[playerid][gPORTFEL] = 0;
	DaneGracza[playerid][gKajdanki] = -1;
	DaneGracza[playerid][gSznur] = -1;
	DaneGracza[playerid][gKoniecWyscigu] = 0;
	DaneGracza[playerid][gRaceTimeStart] = 0;
	////////////////////////////////////////////////////////////////////////////
	DaneGracza[playerid][gPokerPostawione] = 0;
	////////////////////////////////////////////////////////////////////////////
	DaneGracza[playerid][gNumeryObiektowPostawionych][0] = EOS;
	////////////////////////////////////////////////////////////////////////////
	DaneGracza[playerid][gInformacjePoker][0] = EOS;
	////////////////////////////////////////////////////////////////////////////
	DaneGracza[playerid][gSKIN] = 0;
	DaneGracza[playerid][gLskin] = 0;
	DaneGracza[playerid][gWynajem] = 0;
	////////////////////////////////////////////////////////////////////////////
	DaneGracza[playerid][gPoker] = 0;
	////////////////////////////////////////////////////////////////////////////
	DaneGracza[playerid][gZDROWIE] = 0.0;
	DaneGracza[playerid][gPromile] = 0;
	DaneGracza[playerid][gZamHot] = 0;
	DaneGracza[playerid][gCheckopintID] = 0;
	DaneGracza[playerid][gWIEK] = 0;
	DaneGracza[playerid][gWAGA] = 0;
	DaneGracza[playerid][gReputacja] = 0;
	DaneGracza[playerid][gTatuaze] = 0;
	DaneGracza[playerid][gPozwolenie] = 0;
	DaneGracza[playerid][gBudowanie] = 0;
	DaneGracza[playerid][gTeam] = 0;
	DaneGracza[playerid][gWytrych] = 0;
	DaneGracza[playerid][gFreeze] = 0;
	DaneGracza[playerid][gBlokDorywczej] = 0;
	DaneGracza[playerid][gPrzyczepioneObj] = 0;
	DaneGracza[playerid][gAnim] = 0;
	DaneGracza[playerid][gDNA] = 0;
	DaneGracza[playerid][gPayDay] = 0;
	DaneGracza[playerid][gPayDay2] = 0;
	DaneGracza[playerid][gPayDay3] = 0;
	DaneGracza[playerid][gPayDay4] = 0;
	DaneGracza[playerid][gPayDay5] = 0;
	DaneGracza[playerid][gPayDay6] = 0;
	DaneGracza[playerid][gAntyPayDay] = 0;
	DaneGracza[playerid][gLogin] = 0;
	DaneGracza[playerid][gNagroda] = 0;
	DaneGracza[playerid][g0] = 0;
	DaneGracza[playerid][g1] = 0;
	DaneGracza[playerid][g2] = 0;
	DaneGracza[playerid][g3] = 0;
	DaneGracza[playerid][g4] = 0;
	DaneGracza[playerid][g5] = 0;
	DaneGracza[playerid][g6] = 0;
	DaneGracza[playerid][g7] = 0;
	DaneGracza[playerid][g8] = 0;
	DaneGracza[playerid][g9] = 0;
	DaneGracza[playerid][g10] = 0;
	DaneGracza[playerid][gObiekty] = 0;
	DaneGracza[playerid][gBW] = 0;
	DaneGracza[playerid][gBetaTester] = 0;
	DaneGracza[playerid][gX] = 0.0;
	DaneGracza[playerid][gY] = 0.0;
	DaneGracza[playerid][gZ] = 0.0;
	DaneGracza[playerid][gKOLOR] = 0;
	DaneGracza[playerid][gVW] = 0;//VW gracza
	DaneGracza[playerid][gSluzba] = 0;
	DaneGracza[playerid][gINT] = 0;
	DaneGracza[playerid][gOCZEKIWANA_WYPLATA] = 0;
	DaneGracza[playerid][gAKTYWNE] = 1;
    DaneGracza[playerid][gPREMIUM] = 0;
    DaneGracza[playerid][gGAMESCORE] = 0;
    DaneGracza[playerid][gOOC] = 0;
    DaneGracza[playerid][gKLATWA] = 0;
    DaneGracza[playerid][gRUN] = 0;
    DaneGracza[playerid][gBAN] = 0;
    DaneGracza[playerid][gVEH] = 0;
   	DaneGracza[playerid][gGUN] = 0;
   	DaneGracza[playerid][gKONTO_W_BANKU] = 0;
	DaneGracza[playerid][gOstatniTrening] = 0;
	DaneGracza[playerid][gSTAN_KONTA] = 0;
	DaneGracza[playerid][gKREDYT] = 0;
 	DaneGracza[playerid][gDzialalnosc1] = 0;
	DaneGracza[playerid][gDzialalnosc2] = 0;
	DaneGracza[playerid][gDzialalnosc3] = 0;
	DaneGracza[playerid][gDzialalnosc4] = 0;
	DaneGracza[playerid][gDzialalnosc5] = 0;
	DaneGracza[playerid][gDzialalnosc6] = 0;
	DaneGracza[playerid][gBronUID] = 0;
	DaneGracza[playerid][gPktKarne] = 0;
	//DaneGracza[playerid][gGlod] = 0;
	DaneGracza[playerid][gWorek] = 0;
	DaneGracza[playerid][gPrzetrzmanie] = 0;
	DaneGracza[playerid][gPX] = 0;
	DaneGracza[playerid][gPY] = 0;
	DaneGracza[playerid][gPZ] = 0;
	DaneGracza[playerid][gPUID] = 0;
	DaneGracza[playerid][gBronAmmo] = 0;
	DaneGracza[playerid][gZarzadzajElektryka] = 0;
	MozeBanowac[playerid] = 0;
	ForeachEx(ilosca, 124)
	{
		DaneGracza[playerid][gUprawnienia1][ilosca] = 0;
		DaneGracza[playerid][gUprawnienia2][ilosca] = 0;
		DaneGracza[playerid][gUprawnienia3][ilosca] = 0;
		DaneGracza[playerid][gUprawnienia4][ilosca] = 0;
		DaneGracza[playerid][gUprawnienia5][ilosca] = 0;
		DaneGracza[playerid][gUprawnienia6][ilosca] = 0;
	}
	////////////////////////////////////////////////////////////////////////////
	DaneGracza[playerid][gPokerObj][0] = EOS;
	DaneGracza[playerid][gRundaPokerCzas] = 0;
	DaneGracza[playerid][gPokerKarty][0] = 0;
	DaneGracza[playerid][gPokerKarty][1] = 0;
	DaneGracza[playerid][gPokerZetony] = -1;
	////////////////////////////////////////////////////////////////////////////
	ResetPlayerWeapons(playerid);
	DeletePVar(playerid, "UzywanaBron");
	HourDB[playerid] = 0;
	MinutesDB[playerid] = 0;
	for(new i = 0; i < IloscGraczy; i++)
	{
		if(KtoJestOnline[i] == playerid)
		{
			zalogowany[playerid] = false;
			for(new o = i, d; o < IloscGraczy; o++)
			{
				d = o+1;
				KtoJestOnline[o] = KtoJestOnline[d];
			}
			IloscGraczy--;
			break;
		}
	}
////////////////////////////////////////////////////////////////////////////////
	return 1;
}
stock AnimacjaSzukaj(playerid)
{
	ApplyAnimation(playerid, "COP_AMBIENT", "Copbrowse_loop", 4.0, 1, 1, 1, 1, 1, 1);
}
stock AnimacjaPodpisz(playerid)
{
    ApplyAnimation(playerid, "otb", "betslp_loop", 4.0, 1, 1, 1, 1, 1, 1);
}
stock AnimacjaBW(playerid)
{
    ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 1, 1, 1, 1, 1);
}
public OnPlayerSpawn(playerid)
{
	if(GetPVarInt(playerid, "PobranoModele") == 0)
	{
		return 0;
	}
	if(GetPVarInt(playerid, "ZablokujOnPlayerSpawn") == 1)
	{
		return 0;
	}
	TextDrawHideForPlayer(playerid, LadowanieModeli);
	new msg[254];
	format(msg,254,"%s",ImieGracza2(playerid));
	TextDrawSetString(Duty[playerid], msg);
	TextDrawShowForPlayer(playerid, Duty[playerid]);
    if(IsPlayerNPC(playerid)) return 1;
    ForeachEx(i, MAX_ZON)
	{
	    if(i == Lokacja[i][gUID])
	    {
 			GangZoneShowForAll(Lokacja[i][gUID], HexToInt(Lokacja[i][gKolor]));
		}
		if(Lokacja[i][gWojna] > 0)
		{
		    GangZoneFlashForAll(i, 0xFFFFFF00);
		}
	}
	if(guyfps[playerid] == 1)
 	{
 	    FPSMode(playerid);
	}
    SetTimerEx("dcek", 1, true, "i", playerid);
	new go,
		mi,
	    se;
	gettime(go, mi, se);
	if(go == 1 || go == 2 || go == 3 || go == 4 || go == 5)
	{
		SetPlayerTime(playerid, go, 0);	
	}
	if(go == 6 || go == 7)
	{
		SetPlayerTime(playerid, 6, 0);
	}
	if(go == 8 || go == 9 || go == 10 || go == 11 || go == 12 || go == 13 || go == 14 || go == 15 || go == 16 || go == 17)
	{
		SetPlayerTime(playerid, go, 0);
	}
	if(go == 18 || go == 19)
	{
		SetPlayerTime(playerid, 20, 0);
	}
	if(go == 20 || go == 21)
	{
		SetPlayerTime(playerid, 21, 0);
	}
	if(go == 22 || go == 23 || go == 24 || go == 0)
	{
		SetPlayerTime(playerid, 24, 0);
	}
    SetPlayerWorldBounds(playerid, 20000.00, -20000.00, 20000.00, -20000.00);
	ZaladujUprawnieniaSRP(playerid);
	AntyCheatBroni[playerid] = 1;
	KillTimer(TimerAntyCheat[playerid]);
	if(WlaczEuro == 1)
	{	
		new euro[128];
		TextDrawHideForPlayer(playerid, Euro[playerid]);
		if(DaneGracza[playerid][gEuro] <= 9)
		{
			format(euro, sizeof(euro),"~g~EUR~w~00000%d", DaneGracza[playerid][gEuro]);
		}
		if(DaneGracza[playerid][gEuro] <= 99 && DaneGracza[playerid][gEuro] >= 10)
		{
			format(euro, sizeof(euro),"~g~EUR~w~0000%d", DaneGracza[playerid][gEuro]);
		}
		if(DaneGracza[playerid][gEuro] <= 999 && DaneGracza[playerid][gEuro] >= 100)
		{
			format(euro, sizeof(euro),"~g~EUR~w~000%d", DaneGracza[playerid][gEuro]);
		}
		if(DaneGracza[playerid][gEuro] <= 9999 && DaneGracza[playerid][gEuro] >= 1000)
		{
			format(euro, sizeof(euro),"~g~EUR~w~00%d", DaneGracza[playerid][gEuro]);
		}
		if(DaneGracza[playerid][gEuro] <= 99999 && DaneGracza[playerid][gEuro] >= 10000)
		{
			format(euro, sizeof(euro),"~g~EUR~w~0%d", DaneGracza[playerid][gEuro]);
		}
		if(DaneGracza[playerid][gEuro] >= 100000)
		{
			format(euro, sizeof(euro),"~g~EUR~w~%d", DaneGracza[playerid][gEuro]);
		}
		TextDrawSetString(Euro[playerid], euro);
		TextDrawShowForPlayer(playerid, Euro[playerid]);
	}
	TextDrawShowForPlayer(playerid, LosSantosFM);
	TextDrawShowForPlayer(playerid, Logo);
    TextDrawShowForPlayer(playerid, Weazel);
	TimerAntyCheat[playerid] = SetTimerEx("WlaczAntyCheata",5000,0,"d",playerid);
	TextDrawHideForPlayer(playerid, Worek);
	TextDrawHideForPlayer(playerid, Worek2);
	if(DaneGracza[playerid][gZDROWIE] <= 0)
	{
		DaneGracza[playerid][gZDROWIE] = 9;
	}
 	UstawHP(playerid,DaneGracza[playerid][gZDROWIE]);
	SetPlayerDrunkLevel (playerid, DaneGracza[playerid][gPromile]);
 	SetTimerEx("Unfreeze_SetHP", 2000, 0, "i", playerid);
	ResetPlayerWeapons(playerid);
	if(DaneGracza[playerid][g0] >= 200)
	{
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 200);
	}
	else
	{
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, DaneGracza[playerid][g0]);
	}
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, DaneGracza[playerid][g1]);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, DaneGracza[playerid][g2]);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, DaneGracza[playerid][g3]);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, DaneGracza[playerid][g4]);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, DaneGracza[playerid][g5]);
	if(DaneGracza[playerid][g6] >= 200)
	{
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 200);
	}
	else
	{
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, DaneGracza[playerid][g6]);
	}
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, DaneGracza[playerid][g7]);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, DaneGracza[playerid][g8]);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, DaneGracza[playerid][g9]);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, DaneGracza[playerid][g10]);
	if(GraczPremium(playerid))
	{
		SetPlayerColor(playerid, 0xe8d97fFF);
	}
	else
	{
		SetPlayerColor(playerid, 0xb2b2b2FF);
	}
	ForeachEx(uidp, MAX_PRZEDMIOT)
	{
	    if(PrzedmiotInfo[uidp][pOwner] == DaneGracza[playerid][gUID] && PrzedmiotInfo[uidp][pUID] != 0 && PrzedmiotInfo[uidp][pTypWlas] == TYP_WLASCICIEL)
	    {
	        if(PrzedmiotInfo[uidp][pTyp] == 25 && PrzedmiotInfo[uidp][pUzywany] != 0)
	        {
	        	SetPlayerAttachedObject(playerid,9,1210,6,0.271999,0.069999,0.058999,0.000000,-100.600051,-3.000000,1.000000,1.000000,1.000000);
			}
	    }
	}
	if(DaneGracza[playerid][gPrzyczepiony1] != 0 && DaneGracza[playerid][gAKCES] == 1)
	{
		new sql4[200];
		format(sql4, sizeof(sql4), "SELECT * FROM `jochym_dodadtki` WHERE `UID` = '%d' AND `index` = '%d' LIMIT 1", DaneGracza[playerid][gUID], DaneGracza[playerid][gPrzyczepiony1]);
		mysql_query(sql4);
		mysql_store_result();
		if(mysql_num_rows() != 0)
		{
			mysql_fetch_row(sql4);
			new Float:zm[9], zmnsa[5];
			sscanf(sql4, "p<|>{dd}dddfffffffff", zmnsa[0]
				, zmnsa[1]
				, zmnsa[2]
				, zm[0]
				, zm[1]
				, zm[2]
				, zm[3]
				, zm[4]
				, zm[5]
				, zm[6]
				, zm[7]
				, zm[8]
				);
			SetPlayerAttachedObject(playerid,zmnsa[0],zmnsa[1],zmnsa[2],zm[0],zm[1],zm[2],zm[3],zm[4],zm[5],zm[6],zm[7],zm[8]);
		}
	}
	if(DaneGracza[playerid][gPrzyczepiony2] != 0 && DaneGracza[playerid][gAKCES] == 1)
	{
		new sql4[200];
		format(sql4, sizeof(sql4), "SELECT * FROM `jochym_dodadtki` WHERE `UID` = '%d' AND `index` = '%d' LIMIT 1", DaneGracza[playerid][gUID], DaneGracza[playerid][gPrzyczepiony2]);
		mysql_query(sql4);
		mysql_store_result();
		if(mysql_num_rows() != 0)
		{
			mysql_fetch_row(sql4);
			new Float:zm[9], zmnsa[5];
			sscanf(sql4, "p<|>{dd}dddfffffffff", zmnsa[0]
				, zmnsa[1]
				, zmnsa[2]
				, zm[0]
				, zm[1]
				, zm[2]
				, zm[3]
				, zm[4]
				, zm[5]
				, zm[6]
				, zm[7]
				, zm[8]
				);
			SetPlayerAttachedObject(playerid,zmnsa[0],zmnsa[1],zmnsa[2],zm[0],zm[1],zm[2],zm[3],zm[4],zm[5],zm[6],zm[7],zm[8]);
		}
	}
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, DaneGracza[playerid][gPORTFEL]);
	ResetPlayerWeapons(playerid);
	SetPlayerFightingStyle(playerid, DaneGracza[playerid][gStylWalki]);
	ClearAnimations(playerid);
 	if(DaneGracza[playerid][gAJ] != 0)
	{
		Teleportuj(playerid, 1174.3706,-1180.3267,87.0350);
		SetPlayerVirtualWorld(playerid, playerid + 10000);
		SetPlayerInterior(playerid, 0);
		if(DaneGracza[playerid][gLskin] == 0)
		{
			SetPlayerSkin(playerid, DaneGracza[playerid][gSKIN]);
		}else{
		    SetPlayerSkin(playerid, DaneGracza[playerid][gLskin]);
		}
		return 1;
	}
	else if(DaneGracza[playerid][gBW] != 0)
	{
	    if(DaneGracza[playerid][gLskin] == 0)
		{
			SetPlayerSkin(playerid, DaneGracza[playerid][gSKIN]);
		}else{
		    SetPlayerSkin(playerid, DaneGracza[playerid][gLskin]);
		}
		UstawHP(playerid,20);
		SetPlayerCameraPos(playerid, DaneGracza[playerid][gX]-3, DaneGracza[playerid][gY],DaneGracza[playerid][gZ]+7);
	  	SetPlayerCameraLookAt(playerid, DaneGracza[playerid][gX],DaneGracza[playerid][gY],DaneGracza[playerid][gZ]);
		if(DaneGracza[playerid][gX] == 0 && DaneGracza[playerid][gY] == 0)
		{
			Teleportuj(playerid, BudynekInfo[1][nX],BudynekInfo[1][nY],BudynekInfo[1][nZ]);
			SetPlayerFacingAngle(playerid, BudynekInfo[1][na]);
			SetPlayerVirtualWorld(playerid, BudynekInfo[1][nVW]);
			SetPlayerInterior(playerid, BudynekInfo[1][nINT]);
		}
		else
		{
			Teleportuj(playerid, DaneGracza[playerid][gX],DaneGracza[playerid][gY],DaneGracza[playerid][gZ]);
			SetPlayerVirtualWorld(playerid, DaneGracza[playerid][gVW]);
			SetPlayerInterior(playerid, DaneGracza[playerid][gINT]);
		}
	    Frezuj(playerid, 0);
    	AnimacjaBW(playerid);
	    return 1;
	}
	else if(Dostal[playerid] != 0)
 	{
 	    if(DaneGracza[playerid][gBW] != 0)
 	    {
 	        return 0;
		}
		ApplyAnimation(playerid,"SWAT","gnstwall_injurd",4.1,0,0,0,60,0);
 	}
 	else if(Dostal2[playerid] != 0)
 	{
 	    if(DaneGracza[playerid][gBW] != 0)
 	    {
 	        return 0;
		}
	}
	else if(Dostal2[playerid] != 0)
 	{
 	    return 0;
 	}
	else if(DaneGracza[playerid][gPrzetrzmanie] != 0)
	{
	    if(DaneGracza[playerid][gFreeze] == 0)
	    {
			Frezuj(playerid, 0);
			SetTimerEx("Frez", 6000, 0, "d", playerid);
		}
		new ui = DaneGracza[playerid][gPUID];
		Teleportuj(playerid, DaneGracza[playerid][gPX], DaneGracza[playerid][gPY], DaneGracza[playerid][gPZ]);
		SetPlayerVirtualWorld(playerid, BudynekInfo[ui][nVWW]);
		if(BudynekInfo[ui][nSwiatlo] == 1)
		{
			TextDrawShowForPlayer(playerid, Light);
		}
		if(DaneGracza[playerid][gLskin] == 0)
		{
			SetPlayerSkin(playerid, DaneGracza[playerid][gSKIN]);
		}else{
			SetPlayerSkin(playerid, DaneGracza[playerid][gLskin]);
		}
		return 1;
	}
	if(DaneGracza[playerid][gQS] >= gettime() && DaneGracza[playerid][gVW] == INT_BUS_VW)
	{
		DaneGracza[playerid][gQS] = 0;
	}
	else if(DaneGracza[playerid][gQS] >= gettime())
	{
	    if(DaneGracza[playerid][gFreeze] == 0)
	    {
			Frezuj(playerid, 0);
			SetTimerEx("Frez", 6000, 0, "d", playerid);
		}
	    Teleportuj(playerid, DaneGracza[playerid][gX],DaneGracza[playerid][gY],DaneGracza[playerid][gZ]);
	    SetPlayerVirtualWorld(playerid, DaneGracza[playerid][gVW]);
	    SetPlayerInterior(playerid, DaneGracza[playerid][gINT]);
	    if(DaneGracza[playerid][gLskin] == 0)
		{
			SetPlayerSkin(playerid, DaneGracza[playerid][gSKIN]);
		}else{
		    SetPlayerSkin(playerid, DaneGracza[playerid][gLskin]);
		}
		if(BudynekInfo[GetPlayerVirtualWorld(playerid)][nSwiatlo] == 1)
		{
            TextDrawShowForPlayer(playerid, Light);
		}
		SetTimerEx("QS", 3000, 0, "d", playerid);
		return 1;
	}
	else if(DaneGracza[playerid][gWynajem] != 0)
	{
		new ui = DaneGracza[playerid][gWynajem];
		if(BudynekInfo[ui][nTyp] == 1 || BudynekInfo[ui][nTyp] == 20)
		{
			new uid = BudynekInfo[ui][nWlascicielD];
			if(GrupaInfo[uid][gTyp] == DZIALALNOSC_HOTEL || BudynekInfo[ui][nTyp] == 20)
			{
				if(BudynekInfo[ui][nTyp] != 20)
				{
				    if(DaneGracza[playerid][gFreeze] == 0)
				    {
				    	Frezuj(playerid, 0);
						SetTimerEx("Frez", 6000, 0, "d", playerid);
					}
					Teleportuj(playerid, BudynekInfo[ui][nXW],BudynekInfo[ui][nYW],BudynekInfo[ui][nZW]);
					SetPlayerFacingAngle(playerid, BudynekInfo[ui][naw]);
					SetPlayerVirtualWorld(playerid, BudynekInfo[ui][nVWW]);
					SetPlayerInterior(playerid, BudynekInfo[ui][nINTW]);
					if(BudynekInfo[ui][nSwiatlo] == 1)
					{
						TextDrawShowForPlayer(playerid, Light);
					}
					if(DaneGracza[playerid][gLskin] == 0)
					{
						SetPlayerSkin(playerid, DaneGracza[playerid][gSKIN]);
					}else{
						SetPlayerSkin(playerid, DaneGracza[playerid][gLskin]);
					}
					if(DaneGracza[playerid][gZamHot] < gettime()+CZAS_LETNI)
					{
						strdel(tekst_globals, 0, 2048);
						SetPVarInt(playerid, "CENAPRZ", ui);
						format(tekst_globals, sizeof(tekst_globals), "Okres twojego zameldowania dobieg³ koñca, aby go przed³u¿yæ musisz zap³aciæ $%d za kolejne trzy dni.",BudynekInfo[ui][nHotel]);
						dShowPlayerDialog( playerid, DIALOG_HOTEL_PRZED, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja",tekst_globals, "Op³aæ", "Wymelduj" );
						return 0;
					}
				}
				else
				{
				    if(DaneGracza[playerid][gFreeze] == 0)
				    {
					    Frezuj(playerid, 0);
						SetTimerEx("Frez", 6000, 0, "d", playerid);
					}
					Teleportuj(playerid, BudynekInfo[ui][nX],BudynekInfo[ui][nY],BudynekInfo[ui][nZ]);
					SetPlayerFacingAngle(playerid, BudynekInfo[ui][na]);
					SetPlayerVirtualWorld(playerid, BudynekInfo[ui][nVW]);
					SetPlayerInterior(playerid, BudynekInfo[ui][nINT]);
					if(DaneGracza[playerid][gLskin] == 0)
					{
						SetPlayerSkin(playerid, DaneGracza[playerid][gSKIN]);
					}else{
						SetPlayerSkin(playerid, DaneGracza[playerid][gLskin]);
					}
					if(DaneGracza[playerid][gZamHot] < gettime()+CZAS_LETNI)
					{
						strdel(tekst_globals, 0, 2048);
						SetPVarInt(playerid, "CENAPRZ", ui);
						format(tekst_globals, sizeof(tekst_globals), "Okres twojego zameldowania dobieg³ koñca, aby go przed³u¿yæ musisz zap³aciæ $%d za kolejny dzieñ.",BudynekInfo[ui][nHotel]);
						dShowPlayerDialog( playerid, DIALOG_HOTEL_PRZED, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja",tekst_globals, "Op³aæ", "Wymelduj" );

					}
				}
			}
			else
			{
				DaneGracza[playerid][gWynajem] = 0;
				strdel(zapyt, 0, 1024);
				format(zapyt, sizeof(zapyt),"UPDATE `jochym_postacie` SET `WYNAJEM`='%d' WHERE `ID`='%d'", DaneGracza[playerid][gWynajem], DaneGracza[playerid][gUID]);
				mysql_query(zapyt);
				dShowPlayerDialog( playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja","Hotel w którym wynamjmowa³eœ pokój zbankrutowa³, udaj siê do innego Hotelu.", "Zamknij", "" );
				OnPlayerSpawn(playerid);
			}
		}
		else
		{
		    if(DaneGracza[playerid][gFreeze] == 0)
		    {
				Frezuj(playerid, 0);
				SetTimerEx("Frez", 6000, 0, "d", playerid);
			}
			Teleportuj(playerid, BudynekInfo[ui][nXW],BudynekInfo[ui][nYW],BudynekInfo[ui][nZW]);
			SetPlayerFacingAngle(playerid, BudynekInfo[ui][naw]);
			SetPlayerVirtualWorld(playerid, BudynekInfo[ui][nVWW]);
			if(BudynekInfo[ui][nSwiatlo] == 1)
			{
				TextDrawShowForPlayer(playerid, Light);
			}
			if(DaneGracza[playerid][gLskin] == 0)
			{
				SetPlayerSkin(playerid, DaneGracza[playerid][gSKIN]);
			}else{
				SetPlayerSkin(playerid, DaneGracza[playerid][gLskin]);
			}
		}
		return 1;
	}
	else
	{
	    if(DaneGracza[playerid][gFreeze] == 0)
	    {
			Frezuj(playerid, 0);
			SetTimerEx("Frez", 2000, 0, "d", playerid);
		}
		if(DaneGracza[playerid][gBW] == 0)
		{
			if(DaneGracza[playerid][gSpawn] == 0)
			{
				Teleportuj(playerid, BudynekInfo[1][nX],BudynekInfo[1][nY],BudynekInfo[1][nZ]);
				SetPlayerFacingAngle(playerid, BudynekInfo[1][na]);
				SetPlayerVirtualWorld(playerid, BudynekInfo[1][nVW]);
				SetPlayerInterior(playerid, BudynekInfo[1][nINT]);
				SetPlayerVirtualWorld(playerid, 0);
			}
			if(DaneGracza[playerid][gSpawn] == 1)
			{
				Teleportuj(playerid, BudynekInfo[69][nX],BudynekInfo[69][nY],BudynekInfo[69][nZ]);
				SetPlayerFacingAngle(playerid, BudynekInfo[69][na]);
				SetPlayerVirtualWorld(playerid, BudynekInfo[69][nVW]);
				SetPlayerInterior(playerid, BudynekInfo[69][nINT]);
				SetPlayerVirtualWorld(playerid, 0);
			}
			if(DaneGracza[playerid][gLskin] == 0)
			{
				SetPlayerSkin(playerid, DaneGracza[playerid][gSKIN]);
			}
			else
			{
			    SetPlayerSkin(playerid, DaneGracza[playerid][gLskin]);
			}
		}
	}
	ForeachEx(id, MAX_DLUG)
	{
		if(Zadluzenie[id][dUID] == DaneGracza[playerid][gUID] && Zadluzenie[id][dAktywne] == 1)
		{
			SetPVarInt(playerid, "DlugGracza", GetPVarInt(playerid, "DlugGracza")+Zadluzenie[id][dMoney]);
			SetPVarInt(playerid, "ZadluzeniePoTerminie", 0);
			if(Zadluzenie[id][dTime2] < gettime()+CZAS_LETNI)
			{
				SetPVarInt(playerid, "ZadluzeniePoTerminie", GetPVarInt(playerid, "ZadluzeniePoTerminie")+1);
			}
		}
	}
	if(zalogowany[playerid] == false && !IsPlayerNPC(playerid))
	{
	    NadajKare(playerid,-1, 0, ""PREFIXAC".AntyCheat: Spawn bez zalogowania", 0);
	    return 1;
	}
	return 1;
}
stock SpawnujGracza(playerid)
{
    if(DaneGracza[playerid][gBW] != 0)
	{
	    if(DaneGracza[playerid][gLskin] == 0)
		{
			SetPlayerSkin(playerid, DaneGracza[playerid][gSKIN]);
		}
		else
		{
		    SetPlayerSkin(playerid, DaneGracza[playerid][gLskin]);
		}
		Teleportuj(playerid, DaneGracza[playerid][gX],DaneGracza[playerid][gY],DaneGracza[playerid][gZ]);
		SetPlayerVirtualWorld(playerid, DaneGracza[playerid][gVW]);
 		SetPlayerInterior(playerid, DaneGracza[playerid][gINT]);
 		ApplyAnimation(playerid,"CRACK","crckdeth3",4.1,0,0,0,1,0);
 		UstawHP(playerid,9);
	    SetPlayerCameraPos(playerid, DaneGracza[playerid][gX]-3, DaneGracza[playerid][gY],DaneGracza[playerid][gZ]+7);
	  	SetPlayerCameraLookAt(playerid, DaneGracza[playerid][gX],DaneGracza[playerid][gY],DaneGracza[playerid][gZ]);
	    Frezuj(playerid, 0);
	}
	return 1;
}
stock NoweBW(playerid, killerid, czas, reason)
{
	printf("Uzyto NoweBW dla gracza %s", ImieGracza2(playerid));
	DaneGracza[playerid][gRASA] = reason;
	UstawHP(playerid, 9);
	Smierc(playerid, czas);
	HavingBall[playerid] = 0;
	if(HavingBall[playerid]) Baller = 999;
	AntyCheatBroni[playerid] = 1;
	KillTimer(TimerAntyCheat[playerid]);
	TimerAntyCheat[playerid] = SetTimerEx("WlaczAntyCheata",5000,0,"d",playerid);
	CheatPlayerInfo[playerid][aAntiWeaponHack] = 0;
	new findgun = DaneGracza[playerid][gBronUID];
	if(findgun != 0)
	{
		UzywanieItemu(playerid, findgun);
	}
	GetPlayerPos(playerid, DaneGracza[playerid][gX],DaneGracza[playerid][gY],DaneGracza[playerid][gZ]);
	DaneGracza[playerid][gVW] = GetPlayerVirtualWorld(playerid);
	DaneGracza[playerid][gINT] = GetPlayerInterior(playerid);
	DaneGracza[playerid][gWyscig] = 0;
	DaneGracza[playerid][gCheckopintID] = 0;
	DisablePlayerRaceCheckpoint(playerid);
	DaneGracza[playerid][gKoniecWyscigu] = 0;
	DaneGracza[playerid][gRaceTimeStart] = 0;
	ResetPlayerWeapons(playerid);
	DaneGracza[playerid][gBronUID] = 0;
	DaneGracza[playerid][gBronAmmo] = 0;
	DaneGracza[playerid][gBetaTester] = (gettime()+CZAS_LETNI)+(3600*1);
	ZapiszGracza(playerid);
	
	new logtekst[256];
	format(logtekst, sizeof(logtekst), "[Death] [%s] [ID: %d] death from the %s by %s (%d)", ZmianaNicku(playerid), playerid, NazwaBroni[reason], ZmianaNicku(killerid), killerid);
	Transakcja(T_IC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, logtekst, gettime()+KOREKTA_CZASOWA);
	format(logtekst, sizeof(logtekst), "[Death] [%s] [ID: %d] killed with the %s by %s (%d)", ZmianaNicku(killerid), killerid, NazwaBroni[reason], ZmianaNicku(playerid), playerid);
	Transakcja(T_IC, DaneGracza[killerid][gUID], -1, DaneGracza[killerid][gGUID], -1, -1, -1, -1, -1, logtekst, gettime()+KOREKTA_CZASOWA);

	new hour, minute;
	gettime(hour, minute);
	if(hour >= 5 || hour <= 23 && minute == 00)
	{
		if(DaneGracza[playerid][gBW] == 0)
		{
			if(GrupaInfo[DaneGracza[killerid][gSluzba]][gTeren] == GrupaInfo[DaneGracza[playerid][gDzialalnosc1]][gTeren] ||
			GrupaInfo[DaneGracza[killerid][gSluzba]][gTeren] == GrupaInfo[DaneGracza[playerid][gDzialalnosc2]][gTeren] ||
			GrupaInfo[DaneGracza[killerid][gSluzba]][gTeren] == GrupaInfo[DaneGracza[playerid][gDzialalnosc3]][gTeren] ||
			GrupaInfo[DaneGracza[killerid][gSluzba]][gTeren] == GrupaInfo[DaneGracza[playerid][gDzialalnosc4]][gTeren] ||
			GrupaInfo[DaneGracza[killerid][gSluzba]][gTeren] == GrupaInfo[DaneGracza[playerid][gDzialalnosc5]][gTeren] ||
			GrupaInfo[DaneGracza[killerid][gSluzba]][gTeren] == GrupaInfo[DaneGracza[playerid][gDzialalnosc6]][gTeren])
			{
				if(DaneGracza[playerid][gDzialalnosc1] != DaneGracza[killerid][gSluzba] ||
				DaneGracza[playerid][gDzialalnosc2] != DaneGracza[killerid][gSluzba] ||
				DaneGracza[playerid][gDzialalnosc3] != DaneGracza[killerid][gSluzba] ||
				DaneGracza[playerid][gDzialalnosc4] != DaneGracza[killerid][gSluzba] ||
				DaneGracza[playerid][gDzialalnosc5] != DaneGracza[killerid][gSluzba] ||
				DaneGracza[playerid][gDzialalnosc6] != DaneGracza[killerid][gSluzba])
				{
					if(GrupaInfo[DaneGracza[killerid][gSluzba]][gTeren] > 0)
					{
						GrupaInfo[DaneGracza[killerid][gSluzba]][gWojna] += 30;
						ZapiszWojne(DaneGracza[killerid][gSluzba]);
						if(GrupaInfo[DaneGracza[killerid][gSluzba]][gWojna] != 0 && GrupaInfo[DaneGracza[killerid][gSluzba]][gOrg] != 0)
						{
							ForeachEx(org, MAX_PLAYERS)
							{
								new walka[256];
								new obronca = GrupaInfo[DaneGracza[killerid][gSluzba]][gOrg];
								new atakujacy = DaneGracza[killerid][gSluzba];
								if(DaneGracza[org][gDzialalnosc1] == obronca ||
								DaneGracza[org][gDzialalnosc2] == obronca ||
								DaneGracza[org][gDzialalnosc3] == obronca ||
								DaneGracza[org][gDzialalnosc4] == obronca ||
								DaneGracza[org][gDzialalnosc5] == obronca ||
								DaneGracza[org][gDzialalnosc6] == obronca)
								{
									TextDrawHideForPlayer(org, TextNaDrzwi[org]);
									format(walka, sizeof(walka),"~r~Walka o teren~w~~n~~n~Ktos z waszej organizacji wlasnie padl przez wroga organizacje!~n~~n~~y~%s: ~r~%d~n~~y~vs~n~~y~%s: ~r~%d", GrupaInfo[atakujacy][gNazwa], GrupaInfo[atakujacy][gWojna], GrupaInfo[obronca][gNazwa], GrupaInfo[obronca][gWojna]);
									TextDrawSetString(TextNaDrzwi[org], walka);
									TextDrawShowForPlayer(org, TextNaDrzwi[org]);
									CzasWyswietlaniaTextuNaDrzwiach[org] = 30;
								}
								if(DaneGracza[org][gDzialalnosc1] == atakujacy || DaneGracza[org][gDzialalnosc2] == atakujacy || DaneGracza[org][gDzialalnosc3] == atakujacy || DaneGracza[org][gDzialalnosc4] == atakujacy || DaneGracza[org][gDzialalnosc5] == atakujacy  || DaneGracza[org][gDzialalnosc6] == atakujacy)
								{
									TextDrawHideForPlayer(org, TextNaDrzwi[org]);
									format(walka, sizeof(walka),"~r~Walka o teren~w~~n~~n~Ktos z waszej organizacji zdobyl punkty~n~by zdobyc teren na wrogiej organizacji!~n~~n~~y~%s: ~r~%d~n~~y~vs~n~~y~%s: ~r~%d", GrupaInfo[atakujacy][gNazwa], GrupaInfo[atakujacy][gWojna], GrupaInfo[obronca][gNazwa], GrupaInfo[obronca][gWojna]);
									TextDrawSetString(TextNaDrzwi[org], walka);
									TextDrawShowForPlayer(org, TextNaDrzwi[org]);
									CzasWyswietlaniaTextuNaDrzwiach[org] = 30;
								}
							}
						}
					}
				}
			}
		}
	}
	SetTimerEx("ACONWEP", 10000, 0, "d", playerid);
	return 1;
}
public OnPlayerDeath(playerid, killerid, reason)
{
	printf("Gracz zgin¹³ u¿yto OnPlayerDeath");
	DaneGracza[playerid][gRASA] = reason;
	UstawHP(playerid, 9);
	Smierc(playerid, 3);
	HavingBall[playerid] = 0;
	if(HavingBall[playerid]) Baller = 999;
	AntyCheatBroni[playerid] = 1;
	KillTimer(TimerAntyCheat[playerid]);
	TimerAntyCheat[playerid] = SetTimerEx("WlaczAntyCheata",5000,0,"d",playerid);
	CheatPlayerInfo[playerid][aAntiWeaponHack] = 0;
	new findgun = DaneGracza[playerid][gBronUID];
	if(findgun != 0)
	{
		UzywanieItemu(playerid, findgun);
	}
	GetPlayerPos(playerid, DaneGracza[playerid][gX],DaneGracza[playerid][gY],DaneGracza[playerid][gZ]);
	DaneGracza[playerid][gVW] = GetPlayerVirtualWorld(playerid);
	DaneGracza[playerid][gINT] = GetPlayerInterior(playerid);
	DaneGracza[playerid][gWyscig] = 0;
	DaneGracza[playerid][gCheckopintID] = 0;
	DisablePlayerRaceCheckpoint(playerid);
	DaneGracza[playerid][gKoniecWyscigu] = 0;
	DaneGracza[playerid][gRaceTimeStart] = 0;
	ResetPlayerWeapons(playerid);
	DaneGracza[playerid][gBronUID] = 0;
	DaneGracza[playerid][gBronAmmo] = 0;
	DaneGracza[playerid][gBetaTester] = (gettime()+CZAS_LETNI)+(3600*1);
	ZapiszGracza(playerid);
	
	new logtekst[256];
	format(logtekst, sizeof(logtekst), "[Death] [%s] [ID: %d] death from the %s by %s (%d)", ZmianaNicku(playerid), playerid, NazwaBroni[reason], ZmianaNicku(killerid), killerid);
	Transakcja(T_IC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, logtekst, gettime()+KOREKTA_CZASOWA);
	format(logtekst, sizeof(logtekst), "[Death] [%s] [ID: %d] killed with the %s by %s (%d)", ZmianaNicku(killerid), killerid, NazwaBroni[reason], ZmianaNicku(playerid), playerid);
	Transakcja(T_IC, DaneGracza[killerid][gUID], -1, DaneGracza[killerid][gGUID], -1, -1, -1, -1, -1, logtekst, gettime()+KOREKTA_CZASOWA);

	new hour, minute;
	gettime(hour, minute);
	if(hour >= 5 || hour <= 23 && minute == 00)
	{
		if(DaneGracza[playerid][gBW] == 0)
		{
			if(GrupaInfo[DaneGracza[killerid][gSluzba]][gTeren] == GrupaInfo[DaneGracza[playerid][gDzialalnosc1]][gTeren] ||
			GrupaInfo[DaneGracza[killerid][gSluzba]][gTeren] == GrupaInfo[DaneGracza[playerid][gDzialalnosc2]][gTeren] ||
			GrupaInfo[DaneGracza[killerid][gSluzba]][gTeren] == GrupaInfo[DaneGracza[playerid][gDzialalnosc3]][gTeren] ||
			GrupaInfo[DaneGracza[killerid][gSluzba]][gTeren] == GrupaInfo[DaneGracza[playerid][gDzialalnosc4]][gTeren] ||
			GrupaInfo[DaneGracza[killerid][gSluzba]][gTeren] == GrupaInfo[DaneGracza[playerid][gDzialalnosc5]][gTeren] ||
			GrupaInfo[DaneGracza[killerid][gSluzba]][gTeren] == GrupaInfo[DaneGracza[playerid][gDzialalnosc6]][gTeren])
			{
				if(DaneGracza[playerid][gDzialalnosc1] != DaneGracza[killerid][gSluzba] ||
				DaneGracza[playerid][gDzialalnosc2] != DaneGracza[killerid][gSluzba] ||
				DaneGracza[playerid][gDzialalnosc3] != DaneGracza[killerid][gSluzba] ||
				DaneGracza[playerid][gDzialalnosc4] != DaneGracza[killerid][gSluzba] ||
				DaneGracza[playerid][gDzialalnosc5] != DaneGracza[killerid][gSluzba] ||
				DaneGracza[playerid][gDzialalnosc6] != DaneGracza[killerid][gSluzba])
				{
					if(GrupaInfo[DaneGracza[killerid][gSluzba]][gTeren] > 0)
					{
						GrupaInfo[DaneGracza[killerid][gSluzba]][gWojna] += 30;
						ZapiszWojne(DaneGracza[killerid][gSluzba]);
						if(GrupaInfo[DaneGracza[killerid][gSluzba]][gWojna] != 0 && GrupaInfo[DaneGracza[killerid][gSluzba]][gOrg] != 0)
						{
							ForeachEx(org, MAX_PLAYERS)
							{
								new walka[256];
								new obronca = GrupaInfo[DaneGracza[killerid][gSluzba]][gOrg];
								new atakujacy = DaneGracza[killerid][gSluzba];
								if(DaneGracza[org][gDzialalnosc1] == obronca ||
								DaneGracza[org][gDzialalnosc2] == obronca ||
								DaneGracza[org][gDzialalnosc3] == obronca ||
								DaneGracza[org][gDzialalnosc4] == obronca ||
								DaneGracza[org][gDzialalnosc5] == obronca ||
								DaneGracza[org][gDzialalnosc6] == obronca)
								{
									TextDrawHideForPlayer(org, TextNaDrzwi[org]);
									format(walka, sizeof(walka),"~r~Walka o teren~w~~n~~n~Ktos z waszej organizacji wlasnie padl przez wroga organizacje!~n~~n~~y~%s: ~r~%d~n~~y~vs~n~~y~%s: ~r~%d", GrupaInfo[atakujacy][gNazwa], GrupaInfo[atakujacy][gWojna], GrupaInfo[obronca][gNazwa], GrupaInfo[obronca][gWojna]);
									TextDrawSetString(TextNaDrzwi[org], walka);
									TextDrawShowForPlayer(org, TextNaDrzwi[org]);
									CzasWyswietlaniaTextuNaDrzwiach[org] = 30;
								}
								if(DaneGracza[org][gDzialalnosc1] == atakujacy || DaneGracza[org][gDzialalnosc2] == atakujacy || DaneGracza[org][gDzialalnosc3] == atakujacy || DaneGracza[org][gDzialalnosc4] == atakujacy || DaneGracza[org][gDzialalnosc5] == atakujacy  || DaneGracza[org][gDzialalnosc6] == atakujacy)
								{
									TextDrawHideForPlayer(org, TextNaDrzwi[org]);
									format(walka, sizeof(walka),"~r~Walka o teren~w~~n~~n~Ktos z waszej organizacji zdobyl punkty~n~by zdobyc teren na wrogiej organizacji!~n~~n~~y~%s: ~r~%d~n~~y~vs~n~~y~%s: ~r~%d", GrupaInfo[atakujacy][gNazwa], GrupaInfo[atakujacy][gWojna], GrupaInfo[obronca][gNazwa], GrupaInfo[obronca][gWojna]);
									TextDrawSetString(TextNaDrzwi[org], walka);
									TextDrawShowForPlayer(org, TextNaDrzwi[org]);
									CzasWyswietlaniaTextuNaDrzwiach[org] = 30;
								}
							}
						}
					}
				}
			}
		}
	}
	SetTimerEx("ACONWEP", 10000, 0, "d", playerid);
	return 0;
}
forward	ACONWEP(playerid);
public ACONWEP(playerid)
{
	CheatPlayerInfo[playerid][aAntiWeaponHack] = 1;
}
forward	Smierc(playerid, czas);
public Smierc(playerid, czas)
{
    if(zalogowany[playerid] == true)
    {
		new akcja[126];
		if(GetPVarInt(playerid, "UkrytyN") == 0 || Nieznajomy[playerid] == 0)
		{
			format(akcja,sizeof(akcja),"*%s straci³ przytomnoœæ*", ZmianaNicku(playerid));
		}
		else
		{
		    if(DaneGracza[playerid][gPLEC] == 0)
		    {
		    	format(akcja,sizeof(akcja),"*Nieznajomy %s straci³ przytomnoœæ*", Maska(playerid));
			}
			else
			{
			    format(akcja,sizeof(akcja),"*Nieznajoma %s straci³a przytomnoœæ*", Maska(playerid));
			}
		}
		SetPlayerChatBubble(playerid, akcja, FIOLETOWY, 10.0, 4000);
		new str[126];
		format(str,sizeof(str),"Straci³eœ przytomnoœæ. Odczekaj %d minuty lub wpisz '/akceptujsmierc' (Uœmiercenie postaci - CK)",czas);
		SendClientMessage(playerid, SZARY,str);
		DaneGracza[playerid][gBW] = (czas*60);
		ZapiszGracza(playerid);
		TogglePlayerControllable(playerid, 0);
	}
}
stock SetPlayerInAdminJail(playerid, playerid2, time, reason[])
{
	DaneGracza[playerid][gAJ] = (time*60);
	DaneGracza[playerid][gBW] = 0;
	SetPlayerInterior(playerid, 0);
	Teleportuj(playerid, 1178.5234,-1180.7908,86.9796);
	SetPlayerVirtualWorld(playerid, playerid+10000);
	NadajKare(playerid,playerid2, 3, reason, time);
	ResetPlayerWeapons(playerid);
	return 1;
}
public OnPlayerCommandReceived(playerid, cmdtext[])
{
 	new log[256];
	format(log, sizeof(log), "[Command] [%s] [ID: %d] %s", ZmianaNicku(playerid), playerid, cmdtext);
	Transakcja(T_IC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
	if(DaneGracza[playerid][gSpam] != 0)
	{
		SendClientMessage(playerid, 0xFFb00000, "{CC0000}Odebrano Ci mo¿liwoœc pisania na 30 sekund, powodem blokady jest spam komendami.");
		return 0;
	}
	if(GetPVarInt(playerid, "Vegas") == 1)
	    return SendClientMessage(playerid, 0x00AAFFFF, "Najpierw zamknij grê {FFFFFF}Jednorêki Bandyta");
    if(AFK[playerid] == 1)
		GraczWrocilZAFK(playerid);
	return 1;
}
public OnPlayerText(playerid, text[])
{
    if(zalogowany[playerid] == false)
    {
        NadajKare(playerid,-1, 0, ""PREFIXAC".AntyCheat: Spawn bez zalogowania v5", 0);
    }
	if(DaneGracza[playerid][gBW] > 0)
	{
		return 0;
	}
    if(AFK[playerid] == 1)
		GraczWrocilZAFK(playerid);
    if((text[0] == '-'))
	{
	    if(DaneGracza[playerid][gBW] != 0)
		{
			return 0;
		}
		if(Dostal[playerid] != 0)
		{
			return 0;
		}
		if(Dostal2[playerid] != 0)
	 	{
	 	    return 0;
	 	}
		if(silka[playerid] != 0)
		{
			return 0;
		}
		if(IsPlayerInAnyVehicle(playerid))
		{
			return 0;
		}
		if(!strcmp(text[1], " ", true)) return dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby u¿ywaæ animacji wpisz:\"-idz1\"", "Zamknij", ""), 0;
  	    new found = 0;
		ForeachEx(i, MAX_ANIM)
	    {
			if(!isnull(AnimInfo[i][CMD]))
			{
				if(!strcmp(text[1], AnimInfo[i][CMD], true))
	        	{
					if(AnimInfo[i][Toggle] == 2) SetPlayerSpecialAction(playerid, AnimInfo[i][Loop]);
					else
					{
						ApplyAnimation(playerid, AnimInfo[i][Lib], AnimInfo[i][Name], AnimInfo[i][Speed], AnimInfo[i][Loop], AnimInfo[i][Lock][0], AnimInfo[i][Lock][1], AnimInfo[i][Freeze], AnimInfo[i][aTime], 1);
						SetPVarInt(playerid, "PlayAnim", 0);
						animacja[playerid] = 1;
						if(AnimInfo[i][Toggle] == 1) SetPVarInt(playerid, "PlayAnim", 1);
						Transakcja(T_ANIM, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, AnimInfo[i][CMD], gettime()+KOREKTA_CZASOWA);
					}
					found++;
	        	}
	        }
	    }
		if(found == 0) return 0;
	}
	else if(strfind(text, "/", true) == 0)
	{
	    new log[256];
		format(log, sizeof(log), "[Command] [%s] [ID: %d] %s", ZmianaNicku(playerid), playerid, text);
		Transakcja(T_IC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
	}
	else if(strfind(text, "!1", true) == 0)
	{
	    new uid = DaneGracza[playerid][gDzialalnosc1];
		new cmd_tekst[256];
		strdel(text, 0, 2);
		new log[256];
		format(log, sizeof(log), "[GROUP] [CZAT IC] !1 (%s) ** %s: %s **", GrupaInfo[uid][gNazwa], ZmianaNicku(playerid), text);
		Transakcja(T_IC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
		format(cmd_tekst, sizeof(cmd_tekst), "1 %s", text);
		cmd_r(playerid,cmd_tekst);
	}
	else if(strfind(text, "!2", true) == 0)
	{
		new uid = DaneGracza[playerid][gDzialalnosc2];
		new cmd_tekst[256];
		strdel(text, 0, 2);
		new log[256];
		format(log, sizeof(log), "[GROUP] [CZAT IC] !2 (%s) ** %s: %s **", GrupaInfo[uid][gNazwa], ZmianaNicku(playerid), text);
		Transakcja(T_IC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
		format(cmd_tekst, sizeof(cmd_tekst), "2 %s", text);
		cmd_r(playerid,cmd_tekst);
	}
	else if(strfind(text, "!3", true) == 0)
	{
		new uid = DaneGracza[playerid][gDzialalnosc3];
		new cmd_tekst[256];
		strdel(text, 0, 2);
		new log[256];
		format(log, sizeof(log), "[GROUP] [CZAT IC] !3 (%s) ** %s: %s **", GrupaInfo[uid][gNazwa], ZmianaNicku(playerid), text);
		Transakcja(T_IC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
		format(cmd_tekst, sizeof(cmd_tekst), "3 %s", text);
		cmd_r(playerid,cmd_tekst);
	}
	else if(strfind(text, "!4", true) == 0)
	{
		new uid = DaneGracza[playerid][gDzialalnosc4];
		new cmd_tekst[256];
		strdel(text, 0, 2);
		new log[256];
		format(log, sizeof(log), "[GROUP] [CZAT IC] !4 (%s) ** %s: %s **", GrupaInfo[uid][gNazwa], ZmianaNicku(playerid), text);
		Transakcja(T_IC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
		format(cmd_tekst, sizeof(cmd_tekst), "4 %s", text);
		cmd_r(playerid,cmd_tekst);
	}
	else if(strfind(text, "!5", true) == 0)
	{
		new uid = DaneGracza[playerid][gDzialalnosc5];
		new cmd_tekst[256];
		strdel(text, 0, 2);
		new log[256];
		format(log, sizeof(log), "[GROUP] [CZAT IC] !5 (%s) ** %s: %s **", GrupaInfo[uid][gNazwa], ZmianaNicku(playerid), text);
		Transakcja(T_IC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
		format(cmd_tekst, sizeof(cmd_tekst), "5 %s", text);
		cmd_r(playerid,cmd_tekst);
	}
	else if(strfind(text, "!6", true) == 0)
	{
		new uid = DaneGracza[playerid][gDzialalnosc6];
		new cmd_tekst[256];
		strdel(text, 0, 2);
		new log[256];
		format(log, sizeof(log), "[GROUP] [CZAT IC] !6 (%s) ** %s: %s **", GrupaInfo[uid][gNazwa], ZmianaNicku(playerid), text);
		Transakcja(T_IC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
		format(cmd_tekst, sizeof(cmd_tekst), "6 %s", text);
		cmd_r(playerid,cmd_tekst);
	}
	else if(strfind(text, ".", true) == 0)
	{
		new cmd_tekst[256];
		strdel(text, 0, 1);
		new log[256];
		format(log, sizeof(log), "[CZAT OOC] [KROPKA] [%s] ((%s))", ZmianaNicku(playerid), text);
		Transakcja(T_IC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
		format(cmd_tekst, sizeof(cmd_tekst), "%s", text);
		cmd_b(playerid,cmd_tekst);
	}
	else if(strfind(text, "@1", true) == 0)
	{
		new cmd_tekst[256];
		strdel(text, 0, 2);
		new uid = DaneGracza[playerid][gDzialalnosc1];
		new log[256];
		format(log, sizeof(log), "[GROUP] [CZAT OOC] @1 %s (( %d.%s: %s ))", GrupaInfo[uid][gNazwa], playerid, ZmianaNicku(playerid), text);
		Transakcja(T_IC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
		format(cmd_tekst, sizeof(cmd_tekst), "1 %s", text);
		cmd_czatoocmalpa(playerid,cmd_tekst);
	}
	else if(strfind(text, "@2", true) == 0)
	{
		new cmd_tekst[256];
		strdel(text, 0, 2);
		new uid = DaneGracza[playerid][gDzialalnosc2];
		new log[256];
		format(log, sizeof(log), "[GROUP] [CZAT OOC] @2 %s (( %d.%s: %s ))", GrupaInfo[uid][gNazwa], playerid, ZmianaNicku(playerid), text);
		Transakcja(T_IC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
		format(cmd_tekst, sizeof(cmd_tekst), "2 %s", text);
		cmd_czatoocmalpa(playerid,cmd_tekst);
	}
	else if(strfind(text, "@3", true) == 0)
	{
		new cmd_tekst[256];
		strdel(text, 0, 2);
		new uid = DaneGracza[playerid][gDzialalnosc3];
		new log[256];
		format(log, sizeof(log), "[GROUP] [CZAT OOC] @3 %s (( %d.%s: %s ))", GrupaInfo[uid][gNazwa], playerid, ZmianaNicku(playerid), text);
		Transakcja(T_IC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
		format(cmd_tekst, sizeof(cmd_tekst), "3 %s", text);
		cmd_czatoocmalpa(playerid,cmd_tekst);
	}
	else if(strfind(text, "@4", true) == 0)
	{
		new cmd_tekst[256];
		strdel(text, 0, 2);
		new uid = DaneGracza[playerid][gDzialalnosc4];
		new log[256];
		format(log, sizeof(log), "[GROUP] [CZAT OOC] @4 %s (( %d.%s: %s ))", GrupaInfo[uid][gNazwa], playerid, ZmianaNicku(playerid), text);
		Transakcja(T_IC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
		format(cmd_tekst, sizeof(cmd_tekst), "4 %s", text);
		cmd_czatoocmalpa(playerid,cmd_tekst);
	}
	else if(strfind(text, "@5", true) == 0)
	{
		new cmd_tekst[256];
		strdel(text, 0, 2);
		new uid = DaneGracza[playerid][gDzialalnosc5];
		new log[256];
		format(log, sizeof(log), "[GROUP] [CZAT OOC] @5 %s (( %d.%s: %s ))", GrupaInfo[uid][gNazwa], playerid, ZmianaNicku(playerid), text);
		Transakcja(T_IC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
		format(cmd_tekst, sizeof(cmd_tekst), "5 %s", text);
		cmd_czatoocmalpa(playerid,cmd_tekst);
	}
	else if(strfind(text, "@6", true) == 0)
	{
		new cmd_tekst[256];
		strdel(text, 0, 2);
		new uid = DaneGracza[playerid][gDzialalnosc6];
		new log[256];
		format(log, sizeof(log), "[GROUP] [CZAT OOC] @6 %s (( %d.%s: %s ))", GrupaInfo[uid][gNazwa], playerid, ZmianaNicku(playerid), text);
		Transakcja(T_IC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
		format(cmd_tekst, sizeof(cmd_tekst), "6 %s", text);
		cmd_czatoocmalpa(playerid,cmd_tekst);
	}
	else if(!strcmp(text, ":*", true))
	{
	    if(Dostal[playerid] != 0)
		{
			return 0;
		}
		if(Dostal2[playerid] != 0)
	 	{
	 	    return 0;
	 	}
	    cmd_fasdasfdfive(playerid, "wysy³a buziaka.");
	}
	else if(!strcmp(text, ";)", true))
	{
	    if(Dostal[playerid] != 0)
		{
			return 0;
		}
		if(Dostal2[playerid] != 0)
	 	{
	 	    return 0;
	 	}
	    cmd_fasdasfdfive(playerid, "puszcza oczko.");
	}
	else if(!strcmp(text, ":)", true) || !strcmp(text, " :)", true) || !strcmp(text, ":) ", true))
	{
	    if(Dostal[playerid] != 0)
		{
			return 0;
		}
		if(Dostal2[playerid] != 0)
	 	{
	 	    return 0;
	 	}
	    cmd_fasdasfdfive(playerid, "uœmiecha siê.");
	}
	else if(!strcmp(text, ":(", true) || !strcmp(text, " :(", true) || !strcmp(text, ":( ", true) || !strcmp(text, ";(", true) || !strcmp(text, ";0", true) || !strcmp(text, " :c", true) )
	{
	    if(Dostal[playerid] != 0)
		{
			return 0;
		}
		if(Dostal2[playerid] != 0)
	 	{
	 	    return 0;
	 	}
	    cmd_fasdasfdfive(playerid, "robi smutn¹ minê.");
	}
	else if(!strcmp(text, ":>", true) || !strcmp(text, ";>", true))
	{
	    if(Dostal[playerid] != 0)
		{
			return 0;
		}
		if(Dostal2[playerid] != 0)
	 	{
	 	    return 0;
	 	}
	    cmd_fasdasfdfive(playerid, "mru¿y oczy.");
	}
	else if(!strcmp(text, ":o", true))
	{
	    if(Dostal[playerid] != 0)
		{
			return 0;
		}
		if(Dostal2[playerid] != 0)
	 	{
	 	    return 0;
	 	}
	    cmd_fasdasfdfive(playerid, "zdziwienie na twarzy.");
	}
	else if(!strcmp(text, "?", true))
	{
	    if(Dostal[playerid] != 0)
		{
			return 0;
		}
		if(Dostal2[playerid] != 0)
	 	{
	 	    return 0;
	 	}
	    cmd_fasdasfdfive(playerid, "robi pytaj¹c¹ minê.");
	}
	else if(!strcmp(text, ":D", true) || !strcmp(text, " :D", true) || !strcmp(text, ":D ", true) || !strcmp(text, ";D", true) || !strcmp(text, "xd", true))
	{
	    if(Dostal[playerid] != 0)
		{
			return 0;
		}
		if(Dostal2[playerid] != 0)
	 	{
	 	    return 0;
	 	}
		ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.1, 0, 0, 0, 0, 0, 1);
		cmd_fasdasfdfive(playerid, "œmieje siê.");
	}
	else if(!strcmp(text, ":P", true) || !strcmp(text, " :P", true) || !strcmp(text, ":P ", true) || !strcmp(text, ";P", true))
	{
	    if(Dostal[playerid] != 0)
		{
			return 0;
		}
		if(Dostal2[playerid] != 0)
	 	{
	 	    return 0;
	 	}
		cmd_fasdasfdfive(playerid, "wystawia jêzyk.");
	}
	else if(!strcmp(text, ":/", true) || !strcmp(text, " :/", true) || !strcmp(text, ":/ ", true) || !strcmp(text, ";/", true))
	{
	    if(Dostal[playerid] != 0)
		{
			return 0;
		}
		if(Dostal2[playerid] != 0)
	 	{
	 	    return 0;
	 	}
		cmd_fasdasfdfive(playerid, "krzywi siê.");
	}
	else
	{
		if(text[strlen(text)-1] == '!' && text[strlen(text)-2] == '!')
		{
		    if(Dostal[playerid] != 0)
			{
				return 0;
			}
			if(Dostal2[playerid] != 0)
		 	{
		 	    return 0;
		 	}
			cmd_k(playerid, text);
		}
		else
		{
		    new str[256], str2[256];
			text[0] = toupper(text[0]);
			new plec_gracza[24];
			switch(DaneGracza[playerid][gPLEC])
			{
				case 0:{
					plec_gracza = "mê¿czyzna";
				}
				case 1:{
					plec_gracza = "kobieta";
				}
			}
			if(Odebral[playerid] == 1 && Wywiad[playerid] == 0)
			{
				if(Odebral[DzwoniID[playerid]] == 1)
				{
					format(str2, sizeof(str2), "{ffff33}%d (telefon, %s): %s", DaneGracza[playerid][gTelefon], plec_gracza, text);
					SendClientMessage(DzwoniID[playerid], 0xFFFFFFFF, str2);
				}
				format(str, sizeof(str), "%s (telefon): %s", ZmianaNicku(playerid), text);
			}
			else
			{
				format(str, sizeof(str), "%s mówi: %s", ZmianaNicku(playerid), text);
			}
			if(IsPlayerInAnyVehicle(playerid))
			{
				new uid = SprawdzCarUID(GetPlayerVehicleID(playerid));
				new siedzi = GetPlayerVehicleSeat(playerid);
				if(siedzi == 0 || siedzi == 1 || siedzi == 2 || siedzi == 3)
				{
					if(PojazdInfo[uid][pSzyba] == 1 && PojazdInfo[uid][pSzyba2] == 1 && PojazdInfo[uid][pSzyba3] == 1 && PojazdInfo[uid][pSzyba4] == 1)
					{
						ForeachEx(is, MAX_PLAYERS)
						{
							if(IsPlayerConnected(is))
							{
								if(zalogowany[is] == true)
								{
									if(GetPlayerVehicleID(is) == PojazdInfo[uid][pID])
									{
										SendClientMessage(is, 0xE6E6E6E6, str);
									}
								}
							}
						}
					}
					else
					{
      					CzatGlobalny(playerid, str, 10);
					}
				}
			}
			else
			{
				CzatGlobalny(playerid, str, 10);
			}
			if(Wywiad[playerid] == 1 && Odebral[playerid] == 1)
			{
                UsunPLZnaki(text);
				format(str, sizeof(str), "~w~Weasel News ~r~(Wywiad telefoniczny)~w~ ~>~ %s~w~ ~>~ %s", ZmianaNicku(playerid), text);
				TextDrawShowForAll(LosSantosFM);
				TextDrawSetString(LosSantosFM, str);
				SNINFO = 60*5;
			}
		}
	}
	SetPVarInt(playerid, "IC", GetPVarInt(playerid, "IC")+1);
	SetTimerEx("SpamIC", 3000, 0, "d", playerid);
	return 0;
}
CMD:npc(playerid, cmdtext[])
{
	if(NPCAktywne == 1)
	{
		ConnectNPC("Carl_Johnson","pociag");
		CJVehicle = AddStaticVehicle(538, 769.002, -1325.48, -0.001477, 229.778, -1, -1);
		printf("Carl Johnson stworzony");
	}
	return 1;
}
CMD:forex(playerid,cmdtext[])
{
	if(WlaczEuro == 0)
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Euro zosta³o wy³¹czone przez w³aœciciela projektu.", "Zamknij", "");
		return 0;
	}
	new string[256], naglowek[256];	
	format(string, sizeof(string), "%s\n1.\tSprawdŸ gie³dê Forex", string);
	format(string, sizeof(string), "%s\n2.\tWystaw w³asn¹ aukcjê", string);
	format(string, sizeof(string), "%s\n3.\tZarz¹dzaj swoimi aukcjami", string);
	format(naglowek, sizeof(naglowek), "{FFFFFF}• Forex, Konto: %d{000099}€{FFFFFF}, %d{63D075}${FFFFFF}", DaneGracza[playerid][gEuro], DaneGracza[playerid][gPORTFEL]);
	dShowPlayerDialog(playerid, DIALOG_FOREX, DIALOG_STYLE_LIST, naglowek, string, "Wybierz", "Zamknij");
	return 1;
}
CMD:roslina(playerid, cmdtext[])
{
	if(GraczObokNasion(playerid))
	{
		new string[256], naglowek[256];
		new uid = GetPVarInt(playerid, "Nasiona");
		if(Nasiona[uid][nUID] == DaneGracza[playerid][gUID])
		{
			if(uid != 0)
			{
				format(string, sizeof(string), "%s\n1.\tPoka¿ informacje o roœlinie", string);
				format(string, sizeof(string), "%s\n2.\tPodlej roœline", string);
				format(string, sizeof(string), "%s\n3.\tZbierz roœlinê", string);
				format(naglowek, sizeof(naglowek), "Interakcja z roœlin¹ (%d)", Nasiona[uid][nID]);
				dShowPlayerDialog(playerid, DIALOG_INTERAKCJA_NASIONA, DIALOG_STYLE_LIST, naglowek, string, "Wybierz", "Zamknij");
				return 1;
			}
		}
		else
		{
			if(uid != 0)
			{
				format(string, sizeof(string), "%s\n1.\tPoka¿ informacje o roœlinie", string);
				format(string, sizeof(string), "%s\n2.\tPodlej roœline", string);
				format(naglowek, sizeof(naglowek), "Interakcja z roœlin¹ (%d)", Nasiona[uid][nID]);
				dShowPlayerDialog(playerid, DIALOG_INTERAKCJA_NASIONA, DIALOG_STYLE_LIST, naglowek, string, "Wybierz", "Zamknij");
				return 1;
			}
		}
		if(uid == 0)
		{
			GameTextForPlayer(playerid, "~r~Brak roslin w poblizu Ciebie!", 3000, 5);
		}
	}
	return 1;
}
CMD:wyrzuc(playerid,cmdtext[])
{
	//printf("U¿yta komenda wyrzuc");
    new playerid2;
	if(sscanf(cmdtext, "i", playerid2))
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby wyrzuciæ gracza z pojazdu wpisz: /wyrzuc [id gracza]", "Zamknij", "");
	    return 1;
	}
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!IsPlayerInAnyVehicle(playerid))
	{
	   return 1;
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return 1;
	}
	if(GetPlayerVehicleID(playerid2) != vehicleid)
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Ten gracz nie znajduje siê w twoim pojezdzie,", "Zamknij", "");
	    return 1;
	}
	RemovePlayerFromVehicle(playerid2);
	RemovePlayerFromVehicle(playerid2);
	GameTextForPlayer(playerid2, "~y~Zostales wyrzucony z pojazdu.", 3000, 5);
	GameTextForPlayer(playerid, "~y~Wyrzuciles gracza z pojazdu.", 3000, 5);
	return 1;
}
CMD:k(playerid,cmdtext[])
{
	//printf("U¿yta komenda k");
	if(zalogowany[playerid] == false)
    {
        return 0;
    }
    if(Dostal[playerid] != 0)
	{
		return 0;
	}
	if(Dostal2[playerid] != 0)
 	{
 	    return 0;
 	}
	new text[128];
	if(sscanf(cmdtext, "s[128]", text))
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby u¿yæ komendy krzyku wpisz: /k [treœæ] lub u¿yj dwóch wykrzyników na koñcu zdania.", "Zamknij", "");
	    return 1;
	}
	if(DaneGracza[playerid][gBW] > 0)
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie mo¿esz u¿ywaæ komendy krzyku, gdy jesteœ nieprzytomny.", "Zamknij", "");
		return 0;
	}
	new str[256];
	text[0] = toupper(text[0]);
	format(str, sizeof(str), "%s krzyczy: %s!", ZmianaNicku(playerid), text);
	if(IsPlayerInAnyVehicle(playerid))
	{
		new uid = SprawdzCarUID(GetPlayerVehicleID(playerid));
		new siedzi = GetPlayerVehicleSeat(playerid);
		if(siedzi == 0)
		{
			if(PojazdInfo[uid][pSzyba] == 0)
			{
				CzatGlobalny(playerid, str, 10);
			}
			else
			{
				CzatGlobalny(playerid, str, 30);
			}
		}
		if(siedzi == 1)
		{
			if(PojazdInfo[uid][pSzyba2] == 0)
			{
				CzatGlobalny(playerid, str, 10);
			}
			else
			{
				CzatGlobalny(playerid, str, 30);
			}
		}
		if(siedzi == 2)
		{
			if(PojazdInfo[uid][pSzyba3] == 0)
			{
				CzatGlobalny(playerid, str, 10);
			}
			else
			{
				CzatGlobalny(playerid, str, 30);
			}
		}
		if(siedzi == 3)
		{
			if(PojazdInfo[uid][pSzyba4] == 0)
			{
				CzatGlobalny(playerid, str, 10);
			}
			else
			{
				CzatGlobalny(playerid, str, 30);
			}
		}
		if(siedzi > 3)
		{
			if(PojazdInfo[uid][pSzyba] == 0 && PojazdInfo[uid][pSzyba2] && PojazdInfo[uid][pSzyba3] && PojazdInfo[uid][pSzyba4])
			{
				CzatGlobalny(playerid, str, 10);
			}
			else
			{
				CzatGlobalny(playerid, str, 30);
			}
		}

	}
	else
	{
		new id = -1;
		for(new h = 0; h < sizeof(BudynekInfo); h++)
		{
			if(BudynekInfo[h][nUID] != 0)
			{
				if(Dystans(1.0, playerid, BudynekInfo[h][nX], BudynekInfo[h][nY], BudynekInfo[h][nZ]) && BudynekInfo[h][nVW] == GetPlayerVirtualWorld(playerid))
				{
					id = h;
				}
			}
		}
		if(id != 0)
		{
			SetPVarInt(playerid, "BudynekKrzyk", id);
		}
		CzatGlobalny(playerid, str, 30);
	}
	ApplyAnimation(playerid, "ON_LOOKERS", "shout_01", 4.0, 0, 0, 0, 0, 0);
	SetPVarInt(playerid, "IC", GetPVarInt(playerid, "IC")+1);
	SetTimerEx("SpamIC", 3000, 0, "d", playerid);
    return 1;
}
CMD:area(playerid,cmdtext[]) return cmd_strefa(playerid, cmdtext);
CMD:strefa(playerid,cmdtext[])
{
    if(zalogowany[playerid] == false)
    {
        return 0;
    }
    if(DaneGracza[playerid][gBW] > 0)
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie mo¿esz u¿ywaæ tej komendy, gdy jesteœ nieprzytomny.", "Zamknij", "");
		return 0;
	}
	new id = GraczNaTerenie(playerid);
	GangZoneFlashForPlayer(playerid, id, 0xFFFF0077);
	if(Lokacja[id][gOwnerP] == DaneGracza[playerid][gUID])
	{
	    if(Lokacja[id][gOwner] == 0)
     	{
     	    if((DaneGracza[playerid][gAdmGroup] == 4 || DaneGracza[playerid][gAdmGroup] == 14 || DaneGracza[playerid][gAdmGroup] == 7 || DaneGracza[playerid][gAdmGroup] == 8) && DutyAdmina[playerid] == 1)
    		{
    		    new str[512];
				format(str, sizeof(str), "» Poka¿ informacje\n--------------------\n» Przepisz strefê pod grupê\n» Przypisz obiekty do strefy (%d przypisanych)\n» Mo¿liwoœæ przejêcia strefy\n» Ustal cene za m2\n» Ustal minimalny metra¿\n» Ustal limit obiektów na strefie\n» Zablokuj mo¿liwoœæ tworzenia obiektów na strefie", Lokacja[id][gObiekty]);
			    dShowPlayerDialog(playerid, DIALOG_AREA_ADMIN, DIALOG_STYLE_LIST, GUIOPIS "Informacja", str, "Wybierz", "Zamknij");
				return 1;
    		}
    		else
    		{
	     	    new str[512];
				format(str, sizeof(str), "» Poka¿ informacje\n» Przepisz strefê pod grupê\n» Przypisz obiekty do strefy (%d przypisanych)", Lokacja[id][gObiekty]);
			    dShowPlayerDialog(playerid, DIALOG_AREA, DIALOG_STYLE_LIST, GUIOPIS "Informacja", str, "Wybierz", "Zamknij");
				return 1;
			}
		}
		else
		{
		    if((DaneGracza[playerid][gAdmGroup] == 4 || DaneGracza[playerid][gAdmGroup] == 14 || DaneGracza[playerid][gAdmGroup] == 7 || DaneGracza[playerid][gAdmGroup] == 8) && DutyAdmina[playerid] == 1)
    		{
    		    new str[512];
				format(str, sizeof(str), "» Poka¿ informacje\n--------------------\n» Odpisz strefê od grupy\n» Przypisz obiekty do strefy (%d przypisanych)\n» Mo¿liwoœæ przejêcia strefy\n» Ustal cene za m2\n» Ustal minimalny metra¿\n» Ustal limit obiektów na strefie\n» Zablokuj mo¿liwoœæ tworzenia obiektów na strefie", Lokacja[id][gObiekty]);
			    dShowPlayerDialog(playerid, DIALOG_AREA_ADMIN, DIALOG_STYLE_LIST, GUIOPIS "Informacja", str, "Wybierz", "Zamknij");
				return 1;
    		}
    		else
    		{
	     	    new str[512];
				format(str, sizeof(str), "» Poka¿ informacje\n» Odpisz strefê od grupy\n» Przypisz obiekty do strefy (%d przypisanych)", Lokacja[id][gObiekty]);
			    dShowPlayerDialog(playerid, DIALOG_AREA, DIALOG_STYLE_LIST, GUIOPIS "Informacja", str, "Wybierz", "Zamknij");
				return 1;
			}
		}
	}
	else
	{
	    if(Lokacja[id][gOwner] == -1)
	    {
	        if((DaneGracza[playerid][gAdmGroup] == 4 || DaneGracza[playerid][gAdmGroup] == 14 || DaneGracza[playerid][gAdmGroup] == 7 || DaneGracza[playerid][gAdmGroup] == 8) && DutyAdmina[playerid] == 1)
    		{
		        new str[512];
				format(str, sizeof(str), "» Poka¿ informacje\n» Przejmij strefê (wymagane dwa budynki na strefie)\n» --------------------\n» Przypisz obiekty do strefy (%d przypisanych)\n» Mo¿liwoœæ przejêcia strefy\n» Ustal cene za m2\n» Ustal minimalny metra¿\n» Ustal limit obiektów na strefie\n» Zablokuj mo¿liwoœæ tworzenia obiektów na strefie", Lokacja[id][gObiekty]);
			    dShowPlayerDialog(playerid, DIALOG_AREA_ADMIN, DIALOG_STYLE_LIST, GUIOPIS "Informacja", str, "Wybierz", "Zamknij");
				return 1;
			}
			else
			{
	        	dShowPlayerDialog(playerid, DIALOG_AREA, DIALOG_STYLE_LIST, GUIOPIS "Informacja", "» Poka¿ informacje\n» Przejmij strefê (wymagane dwa budynki na strefie)", "Wybierz", "Zamknij");
	        	return 1;
			}
	    }
	    else
	    {
	        if((DaneGracza[playerid][gAdmGroup] == 4 || DaneGracza[playerid][gAdmGroup] == 14 || DaneGracza[playerid][gAdmGroup] == 7 || DaneGracza[playerid][gAdmGroup] == 8) && DutyAdmina[playerid] == 1)
    		{
    		    new str[512];
				format(str, sizeof(str), "» Poka¿ informacje\n» Przejmij strefê (wymagane dwa budynki na strefie)\n» --------------------\n» Przypisz obiekty do strefy (%d przypisanych)\n» Mo¿liwoœæ przejêcia strefy\n» Ustal cene za m2\n» Ustal minimalny metra¿\n» Ustal limit obiektów na strefie\n» Zablokuj mo¿liwoœæ tworzenia obiektów na strefie", Lokacja[id][gObiekty]);
			    dShowPlayerDialog(playerid, DIALOG_AREA_ADMIN, DIALOG_STYLE_LIST, GUIOPIS "Informacja", str, "Wybierz", "Zamknij");
				return 1;
    		}
    		else
    		{
				dShowPlayerDialog(playerid, DIALOG_AREA, DIALOG_STYLE_LIST, GUIOPIS "Informacja", "» Poka¿ informacje\n» Przejmij strefê (wymagane dwa budynki na strefie)", "Wybierz", "Zamknij");
			}
		}
		return 1;
	}
}
CMD:cc(playerid,cmdtext[])
{
	if(zalogowany[playerid] == false)
    {
        return 0;
    }
	new text[128];
	if(sscanf(cmdtext, "s[128]", text))
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby u¿yæ komendy szeptu do 1m wpisz: /cc [treœæ] - gdy u¿ywasz szeptu twoje rozmowy s¹ s³yszane na krótk¹ odleg³oœæ.", "Zamknij", "");
		return 1;
	}
	if(DaneGracza[playerid][gBW] > 0)
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie mo¿esz u¿ywaæ komendy szeptu do 1m, gdy jesteœ nieprzytomny.", "Zamknij", "");
		return 0;
	}
	new str[256];
	text[0] = toupper(text[0]);
	format(str, sizeof(str), "%s szepcze: %s", ZmianaNicku(playerid), text);
	CzatGlobalny(playerid, str, 2);
	SetPVarInt(playerid, "IC", GetPVarInt(playerid, "IC")+1);
	SetTimerEx("SpamIC", 3000, 0, "d", playerid);
    return 1;
}
CMD:c(playerid,cmdtext[])
{
	if(zalogowany[playerid] == false)
    {
        return 0;
    }
	new text[128];
	if(sscanf(cmdtext, "s[128]", text))
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby u¿yæ komendy szeptu wpisz: /c [treœæ] - gdy u¿ywasz szeptu twoje rozmowy s¹ s³yszane na krótk¹ odleg³oœæ.", "Zamknij", "");
		return 1;
	}
	if(DaneGracza[playerid][gBW] > 0)
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie mo¿esz u¿ywaæ komendy szeptu, gdy jesteœ nieprzytomny.", "Zamknij", "");
		return 0;
	}
	new str[256];
	text[0] = toupper(text[0]);
	format(str, sizeof(str), "%s szepcze: %s", ZmianaNicku(playerid), text);
	CzatGlobalny(playerid, str, 2);
	SetPVarInt(playerid, "IC", GetPVarInt(playerid, "IC")+1);
	SetTimerEx("SpamIC", 3000, 0, "d", playerid);
    return 1;
}
public OnPlayerCommandText(playerid, cmdtext[])
{
    if(AFK[playerid] == 1)
		GraczWrocilZAFK(playerid);
	return 0;
}
forward WychodziZPojazdu(playerid);
public WychodziZPojazdu(playerid)
{
	MozeBycWPojezdzie[playerid] = 0;
	return 1;
}
forward SprawdzPojazd2(playerid);
public SprawdzPojazd2(playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
	{
		MozeBycWPojezdzie[playerid] = 1;
	}
	else
	{
		MozeBycWPojezdzie[playerid] = 0;
	}
	SprawdzaniePojazdu[playerid] = 0;
	return 1;
}
forward SprawdzCzyGraczBuguje(playerid);
public SprawdzCzyGraczBuguje(playerid)
{
	if(IsPlayerInAnyVehicle(playerid) || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
	{
	    //
	}
	else
	{
    	if(GetPVarInt(playerid, "UkrytyN") == 1)
		{
      		SetPVarInt(playerid, "UkrytyN", 0);
			if(Nieznajomy[playerid] == 0)
			{
				if(GetPVarInt(playerid, "UzywaKominiarki") == 0)
				{
					new id = DaneGracza[playerid][gUID];
					SetPlayerName(playerid, Wlasciciel[id][wNAME]);
					SetPlayerScore(playerid,DaneGracza[playerid][gGAMESCORE]);
				}
			}
		    RefreshNick(playerid);
		}
		TextDrawHideForPlayer(playerid, CB);
	}
	return 1;
}
forward SprawdzPojazd(playerid);
public SprawdzPojazd(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		MozeBycWPojezdzie[playerid] = 1;
	}
	else
	{
		MozeBycWPojezdzie[playerid] = 0;
	}
	SprawdzaniePojazdu[playerid] = 0;
	return 1;
}
forward WlaczWeaponCheata(playerid);
public WlaczWeaponCheata(playerid)
{
	MozeBanowac[playerid] = 0;
	return 1;
}
forward NapisUsuns(playerid);
public NapisUsuns(playerid)
{
    DestroyDynamic3DTextLabel(Text3D:NapisWyszedl[playerid]);
	return 1;
}
forward silnikSTOP(playerid);
public silnikSTOP(playerid)
{

    SetPVarInt(playerid, "silnikAC", 0);
	return 1;
}
public OnPlayerCommandPerformed(playerid, cmdtext[], success)//Brak komendy
{
	/*if(!success)
    {
        PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
        CzasWyswietlaniaTextuNaDrzwiach[playerid] = 3;
		TextDrawHideForPlayer(playerid, pomoc[playerid]);
		TextDrawSetString(pomoc[playerid], "Nie znaleziono takiej komendy.~n~Uzyj ~y~/pomoc~w~, jezeli szukasz~n~ spisu komend lub pomocy.");
		TextDrawShowForPlayer(playerid, pomoc[playerid]);
		return 1;
    }*/
	if(cmdtext[0] == '/' && cmdtext[1] == '/')
	{
		strdel(cmdtext, 0, 2);
		if(DaneGracza[playerid][gBW] != 0)
		{
			return 0;
		}
		if(Dostal[playerid] != 0)
		{
			return 0;
		}
		if(Dostal2[playerid] != 0)
	 	{
	 	    return 0;
	 	}
		if(silka[playerid] != 0)
		{
			return 0;
		}
		if(IsPlayerInAnyVehicle(playerid))
		{
			return 0;
		}
		new formattextu[128];
		format(formattextu, sizeof(formattextu), "-%s", cmdtext);
		OnPlayerText(playerid, formattextu);
		SetPVarInt(playerid, "PlayAnim", 0);
		animacja[playerid] = 1;
		return 1;
	}
    SetPVarInt(playerid, "command", GetPVarInt(playerid, "command")+1);
	SetTimerEx("SpamCmd", 3000, 0, "d", playerid);
	return 1;
}
forward SpamIC(playerid);
public SpamIC(playerid)
{
	if(GetPVarInt(playerid, "IC") > 20 && DaneGracza[playerid][gAdmGroup] != 4)
	{
	    new str[256];
    	format(str, sizeof(str), ""PREFIXAC".AntyCheat: Spam na kanale IC, %d wypowiedzi w ciagu 3 sec.",GetPVarInt(playerid, "IC"));
	    NadajKare(playerid,-1, 0, str, 0);
	}
    SetPVarInt(playerid, "IC", 0);
	return 1;
}
forward Odnow(playerid);
public Odnow(playerid)
{
	DaneGracza[playerid][gSpam] = 1;
	return 1;
}
forward SpamCmds(playerid);
public SpamCmds(playerid)
{
	if(GetPVarInt(playerid, "command") > 3 && DaneGracza[playerid][gAdmGroup] != 4)
	{
	    DaneGracza[playerid][gSpam] = 1;
		SetTimerEx("Odnow", 30000, 0, "d", playerid);

	}
    SetPVarInt(playerid, "commands", 0);
	return 1;
}
forward SpamCmd(playerid);
public SpamCmd(playerid)
{
	if(GetPVarInt(playerid, "command") > 15 && DaneGracza[playerid][gAdmGroup] != 4)
	{
	    new str[256];
    	format(str, sizeof(str), ""PREFIXAC".AntyCheat: Spam komend, %d w ciagu 3 sec.",GetPVarInt(playerid, "command"));
	    NadajKare(playerid,-1, 0, str, 0);
	}
    SetPVarInt(playerid, "command", 0);
	return 1;
}
forward NapisUsunsV(playerid);
public NapisUsunsV(playerid)
{
	TextDrawHideForPlayer(playerid, OBJ[playerid]);
	TextDrawHideForPlayer(playerid, OBJ2[playerid]);
	TextDrawHideForPlayer(playerid, Pomiar[playerid]);
	return 1;
}
forward ZabezpieczenieOnPlayerSpawn(playerid);
public ZabezpieczenieOnPlayerSpawn(playerid)
{
	SetPVarInt(playerid, "ZablokujOnPlayerSpawn", 0);
	return 1;
}
forward ZabezpieczenieACLogin(playerid);
public ZabezpieczenieACLogin(playerid)
{
	static Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	SetPVarFloat(playerid, "OldPosX", pos[0]);
	SetPVarFloat(playerid, "OldPosY", pos[1]);
	SetPVarFloat(playerid, "OldPosZ", pos[2]);
	SetPVarInt(playerid, "ZabezpieczenieAC", 0);
	return 1;
}
forward WyslalPW(playerid);
public WyslalPW(playerid)
{
	SetPVarInt(playerid, "WyslalPW", 0);
    RefreshNick(playerid);
	return 1;
}
forward SpamKomend1(playerid);
public SpamKomend1(playerid)
{
	AntySpam[playerid][0] = 0;
	return 1;
}
forward SpamICN(playerid);
public SpamICN(playerid)
{
	AntySPAMIC[playerid][0] = 0;
	return 1;
}
forward SpamKomend2(playerid);
public SpamKomend2(playerid)
{
	AntySpam[playerid][1] = 0;
	return 1;
}
forward ZarzadzajElektryka(playerid);
public ZarzadzajElektryka(playerid)
{
	DaneGracza[playerid][gZarzadzajElektryka] = 0;
	return 1;
}
forward SprzedalPojazd(playerid);
public SprzedalPojazd(playerid)
{
	SetPVarInt(playerid, "SprzedalPojazd", 0);
	return 1;
}
stock GraczWbudynku(uid)
{
	new value = -1;
	ForeachEx(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i))
		{
			if(zalogowany[i] == true)
			{
				if(GetPlayerVirtualWorld(i) == uid)
				{
					//if(Edytors[i] == 1)
					if(GetPVarInt(i, "idobiktu") != 0 || GetPVarInt(i, "inedit") != 0)
					{
						value = i;
						break;
					}
				}
			}
		}
 	}
	return value;
}
stock GetVehiclePlayerKierownica(vehicle)
{
	new value = 0;
	ForeachEx(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i))
		{
			if(zalogowany[i] == true)
			{
				if(GetPlayerVehicleID(i) == vehicle)
				{
					if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
					{
						value++;
						break;
					}
				}
			}
		}
	}
	return value;
}
stock GetVehiclePlayer(vehicle)
{
	new value = -1;
	ForeachEx(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i))
		{
			if(zalogowany[i] == true)
			{
				if(GetPlayerVehicleID(i) != vehicle)
				{
					value = -1;
				}
				else
				{
					value = i;
					break;
				}
			}
		}
	}
	return value;
}
public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(newkeys != 0)
	{
		GraczWrocilZAFK(playerid);
	}
	new keysa, uda, lra;
	GetPlayerKeys(playerid, keysa, uda, lra);
	if(uda & KEY_UP || uda & KEY_DOWN || lra & KEY_LEFT || lra & KEY_RIGHT)
	{
		if(HOLDING(KEY_SPRINT) && !IsPlayerInAnyVehicle(playerid))
		{
		    if(Dostal[playerid] != 0)
		 	{
		 	    return 0;
		 	}
		 	if(Dostal2[playerid] != 0)
		 	{
		 	    return 0;
		 	}
			SetPVarInt(playerid, "BiegnieTeraz", 1);
		}
		else if(RELEASED(KEY_SPRINT) && !IsPlayerInAnyVehicle(playerid))
		{
		    if(Dostal[playerid] != 0)
		 	{
		 	    return 0;
		 	}
		 	if(Dostal2[playerid] != 0)
		 	{
		 	    return 0;
		 	}
		    SetPVarInt(playerid, "BiegnieTeraz", 0);
		}
	}
	if(GetPVarInt(playerid, "WybieraUbranie") == 1)
	{
		if(newkeys == 4)
		{
			SetPVarInt(playerid, "WybieraUbranie", 0);
			SetPlayerSkin(playerid, DaneGracza[playerid][gSKIN]);
			Frezuj(playerid,1);
			SetCameraBehindPlayer(playerid);
			TextDrawHideForPlayer(playerid, OBJ[playerid]);
			GameTextForPlayer(playerid, "~w~Anulowales kupno nowego ubrania.", 3000, 5);
			return 1;
		}
		if(newkeys == 16)
		{
			if(DaneGracza[playerid][gPLEC]==1)
			{
				if(DaneGracza[playerid][gPORTFEL] < SkinPlayerW[SkinIDW[playerid]][cena4])
				{
					GameTextForPlayer(playerid, "~r~Nie posiadasz takiej kwoty.", 3000, 5);
				}
				else
				{
					GameTextForPlayer(playerid, "~w~Kupiles ~y~nowe ubranie.", 3000, 5);
					Dodajkase( playerid, -SkinPlayerW[SkinIDW[playerid]][cena4]);
					DodajPrzedmiot(DaneGracza[playerid][gUID], TYP_WLASCICIEL, P_UBRANIE, SkinPlayerW[SkinIDW[playerid]][id4], 1, SkinPlayerW[SkinIDW[playerid]][nazwa4], DaneGracza[playerid][gUID], 0, -1, 0, 0, 0, 0, "");
				}
			}
			else
			{
				if(DaneGracza[playerid][gPORTFEL] < SkinPlayerM[SkinIDM[playerid]][cena4])
				{
					GameTextForPlayer(playerid, "~r~Nie posiadasz takiej kwoty.", 3000, 5);
				}
				else
				{
					GameTextForPlayer(playerid, "~w~Kupiles ~y~nowe ubranie.", 3000, 5);
					Dodajkase( playerid, -SkinPlayerM[SkinIDM[playerid]][cena4]);
					DodajPrzedmiot(DaneGracza[playerid][gUID], TYP_WLASCICIEL, P_UBRANIE, SkinPlayerM[SkinIDM[playerid]][id4], 0, SkinPlayerM[SkinIDM[playerid]][nazwa4], DaneGracza[playerid][gUID], 0, -1, 0, 0, 0, 0, "");
				}
			}
			SetCameraBehindPlayer(playerid);
			Frezuj(playerid,1);
			SetPlayerSkin(playerid, DaneGracza[playerid][gSKIN]);
			SetPVarInt(playerid, "WybieraUbranie", 0);
			TextDrawHideForPlayer(playerid, OBJ[playerid]);
			return 1;
		}
	}
	if(GetPVarInt(playerid, "PaserCzas") > 0)
	{
	    if(newkeys == KEY_SPRINT)
		{
	    	SetPVarInt(playerid, "PaserSpacja", GetPVarInt(playerid, "PaserSpacja")+1);
		}
	}
	if(GetPVarInt(playerid, "Magazynier") == 1)
 	{
		if(newkeys == KEY_SPRINT)
		{
			RemovePlayerAttachedObject(playerid, 8);
		    DisablePlayerCheckpoint(playerid);
		    SetPVarInt(playerid, "Magazynier", 0);
		    GameTextForPlayer(playerid, "~r~Musisz chodzic!.", 3000, 5);
		    TextDrawHideForPlayer(playerid, OBJ[playerid]);
		    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		    SetPVarInt(playerid, "Poziom", 0);
	    	SetPVarInt(playerid, "BotAkcja", 0);
		}
		//new keysa, uda, lra;
		//GetPlayerKeys(playerid, keysa, uda, lra);
		if(keysa == KEY_WALK)
		{
		    if(uda & KEY_UP || uda & KEY_DOWN || lra & KEY_LEFT || lra & KEY_RIGHT)
			{
			    //
			}
		}
		else
		{
		    if(uda & KEY_UP || uda & KEY_DOWN || lra & KEY_LEFT || lra & KEY_RIGHT)
			{
			    RemovePlayerAttachedObject(playerid, 8);
			    DisablePlayerCheckpoint(playerid);
			    SetPVarInt(playerid, "Magazynier", 0);
			    GameTextForPlayer(playerid, "~r~Musisz chodzic!.", 3000, 5);
			    TextDrawHideForPlayer(playerid, OBJ[playerid]);
			    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			    SetPVarInt(playerid, "Poziom", 0);
	    		SetPVarInt(playerid, "BotAkcja", 0);
			}
		}
	}
	if(GetPVarInt(playerid, "Magazynier") == 2)
 	{
		if(newkeys == KEY_SPRINT)
		{
			RemovePlayerAttachedObject(playerid, 8);
		    DisablePlayerCheckpoint(playerid);
		    SetPVarInt(playerid, "Magazynier", 0);
		    GameTextForPlayer(playerid, "~r~Musisz chodzic!.", 3000, 5);
		    TextDrawHideForPlayer(playerid, OBJ[playerid]);
		    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		    SetPVarInt(playerid, "Poziom", 0);
	    	SetPVarInt(playerid, "BotAkcja", 0);
		}
		//new keysa, uda, lra;
		//GetPlayerKeys(playerid, keysa, uda, lra);
		if(keysa == KEY_WALK)
		{
		    if(uda & KEY_UP || uda & KEY_DOWN || lra & KEY_LEFT || lra & KEY_RIGHT)
			{
			    //
			}
		}
		else
		{
		    if(uda & KEY_UP || uda & KEY_DOWN || lra & KEY_LEFT || lra & KEY_RIGHT)
			{
			    RemovePlayerAttachedObject(playerid, 8);
			    DisablePlayerCheckpoint(playerid);
			    SetPVarInt(playerid, "Magazynier", 0);
			    GameTextForPlayer(playerid, "~r~Musisz chodzic!.", 3000, 5);
			    TextDrawHideForPlayer(playerid, OBJ[playerid]);
			    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			    SetPVarInt(playerid, "Poziom", 0);
	    		SetPVarInt(playerid, "BotAkcja", 0);
			}
		}
	}
	if(GetPVarInt(playerid, "Magazynier") == 3)
 	{
		if(newkeys == KEY_SPRINT)
		{
			RemovePlayerAttachedObject(playerid, 8);
		    DisablePlayerCheckpoint(playerid);
		    SetPVarInt(playerid, "Magazynier", 0);
		    GameTextForPlayer(playerid, "~r~Musisz chodzic!.", 3000, 5);
		    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		    SetPVarInt(playerid, "Poziom", 0);
	    	SetPVarInt(playerid, "BotAkcja", 0);
		}
		//new keysa, uda, lra;
		//GetPlayerKeys(playerid, keysa, uda, lra);
		if(keysa == KEY_WALK)
		{
		    if(uda & KEY_UP || uda & KEY_DOWN || lra & KEY_LEFT || lra & KEY_RIGHT)
			{
			    //
			}
		}
		else
		{
		    if(uda & KEY_UP || uda & KEY_DOWN || lra & KEY_LEFT || lra & KEY_RIGHT)
			{
			    RemovePlayerAttachedObject(playerid, 8);
			    DisablePlayerCheckpoint(playerid);
			    SetPVarInt(playerid, "Magazynier", 0);
			    GameTextForPlayer(playerid, "~r~Musisz chodzic!.", 3000, 5);
			    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			    SetPVarInt(playerid, "Poziom", 0);
	    		SetPVarInt(playerid, "BotAkcja", 0);
			}
		}
	}
	if(silka[playerid] != 0)
 	{
		if(newkeys == KEY_SPRINT)
		{
			podnoszenie[playerid] =1;
			testzabez[playerid] = SetTimerEx("cwiczenie", 200, 0, "i", playerid);
			ApplyAnimation( playerid, "benchpress", "gym_bp_up_A",4.1, 0, 0, 0, 1, 0, 1);
		}
		else if(oldkeys == KEY_SPRINT)
		{
			KillTimer(testzabez[playerid]);
			podnoszenie[playerid] = 0;
			ApplyAnimation( playerid, "benchpress", "gym_bp_down",4.1, 0, 0, 0, 1, 0, 1);
		}
	}
	//
	if(Rolki[playerid] != 0)
	{
		//new keysa, uda, lra;
		//GetPlayerKeys(playerid, keysa, uda, lra);
		if(uda & KEY_UP || uda & KEY_DOWN || lra & KEY_LEFT || lra & KEY_RIGHT)
		{
			if(HOLDING(KEY_SPRINT) && !IsPlayerInAnyVehicle(playerid))
			{
			    if(Dostal[playerid] != 0)
			 	{
			 	    return 0;
			 	}
			 	if(Dostal2[playerid] != 0)
			 	{
			 	    return 0;
			 	}
				ApplyAnimation(playerid, "SKATE", "skate_run", 1.0, 2, 1, 1, 1, 1);
			}
			else if(RELEASED(KEY_SPRINT) && !IsPlayerInAnyVehicle(playerid))
			{
			    if(Dostal[playerid] != 0)
			 	{
			 	    return 0;
			 	}
			 	if(Dostal2[playerid] != 0)
			 	{
			 	    return 0;
			 	}
			    ClearAnimations(playerid);
				animacja[playerid] = 0;
			}
		}
	}
	else
	{
		if(GetPlayerDrunkLevel(playerid) >= 14000)
		{
			//new keysa, uda, lra;
			//GetPlayerKeys(playerid, keysa, uda, lra);
			if(uda & KEY_UP || uda & KEY_DOWN || lra & KEY_LEFT || lra & KEY_RIGHT)
			{
				if(keysa != KEY_WALK && !IsPlayerInAnyVehicle(playerid))
				{
					new myobject = GetPVarInt(playerid, "idobiktu");
					if(myobject == 0)
					{
						OnPlayerText(playerid, "-pijak");
					}
				}
			}
		}
		if(DaneGracza[playerid][gTYPCHODZENIA] != 0)
		{
			//new keysa, uda, lra;
			//GetPlayerKeys(playerid, keysa, uda, lra);
			if(uda & KEY_UP || uda & KEY_DOWN || lra & KEY_LEFT || lra & KEY_RIGHT)
			{
			    if(HOLDING(KEY_WALK) && !IsPlayerInAnyVehicle(playerid))
				{
				    new myobject = GetPVarInt(playerid, "idobiktu");
					if(myobject == 0)
					{
						static stra[10];
						strdel(stra, 0, 10);
						format(stra, sizeof(stra), "-idz%d", DaneGracza[playerid][gTYPCHODZENIA]);
						OnPlayerText(playerid, stra);
					}
				}
				else if(RELEASED(KEY_WALK) && !IsPlayerInAnyVehicle(playerid))
				{
				    new myobject = GetPVarInt(playerid, "idobiktu");
					if(myobject == 0)
					{
						ClearAnimations(playerid);
						animacja[playerid] = 0;
					}
				}
			}
		}
	}
	if(HOLDING(KEY_ACTION) && GetPlayerState(playerid)==PLAYER_STATE_DRIVER)
	{
	    if(GetPlayerState(playerid)==PLAYER_STATE_DRIVER)
		{
			if(DaneGracza[playerid][gBW] != 0)
			{
				return 0;
			}
			cmd_v(playerid, "odpal");
			new vehid = GetPlayerVehicleID(playerid);
		    new uidnitro = SprawdzCarUID(vehid);
			if(GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), GetVehicleComponentType(1010)) == 1010)
			{
		        if(PojazdInfo[uidnitro][pPaliwoGaz] != 0)
		        {
					AddVehicleComponent(vehid, 1010);
					SetPVarInt(playerid, "NitroPojazd", 0);
					return 1;
				}
			}
		}
	}
	else if(RELEASED(KEY_ACTION) && GetPlayerState(playerid)==PLAYER_STATE_DRIVER)
	{
	    if(GetPlayerState(playerid)==PLAYER_STATE_DRIVER)
		{
			if(DaneGracza[playerid][gBW] != 0)
			{
				return 0;
			}
			new vehid = GetPlayerVehicleID(playerid);
		    new uidnitro = SprawdzCarUID(vehid);
			if(GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), GetVehicleComponentType(1010)) == 1010)
			{
		        if(PojazdInfo[uidnitro][pPaliwoGaz] != 0)
		        {
					RemoveVehicleComponent(vehid, 1010);
					AddVehicleComponent(vehid, 1010);
					SetPVarInt(playerid, "NitroPojazd", 0);
					return 1;
				}
			}
		}
	}
	if((newkeys & KEY_CROUCH || newkeys & KEY_CTRL_BACK) && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
		if(PrzedmiotInfo[DaneGracza[playerid][gBronUID]][pWar1] == 24 && PrzedmiotInfo[DaneGracza[playerid][gBronUID]][pUzywany] == 1)
		{
		    if(IsPlayerInAnyVehicle(playerid))
		    {
			    GameTextForPlayer(playerid, "~r~Nie poprawny typ broni!", 3000, 5);
				PutPlayerInVehicle(playerid, GetPlayerVehicleID(playerid), GetPlayerVehicleSeat(playerid));
				return 1;
			}
		}
		if(GetPVarInt(playerid, "DriveBy") == 0)
		{
			SetPVarInt(playerid, "DriveBy", 1);
		}
		else
		{
			SetPVarInt(playerid, "DriveBy", 0);
			PutPlayerInVehicle(playerid, GetPlayerVehicleID(playerid), GetPlayerVehicleSeat(playerid));
		}
	}
	if(newkeys & KEY_NO && !IsPlayerInAnyVehicle(playerid))
	{
	    //printf("[DEBUG]Klawisz (N) zostal u¿yty przez gracza");
	    cmd_testani(playerid, "");
	    return 1;
	}
	if(newkeys & KEY_CTRL_BACK && !IsPlayerInAnyVehicle(playerid))
	{
	    cmd_v(playerid, "klawiszz");
	    cmd_zamknij(playerid, "");
	    return 1;
	}
	if(GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), GetVehicleComponentType(1010)) == 1010)
	{
		if(GetPlayerState(playerid) == 2)
		{
		    new vehid = GetPlayerVehicleID(playerid);
		    new uidnitro = SprawdzCarUID(vehid);
			if(HOLDING(4))
			{
                if(PojazdInfo[uidnitro][pPaliwoGaz] != 0)
                {
					AddVehicleComponent(vehid, 1010);
					SetPVarInt(playerid, "NitroPojazd", 1);
					return 1;
				}
			}
			else if(RELEASED(4))
			{
			    if(PojazdInfo[uidnitro][pPaliwoGaz] != 0)
                {
					RemoveVehicleComponent(vehid, 1010);
					AddVehicleComponent(vehid, 1010);
					SetPVarInt(playerid, "NitroPojazd", 0);
					return 1;
				}
			}
		}
		if(newkeys==KEY_NO && GetPlayerState(playerid)==PLAYER_STATE_DRIVER)
		{
			if(DaneGracza[playerid][gBW] != 0)
			{
				return 0;
			}
		    new vehicleid = GetPlayerVehicleID(playerid);
		    if(!Wlascicielpojazdu(vehicleid, playerid))
			{
				return 0;
			}
			new lights,doors,bonnet,boot,objective,engine,alarm;
			GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
			if(!lights)
			{
				SetVehicleParamsEx(vehicleid,engine,true,alarm,doors,bonnet,boot,objective);
			}
			else
			{
				SetVehicleParamsEx(vehicleid,engine,false,alarm,doors,bonnet,boot,objective);
				return 1;
			}
			return 1;
		}
	}
	else
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			new uid = SprawdzCarUID(vehicleid);
			if(PojazdInfo[uid][pBoost] != 0)
			{
				if(HOLDING(4))//Boost Key
				{
					Boost(playerid);
				}
			}
		}
		if(newkeys==KEY_FIRE && GetPlayerState(playerid)==PLAYER_STATE_DRIVER)
		{
			if(DaneGracza[playerid][gBW] != 0)
			{
				return 0;
			}
		    new vehicleid = GetPlayerVehicleID(playerid);
		    if(!Wlascicielpojazdu(vehicleid, playerid))
			{
				return 0;
			}
			new lights,doors,bonnet,boot,objective,engine,alarm;
			GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
			if(!lights)
			{
				SetVehicleParamsEx(vehicleid,engine,true,alarm,doors,bonnet,boot,objective);
			}
			else
			{
				SetVehicleParamsEx(vehicleid,engine,false,alarm,doors,bonnet,boot,objective);
				return 1;
			}
			return 1;
		}
	}
	if(newkeys == KEY_YES)
 	{
 	    if(zalogowany[playerid] == false)
	    {
	        return 0;
	    }
		if(DaneGracza[playerid][gBW] != 0)
		{
			return 0;
		}
		if(GetPVarInt(playerid, "metry") == 0)
 	    {
			if(zalogowany[playerid] == false)
		    {
		        return 0;
		    }
			if(DaneGracza[playerid][gBW] != 0)
			{
				return 0;
			}
			if(GetPlayerBusStop(playerid))//bus
			{
				cmd_businterakcja22(playerid, "");
			}
			if(GetPVarInt(playerid, "DrabinaUzyl") == 1)//Drabina powrot interakcja
		    {
		        new Float:x1 = GetPVarFloat(playerid, "DrabinaX1");
		        new Float:y2 = GetPVarFloat(playerid, "DrabinaY2");
		        new Float:z3 = GetPVarFloat(playerid, "DrabinaZ3");
		        if(IsPlayerInRangeOfPoint(playerid, 1.5, x1, y2, z3) && GetPVarInt(playerid, "DrabinaUzyl") == 1)
                {
                    new Float:x = GetPVarFloat(playerid, "DrabinaX");
                    new Float:y = GetPVarFloat(playerid, "DrabinaY");
                    new Float:z = GetPVarFloat(playerid, "DrabinaZ");
                    new Float:a = GetPVarFloat(playerid, "DrabinaA");
                    Teleportuj(playerid, x, y, z);
                    SetPlayerFacingAngle(playerid, a);
                    DisablePlayerCheckpoint(playerid);
                    SetPVarInt(playerid, "DrabinaUzyl", 0);
                    SetPVarFloat(playerid, "DrabinaX", 0);
                    SetPVarFloat(playerid, "DrabinaY", 0);
                    SetPVarFloat(playerid, "DrabinaZ", 0);
                    SetPVarFloat(playerid, "DrabinaA", 0);
                    SetPVarFloat(playerid, "DrabinaX1", 0);
                    SetPVarFloat(playerid, "DrabinaX2", 0);
                    SetPVarFloat(playerid, "DrabinaX3", 0);
				}
		    }
			if(GraczObokNasion(playerid))
			{
				new string[256], naglowek[256];
				new uid = GetPVarInt(playerid, "Nasiona");
				if(Nasiona[uid][nUID] == DaneGracza[playerid][gUID])
				{
					if(uid != 0)
					{
						format(string, sizeof(string), "%s\n1.\tPoka¿ informacje o roœlinie", string);
						format(string, sizeof(string), "%s\n2.\tPodlej roœline", string);
						format(string, sizeof(string), "%s\n3.\tZbierz roœlinê", string);
						format(naglowek, sizeof(naglowek), "Interakcja z roœlin¹ (%d)", Nasiona[uid][nID]);
						dShowPlayerDialog(playerid, DIALOG_INTERAKCJA_NASIONA, DIALOG_STYLE_LIST, naglowek, string, "Wybierz", "Zamknij");
						return 1;
					}
				}
				else
				{
					if(uid != 0)
					{
						format(string, sizeof(string), "%s\n1.\tPoka¿ informacje o roœlinie", string);
						format(string, sizeof(string), "%s\n2.\tPodlej roœline", string);
						format(naglowek, sizeof(naglowek), "Interakcja z roœlin¹ (%d)", Nasiona[uid][nID]);
						dShowPlayerDialog(playerid, DIALOG_INTERAKCJA_NASIONA, DIALOG_STYLE_LIST, naglowek, string, "Wybierz", "Zamknij");
						return 1;
					}
				}
			}
			if(!IsPlayerInAnyVehicle(playerid))
			{
				if(GetPlayerCameraTargetVehicle(playerid) != INVALID_VEHICLE_ID)
				{
					new pojazd;
					pojazd = GetPlayerCameraTargetVehicle(playerid);
					if(GetPVarInt(playerid, "CzarnaRobotaPaczka") == 1)
					{
						new veh = SprawdzCarUID(pojazd);
						if(PojazdInfo[veh][pModel] == 482)
						{
							if(GetDistanceToCar(playerid, pojazd) > 3.0)
							{
								dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Musisz staæ blisko pojazu by wejœæ z nim w interakcje.", "Zamknij", "");
								return 1;
							}
							else
							{
								RemovePlayerAttachedObject(playerid, 8);
								SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
								dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Paczka w³o¿ona do pojazdu, mo¿esz biegn¹æ po nastêpn¹ je¿eli czas na to Ci pozwala!", "Zamknij", "");
								SetPVarInt(playerid, "CzarnaRobotaPaczka", 0);
								SetPVarInt(playerid, "IloscPaczekRobota", GetPVarInt(playerid, "IloscPaczekRobota")+1);
								new rabunekmieszkania[256];
								format(rabunekmieszkania, sizeof(rabunekmieszkania), "~r~~>~ Rabunek mieszkania ~<~~n~~n~~w~Obecnie posiadacie zrabowanych przedmiotow z mieszkania: ~b~%d~n~~n~~w~Postarajcie sie jak najwiecej zrabowac!", GetPVarInt(playerid, "IloscPaczekRobota"));
								TextDrawSetString(OBJ[playerid], rabunekmieszkania);
								TextDrawShowForPlayer(playerid, OBJ[playerid]);
								SetTimerEx("NapisUsunsV",5000,0,"d",playerid);
								return 1;
							}
						}
						else
						{
							dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Musisz posiadaæ Burrito by w³o¿yæ do niego zrabowane przedmioty!", "Zamknij", "");
							return 1;
						}
					}
					if(GetPVarInt(playerid, "WZIALPACZKA") == 1)
					{
						if(GetDistanceToCar(playerid, pojazd) > 3.0)
						{
							dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Musisz staæ blisko pojazu by wejœæ z nim w interakcje.", "Zamknij", "");
							return 1;
						}
						else
						{
							new is = DaneGracza[playerid][gPaczkaUID];
							dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Paczka w³o¿ona do pojazdu, teraz udaj siê nim do miejsca dostarczenia i wyjmij paczkê z pojazdu (Y).", "Zamknij", "");
							RemovePlayerAttachedObject(playerid, 8);
							SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
							new id = PaczkaInfo[is][xMIEJSCED];
							SetPlayerCheckpoint(playerid, BudynekInfo[id][nX], BudynekInfo[id][nY], BudynekInfo[id][nZ], 5.0);
							DaneGracza[playerid][gPaczkaM] = 3;
							SetPVarInt(playerid, "WZIALPACZKA", 2);
							return 1;
						}
					}
					if(GetPVarInt(playerid, "WZIALPACZKA") == 2)
					{
						if(GetDistanceToCar(playerid, pojazd) > 3.0)
						{
							dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Musisz staæ blisko pojazu by wejœæ z nim w interakcje.", "Zamknij", "");
							return 1;
						}
						else
						{
							new is = DaneGracza[playerid][gPaczkaUID];
							dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Zabra³eœ paczkê z pojazdu udaj siê pod budynek gdzie masz dostarczyæ paczkê i wpisz /paczka", "Zamknij", "");
							SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
							SetPlayerAttachedObject(playerid,8, 1220, 1, 0.35, 0.65, 0, 0, 0, 0);
							new id = PaczkaInfo[is][xMIEJSCED];
							SetPlayerCheckpoint(playerid, BudynekInfo[id][nX], BudynekInfo[id][nY], BudynekInfo[id][nZ], 5.0);
							DaneGracza[playerid][gPaczkaM] = 3;
							SetPVarInt(playerid, "WZIALPACZKA", 3);
							return 1;
						}
					}
					if(GetPVarInt(playerid, "WZIALPACZKA") == 3)
					{
						if(GetDistanceToCar(playerid, pojazd) > 3.0)
						{
							dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Musisz staæ blisko pojazu by wejœæ z nim w interakcje.", "Zamknij", "");
							return 1;
						}
						else
						{
							new is = DaneGracza[playerid][gPaczkaUID];
							dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Zabra³eœ paczkê z pojazdu, musisz w³o¿yæ j¹ do pojazdu i dojechaæ do adresu, który znajduje siê na paczce.", "Zamknij", "");
							SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
							SetPlayerAttachedObject(playerid,8, 1220, 1, 0.35, 0.65, 0, 0, 0, 0);
							new id = PaczkaInfo[is][xMIEJSCED];
							SetPlayerCheckpoint(playerid, BudynekInfo[id][nX], BudynekInfo[id][nY], BudynekInfo[id][nZ], 5.0);
							DaneGracza[playerid][gPaczkaM] = 3;
							SetPVarInt(playerid, "WZIALPACZKA", 1);
							return 1;
						}
					}
					else
					{
						if(GetDistanceToCar(playerid, pojazd) > 3.0)
						{
							dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Musisz staæ blisko pojazu by wejœæ z nim w interakcje.", "Zamknij", "");
							return 1;
						}
						else
						{
							SetPVarInt(playerid, "pojazduid", pojazd);
							strdel(tekst_global, 0, 2048);
							format(tekst_global, sizeof(tekst_global), "%s\nInformacje o pojeŸdzie", tekst_global);
							format(tekst_global, sizeof(tekst_global), "%s\nZarz¹daj mask¹ pojazdu", tekst_global);
							format(tekst_global, sizeof(tekst_global), "%s\nZarz¹dzaj baga¿nikiem pojazdu", tekst_global);
							format(tekst_global, sizeof(tekst_global), "%s\nSpójrz do baga¿nika", tekst_global);
							if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_ZMOTORYZOWANA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_MAFIE || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_GANGI)
							{
								new hour, minute;
								gettime(hour, minute);
								if(hour >= 18 || hour <= 23 && minute == 00)
								{
									format(tekst_global, sizeof(tekst_global), "%s\nZajrzyj do wnêtrza pojazdu", tekst_global);
								}
							}
							dShowPlayerDialog(playerid, DIALOG_INTERAKCJA_VEH_WYBIERZ, DIALOG_STYLE_LIST, "Interakcja z pojazdem:", tekst_global, "Wybierz", "Zamknij");
							return 1;
						}
					}
				}
				if(GetPlayerCameraTargetPlayer(playerid) != INVALID_PLAYER_ID)
				{
					new gracz, naglowek[64];
					gracz = GetPlayerCameraTargetPlayer(playerid);
					if(PlayerObokPlayera(playerid, gracz, 1))
					{
						SetPVarInt(playerid, "gracz", gracz);
						strdel(tekst_global, 0, 2048);
						format(tekst_global, sizeof(tekst_global), "%s\nPrzywitaj siê", tekst_global);
						format(tekst_global, sizeof(tekst_global), "%s\nZabierz przedmioty", tekst_global);
						format(tekst_global, sizeof(tekst_global), "%s\nSprawdŸ tatua¿e", tekst_global);
						if(DaneGracza[gracz][gBW] != 0)
						{
							format(tekst_global, sizeof(tekst_global), "%s\nUdziel pomocy", tekst_global);
						}
						format(naglowek, sizeof(naglowek), "Interakcja z %s", ImieGracza2(gracz));
						dShowPlayerDialog(playerid, DIALOG_INTERAKCJA_WYBIERZ, DIALOG_STYLE_LIST, naglowek, tekst_global, "Wybierz", "Zamknij");
						return 1;
					}
				}
				if(GetPlayerCameraTargetDynActor(playerid) != INVALID_ACTOR_ID)
				{
					new bot;
					bot = GetPlayerCameraTargetDynActor(playerid);
					SetPVarInt(playerid, "BOT", bot);
					if(PlayerObokAktora(playerid, bot, 3))
					{
						if(Bot[bot][bTyp] == 0)//Aktor
						{
							if(Bot[bot][bStworzyl] == DaneGracza[playerid][gUID])
							{
								new string[256], naglowek[256];
								format(string, sizeof(string), "%s\n1.\tInformacje o aktorze", string);
								format(string, sizeof(string), "%s\n3.\tZmieñ nazwê aktora", string);
								format(string, sizeof(string), "%s\n4.\tZmieñ wygl¹d aktora", string);
								format(string, sizeof(string), "%s\n5.\tZmieñ pozycjê aktora", string);
								format(string, sizeof(string), "%s\n6.\tZmieñ animacjê aktora", string);
								format(string, sizeof(string), "%s\n7.\tUsuñ aktora", string);
								format(naglowek, sizeof(naglowek), "Interakcja z aktorem %s", ImieBota(bot));
								dShowPlayerDialog(playerid, DIALOG_AKTOR_STWORZONY, DIALOG_STYLE_LIST, naglowek, string, "Wybierz", "Zamknij");
								return 1;
							}
						}
						if(Bot[bot][bTyp] == 1)
						{
							new string[256], naglowek[256];
							format(string, sizeof(string), "%s\nWyrób dokumenty", string);
							format(string, sizeof(string), "%s\nZarejestruj pojazd", string);
							format(string, sizeof(string), "%s\nOp³aæ podatek", string);
							format(string, sizeof(string), "%s\nZa³ó¿ dzia³alnoœæ gospodarcz¹", string);
							format(string, sizeof(string), "%s\nZmiana rejestracji pojazdu na unikaln¹ (550QPoints)", string);
							format(string, sizeof(string), "%s\nPowierzchnie reklamowe - bilboardy w mieœcie (NIEDOSTEPNE)", string);
							format(string, sizeof(string), "%s\nZa³ó¿ rodzinê", string);
							format(naglowek, sizeof(naglowek), "Interakcja z %s", ImieBota(bot));
							dShowPlayerDialog(playerid, DIALOG_INTERAKCJA_AKTOR, DIALOG_STYLE_LIST, naglowek, string, "Wybierz", "Zamknij");
							return 1;
						}
						if(Bot[bot][bTyp] == 2)
						{
							cmd_kupaktor247(playerid, "");
							return 1;
						}
						if(Bot[bot][bTyp] == 3)
						{
							new string[256], naglowek[256];
							format(string, sizeof(string), "%s\n1. Zagadaj do aktora o czarn¹ robote", string);
							format(string, sizeof(string), "%s\n2. Odbierz kasê za czarn¹ robote", string);
							format(string, sizeof(string), "%s\n3. Zrezygnuj z rabunku na mieszkanie", string);
							format(naglowek, sizeof(naglowek), "Interakcja z %s", ImieBota(bot));
							dShowPlayerDialog(playerid, DIALOG_INTERAKCJA_AKTOR_ROBOTA, DIALOG_STYLE_LIST, naglowek, string, "Wybierz", "Zamknij");
							return 1;
						}
						if(Bot[bot][bTyp] == 4)
						{
							new string[256], naglowek[256];
							format(string, sizeof(string), "%s\n1. Sprzedaj aktorowi narkotyk", string);
							format(naglowek, sizeof(naglowek), "Interakcja z %s", ImieBota(bot));
							dShowPlayerDialog(playerid, DIALOG_INTERAKCJA_AKTOR_NARKOTYK, DIALOG_STYLE_LIST, naglowek, string, "Wybierz", "Zamknij");
							return 1;
						}
						if(Bot[bot][bTyp] == 5)
						{
							new string[256], naglowek[256];
							format(string, sizeof(string), "%s\n1. Sprzedaj aktorowi ryby", string);
							format(naglowek, sizeof(naglowek), "Interakcja z %s", ImieBota(bot));
							dShowPlayerDialog(playerid, DIALOG_INTERAKCJA_AKTOR_RYBY, DIALOG_STYLE_LIST, naglowek, string, "Wybierz", "Zamknij");
							return 1;
						}
						if(Bot[bot][bTyp] == 6)
						{
							new string[256], naglowek[256];
							format(string, sizeof(string), "%s\n1. Zapytaj o zadanie na z³omowisku", string);
							format(naglowek, sizeof(naglowek), "Interakcja z %s", ImieBota(bot));
							dShowPlayerDialog(playerid, DIALOG_INTERAKCJA_AKTOR_Z£OMOWISKO, DIALOG_STYLE_LIST, naglowek, string, "Wybierz", "Zamknij");
							return 1;
						}
						if(Bot[bot][bTyp] == 7)
						{
							new string[256], naglowek[256];
							format(string, sizeof(string), "%s\n1.\tZatrudnij siê w pracy dorywczej", string);
							format(string, sizeof(string), "%s\n2.\tOdbierz pieni¹dze z pracy", string);
							format(naglowek, sizeof(naglowek), "Interakcja z %s", ImieBota(bot));
							dShowPlayerDialog(playerid, DIALOG_INTERAKCJA_AKTOR_PRACA, DIALOG_STYLE_LIST, naglowek, string, "Wybierz", "Zamknij");
							return 1;
						}
						if(Bot[bot][bTyp] == 9)
						{
							new string[256], naglowek[256];
							format(string, sizeof(string), "%s\n1.\tOdbierz gazety do rozwiezienia", string);
							format(naglowek, sizeof(naglowek), "Interakcja z %s", ImieBota(bot));
							dShowPlayerDialog(playerid, DIALOG_INTERAKCJA_AKTOR_GAZETA, DIALOG_STYLE_LIST, naglowek, string, "Wybierz", "Zamknij");
							return 1;
						}
						if(Bot[bot][bTyp] == 11)
						{
							new string[256], naglowek[256];
							format(string, sizeof(string), "%s\n1.\tSprzedaj elektornikê paserowi", string);
							format(string, sizeof(string), "%s\n2.\tZapytaj o lokalizacjê parkingu z naczepami", string);
							format(naglowek, sizeof(naglowek), "Interakcja z %s", ImieBota(bot));
							dShowPlayerDialog(playerid, DIALOG_INTERAKCJA_PASER, DIALOG_STYLE_LIST, naglowek, string, "Wybierz", "Zamknij");
							return 1;
						}
						if(Bot[bot][bTyp] == 12)
						{
							cmd_pomoc(playerid, "");
							return 1;
						}
						if(Bot[bot][bTyp] == 13)//Zwierzak
						{
							if(Bot[bot][bStworzyl] == DaneGracza[playerid][gUID])
							{
								new string[256], naglowek[256];
								format(string, sizeof(string), "%s\n1.\tPog³aszcz zwierzaka", string);
								format(string, sizeof(string), "%s\n2.\tNakarm zwierzaka", string);
								format(string, sizeof(string), "%s\n3.\tZmieñ nazwê zwierzaka", string);
								format(string, sizeof(string), "%s\n4.\tZmieñ wygl¹d zwierzaka", string);
								format(string, sizeof(string), "%s\n5.\tZmieñ pozycjê zwierzaka", string);
								format(string, sizeof(string), "%s\n6.\tZmieñ animacjê zwierzaka", string);
								format(string, sizeof(string), "%s\n7.\tUsuñ zwierzaka", string);
								format(naglowek, sizeof(naglowek), "Interakcja z zwierzakiem %s", ImieBota(bot));
								dShowPlayerDialog(playerid, DIALOG_INTERAKCJA_ZWIERZAK, DIALOG_STYLE_LIST, naglowek, string, "Wybierz", "Zamknij");
								return 1;
							}
						}
						if(Bot[bot][bTyp] == 14)
						{
							new string[256], naglowek[256];
							format(string, sizeof(string), "%s\n1.\tSprawdŸ czy Twoja rodzinka/party spe³nia wymagania", string);
							format(string, sizeof(string), "%s\n2.\tZa³ó¿ organizacje przestêpcz¹", string);
							format(naglowek, sizeof(naglowek), "Interakcja z %s", ImieBota(bot));
							dShowPlayerDialog(playerid, DIALOG_INTERAKCJA_CREATE_ORG, DIALOG_STYLE_LIST, naglowek, string, "Wybierz", "Zamknij");
							return 1;
						}
						if(Bot[bot][bTyp] == 15)
						{
							cmd_salonbot247(playerid, "");
							return 1;
						}
						if(Bot[bot][bTyp] == 16)
						{
							new string[256], naglowek[256];
							format(string, sizeof(string), "%s\n1.\tApap\t20$", string);
							format(string, sizeof(string), "%s\n2.\tDetox\t75$", string);
							format(string, sizeof(string), "%s\n2.\tIpecac\t40$", string);
							format(naglowek, sizeof(naglowek), "Interakcja z %s", ImieBota(bot));
							dShowPlayerDialog(playerid, DIALOG_INTERAKCJA_LSMC, DIALOG_STYLE_LIST, naglowek, string, "Zakup", "Anuluj");
							return 1;
						}
						if(Bot[bot][bTyp] == 17)
						{
							new string[256], naglowek[256];
							format(string, sizeof(string), "%s\n1.\tKup nasiona", string);
							format(string, sizeof(string), "%s\n2.\tSprzedaj roœlinê", string);
							format(naglowek, sizeof(naglowek), "Interakcja z %s", ImieBota(bot));
							dShowPlayerDialog(playerid, DIALOG_INTERAKCJA_AKTOR_ROSLIN, DIALOG_STYLE_LIST, naglowek, string, "Zakup", "Anuluj");
							return 1;
						}
					}
				}
				//Wywazanie drzwi budynku poprzez interakcje
				if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_POLICYJNA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_ZMOTORYZOWANA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_MAFIE || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_GANGI)
				{
					strdel(tekst_global, 0, 2048);
					strdel(tekst_globals, 0, 2048);
					new vw = GetPlayerVirtualWorld(playerid);
					new id = -1;
					if(vw == 0)
					{
						for(new h = 0; h < sizeof(BudynekInfo); h++)
						{
							if(BudynekInfo[h][nUID] != 0)
							{
								if(Dystans(2.0, playerid, BudynekInfo[h][nX], BudynekInfo[h][nY], BudynekInfo[h][nZ]) && BudynekInfo[h][nVW] == GetPlayerVirtualWorld(playerid) || Dystans(3.0, playerid, BudynekInfo[h][nXW], BudynekInfo[h][nYW], BudynekInfo[h][nZW]) && BudynekInfo[h][nVWW] == GetPlayerVirtualWorld(playerid))
								{
									id = h;
								}
							}
						}
						if(id == -1)
						{
							id = 0;
						}
					}
					if(ZarzadzanieBudynkiem(id, playerid))
					{
						//
					}
					else
					{
						if(id != 0)
						{
							SetPVarInt(playerid, "uiddrzwi", id);
							format(tekst_global, sizeof(tekst_global), "%s\n»  Poka¿ informacje", tekst_global);
							if(BudynekInfo[id][nUkryty] == 0)
							{
								format(tekst_global, sizeof(tekst_global), "%s\n»  Ochrona: Brak", tekst_global);
							}
							else 
							{
								format(tekst_global, sizeof(tekst_global), "%s\n»  Ochrona: %s", tekst_global, GrupaInfo[BudynekInfo[id][nUkryty]][gNazwa]);
							}
							format(tekst_global, sizeof(tekst_global), "%s\n»  Zadzwoñ do drzwi", tekst_global);
							if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_ZMOTORYZOWANA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_MAFIE || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_GANGI)
							{
								format(tekst_global, sizeof(tekst_global), "%s\n»  Wywa¿ drzwi budynku", tekst_global);
							}
							new rok, miesiac, dzien, godzina, minuta, sekunda;
							sekundytodata(BudynekInfo[id][nOplata], rok, miesiac, dzien, godzina, minuta, sekunda);
							format(tekst_globals, sizeof(tekst_globals), GUIOPIS "Drzwi %s (%.2f m2) : (Op³ata do: %02d-%02d-%d, %02d:%02d)", BudynekInfo[id][nAdres], BudynekInfo[id][nPowieszchnia], dzien, miesiac, rok, godzina, minuta);
							dShowPlayerDialog(playerid, DIALOG_DRZWI_OPCJE2, DIALOG_STYLE_LIST, tekst_globals, tekst_global, "Wybierz", "Zamknij");
						}
					}
				}
				if(GetPlayerCameraObject(playerid) != INVALID_OBJECT_ID)
				{
					new object = GetPlayerCameraTargetDynObject(playerid), object_modelid;
					new Float: xob, Float:yob, Float:zob;
					
					GetDynamicObjectPos(object, xob, yob, zob);	
					object_modelid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, object, E_STREAMER_MODEL_ID);
					//object_extraid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, object, E_STREAMER_EXTRA_ID);
					
					/*new deb[128];
					if(DutyAdmina[playerid] == 1)
					{
						format(deb, sizeof(deb), "Object: %d, Modelid: %d, Extraid: %d, UID: %d", object, object_modelid, object_extraid, SprawdzObiektUID(object));
						SendClientMessage(playerid, SZARY, deb);
					}*/
					
					SetPVarInt(playerid, "InterakcjaObiekt", SprawdzObiektUID(object));
					
					if(ObiektInfo[SprawdzObiektUID(object)][objBrama] != 0)
					{
						if(IsPlayerInRangeOfPoint(playerid, 15, xob, yob, zob) && GetPlayerVirtualWorld(playerid) == 0 || IsPlayerInRangeOfPoint(playerid, 3, xob, yob, zob) && GetPlayerVirtualWorld(playerid) != 0)
						{
							if(!OtwieranieBramV2(playerid, SprawdzObiektUID(object)))
							{
								GameTextForPlayer(playerid, "~r~Brak uprawnien.", 3000, 5);
								return 0;
							}
							new findt = ObiektInfo[SprawdzObiektUID(object)][objSprarowanyUID];
							if(findt != 0)
							{
								BramaRuch(playerid, SprawdzObiektUID(object), findt);
							}
							else
							{
								BramaRuch(playerid, SprawdzObiektUID(object), -1);
							}
						}
					}
					if(956 == object_modelid)//Automat Forex
					{
						new string[256], naglowek[256];
						format(string, sizeof(string), "%s\n1.\tNie wycieniono\tZdrapka konto premium GOLD 7dni", string);
						format(string, sizeof(string), "%s\n2.\tNie wycieniono\tZdrapka konto premium GOLD 14dni", string);
						format(string, sizeof(string), "%s\n3.\tNie wycieniono\tZdrapka konto premium GOLD 30dni", string);
						format(string, sizeof(string), "%s\n4.\tNie wycieniono\tZdrapka skin personalny", string);
						format(string, sizeof(string), "%s\n5.\tNie wycieniono\tZdrapka zmiana to¿samoœci", string);
						format(naglowek, sizeof(naglowek), "Interakcja z automatem Forex (€)");
						dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_LIST, naglowek, string, "Wybierz", "Zamknij");
						return 1;		
					}
					if(-2085 == object_modelid)//Obiekt roœliny
					{
						if(GraczObokNasion(playerid))
						{
							new string[256], naglowek[256];
							new uid = GetPVarInt(playerid, "Nasiona");
							if(Nasiona[uid][nUID] == DaneGracza[playerid][gUID])
							{
								if(uid != 0)
								{
									format(string, sizeof(string), "%s\n1.\tPoka¿ informacje o roœlinie", string);
									format(string, sizeof(string), "%s\n2.\tPodlej roœline", string);
									format(string, sizeof(string), "%s\n3.\tZbierz roœlinê", string);
									format(naglowek, sizeof(naglowek), "Interakcja z roœlin¹ (%d)", Nasiona[uid][nID]);
									dShowPlayerDialog(playerid, DIALOG_INTERAKCJA_NASIONA, DIALOG_STYLE_LIST, naglowek, string, "Wybierz", "Zamknij");
									return 1;
								}
							}
							else
							{
								if(uid != 0)
								{
									format(string, sizeof(string), "%s\n1.\tPoka¿ informacje o roœlinie", string);
									format(string, sizeof(string), "%s\n2.\tPodlej roœline", string);
									format(naglowek, sizeof(naglowek), "Interakcja z roœlin¹ (%d)", Nasiona[uid][nID]);
									dShowPlayerDialog(playerid, DIALOG_INTERAKCJA_NASIONA, DIALOG_STYLE_LIST, naglowek, string, "Wybierz", "Zamknij");
									return 1;
								}
							}
						}
					}
					
					if(1529 == object_modelid || 1490 == object_modelid || 1524 == object_modelid || 1530 == object_modelid || 1531 == object_modelid || 1528 == object_modelid || 1527 == object_modelid || 1527 == object_modelid || 1526 == object_modelid || 1525 == object_modelid || 18667 == object_modelid || 18666 == object_modelid || 18665 == object_modelid || 18664 == object_modelid || 18663 == object_modelid || 18662 == object_modelid || 18660 == object_modelid)
					{
						if(IsPlayerInRangeOfPoint(playerid, 3, xob, yob, zob))
						{
							if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] != DZIALALNOSC_GANGI)
							{
								dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "{DEDEDE}Musisz znajdowaæ siê na s³u¿bie organizacji przestêpczej.", "Zamknij", "");
								return 0;
							}
							if(GetPlayerVirtualWorld(playerid) != 0)
							{
								return 0;
							}
							if(!GraczaMaTypPrzedmiotuWu(playerid, 1, 41))
							{
								dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby rozpocz¹æ tagowanie musisz trzymaæ w rêce spray.", "Zamknij", "");
								return 0;
							}
							if(NaprawiaCzas[playerid] != 0)
							{
								dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aktualnie naprawiasz jakiœ pojazd.", "Zamknij", "");
								return 0;
							}
							if(LakierujeCzas[playerid] != 0)
							{
								dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aktualnie lakierujesz jakiœ pojazd.", "Zamknij", "");
								return 0;
							}
							if(ObiektInfo[SprawdzObiektUID(object)][gZajety] == 0)
							{
								dShowPlayerDialog(playerid, DIALOG_TAG, DIALOG_STYLE_INPUT, GUIOPIS "Informacja", "Rozpocz¹³eœ proces tagowania poni¿ej wpisz tag jaki ma siê pokazaæ po zakoñczeniu tego procesu.\nAby przenieœæ wyraz poni¿ej u¿yj '*'\nAby pokolorowaæ tekst u¿yj '(kolor html) np (FF0000)Tekst(000000)Tekst'\nPrzyklad: '(FF0000)Red*(000000)Black'\n{DEDEDE}\n\t\t{FF0000}Red family\n\t\t{000000}Only!", "Zatwierdz", "Zamknij");
								Tag[playerid] = SprawdzObiektUID(object);
								ObiektInfo[SprawdzObiektUID(object)][gZajety] = 1;
								new bron_uid = GetPVarInt(playerid, "UzywanaBronUID");
								PoziomLakieru[playerid] = PrzedmiotInfo[bron_uid][pWar2];
								LakierujeCzas[playerid] = 1;
							}
							else
							{
								dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aktualnie ktoœ edytuje ten tag, poszukaj innego.", "Zamknij", "");
							}
						}
					}					
					if(1372 == object_modelid || 1333 == object_modelid || 1334 == object_modelid || 1227 == object_modelid)
					{
						if(!IsPlayerInRangeOfPoint(playerid, 3, xob, yob, zob))
							return GameTextForPlayer(playerid, "~r~Jestes zbyt daleko!", 3000, 5);

						Przedmioty2(playerid, playerid, DIALOG_PRZEDMIOT_DEL, GUIOPIS "W³ó¿ przedmiot do œmietnika:", TYP_WLASCICIEL, 0);
						return 1;
					}
					if(3465 == object_modelid)//tankuj
					{
						if(!IsPlayerInRangeOfPoint(playerid, 5, xob, yob, zob))
							return GameTextForPlayer(playerid, "~r~Jestes zbyt daleko!", 3000, 5);
							
							
						new vec = GetClosestVehicle(playerid, 15);
						new vehc = SprawdzCarUID(vec);
						new lista_dystrybutor[2064], found = 0;
						format(lista_dystrybutor, sizeof(lista_dystrybutor), "{848484}UID\tPojazd\tPaliwo (l)");
						ForeachEx(i, MAX_VEH)
						{
							if(vec != INVALID_VEHICLE_ID && PojazdInfo[i][pUID] == i && PojazdInfo[i][pUID] == vehc)
							{
								format(lista_dystrybutor, sizeof(lista_dystrybutor), "%s\n%d\t%s\t%0.01fl", lista_dystrybutor, PojazdInfo[i][pUID], GetVehicleModelName(PojazdInfo[i][pModel]), PojazdInfo[i][pPaliwo]);
								found++;
							}
						}
						if(found > 0)
						{
							dShowPlayerDialog(playerid, DIALOG_DYSTRYBUTOR, DIALOG_STYLE_TABLIST_HEADERS, GUIOPIS "Dystrybutor:", lista_dystrybutor, "Wybierz", "Zamknij");
						}
						else dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Dystrybutor", "Nie znaleŸliœmy pojazdu blisko Twojej postaci byœ móg³ zatankowaæ pojazd!", "Zamknij", "");
						return 1;
					}
					if(11712 == object_modelid)
					{
						if(!IsPlayerInRangeOfPoint(playerid, 3, xob, yob, zob))
							return GameTextForPlayer(playerid, "~r~Jestes zbyt daleko!", 3000, 5);
							
						Przedmioty3(playerid, playerid, DIALOG_PRZEDMIOT_POCHOWAJ, GUIOPIS "Pochowaj zw³oki:", TYP_ZWLOKIP, 0);
						return 1;
					}
					
					if(1216 == object_modelid)
					{
						if(!IsPlayerInRangeOfPoint(playerid, 3, xob, yob, zob))
							return GameTextForPlayer(playerid, "~r~Jestes zbyt daleko!", 3000, 5);
							
						cmd_budkainterakcja24(playerid, "");
						OnPlayerText(playerid, "-wez");
						return 1;
					}
					
					if(2942 == object_modelid || 2754 == object_modelid || -2085 == object_modelid)
					{
						if(!IsPlayerInRangeOfPoint(playerid, 3, xob, yob, zob))
						return GameTextForPlayer(playerid, "~r~Jestes zbyt daleko!", 3000, 5);
						
						cmd_bankinter(playerid, "");
						OnPlayerText(playerid, "-wez");
						return 1;
					}
					if(2640 == object_modelid)
					{
						if(!IsPlayerInRangeOfPoint(playerid, 3, xob, yob, zob))
						return GameTextForPlayer(playerid, "~r~Jestes zbyt daleko!", 3000, 5);
						
						cmd_hazard(playerid, "");
						OnPlayerText(playerid, "-wez");
						return 1;
					}
					if(2629 == object_modelid)
					{
						if(!IsPlayerInRangeOfPoint(playerid, 3, xob, yob, zob))
						return GameTextForPlayer(playerid, "~r~Jestes zbyt daleko!", 3000, 5);
						
						cmd_silownia(playerid, "");
						return 1;
					}
					if(1437 == object_modelid)
					{
						if(!IsPlayerInRangeOfPoint(playerid, 3, xob, yob, zob))
						return GameTextForPlayer(playerid, "~r~Jestes zbyt daleko!", 3000, 5);
						
						new Float:x, Float:y, Float:z, Float:a;
						new Float:xx, Float:yx, Float:zx;
						new Float:xx1, Float:yx1, Float:zx1;
						new Float:xy, Float:yy, Float:zy;
						new Float:xy1, Float:yy1, Float:zy1;
						GetPlayerPos(playerid, xx, yx, zx);
						GetPlayerPos(playerid, xx1, yx1, zx1);
						GetPlayerPos(playerid, xy, yy, zy);
						GetPlayerPos(playerid, xy1, yy1, zy1);
						MapAndreas_FindZ_For2DCoord(xx+10,yx,zx);
						MapAndreas_FindZ_For2DCoord(xx1-10,yx1,zx1);
						MapAndreas_FindZ_For2DCoord(xy,yy+10,zy);
						MapAndreas_FindZ_For2DCoord(xy1,yy1-10,zy1);
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, a);
						if(zx > zx1 && zx > zy && zx > zy1)
						{
							SetPVarFloat(playerid, "DrabinaX", x);
							SetPVarFloat(playerid, "DrabinaY", y);
							SetPVarFloat(playerid, "DrabinaZ", z);
							SetPVarFloat(playerid, "DrabinaA", a);
							Teleportuj(playerid, xx+10, yx, zx);
							SetPVarFloat(playerid, "DrabinaX1", xx+10);
							SetPVarFloat(playerid, "DrabinaY2", yx);
							SetPVarFloat(playerid, "DrabinaZ3", zx);
							SetPVarInt(playerid, "DrabinaUzyl", 1);
							SetPlayerCheckpoint(playerid, GetPVarFloat(playerid, "DrabinaX1"), GetPVarFloat(playerid, "DrabinaY2"), GetPVarFloat(playerid, "DrabinaZ3"), 1.5);
							return 1;
						}
						if(zx1 > zx && zx1 > zy && zx1 > zy1)
						{
							SetPVarFloat(playerid, "DrabinaX", x);
							SetPVarFloat(playerid, "DrabinaY", y);
							SetPVarFloat(playerid, "DrabinaZ", z);
							SetPVarFloat(playerid, "DrabinaA", a);
							Teleportuj(playerid, xx1-10, yx1, zx1);
							SetPVarFloat(playerid, "DrabinaX1", xx1-10);
							SetPVarFloat(playerid, "DrabinaY2", yx1);
							SetPVarFloat(playerid, "DrabinaZ3", zx1);
							SetPVarInt(playerid, "DrabinaUzyl", 1);
							SetPlayerCheckpoint(playerid, GetPVarFloat(playerid, "DrabinaX1"), GetPVarFloat(playerid, "DrabinaY2"), GetPVarFloat(playerid, "DrabinaZ3"), 1.5);
							return 1;
						}
						if(zy > zx && zy > zx1 && zy > zy1)
						{
							SetPVarFloat(playerid, "DrabinaX", x);
							SetPVarFloat(playerid, "DrabinaY", y);
							SetPVarFloat(playerid, "DrabinaZ", z);
							SetPVarFloat(playerid, "DrabinaA", a);
							Teleportuj(playerid, xy, yy+10, zy);
							SetPVarFloat(playerid, "DrabinaX1", xy);
							SetPVarFloat(playerid, "DrabinaY2", yy+10);
							SetPVarFloat(playerid, "DrabinaZ3", zy);
							SetPVarInt(playerid, "DrabinaUzyl", 1);
							SetPlayerCheckpoint(playerid, GetPVarFloat(playerid, "DrabinaX1"), GetPVarFloat(playerid, "DrabinaY2"), GetPVarFloat(playerid, "DrabinaZ3"), 1.5);
							return 1;
						}
						if(zy1 > zx && zy1 > zx1 && zy1 > zy)
						{
							SetPVarFloat(playerid, "DrabinaX", x);
							SetPVarFloat(playerid, "DrabinaY", y);
							SetPVarFloat(playerid, "DrabinaZ", z);
							SetPVarFloat(playerid, "DrabinaA", a);
							Teleportuj(playerid, xy1, yy1-10, zy1);
							SetPVarFloat(playerid, "DrabinaX1", xy1);
							SetPVarFloat(playerid, "DrabinaY2", yy1-10);
							SetPVarFloat(playerid, "DrabinaZ3", zy1);
							SetPVarInt(playerid, "DrabinaUzyl", 1);
							SetPlayerCheckpoint(playerid, GetPVarFloat(playerid, "DrabinaX1"), GetPVarFloat(playerid, "DrabinaY2"), GetPVarFloat(playerid, "DrabinaZ3"), 1.5);
							return 1;
						}
					}
					if(1776 == object_modelid)
					{
						if(!IsPlayerInRangeOfPoint(playerid, 3, xob, yob, zob))
						return GameTextForPlayer(playerid, "~r~Jestes zbyt daleko!", 3000, 5);
						
						new uids = GetPlayerVirtualWorld(playerid);
						new ilosc;
						new gr = BudynekInfo[uids][nWlascicielD];
						ForeachEx(n, MAX_PLAYERS)
						{
							if(IsPlayerConnected(n))
							{
								if(zalogowany[n] == true)
								{
									if(GetPlayerVirtualWorld(n) == uids)
									{
										if(DaneGracza[n][gDzialalnosc1] == gr || DaneGracza[n][gDzialalnosc2] == gr || DaneGracza[n][gDzialalnosc3] == gr || DaneGracza[n][gDzialalnosc4] == gr || DaneGracza[n][gDzialalnosc5] == gr)
										{
											ilosc++;
										}
									}
								}
							}
						}
						if(ilosc >= 2)
						{
							dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie mo¿esz skorzystaæ z tego automatu, je¿eli w budynku znajduje siê pracownik tego lokalu.", "Zamknij", "");
							return 0;
						}
						if(BudynekInfo[uids][nWlascicielP] != 0 && BudynekInfo[uids][nWlascicielD] == 0)
						{
							GameTextForPlayer(playerid, "~r~Urzadzenie tylko dla biznesow!", 3000, 5);
							return 0;
						}
						if(GrupaInfo[gr][gTyp] != DZIALALNOSC_GASTRONOMIA)
						{
							GameTextForPlayer(playerid, "~r~Automat tylko dla gastronomii!", 3000, 5);
							return 0;
						}
						SetPVarInt(playerid, "idgrpodaj", playerid);
						ZaladujMagazyny();
						ZapiszMagazyn(playerid);
						MagazynAutomat(playerid, DIALOG_AUTOMAT_KUP, GUIOPIS "Podaj:", TYP_MAGAZYN, gr, "Kup", "Zamknij");
						OnPlayerText(playerid, "-wez");
					}
					if(19526 == object_modelid)
					{
						if(!IsPlayerInRangeOfPoint(playerid, 3, xob, yob, zob))
						return GameTextForPlayer(playerid, "~r~Jestes zbyt daleko!", 3000, 5);
						
						new uids = GetPlayerVirtualWorld(playerid);
						new ilosc;
						new gr = BudynekInfo[uids][nWlascicielD];
						ForeachEx(n, MAX_PLAYERS)
						{
							if(IsPlayerConnected(n))
							{
								if(zalogowany[n] == true)
								{
									if(GetPlayerVirtualWorld(n) == uids)
									{
										if(DaneGracza[n][gDzialalnosc1] == gr || DaneGracza[n][gDzialalnosc2] == gr || DaneGracza[n][gDzialalnosc3] == gr || DaneGracza[n][gDzialalnosc4] == gr || DaneGracza[n][gDzialalnosc5] == gr)
										{
											ilosc++;
										}
									}
								}
							}
						}
						if(ilosc >= 2)
						{
							dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie mo¿esz skorzystaæ z tego automatu, je¿eli w budynku znajduje siê pracownik tego lokalu.", "Zamknij", "");
							return 0;
						}
						if(BudynekInfo[uids][nWlascicielP] != 0 && BudynekInfo[uids][nWlascicielD] == 0)
						{
							GameTextForPlayer(playerid, "~r~Urzadzenie tylko dla biznesow!", 3000, 5);
							return 0;
						}
						if(GrupaInfo[gr][gTyp] != DZIALALNOSC_SILOWNIA)
						{
							GameTextForPlayer(playerid, "~r~Automat tylko dla silowni!", 3000, 5);
							return 0;
						}
						SetPVarInt(playerid, "idgrpodaj", playerid);
						ZaladujMagazyny();
						ZapiszMagazyn(playerid);
						Magazyn(playerid, DIALOG_AUTOMAT_KUP, GUIOPIS "Podaj:", TYP_MAGAZYN, gr, "Kup", "Zamknij");
						OnPlayerText(playerid, "-wez");
					}
					if(1271 == object_modelid)
					{
						if(!IsPlayerInRangeOfPoint(playerid, 3, xob, yob, zob))
						return GameTextForPlayer(playerid, "~r~Jestes zbyt daleko!", 3000, 5);
						
						new hour, minute;
						gettime(hour, minute);
						if(hour >= 19 || hour <= 23 && minute == 00)
						{
							/*if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_ZMOTORYZOWANA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_MAFIE || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_GANGI)
							{*/
								if(GetPVarInt(playerid, "ObecnieOtworzylPaser") == 0)
								{
									if(GetPVarInt(playerid, "PaserObiekt") == 1271)
									{
										dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "• Rabunek sprzetu:", "Ju¿ otwiera³eœ tê skrzynkê, spóbuj otworzyæ inn¹!", "Zamknij", "");
										return 0;
									}
									else
									{
										SetPVarInt(playerid, "PaserCzas", 10);
										SetPVarInt(playerid, "PaserObiekt", 1271);
										new paser[256];
										format(paser, sizeof(paser), "~w~Probujesz otworzyc ~b~skrzynke~w~ za pomoca narzedzia~n~Akcje mozesz przerwac ~r~LPM~w~. Zaczekaj chwile..");
										TextDrawSetString(OBJ[playerid], paser);
										TextDrawShowForPlayer(playerid, OBJ[playerid]);
										SetTimerEx("NapisUsunsV",5000,0,"d",playerid);
										SetPlayerAttachedObject(playerid, 7, 18634, 6, 0.06, 0.03, -0.10, 90, -90, 0);
										AnimacjaSzukaj(playerid);
										SetPVarInt(playerid, "ObecnieOtworzylPaser", 1);
									}
								}
								else
								{
									dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "• Rabunek sprzetu:", "Obecnie otworzyles skrzynkê poczekaj!", "Zamknij", "");
									return 0;
								}
							/*}
							else
							{
								dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "• Rabunek sprzetu:", "Musisz nale¿ec do organizacji przestêpczej by korzystaæ z tej opcji!", "Zamknij", "");
								return 0;
							}*/
						}
						else
						{
							dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "• Rabunek sprzetu:", "Rabowaæ skrzynki mo¿esz w godzinach 19 do 23.", "Zamknij", "");
							return 0;
						}
						return 1;
					}
					if(3014 == object_modelid)
					{
						if(!IsPlayerInRangeOfPoint(playerid, 3, xob, yob, zob))
						return GameTextForPlayer(playerid, "~r~Jestes zbyt daleko!", 3000, 5);
						
						new hour, minute;
						gettime(hour, minute);
						if(hour >= 19 || hour <= 23 && minute == 00)
						{
							/*if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_ZMOTORYZOWANA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_MAFIE || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_GANGI)
							{*/
								if(GetPVarInt(playerid, "ObecnieOtworzylPaser") == 0)
								{
									if(GetPVarInt(playerid, "PaserObiekt") == 3014)
									{
										dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "• Rabunek sprzetu:", "Ju¿ otwiera³eœ tê skrzynkê, spóbuj otworzyæ inn¹!", "Zamknij", "");
										return 0;
									}
									else
									{
										SetPVarInt(playerid, "PaserCzas", 15);
										SetPVarInt(playerid, "PaserObiekt", 3014);
										new paser[256];
										format(paser, sizeof(paser), "~w~Probujesz otworzyc ~b~skrzynke~w~ za pomoca narzedzia~n~Akcje mozesz przerwac ~r~LPM~w~. Zaczekaj chwile..");
										TextDrawSetString(OBJ[playerid], paser);
										TextDrawShowForPlayer(playerid, OBJ[playerid]);
										SetTimerEx("NapisUsunsV",5000,0,"d",playerid);
										SetPlayerAttachedObject(playerid, 7, 18634, 6, 0.06, 0.03, -0.10, 90, -90, 0);
										AnimacjaSzukaj(playerid);
										SetPVarInt(playerid, "ObecnieOtworzylPaser", 1);
									}
								}
								else
								{
									dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "• Rabunek sprzetu:", "Obecnie otworzyles skrzynkê poczekaj!", "Zamknij", "");
									return 0;
								}
							/*}
							else
							{
								dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "• Rabunek sprzetu:", "Musisz nale¿ec do organizacji przestêpczej by korzystaæ z tej opcji!", "Zamknij", "");
								return 0;
							}*/
						}
						else
						{
							dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "• Rabunek sprzetu:", "Rabowaæ skrzynki mo¿esz w godzinach 19 do 23.", "Zamknij", "");
							return 0;
						}
						return 1;
					}
					if(2969 == object_modelid)
					{
						if(!IsPlayerInRangeOfPoint(playerid, 3, xob, yob, zob))
						return GameTextForPlayer(playerid, "~r~Jestes zbyt daleko!", 3000, 5);
						
						new hour, minute;
						gettime(hour, minute);
						if(hour >= 19 || hour <= 23 && minute == 00)
						{
							/*if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_ZMOTORYZOWANA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_MAFIE || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_GANGI)
							{*/
								if(GetPVarInt(playerid, "ObecnieOtworzylPaser") == 0)
								{
									if(GetPVarInt(playerid, "PaserObiekt") == 2969)
									{
										dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "• Rabunek sprzetu:", "Ju¿ otwiera³eœ tê skrzynkê, spóbuj otworzyæ inn¹!", "Zamknij", "");
										return 0;
									}
									else
									{
										SetPVarInt(playerid, "PaserCzas", 15);
										SetPVarInt(playerid, "PaserObiekt", 2969);
										new paser[256];
										format(paser, sizeof(paser), "~w~Probujesz otworzyc ~b~skrzynke~w~ za pomoca narzedzia~n~Akcje mozesz przerwac ~r~LPM~w~. Zaczekaj chwile..");
										TextDrawSetString(OBJ[playerid], paser);
										TextDrawShowForPlayer(playerid, OBJ[playerid]);
										SetTimerEx("NapisUsunsV",5000,0,"d",playerid);
										SetPlayerAttachedObject(playerid, 7, 18634, 6, 0.06, 0.03, -0.10, 90, -90, 0);
										AnimacjaSzukaj(playerid);
										SetPVarInt(playerid, "ObecnieOtworzylPaser", 1);
									}
								}
								else
								{
									dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "• Rabunek sprzetu:", "Obecnie otworzyles skrzynkê poczekaj!", "Zamknij", "");
									return 0;
								}
						   /* }
							else
							{
								dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "• Rabunek sprzetu:", "Musisz nale¿ec do organizacji przestêpczej by korzystaæ z tej opcji!", "Zamknij", "");
								return 0;
							}*/
						}
						else
						{
							dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "• Rabunek sprzetu:", "Rabowaæ skrzynki mo¿esz w godzinach 19 do 23.", "Zamknij", "");
							return 0;
						}
						return 1;
					}
					if(19918 == object_modelid)
					{
						if(!IsPlayerInRangeOfPoint(playerid, 3, xob, yob, zob))
						return GameTextForPlayer(playerid, "~r~Jestes zbyt daleko!", 3000, 5);
						
						new hour, minute;
						gettime(hour, minute);
						if(hour >= 19 || hour <= 23 && minute == 00)
						{
							/*if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_ZMOTORYZOWANA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_MAFIE || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_GANGI)
							{*/
								if(GetPVarInt(playerid, "ObecnieOtworzylPaser") == 0)
								{
									if(GetPVarInt(playerid, "PaserObiekt") == 19918)
									{
										dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "• Rabunek sprzetu:", "Ju¿ otwiera³eœ tê skrzynkê, spóbuj otworzyæ inn¹!", "Zamknij", "");
										return 0;
									}
									else
									{
										SetPVarInt(playerid, "PaserCzas", 15);
										SetPVarInt(playerid, "PaserObiekt", 19918);
										new paser[256];
										format(paser, sizeof(paser), "~w~Probujesz otworzyc ~b~skrzynke~w~ za pomoca narzedzia~n~Akcje mozesz przerwac ~r~LPM~w~. Zaczekaj chwile..");
										TextDrawSetString(OBJ[playerid], paser);
										TextDrawShowForPlayer(playerid, OBJ[playerid]);
										SetTimerEx("NapisUsunsV",5000,0,"d",playerid);
										SetPlayerAttachedObject(playerid, 7, 18634, 6, 0.06, 0.03, -0.10, 90, -90, 0);
										AnimacjaSzukaj(playerid);
										SetPVarInt(playerid, "ObecnieOtworzylPaser", 1);
									}
								}
								else
								{
									dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "• Rabunek sprzetu:", "Obecnie otworzyles skrzynkê poczekaj!", "Zamknij", "");
									return 0;
								}
							/*}
							else
							{
								dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "• Rabunek sprzetu:", "Musisz nale¿ec do organizacji przestêpczej by korzystaæ z tej opcji!", "Zamknij", "");
								return 0;
							}*/
						}
						else
						{
							dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "• Rabunek sprzetu:", "Rabowaæ skrzynki mo¿esz w godzinach 19 do 23.", "Zamknij", "");
							return 0;
						}
						return 1;
					}
					if(GetPVarInt(playerid, "CzarnaRobota") == 1)
					{
						if(GraczNaTerenie(playerid) == 820)
						{
							if(19917 == object_modelid)//silnik
							{
								if(!IsPlayerInRangeOfPoint(playerid, 3, xob, yob, zob))
								return GameTextForPlayer(playerid, "~r~Jestes zbyt daleko!", 3000, 5);
								
								SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
								SetPlayerAttachedObject(playerid,8, 1220, 1, 0.35, 0.65, 0, 0, 0, 0);
								SetPVarInt(playerid, "CzarnaRobotaPaczka", 1);
								strdel(tekst_global, 0, 2048);
								format(tekst_global, sizeof(tekst_global), "~r~~>~ Rabunek mieszkania ~<~~n~~w~Udaj sie z meblami ktore uda Ci sie ukrasc, do furgonetki!~n~~y~Pamietaj ze po ukonczonej akcji musisz udac sie do aktora, by odebrac hajs za rabunek!");
								TextDrawSetString(OBJ[playerid], tekst_global);
								TextDrawShowForPlayer(playerid, OBJ[playerid]);
								SetTimerEx("NapisUsunsV",15000,0,"d",playerid);
							}
							if(19831 == object_modelid)//grill
							{
								if(!IsPlayerInRangeOfPoint(playerid, 3, xob, yob, zob))
								return GameTextForPlayer(playerid, "~r~Jestes zbyt daleko!", 3000, 5);
								
								SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
								SetPlayerAttachedObject(playerid,8, 1220, 1, 0.35, 0.65, 0, 0, 0, 0);
								SetPVarInt(playerid, "CzarnaRobotaPaczka", 1);
								strdel(tekst_global, 0, 2048);
								format(tekst_global, sizeof(tekst_global), "~r~~>~ Rabunek mieszkania ~<~~n~~w~Udaj sie z meblami ktore uda Ci sie ukrasc, do furgonetki!~n~~y~Pamietaj ze po ukonczonej akcji musisz udac sie do aktora, by odebrac hajs za rabunek!");
								TextDrawSetString(OBJ[playerid], tekst_global);
								TextDrawShowForPlayer(playerid, OBJ[playerid]);
								SetTimerEx("NapisUsunsV",15000,0,"d",playerid);
							}
							if(19830 == object_modelid)//mikser
							{
								if(!IsPlayerInRangeOfPoint(playerid, 3, xob, yob, zob))
								return GameTextForPlayer(playerid, "~r~Jestes zbyt daleko!", 3000, 5);
								
								SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
								SetPlayerAttachedObject(playerid,8, 1220, 1, 0.35, 0.65, 0, 0, 0, 0);
								SetPVarInt(playerid, "CzarnaRobotaPaczka", 1);
								strdel(tekst_global, 0, 2048);
								format(tekst_global, sizeof(tekst_global), "~r~~>~ Rabunek mieszkania ~<~~n~~w~Udaj sie z meblami ktore uda Ci sie ukrasc, do furgonetki!~n~~y~Pamietaj ze po ukonczonej akcji musisz udac sie do aktora, by odebrac hajs za rabunek!");
								TextDrawSetString(OBJ[playerid], tekst_global);
								TextDrawShowForPlayer(playerid, OBJ[playerid]);
								SetTimerEx("NapisUsunsV",15000,0,"d",playerid);
							}
							if(19894 == object_modelid)
							{
								if(!IsPlayerInRangeOfPoint(playerid, 3, xob, yob, zob))
								return GameTextForPlayer(playerid, "~r~Jestes zbyt daleko!", 3000, 5);
								
								SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
								SetPlayerAttachedObject(playerid,8, 1220, 1, 0.35, 0.65, 0, 0, 0, 0);
								SetPVarInt(playerid, "CzarnaRobotaPaczka", 1);
								strdel(tekst_global, 0, 2048);
								format(tekst_global, sizeof(tekst_global), "~r~~>~ Rabunek mieszkania ~<~~n~~w~Udaj sie z meblami ktore uda Ci sie ukrasc, do furgonetki!~n~~y~Pamietaj ze po ukonczonej akcji musisz udac sie do aktora, by odebrac hajs za rabunek!");
								TextDrawSetString(OBJ[playerid], tekst_global);
								TextDrawShowForPlayer(playerid, OBJ[playerid]);
								SetTimerEx("NapisUsunsV",15000,0,"d",playerid);
							}
							if(19893 == object_modelid)
							{
								if(!IsPlayerInRangeOfPoint(playerid, 3, xob, yob, zob))
								return GameTextForPlayer(playerid, "~r~Jestes zbyt daleko!", 3000, 5);
								
								SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
								SetPlayerAttachedObject(playerid,8, 1220, 1, 0.35, 0.65, 0, 0, 0, 0);
								SetPVarInt(playerid, "CzarnaRobotaPaczka", 1);
								strdel(tekst_global, 0, 2048);
								format(tekst_global, sizeof(tekst_global), "~r~~>~ Rabunek mieszkania ~<~~n~~w~Udaj sie z meblami ktore uda Ci sie ukrasc, do furgonetki!~n~~y~Pamietaj ze po ukonczonej akcji musisz udac sie do aktora, by odebrac hajs za rabunek!");
								TextDrawSetString(OBJ[playerid], tekst_global);
								TextDrawShowForPlayer(playerid, OBJ[playerid]);
								SetTimerEx("NapisUsunsV",15000,0,"d",playerid);
							}
						}
					}
					
					new find = 0;
					new Float:radius = 0.5;
					new uid_budynku = GetPlayerVirtualWorld(playerid);
					for(new i = 0; i < 100; i++)
					{
						if(find == 0)
						{
							ForeachEx(h, BudynekInfo[uid_budynku][nStworzoneObiekty])
							{
								if(Dystans(radius, playerid, ObiektInfo[BudynekInfo[uid_budynku][nObiekty][h]][objPozX],ObiektInfo[BudynekInfo[uid_budynku][nObiekty][h]][objPozY],ObiektInfo[BudynekInfo[uid_budynku][nObiekty][h]][objPozZ]) && GetPlayerVirtualWorld(playerid) == ObiektInfo[BudynekInfo[uid_budynku][nObiekty][h]][objvWorld] && ObiektInfo[BudynekInfo[uid_budynku][nObiekty][h]][objBrama] != 0)
								{
									find = BudynekInfo[uid_budynku][nObiekty][h];
									break;
								}
							}
							radius+=0.5;
						}
					}
					if(PrzyObiekcie(playerid, ObiektInfo[find][objModel], 3) != 0)
					{
						if(ObiektInfo[find][objBrama] != 0)
						{
							if(!OtwieranieBramV2(playerid, find))
							{
								GameTextForPlayer(playerid, "~r~Brak uprawnien!", 3000, 5);
								return 0;
							}
							new findt = ObiektInfo[find][objSprarowanyUID];
							if(findt != 0)
							{
								BramaRuch(playerid, find, findt);
							}else{
								BramaRuch(playerid, find, -1);
							}
						}
					}
				}
			    
			}
		}
		else
		{
			new uid = GetPVarInt(playerid, "metry");
			if(BudynekInfo[uid][nIR] == DaneGracza[playerid][gGUID])
			{
			    static Float:x, Float:y, Float:z;
			    GetPlayerPos(playerid, x, y ,z);
			    static Float:wynik;
			    wynik = (BudynekInfo[uid][nIRX] - x)*(BudynekInfo[uid][nIRY] - y)*1;
			    if(wynik > 0)
			    {
				    if(wynik <= BudynekInfo[uid][nPowieszchnia])
				    {
					    BudynekInfo[uid][nORX] = x;
					    BudynekInfo[uid][nORY] = y;
					    BudynekInfo[uid][nORZ] = z;
					    BudynekInfo[uid][nIR] = 0;
					    ZapiszNieruchomosc(uid);
					    GameTextForPlayer(playerid, "~r~Metraz wyznaczony.", 3000, 5);
					    SetPVarInt(playerid, "metry", 0);
					    TextDrawHideForPlayer(playerid, OBJ2[playerid]);
						new logtekst[256];
						format(logtekst, sizeof(logtekst), "[DOOR] [%s] [ID: %d] set the meters of the door %s (%d)", ZmianaNicku(playerid), playerid, BudynekInfo[uid][nAdres], uid);
						Transakcja(T_CDRZWI, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, logtekst, gettime()+KOREKTA_CZASOWA);
					}
					else
					{
					    GameTextForPlayer(playerid, "~r~Brakuje metrazu.", 3000, 5);
					}
				}
				else
				{
				    if(-(wynik) <= BudynekInfo[uid][nPowieszchnia])
				    {
					    BudynekInfo[uid][nORX] = x;
					    BudynekInfo[uid][nORY] = y;
					    BudynekInfo[uid][nORZ] = z;
					    BudynekInfo[uid][nIR] = 0;
					    ZapiszNieruchomosc(uid);
					    GameTextForPlayer(playerid, "~r~Metraz wyznaczony.", 3000, 5);
					    SetPVarInt(playerid, "metry", 0);
					    TextDrawHideForPlayer(playerid, OBJ2[playerid]);
						new logtekst[256];
						format(logtekst, sizeof(logtekst), "[DOOR] [%s] [ID: %d] set the meters of the door %s (%d)", ZmianaNicku(playerid), playerid, BudynekInfo[uid][nAdres], uid);
						Transakcja(T_CDRZWI, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, logtekst, gettime()+KOREKTA_CZASOWA);
					}
					else
					{
					    GameTextForPlayer(playerid, "~r~Brakuje metrazu.", 3000, 5);
					}
				}
			}
		}
		return 1;
	}
	if(newkeys & KEY_HANDBRAKE && !IsPlayerInAnyVehicle(playerid))
	{
		TintaApasata[playerid] = 1;
	}
    else if(oldkeys & KEY_HANDBRAKE)
	{
		TintaApasata[playerid] = 0;
	}
	if(newkeys & KEY_HANDBRAKE && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(DaneGracza[playerid][gTworzyWyscig] != 0)
		{
			if(TrasaDuty[playerid] != DaneGracza[playerid][gSluzba])
			{
				GrupaInfo[TrasaDuty[playerid]][gSaldo] += 1000;
				ZapiszSaldo(TrasaDuty[playerid]);
				UsunWyscig(TrasaDuty[playerid], DaneGracza[playerid][gTworzyWyscigNazwa], TrasaDutyNr[playerid]);
				TrasaDuty[playerid] = 0;
				TrasaDutyNr[playerid] = 0;
				DaneGracza[playerid][gTworzyWyscig] = 0;
				DaneGracza[playerid][gTworzyWyscigCP] = 0;
				CzasWyswietlaniaTextuNaDrzwiach[playerid] = 30;
				TextDrawHideForPlayer(playerid, TextNaDrzwi[playerid]);
				TextDrawSetString(TextNaDrzwi[playerid], "Wyscig zostal przerwany poniewaz nie znajdujesz sie na sluzbie grupy.");
				TextDrawShowForPlayer(playerid, TextNaDrzwi[playerid]);
				TrasaDuty[playerid] = 0;
				return 0;
			}
			DaneGracza[playerid][gTworzyWyscigCP]++;
			new Float: x, Float: y, Float: z, str[124];
			GetVehiclePos(GetPlayerVehicleID(playerid), x, y, z);
			DaneGracza[playerid][gTworzyWyscig] = DodajWyscig(x, y, z, DaneGracza[playerid][gTworzyWyscigCP], TrasaDuty[playerid], DaneGracza[playerid][gTworzyWyscigNazwa]);
			format(str, sizeof(str), "~r~CheckPoint: ~w~%d/20~n~~n~~b~~h~Nazwa: ~w~%s", DaneGracza[playerid][gTworzyWyscigCP], DaneGracza[playerid][gTworzyWyscigNazwa]);
			CzasWyswietlaniaTextuNaDrzwiach[playerid] = 60;
			TextDrawHideForPlayer(playerid, TextNaDrzwi[playerid]);
			TextDrawSetString(TextNaDrzwi[playerid], str);
			TextDrawShowForPlayer(playerid, TextNaDrzwi[playerid]);
			if(DaneGracza[playerid][gTworzyWyscigCP] == 20)
			{
				DaneGracza[playerid][gTworzyWyscig] = 0;
				DaneGracza[playerid][gTworzyWyscigCP] = 0;
				CzasWyswietlaniaTextuNaDrzwiach[playerid] = 30;
				TextDrawHideForPlayer(playerid, TextNaDrzwi[playerid]);
				TextDrawSetString(TextNaDrzwi[playerid], "Wyscig zostal stworzony.");
				TextDrawShowForPlayer(playerid, TextNaDrzwi[playerid]);
				TrasaDuty[playerid] = 0;
				TrasaDutyNr[playerid] = 0;
			}
		}
	}
	if(newkeys == KEY_SPRINT)
	{
		if(GangZonePL[playerid] == true)
		{
			ZapiszTeren(DaneGracza[playerid][gTeren]);
			DaneGracza[playerid][gTeren] = 0;
			GangZonePL[playerid] = false;
			Frezuj(playerid, 1);
		}
	}
    if(newkeys == (KEY_SPRINT + KEY_WALK))
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
			for(new i = 0; i < sizeof(BudynekInfo); i++)
			{
			    if(BudynekInfo[i][nTyp] == 0 || BudynekInfo[i][nTyp] == 1)
				{
					if(Dystans(1.5, playerid, BudynekInfo[i][nX], BudynekInfo[i][nY], BudynekInfo[i][nZ]) && GetPlayerVirtualWorld(playerid) == BudynekInfo[i][nVW])
					{
						if(DaneGracza[playerid][gBW] != 0)
						{
							return 0;
						}
						if(Dostal[playerid] != 0)
						{
							return 0;
						}
						if(Dostal2[playerid] != 0)
					 	{
					 	    return 0;
					 	}
						if(BudynekInfo[i][nZamek] == 1)
						{
          					if(GetPVarInt(playerid, "idobiktu") != 0 || GetPVarInt(playerid, "inedit") != 0)
							{
							    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie mo¿esz opuœciæ budynku podczas edycji obiektów.", "Zamknij", "");
								return 0;
							}
						    if(IsPlayerInAnyVehicle(playerid)) return 1;
							WejscieDoBudynku(playerid, i, 0, BudynekInfo[i][nVWW]);
						}
						else
						{
							GameTextForPlayer(playerid,"~r~~h~Drzwi sa zamkniete.",5000,3);
							return 1;
						}
					}
					if(Dystans(1.5, playerid, BudynekInfo[i][nXW], BudynekInfo[i][nYW], BudynekInfo[i][nZW]) && GetPlayerVirtualWorld(playerid) == BudynekInfo[i][nVWW])
					{
						if(DaneGracza[playerid][gBW] != 0)
						{
							return 0;
						}
						if(Dostal[playerid] != 0)
						{
							return 0;
						}
						if(Dostal2[playerid] != 0)
					 	{
					 	    return 0;
					 	}
						if(BudynekInfo[i][nZamek] == 1)
						{
						    if(GetPVarInt(playerid, "idobiktu") != 0 || GetPVarInt(playerid, "inedit") != 0)
							{
							    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie mo¿esz opuœciæ budynku podczas edycji obiektów.", "Zamknij", "");
								return 0;
							}
							if(IsPlayerInAnyVehicle(playerid)) return 1;
							WyjscieZBudynku(playerid, i, 0, BudynekInfo[i][nVW]);
						}
						else
						{
							GameTextForPlayer(playerid,"~r~~h~Drzwi sa zamkniete.",5000,3);
							return 1;
						}
					}
				}
			}
		}
	}
	if(HOLDING( KEY_HANDBRAKE ))
	{
	    if(!IsPlayerInAnyVehicle(playerid))
	    {
			new weaponid = GetPlayerWeapon(playerid);
			//pistol
			if(DaneGracza[playerid][g0] <= 40 && weaponid == 22 || DaneGracza[playerid][g0] <= 500 && weaponid == 23 || DaneGracza[playerid][g0] <= 200 && weaponid == 24)
			{
				SetPlayerDrunkLevel(playerid, 3000);
			}
			//shot
			if(DaneGracza[playerid][g3] <= 200 && weaponid == 25 || DaneGracza[playerid][g3] <= 200 && weaponid == 26 || DaneGracza[playerid][g3] <= 200 && weaponid == 27)
			{
				SetPlayerDrunkLevel(playerid, 3000);
			}
			//micro
			if(DaneGracza[playerid][g6] <= 250 && weaponid == 28 || DaneGracza[playerid][g6] <= 250 && weaponid == 29 || DaneGracza[playerid][g6] <= 250 && weaponid == 32)
			{
				SetPlayerDrunkLevel(playerid, 3000);
			}
			//automat
			if(DaneGracza[playerid][g8] <= 400 && weaponid == 30 || DaneGracza[playerid][g8] <= 400 && weaponid == 31)
			{
				SetPlayerDrunkLevel(playerid, 3000);
			}
		}
	}
	else if(RELEASED(KEY_HANDBRAKE))
	{
		if(DaneGracza[playerid][gPromile] != 0)
		{
			SetPlayerDrunkLevel(playerid, DaneGracza[playerid][gPromile]);
		}
		else
		{
		    SetPlayerDrunkLevel(playerid, 0);
		}
	}
	if(newkeys == KEY_HANDBRAKE)
	{
	    if(!IsPlayerInAnyVehicle(playerid))
		{
			if(animacja[playerid] != 0 && silka[playerid] == 0)
			{
			    if(Dostal[playerid] != 0)
				{
					return 0;
				}
				if(Dostal2[playerid] != 0)
			 	{
			 	    return 0;
			 	}
				ClearAnimations(playerid);
				animacja[playerid] = 0;
			}
		}
	}
	if(newkeys == KEY_FIRE)
	{
		if(GetPVarInt(playerid, "Namierzanie") == 1)//namierzanie wy³¹cz
		{
		    SetCameraBehindPlayer(playerid);
		    Namierzanie[playerid] = 0;
		    TextDrawHideForPlayer(playerid, TextNaDrzwi[playerid]);
		    SetPVarInt(playerid, "Namierzanie", 0);
		    SetPVarInt(playerid, "NamierzanieID", 0);
		}
		if(!IsPlayerInAnyVehicle(playerid))
		{
			if(DaneGracza[playerid][gBW] != 0)
			{
				return 0;
			}
	        if(GetPVarInt(playerid, "inedit") != 0 )
			{
			    if(edycjaobiektow[playerid] == 0)
			    {
			        //if(DaneGracza[playerid][gEdytor] == 1)
					//{
					    edycjaobiektow[playerid] = 1;
					    ApplyAnimation(playerid,"SWAT","gnstwall_injurd",4.1,0,0,0,60,0);
					//}
			    }else{
			    edycjaobiektow[playerid] = 0;
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4, 0, 0, 0, 0, 0, 0);
	      		ClearAnimations(playerid);
			    }
			}
		}
	}
	if(newkeys == KEY_JUMP)
	{
	    if(DaneGracza[playerid][gRUN] > (gettime()+CZAS_LETNI))
		{
	    	SetPVarInt(playerid, "JUMP", GetPVarInt(playerid, "JUMP")+1);
		}
	    if(GetPVarInt(playerid, "JUMP") >= 3)
	    {
            if(DaneGracza[playerid][gRUN] > (gettime()+CZAS_LETNI))
			{
			    Dostal[playerid] = 2;
				Frezuj(playerid, 0);
				Frezuj(playerid, 1);
				OnPlayerText(playerid, "-padnij");
				GameTextForPlayer(playerid, "Aktywna blokada sprintu, nie skacz!", 3000, 5);
				SetPVarInt(playerid, "JUMP", 0);
				return 1;
			}
	    }
	}
	if(newkeys == (KEY_SPRINT + KEY_WALK))
	{
		if(DaneGracza[playerid][gRUN] > (gettime()+CZAS_LETNI))
		{
		    Dostal[playerid] = 2;
			Frezuj(playerid, 0);
			Frezuj(playerid, 1);
			OnPlayerText(playerid, "-padnij");
			GameTextForPlayer(playerid, "Aktywna blokada sprintu", 3000, 5);
			return 1;
		}
	}
	if(newkeys == KEY_SPRINT)//Anty Sprint / Postrzal
	{
		if(DaneGracza[playerid][gRUN] > (gettime()+CZAS_LETNI))
		{
		    Dostal[playerid] = 2;
			Frezuj(playerid, 0);
			Frezuj(playerid, 1);
			OnPlayerText(playerid, "-padnij");
			GameTextForPlayer(playerid, "Aktywna blokada sprintu", 3000, 5);
			return 1;
		}
	}
	if(newkeys & KEY_FIRE && !IsPlayerInAnyVehicle(playerid))//Koszykówka
    {
    	if(!HavingBall[playerid])
     	{
                    new Float:x, Float:y, Float:z;
                    GetObjectPos(Ball, x, y, z);
                    if(IsPlayerInRangeOfPoint(playerid, 1.5, x, y, z))
                    {
                            HavingBall[playerid] = 1;
                            ApplyAnimation(playerid,"BSKTBALL","BBALL_pickup",4.0,0,0,0,0,0);
                            if(Baller != 999)
                            {
                                    HavingBall[Baller] = 0;
                                    ClearAnimations(Baller);
                                    ApplyAnimation(Baller, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
                                    ApplyAnimation(playerid,"BSKTBALL","BBALL_walk",4.1,1,1,1,1,1);
                            }
                            Baller = playerid;
                            BallStatus = 1;
                            new Float:x2, Float:y2;
                            GetXYInFrontOfPlayer(playerid, x2, y2, 0.8);
                            GetPlayerPos(playerid, x, y, z);
                            StopObject(Ball);
                            MoveObject(Ball, x2, y2, z, 2.5);
                            Anim[playerid] = 0;
                            BallBounce = 0;
                    }
            }
            else
            {
        		if(IsPlayerInRangeOfPoint(playerid, 2, 2795.5237,-2019.6152,13.5547))
          		{
                            MoveObject(Ball, 2794.9612,-2019.5415,15.5075, 7.5);
                            SetPlayerPos(playerid, 2795.5237,-2019.6152,13.5547);
                            ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk",4.0,1,0,0,0,0);
                            HavingBall[playerid] = 0;
                            SetTimerEx("ClearAnim", 1100, 0, "d", playerid);
                            SetTimerEx("BallDown2", 1100, 0, "d", playerid);
                            return 1;
                    }
        			else if(IsPlayerInRangeOfPoint(playerid, 4, 2795.5237,-2019.6152,13.5547) && IsPlayerFacingPoint(playerid, 20, 2795.5237,-2019.6152,13.5547))
                    {
                            new rand = random(1);
                            if(rand == 0)
                            {
                                    MoveObject(Ball, 2794.9612,-2019.5415,15.5075, 10.5+random(4));
                                    ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
                                    ShootingBall = 2;
                                    HavingBall[playerid] = 0;
                                    return 1;
                            }
                            ShootMiss(playerid);
                            return 1;
                    }
        			else if(IsPlayerInRangeOfPoint(playerid, 7, 2795.5237,-2019.6152,13.5547) && IsPlayerFacingPoint(playerid, 20, 2795.5237,-2019.6152,13.5547))
                    {
                            new rand = random(2);
                            if(rand == 0)
                            {
                                    MoveObject(Ball, 2794.9612,-2019.5415,15.5075, 11.0+random(4));
                                    ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
                                    ShootingBall = 2;
                                    HavingBall[playerid] = 0;
                                    return 1;
                            }
                            ShootMiss(playerid);
                            return 1;
                    }
                    else if(IsPlayerInRangeOfPoint(playerid, 10, 2795.5237,-2019.6152,13.5547) && IsPlayerFacingPoint(playerid, 20, 2795.5237,-2019.6152,13.5547))
                    {
                            new rand = random(3);
                            if(rand == 0)
                            {
                                    MoveObject(Ball, 2794.9612,-2019.5415,15.5075, 11.5+random(4));
                                    ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
                                    ShootingBall = 2;
                                    HavingBall[playerid] = 0;
                                    return 1;
                            }
                            ShootMiss(playerid);
                            return 1;
                    }
                    else if(IsPlayerInRangeOfPoint(playerid, 2, 2768.3669,-2019.6644,13.5547))
                    {
                            MoveObject(Ball, 2768.6289,-2019.7227,15.6287, 7.5);
                            SetPlayerPos(playerid, 2768.3669,-2019.6644,13.5547);
                            ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk",4.0,1,0,0,0,0);
                            HavingBall[playerid] = 0;
                            SetTimerEx("ClearAnim", 800, 0, "d", playerid);
                            SetTimerEx("BallDown3", 1100, 0, "d", playerid);
                            return 1;
                    }
        			else if(IsPlayerInRangeOfPoint(playerid, 4, 2768.3669,-2019.6644,13.5547) && IsPlayerFacingPoint(playerid, 20, 2768.3669,-2019.6644,13.5547))
                    {
                            new rand = random(1);
                            if(rand == 0)
                            {
                                    MoveObject(Ball, 2768.6289,-2019.7227,15.6287, 10.5+random(4));
                                    ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
                                    ShootingBall = 3;
                                    HavingBall[playerid] = 0;
                                    return 1;
                            }
                            ShootMiss2(playerid);
                            return 1;
                    }
        			else if(IsPlayerInRangeOfPoint(playerid, 7, 2768.3669,-2019.6644,13.5547) && IsPlayerFacingPoint(playerid, 20, 2768.3669,-2019.6644,13.5547))
                    {
                            new rand = random(2);
                            if(rand == 0)
                            {
                                    MoveObject(Ball, 2768.6289,-2019.7227,15.6287, 11.0+random(4));
                                    ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
                                    ShootingBall = 3;
                                    HavingBall[playerid] = 0;
                                    return 1;
                            }
                            ShootMiss2(playerid);
                            return 1;
                    }
                    else if(IsPlayerInRangeOfPoint(playerid, 10, 2768.3669,-2019.6644,13.5547) && IsPlayerFacingPoint(playerid, 20, 2768.3669,-2019.6644,13.5547))
                    {
                            new rand = random(3);
                            if(rand == 0)
                            {
                                    MoveObject(Ball, 2768.6289,-2019.7227,15.6287, 11.5+random(4));
                                    ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
                                    ShootingBall = 3;
                                    HavingBall[playerid] = 0;
                                    return 1;
                            }
            				ShootMiss2(playerid);
                            return 1;
                    }
                    for(new i; i < 100; i++)
                    {
                            if(IsPlayerConnected(i))
                            {
                                    if(IsPlayerFacingPlayer(playerid, i, 15))//Koszykowka2
                                    {
                                            new Float:x, Float:y, Float:z;
                                            GetPlayerPos(i, x, y, z);
                                            if(IsPlayerInRangeOfPoint(playerid, 20.0, x, y, z))
                                            {
                                                    Baller = i;
                                                    HavingBall[playerid] = 0;
                                                    ClearAnimations(playerid);
                                                    ApplyAnimation(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0);
                                                    SetTimerEx("ClearAnim", 700, 0, "d", playerid);
                                                    MoveObject(Ball, x, y, z, 13+random(4));
                                                    Anim[i] = 0;
                                                    ShootingBall = 6;
                                                    ApplyAnimation(i,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0);
                                                    return 1;
                                            }
                                    }
                            }
                    }
                    new Float:x, Float:y, Float:z;
                    GetPlayerPos(playerid, x, y, z);
                    HavingBall[playerid] = 0;
                    new Float:x2, Float:y2;
                    GetXYInFrontOfPlayer(playerid, x2, y2, 6.0);
                    SetTimerEx("BallDown", 600, 0, "df", playerid, z);
                    MoveObject(Ball, x2, y2, z+random(8)+3, 10.0+random(4));
                    ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
                    ShootingBall = 0;
            }
    }
	if(newkeys & KEY_FIRE || newkeys & KEY_SECONDARY_ATTACK)
	{
		if(silka[playerid] != 0)
		{
		    if(Dostal[playerid] != 0)
		 	{
		 	    return 0;
		 	}
		   	sek[playerid]=0;
			podnoszenie[playerid]=0;
			new name_door[512];
			CzasWyswietlaniaTextuNaDrzwiach[playerid] = 30;
			format(name_door, sizeof(name_door), "~w~Anulowales trening silowy.");
			TextDrawHideForPlayer(playerid, TextNaDrzwi[playerid]);
			TextDrawSetString(TextNaDrzwi[playerid], name_door);
			TextDrawShowForPlayer(playerid, TextNaDrzwi[playerid]);
			//karnet[playerid] = 0;
			ObiektInfo[silka[playerid]][gZajety] = 0;
			silka[playerid]=0;
			RemovePlayerAttachedObject(playerid, 8);
			RemovePlayerAttachedObject(playerid, 8);
			RemovePlayerAttachedObject(playerid, 8);
			wyciskanie[playerid]=0;
			ApplyAnimation(playerid,"benchpress","gym_bp_getoff",3.1,0,0,0,0,0);
			return 1;
		}
	    if(GetPlayerWeapon(playerid) == 18)//Walka o teren funkcja
	    {
	        new hour, minute;
			gettime(hour, minute);
	  		if(hour >= 18 || hour <= 23 && minute == 00)
			{
				new i = GraczNaTerenie(playerid);
		        if(Lokacja[i][gOwnerP] != 0 && Lokacja[i][gOwner] > 0)//sprawdzenie czy teren nalezy do organizacji
		        {
		            if(Lokacja[i][gOwner] != DaneGracza[playerid][gSluzba])
		            {
		                if(Lokacja[i][gWojna] == 0)
		                {
				            if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_ZMOTORYZOWANA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_MAFIE || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_GANGI)
							{
							    if(GrupaInfo[Lokacja[i][gOwner]][gTyp] == DZIALALNOSC_ZMOTORYZOWANA || GrupaInfo[Lokacja[i][gOwner]][gTyp] == DZIALALNOSC_MAFIE || GrupaInfo[Lokacja[i][gOwner]][gTyp] == DZIALALNOSC_GANGI)
							    {
								    if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTeren] == 0)
									{
									    GangZoneFlashForPlayer(playerid, i, 0xFFFFFF00);
									    GrupaInfo[Lokacja[i][gOwner]][gTeren] = i;
									    GrupaInfo[Lokacja[i][gOwner]][gOrg] = DaneGracza[playerid][gSluzba];
									    GrupaInfo[DaneGracza[playerid][gSluzba]][gTeren] = i;
									    GrupaInfo[DaneGracza[playerid][gSluzba]][gOrg] = Lokacja[i][gOwner];
									    GrupaInfo[DaneGracza[playerid][gSluzba]][gWojna] = 0;
										GrupaInfo[Lokacja[i][gOwner]][gWojna] = 0;
										Lokacja[i][gWojna] = DaneGracza[playerid][gSluzba];
										ZapiszTeren(i);
									    ZapiszWojne(DaneGracza[playerid][gSluzba]);
									    ZapiszWojne(Lokacja[i][gOwner]);
									    ForeachEx(org, MAX_PLAYERS)
						                {
						                    GangZoneFlashForPlayer(org, i, 0xFFFFFF00);
						                    Lokacja[i][gWojna] = DaneGracza[playerid][gSluzba];
						                    if(DaneGracza[org][gDzialalnosc1] == Lokacja[i][gOwner] || DaneGracza[org][gDzialalnosc2] == Lokacja[i][gOwner] || DaneGracza[org][gDzialalnosc3] == Lokacja[i][gOwner]  || DaneGracza[org][gDzialalnosc4] == Lokacja[i][gOwner] || DaneGracza[org][gDzialalnosc5] == Lokacja[i][gOwner]  || DaneGracza[org][gDzialalnosc6] == Lokacja[i][gOwner])
											{
						                        TextDrawHideForPlayer(org, TextNaDrzwi[org]);
												TextDrawSetString(TextNaDrzwi[org], "~r~Walka o teren~w~~n~~n~Teren twojej organizacji wlasnie ktos probuje przejac!~n~~n~Pare budynkow wlasnie zostalo spalonych, skontroluj sprawe!");
												TextDrawShowForPlayer(org, TextNaDrzwi[org]);
												CzasWyswietlaniaTextuNaDrzwiach[org] = 30;
						                    }
						                    if(DaneGracza[org][gDzialalnosc1] == DaneGracza[playerid][gSluzba] || DaneGracza[org][gDzialalnosc2] == DaneGracza[playerid][gSluzba] || DaneGracza[org][gDzialalnosc3] == DaneGracza[playerid][gSluzba] || DaneGracza[org][gDzialalnosc4] == DaneGracza[playerid][gSluzba] || DaneGracza[org][gDzialalnosc5] == DaneGracza[playerid][gSluzba]  || DaneGracza[org][gDzialalnosc6] == DaneGracza[playerid][gSluzba])
											{
											    TextDrawHideForPlayer(org, TextNaDrzwi[org]);
												TextDrawSetString(TextNaDrzwi[org], "~r~Walka o teren~w~~n~~n~Wlasnie zaatakowaliscie teren innej organizacji, kontroluj sprawe!~n~~n~~y~- Stoj na strefie i staraj sie zdobyc punkty dla organziacji~n~- Staraj sie likwidowac osoby z organizacji przeciwnej by zdobyc puntky!");
												TextDrawShowForPlayer(org, TextNaDrzwi[org]);
												CzasWyswietlaniaTextuNaDrzwiach[org] = 30;
											}
						                }
									}
									else
									{
										dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Walka o teren", "Nie mo¿esz atakowaæ wiêcej ni¿ jednego terenu w tym samym czasie!", "Zamknij", "");
										return 1;
									}
								}
								else
								{
									dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Walka o teren", "Nie mo¿esz zaatakowaæ tego terenu, nie nale¿y ona do organizacji przestêpczej.", "Zamknij", "");
									return 1;
								}
							}
							else
							{
								dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Walka o teren", "Twoja grupa nie jest organizacj¹ przestêpcz¹ by walczyæ o teren!", "Zamknij", "");
								return 1;
							}
						}
						else
						{
						    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Walka o teren", "Nie mo¿esz zaatakowaæ tej strefy bo ktoœ ju¿ j¹ zaatakowa³!", "Zamknij", "");
							return 1;
						}
					}
					else
					{
						dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Walka o teren", "Nie mo¿esz zaatakowaæ w³asnego terenu!", "Zamknij", "");
						return 1;
					}
				}
				else
				{
				    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Walka o teren", "Ten teren nie nale¿y do organizacji przestêpczej!\n - Pamiêtaj by równie¿ staæ na tym terenie!", "Zamknij", "");
					return 1;
				}
			}
			else
			{
			    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Walka o teren", "Bo rozpocz¹æ walkê o teren musisz rzuciæ Molotow'a w godzinach 18-23", "Zamknij", "");
				return 1;
			}
		}
	    /*if(GetPlayerWeapon(playerid) >= 24 && GetPlayerWeapon(playerid) <= 38 || GetPlayerWeapon(playerid) == 22)//Informacja dla LSPD o Strzelaninie
		{
			if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] != DZIALALNOSC_POLICYJNA)
			{
				if(GetPlayerVirtualWorld(playerid) == 0)
				{
					new tekst[256];
					ForeachEx(i, MAX_PLAYERS)
					{
						if(IsPlayerConnected(i))
						{
							if(zalogowany[i] == true)
							{
								if(DaneGracza[i][gSluzba] == 0)
								{
									return 0;
								}
								if(GrupaInfo[DaneGracza[i][gSluzba]][gTyp] == DZIALALNOSC_POLICYJNA)
								{
									new Float: x, Float: y, Float: z;
									GetPlayerPos(playerid, x, y, z);
									SetPlayerMapIcon(i, 99, x, y, z, 60, 0, MAPICON_GLOBAL );
									format(tekst, sizeof(tekst), "{FF3366}[CENTRALA] {DEDEDE}Anonimowy przechodzieñ strzelaninê która jest w toku w tych rejonach, pozycjê zaznaczam na radarze!");
									SendClientMessage(i, SZARY, tekst);
									PlayerPlaySound(i, 6003, 0.0, 0.0, 0.0);
								}
							}
						}
					}
				}
			}
		}*/
		if(GetPlayerWeapon(playerid) == 0)
		{
			UzylLPM[playerid] = 1;
			KillTimer(UzylLPMTimer[playerid]);
			UzylLPMTimer[playerid] = SetTimerEx("UsunLPM",1000,0,"d",playerid);
		}
	}
	if(Wedkuje[playerid] != 0)
	{
		if((newkeys & KEY_SECONDARY_ATTACK)&&!(oldkeys & KEY_SECONDARY_ATTACK) && (graczlowiFish[playerid] == 0))
		{
			if(DaneGracza[playerid][gBW] != 0)
			{
				return 0;
			}
			ForeachEx(o, MAX_RYBAK)
			{
				if(IsPlayerInRangeOfPoint(playerid, 2.0, Rybak[ o ][ rX ], Rybak[ o ][ rY ], Rybak[ o ][ rZ ]))
				{
					if(PrzedmiotInfo[Wedkuje[playerid]][pWar4] == 0)
					{
						dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Brak przynêty, udaj siê do sklepu aby j¹ kupiæ.", "Zamknij", "");
						return 0;
					}
					SetPlayerFacingAngle(playerid, 182.8412);
					SetCameraBehindPlayer(playerid);
					PrzedmiotInfo[Wedkuje[playerid]][pWar4] --;
					ZapiszPrzedmiot(Wedkuje[playerid]);
					Frezuj(playerid, 0);
					graczlowiFish[playerid] = true;
					SetProgressBarValue(Bar:TabelaRyb[playerid], 5);
					ShowProgressBarForPlayer(playerid, TabelaRyb[playerid]);
					CzasWyswietlaniaTextuNaDrzwiach[playerid] = 20;
					TextDrawHideForPlayer(playerid, TextNaDrzwi[playerid]);
					TextDrawSetString(TextNaDrzwi[playerid], "Rozpoczales proces wedkowania naciskaj klawisz ''~y~~k~~PED_SPRINT~~w~'', az niebieski pasek osiagnie 100 procent. Uzyj ponownie ''~y~~k~~VEHICLE_ENTER_EXIT~~w~'' aby zakonczyc wedkowanie.");
					TextDrawShowForPlayer(playerid, TextNaDrzwi[playerid]);
					break;
				}
			}
		}
		else if((newkeys & KEY_SECONDARY_ATTACK) && !(oldkeys & KEY_SECONDARY_ATTACK) && (graczlowiFish[playerid] == 1))
		{
			if(DaneGracza[playerid][gBW] != 0)
			{
				return 0;
			}
			if(Dostal[playerid] != 0)
		 	{
		 	    return 0;
		 	}
		 	if(Dostal2[playerid] != 0)
		 	{
		 	    return 0;
		 	}
			graczlowiFish[playerid] = false;
			SetPlayerFacingAngle(playerid, 182.8412);
			ClearAnimations(playerid);
			ApplyAnimation(playerid, "CARRY", "crry_prtial", 4, 0, 0, 0, 0, 0, 0);
			Frezuj(playerid, 1);
			HideProgressBarForPlayer(playerid, TabelaRyb[playerid]);
		}
		else if((newkeys & KEY_SPRINT ) && !( oldkeys & KEY_SPRINT ) && ( graczlowiFish[playerid] == 1))
		{
			if(DaneGracza[playerid][gBW] != 0)
			{
				return 0;
			}
			if(Dostal[playerid] != 0)
		 	{
		 	    return 0;
		 	}
		 	if(Dostal2[playerid] != 0)
		 	{
		 	    return 0;
		 	}
			ApplyAnimation(playerid,"SWORD","sword_block",50.0,0,1,0,1,1);
			SetPlayerFacingAngle(playerid, 182.8412);
			GetProgressBarValue(Bar:TabelaRyb[playerid]);
			SetProgressBarValue(Bar:TabelaRyb[playerid], GetProgressBarValue(Bar:TabelaRyb[playerid])+1.0);
			ShowProgressBarForPlayer(playerid, TabelaRyb[playerid]);

			if(GetProgressBarValue(Bar:TabelaRyb[playerid]) >= 100)
			{
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
				ClearAnimations(playerid);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4, 0, 0, 0, 0, 0, 0);
				graczlowiFish[playerid] = false;
				Frezuj(playerid, 1);
				HideProgressBarForPlayer(playerid, TabelaRyb[playerid]);
				new losek = random(10);
				if(losek >= 0 && losek <= 7)
				{
					new loseke;
					if(ComparisonString(PrzedmiotInfo[Wedkuje[playerid]][pWar3], "C"))
					{
						loseke = random(10)+10;
					}
					if(ComparisonString(PrzedmiotInfo[Wedkuje[playerid]][pWar3], "B"))
					{
						loseke = random(7)+5;
					}
					if(ComparisonString(PrzedmiotInfo[Wedkuje[playerid]][pWar3], "A"))
					{
						loseke = random(5)+1;
					}
					if(DaneGracza[playerid][gPracaTyp] == PRACA_WEDKARZ)
					{
						new strryba[256];
						format(strryba, sizeof(strryba), "~g~Gratulacje~n~~w~Udalo ci sie zlowic rybe.~n~~r~~h~Ryba: %s~n~~r~~h~Waga: %dkg", TypRyby[losek], loseke, loseke);
						CzasWyswietlaniaTextuNaDrzwiach[playerid] = 20;
						TextDrawHideForPlayer(playerid, TextNaDrzwi[playerid]);
						TextDrawSetString(TextNaDrzwi[playerid], strryba);
						TextDrawShowForPlayer(playerid, TextNaDrzwi[playerid]);
						ClearAnimations(playerid);
						new ryba[64];
						format(ryba, sizeof(ryba), "Ryba %s %dkg", TypRyby[losek], loseke);
						DodajPrzedmiot(DaneGracza[playerid][gUID], TYP_WLASCICIEL, P_RYBA, loseke, 0, ryba, DaneGracza[playerid][gUID], 0, 0, 0, 0, 19630, 0, "");
					}
					else
					{
						new strryba[256];
						format(strryba, sizeof(strryba), "~g~Gratulacje~n~~w~Udalo ci sie zlowic rybe.~n~~r~~h~Ryba: %s~n~~r~~h~lecz wypusciles ja spowrotem zmien prace dorywcza!", TypRyby[losek], loseke);
						CzasWyswietlaniaTextuNaDrzwiach[playerid] = 20;
						TextDrawHideForPlayer(playerid, TextNaDrzwi[playerid]);
						TextDrawSetString(TextNaDrzwi[playerid], strryba);
						TextDrawShowForPlayer(playerid, TextNaDrzwi[playerid]);
						ClearAnimations(playerid);
					}
				}
				if(losek == 8)
				{
					dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Zerwa³eœ haczyk, udaj siê do sklepu po nowy haczyk oraz przynête.", "Zamknij", "");
					PrzedmiotInfo[Wedkuje[playerid]][pWar1] = 0;
					PrzedmiotInfo[Wedkuje[playerid]][pWar4] = 0;
					ZapiszPrzedmiot(Wedkuje[playerid]);
					UzywanieItemu(playerid, Wedkuje[playerid]);
					ClearAnimations(playerid);
				}
				if(losek == 9)
				{
					dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Zerwa³eœ ¿y³kê, straci³eœ haczyk oraz przynête - udaj siê do sklepu po nowy zestaw.", "Zamknij", "");
					PrzedmiotInfo[Wedkuje[playerid]][pWar2] = 0;
					PrzedmiotInfo[Wedkuje[playerid]][pWar4] = 0;
					PrzedmiotInfo[Wedkuje[playerid]][pWar1] = 0;
					ZapiszPrzedmiot(Wedkuje[playerid]);
					UzywanieItemu(playerid, Wedkuje[playerid]);
					ClearAnimations(playerid);
				}
			}
		}
	}
	return 1;
}
forward Frez(playerid);
public Frez(playerid)
{
    Frezuj(playerid, true);
	return 1;
}
forward QS(playerid);
public QS(playerid)
{
    DaneGracza[playerid][gQS] = 0;
	return 1;
}
public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
    NadajKare(playerid,-1, 2, ""PREFIXAC".AntyCheat: Wymuszona zmiana koloru", -1);
    new uid = SprawdzCarUID(vehicleid);
    ChangeVehicleColor(PojazdInfo[uid][pUID], PojazdInfo[uid][pKolor], PojazdInfo[uid][pKolor2]);
    return 1;
}
public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(zalogowany[playerid] == false)
    {
        return 0;
    }
    if(BlokadaOOC(playerid))
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie mo¿esz tego zrobiæ, poniewa¿ posiadasz aktywn¹ blokade czatów OOC \
		\nJeœli uwa¿asz, ¿e kara zosta³a nadana nies³usznie mo¿esz od niej apelowaæ na forum (www."PROJEKT").", "Zamknij", "");
	    return 0;
	}
	if(zalogowany[clickedplayerid] == false)
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz do którego piszesz nie jest zalogowany.", "Zamknij", "");
	    return 0;
	}
	if(playerid == clickedplayerid) return 1;
	if(DaneGracza[playerid][gBW] != 0)
	{
	    if(!PlayerObokPlayera(playerid, clickedplayerid, 5))
		{
		    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Podczas BW mo¿esz pisaæ wiadomoœci na krótk¹ odleg³oœæ.", "Zamknij", "");
		    return 0;
		}
	}
	if(GetPVarInt(playerid, "CZATPW") == 1)
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Masz wy³¹czone prywatne wiadomoœci (/tog w).", "Zamknij", "");
		return 0;
	}
	if(GetPVarInt(clickedplayerid, "CZATPW") == 1)
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz do którego piszesz ma wy³¹czone prywatne wiadomoœci.", "Zamknij", "");
	    return 0;
	}
	strdel(tekst_global, 0, 2048);
	format(tekst_global, sizeof(tekst_global), "Wiadomoœæ do gracza %s:", ZmianaNicku(clickedplayerid), clickedplayerid);
	dShowPlayerDialog(playerid,DIALOG_PW,DIALOG_STYLE_INPUT,GUIOPIS "Informacja",tekst_global,"Wyœlij","Zamknij");
	SetPVarInt(playerid, "PM", clickedplayerid);
	return 0;
}
stock Rowery(vehicleid)
{
    if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510)
    {
		return true;
 	}
	else
	{
		return false;
 	}
}
stock NieSzyby(vehicleid)
{
	new v = GetVehicleModel(vehicleid);
	if(v == 424 || v == 425 || v == 430 || v == 432 || v == 439 || v == 441 || v == 446 || v == 448 || v == 449 || v == 452 ||
	v == 457 || v == 464 || v == 465 || v == 468 || v == 471 || v == 472 || v == 473 || v == 481 || v == 485 || v == 486 ||
 	v == 493 || v == 500 || v == 501 || v == 509 || v == 521 || v == 522 || v == 523 || v == 530 || v ==  531 || v == 537 ||
  	v ==  538 || v == 539 || v == 555 || v == 564 || v == 567 || v == 568 || v == 569 || v == 570 || v == 571 || v == 572 ||
  	v == 581 || v == 586 || v == 594 || v == 595 || v == 601)
  	{
		return true;
 	}
	else
	{
		return false;
 	}
}
stock SzybyBrak(vehicleid)
{
	new v = GetVehicleModel(vehicleid);
	if(v == 424 || v == 430 || v == 432 || v == 435 || v == 441 || v == 446 || v == 448 || v == 449
		|| v == 450 || v == 452 || v == 453 || v == 454 || v == 457 || v == 461 || v == 462 || v == 463
		|| v == 464 || v == 465 || v == 471 || v == 472 || v == 473 || v == 468 || v == 484 || v == 485
		|| v == 486 || v == 481 || v == 493 || v == 501 || v == 509 || v == 510 || v == 512 || v == 519
		|| v == 521 || v == 528 || v == 530 || v == 531 || v == 532 || v == 539 || v == 564 || v == 568
		|| v == 569 || v == 570 || v == 571 || v == 572 || v == 577 || v == 581 || v == 584 || v == 586
		|| v == 590 || v == 591 || v == 592 || v == 594 || v == 601 || v == 606 || v == 607 || v == 608
		|| v == 610 || v == 611)
	{
		return true;
 	}
	else
	{
		return false;
 	}
}
stock Jednoslady(vehicleid)
{
    if(GetVehicleModel(vehicleid) == 461 || GetVehicleModel(vehicleid) == 462 || GetVehicleModel(vehicleid) == 463 ||
	GetVehicleModel(vehicleid) == 471 || GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 ||
	GetVehicleModel(vehicleid) == 510 || GetVehicleModel(vehicleid) == 521 || GetVehicleModel(vehicleid) == 522 ||
	GetVehicleModel(vehicleid) == 523 || GetVehicleModel(vehicleid) == 581 || GetVehicleModel(vehicleid) == 586)
    {
		return true;
 	}
	else
	{
		return false;
 	}
}
stock WlascicielGrupyOwner(uid, playerid)
{
	new owner_pojazdu = PojazdInfo[uid][pOwnerDzialalnosc];
    if(PojazdInfo[uid][pOwnerPostac] == 0 && DaneGracza[playerid][gGUID] == GrupaInfo[owner_pojazdu][gOwner])
    {
		return true;
 	}
	else
	{
		return false;
 	}
}
stock Dokument(playerid, dokument)
{
	if(DaneGracza[playerid][gDokumenty][dokument] == 1)
    {
		return true;
 	}
	else
	{
		return false;
 	}
}
stock Osiagniecia(playerid, dokument)
{
	if(DaneGracza[playerid][gOsiagniecia][dokument] == 1)
    {
		return true;
 	}
	else
	{
		return false;
 	}
}
stock WlascicielGrupyOwnerUID(uid, playerid)
{
    if(PojazdInfo[uid][pOwnerPostac] == 0 && DaneGracza[playerid][gUID] == GrupaInfo[PojazdInfo[uid][pOwnerDzialalnosc]][gOwnerUID])
    {
		return true;
 	}
	else
	{
		return false;
 	}
}
stock ZarzadzaniePojazdamiDlaDz(uid, playerid, typ_dzialnosci)
{
	if(PojazdInfo[uid][pOwnerPostac] == 0 && DaneGracza[playerid][gGUID] == GrupaInfo[PojazdInfo[uid][pOwnerDzialalnosc]][gOwner] && GrupaInfo[PojazdInfo[uid][pOwnerDzialalnosc]][gTyp] == typ_dzialnosci)
    {
		return true;
 	}
	else
	{
		return false;
 	}
}
stock ZarzadzaniePojazdami(uid, playerid)
{
    if(PojazdInfo[uid][pOwnerPostac] == 0 && PojazdInfo[uid][pOwnerDzialalnosc] == DaneGracza[playerid][gDzialalnosc1] && GetPVarInt(playerid, "g1u21") == 1)
    {
		return true;
 	}
	else if(PojazdInfo[uid][pOwnerPostac] == 0 && PojazdInfo[uid][pOwnerDzialalnosc] == DaneGracza[playerid][gDzialalnosc2] && GetPVarInt(playerid, "g2u21") == 1)
    {
		return true;
 	}
	else if(PojazdInfo[uid][pOwnerPostac] == 0 && PojazdInfo[uid][pOwnerDzialalnosc] == DaneGracza[playerid][gDzialalnosc3] && GetPVarInt(playerid, "g3u21") == 1)
    {
		return true;
 	}
	else if(PojazdInfo[uid][pOwnerPostac] == 0 && PojazdInfo[uid][pOwnerDzialalnosc] == DaneGracza[playerid][gDzialalnosc4] && GetPVarInt(playerid, "g4u21") == 1)
    {
		return true;
 	}
	else if(PojazdInfo[uid][pOwnerPostac] == 0 && PojazdInfo[uid][pOwnerDzialalnosc] == DaneGracza[playerid][gDzialalnosc5] && GetPVarInt(playerid, "g5u21") == 1)
    {
		return true;
 	}
	else if(PojazdInfo[uid][pOwnerPostac] == 0 && PojazdInfo[uid][pOwnerDzialalnosc] == DaneGracza[playerid][gDzialalnosc6] && GetPVarInt(playerid, "g6u21") == 1)
    {
		return true;
 	}
	else if(PojazdInfo[uid][pOwnerPostac] == 0 && DaneGracza[playerid][gUID] == GrupaInfo[PojazdInfo[uid][pOwnerDzialalnosc]][gOwnerUID])
    {
		return true;
 	}
	else
	{
		return false;
 	}
}
stock UzywanieMikrofonu(playerid, uid)
{
	if(BudynekInfo[uid][nWlascicielD] == 0 && BudynekInfo[uid][nWlascicielP] == DaneGracza[playerid][gUID])
	{
		return true;
 	}
    else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc1] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g1u9") == 1)
    {
		return true;
 	}
    else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc2] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g2u9") == 1)
    {
		return true;
 	}
 	else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc3] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g3u9") == 1)
    {
		return true;
 	}
 	else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc4] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g4u9") == 1)
    {
		return true;
 	}
 	else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc5] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g5u9") == 1)
    {
		return true;
 	}
 	else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc6] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g6u9") == 1)
    {
		return true;
 	}
	else if(GetPVarInt(playerid, "Sad") == 1 && GetPlayerVirtualWorld(playerid) == 13 || GetPVarInt(playerid, "Sad") == 1 && GetPlayerVirtualWorld(playerid) == 61)
	{
		return true;
	}
	else if(DaneGracza[playerid][gAdmGroup] == 4 && DutyAdmina[playerid] == 1)
	{
		return true;
	}
	else if(DaneGracza[playerid][gAdmGroup] == 7 && DutyAdmina[playerid] == 1)
	{
		return true;
	}
	else if(DaneGracza[playerid][gAdmGroup] == 14 && DutyAdmina[playerid] == 1)
	{
		return true;
	}
	else
	{
		return false;
 	}
}
stock ZarzadzanieCzatemD(playerid)
{
    if(GetPVarInt(playerid, "g1u8") == 1)
    {
		return true;
 	}
    else if(GetPVarInt(playerid, "g2u8") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g3u8") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g4u8") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g5u8") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g6u8") == 1)
    {
		return true;
 	}
	else
	{
		return false;
 	}
}
stock ZarzadzanieKartoteka(playerid)
{
    if(GetPVarInt(playerid, "g1u16") == 1)
    {
		return true;
 	}
    else if(GetPVarInt(playerid, "g2u16") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g3u16") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g4u16") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g5u16") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g6u16") == 1)
    {
		return true;
 	}
	else
	{
		return false;
 	}
}
stock ZarzadzanieSWyscig(playerid)
{
    if(GetPVarInt(playerid, "g1u18") == 1)
    {
		return true;
 	}
    else if(GetPVarInt(playerid, "g2u18") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g3u18") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g4u18") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g5u18") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g6u18") == 1)
    {
		return true;
 	}
	else
	{
		return false;
 	}
}
stock ZarzadzanieDolaczanieWys(playerid)
{
    if(GetPVarInt(playerid, "g1u19") == 1)
    {
		return true;
 	}
    else if(GetPVarInt(playerid, "g2u19") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g3u19") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g4u19") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g5u19") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g6u19") == 1)
    {
		return true;
 	}
	else
	{
		return false;
 	}
}
stock ZarzadzanieKolczatka(playerid)
{
    if(GetPVarInt(playerid, "g1u17") == 1)
    {
		return true;
 	}
    else if(GetPVarInt(playerid, "g2u17") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g3u17") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g4u17") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g5u17") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g6u17") == 1)
    {
		return true;
 	}
	else
	{
		return false;
 	}
}
stock ZarzadzanieDokumentami(playerid)
{
    if(GetPVarInt(playerid, "g1u27") == 1)
    {
		return true;
 	}
    else if(GetPVarInt(playerid, "g2u27") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g3u27") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g4u27") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g5u27") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g6u27") == 1)
    {
		return true;
 	}
	else
	{
		return false;
 	}
}
stock ZarzadzanieReklama(playerid)
{
    if(GetPVarInt(playerid, "g1u25") == 1)
    {
		return true;
 	}
    else if(GetPVarInt(playerid, "g2u25") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g3u25") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g4u25") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g5u25") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g6u25") == 1)
    {
		return true;
 	}
	else
	{
		return false;
 	}
}
stock ZarzadzanieLive(playerid)
{
    if(GetPVarInt(playerid, "g1u26") == 1)
    {
		return true;
 	}
    else if(GetPVarInt(playerid, "g2u26") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g3u26") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g4u26") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g5u26") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g6u26") == 1)
    {
		return true;
 	}
	else
	{
		return false;
 	}
}
stock ZarzadzanieNews(playerid)
{
    if(GetPVarInt(playerid, "g1u24") == 1)
    {
		return true;
 	}
    else if(GetPVarInt(playerid, "g2u24") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g3u24") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g4u24") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g5u24") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g6u24") == 1)
    {
		return true;
 	}
	else
	{
		return false;
 	}
}

stock ZarzadzanieBlokadaKola(playerid)
{
    if(GetPVarInt(playerid, "g1u14") == 1)
    {
		return true;
 	}
    else if(GetPVarInt(playerid, "g2u14") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g3u14") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g4u14") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g5u14") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g6u14") == 1)
    {
		return true;
 	}
	else
	{
		return false;
 	}
}
stock ZarzadzaniePrzetrzymaniem(playerid)
{
    if(GetPVarInt(playerid, "g1u13") == 1)
    {
		return true;
 	}
    else if(GetPVarInt(playerid, "g2u13") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g3u13") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g4u13") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g5u13") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g6u13") == 1)
    {
		return true;
 	}
	else
	{
		return false;
 	}
}
stock ZarzadzanieBlokadami(playerid)
{
    if(GetPVarInt(playerid, "g1u14") == 1)
    {
		return true;
 	}
    else if(GetPVarInt(playerid, "g2u14") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g3u14") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g4u14") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g5u14") == 1)
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g6u14") == 1)
    {
		return true;
 	}
	else
	{
		return false;
 	}
}
stock UprDutyOn(playerid, uid, uprawnienie)
{
	if(DaneGracza[playerid][gDzialalnosc1] == uid && DaneGracza[playerid][gUprawnienia1][uprawnienie] == 1)
    {
		return true;
 	}
    else if(DaneGracza[playerid][gDzialalnosc2] == uid && DaneGracza[playerid][gUprawnienia2][uprawnienie] == 1)
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gDzialalnosc3] == uid && DaneGracza[playerid][gUprawnienia3][uprawnienie] == 1)
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gDzialalnosc4] == uid && DaneGracza[playerid][gUprawnienia4][uprawnienie] == 1)
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gDzialalnosc5] == uid && DaneGracza[playerid][gUprawnienia5][uprawnienie] == 1)
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gDzialalnosc6] == uid && DaneGracza[playerid][gUprawnienia6][uprawnienie] == 1)
    {
		return true;
 	}
	else
	{
		return false;
 	}
}
stock NaprawianieVwZero(playerid, uid)
{
	if(DaneGracza[playerid][gDzialalnosc1] == uid && GetPVarInt(playerid, "g1u12") == 1)
    {
		return true;
 	}
    else if(DaneGracza[playerid][gDzialalnosc2] == uid && GetPVarInt(playerid, "g2u12") == 1)
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gDzialalnosc3] == uid && GetPVarInt(playerid, "g3u12") == 1)
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gDzialalnosc4] == uid && GetPVarInt(playerid, "g4u12") == 1)
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gDzialalnosc5] == uid && GetPVarInt(playerid, "g5u12") == 1)
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gDzialalnosc6] == uid && GetPVarInt(playerid, "g6u12") == 1)
    {
		return true;
 	}
	else
	{
		return false;
 	}
}
stock MontazItemow(playerid, uid)
{
	if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc1] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g1u12") == 1)
    {
		return true;
 	}
    else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc2] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g2u12") == 1)
    {
		return true;
 	}
 	else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc3] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g3u12") == 1)
    {
		return true;
 	}
 	else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc4] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g4u12") == 1)
    {
		return true;
 	}
 	else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc5] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g5u12") == 1)
    {
		return true;
 	}
 	else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc6] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g6u12") == 1)
    {
		return true;
 	}
	else
	{
		return false;
 	}
}
stock Podaj(playerid, uid)
{
	if(BudynekInfo[uid][nWlascicielD] == 0 && BudynekInfo[uid][nWlascicielP] == DaneGracza[playerid][gUID])
	{
		return true;
 	}
    else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc1] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g1u10") == 1 && DaneGracza[playerid][gDzialalnosc1] == DaneGracza[playerid][gSluzba])
    {
		return true;
 	}
    else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc2] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g2u10") == 1 && DaneGracza[playerid][gDzialalnosc2] == DaneGracza[playerid][gSluzba])
    {
		return true;
 	}
 	else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc3] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g3u10") == 1 && DaneGracza[playerid][gDzialalnosc3] == DaneGracza[playerid][gSluzba])
    {
		return true;
 	}
 	else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc4] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g4u10") == 1 && DaneGracza[playerid][gDzialalnosc4] == DaneGracza[playerid][gSluzba])
    {
		return true;
 	}
 	else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc5] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g5u10") == 1 && DaneGracza[playerid][gDzialalnosc5] == DaneGracza[playerid][gSluzba])
    {
		return true;
 	}
 	else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc6] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g6u10") == 1 && DaneGracza[playerid][gDzialalnosc6] == DaneGracza[playerid][gSluzba])
    {
		return true;
 	}
	else
	{
		return false;
 	}
}
stock OtwieranieBramV2(playerid, find)
{
	if(ObiektInfo[find][objTypOwneraBramy] == BRAMA_DZIALALNOSC)
	{
		if(DaneGracza[playerid][gDzialalnosc1] == ObiektInfo[find][objOwnerBrama] && GetPVarInt(playerid, "g1u6") == 1)
		{
			return true;
		}
		else if(DaneGracza[playerid][gDzialalnosc2] == ObiektInfo[find][objOwnerBrama] && GetPVarInt(playerid, "g2u6") == 1)
		{
			return true;
		}
		else if(DaneGracza[playerid][gDzialalnosc3] == ObiektInfo[find][objOwnerBrama] && GetPVarInt(playerid, "g3u6") == 1)
		{
			return true;
		}
		else if(DaneGracza[playerid][gDzialalnosc4] == ObiektInfo[find][objOwnerBrama] && GetPVarInt(playerid, "g4u6") == 1)
		{
			return true;
		}
		else if(DaneGracza[playerid][gDzialalnosc5] == ObiektInfo[find][objOwnerBrama] && GetPVarInt(playerid, "g5u6") == 1)
		{
			return true;
		}
		else if(DaneGracza[playerid][gDzialalnosc6] == ObiektInfo[find][objOwnerBrama] && GetPVarInt(playerid, "g6u6") == 1)
		{
			return true;
		}
		else if(DaneGracza[playerid][gAdmGroup] == 4 && DutyAdmina[playerid] == 1)
		{
			return true;
		}
		else if(DaneGracza[playerid][gAdmGroup] == 7 && DutyAdmina[playerid] == 1)
		{
			return true;
		}
		else if(DaneGracza[playerid][gAdmGroup] == 14 && DutyAdmina[playerid] == 1)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	else if(ObiektInfo[find][objTypOwneraBramy] == BRAMA_OWNER)
	{
	    new uid = ObiektInfo[find][objvWorld];
		if(uid == -1)
		{
			uid = 0;
		}
	    if(BudynekInfo[uid][nWlascicielD] == 0 && BudynekInfo[uid][nWlascicielP] == DaneGracza[playerid][gUID])
		{
			return true;
	 	}
		else if(DaneGracza[playerid][gUID] == ObiektInfo[find][objOwnerBrama])
		{
			return true;
		}
		else if(DaneGracza[playerid][gAdmGroup] == 4 && DutyAdmina[playerid] == 1)
		{
			return true;
		}
		else if(DaneGracza[playerid][gAdmGroup] == 7 && DutyAdmina[playerid] == 1)
		{
			return true;
		}
		else if(DaneGracza[playerid][gAdmGroup] == 14 && DutyAdmina[playerid] == 1)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	else if(ObiektInfo[find][objTypOwneraBramy] == BRAMA_ALL)
	{
		return true;
	}
	else
	{
		return false;
	}
}
stock MaUprawnieie(playerid, uprawnienie)
{
	if(DaneGracza[playerid][gUprawnienia1][uprawnienie] == 1)
    {
		return true;
 	}
    else if(DaneGracza[playerid][gUprawnienia2][uprawnienie] == 1)
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gUprawnienia3][uprawnienie] == 1)
    {
		return true;
 	}
 	else if(GraczPremium(playerid) && DaneGracza[playerid][gUprawnienia4][uprawnienie] == 1)
    {
		return true;
 	}
 	else if(GraczPremium(playerid) && DaneGracza[playerid][gUprawnienia5][uprawnienie] == 1)
    {
		return true;
 	}
 	else if(GraczPremium(playerid) && DaneGracza[playerid][gUprawnienia6][uprawnienie] == 1)
    {
		return true;
 	}
	else
	{
		return false;
	}
}
stock NalezyDoDziZUp(playerid, dzialnosc, uprawnienie)
{
	if(GrupaInfo[DaneGracza[playerid][gDzialalnosc1]][gTyp] == dzialnosc && DaneGracza[playerid][gUprawnienia1][uprawnienie] == 1)
    {
		return true;
 	}
    else if(GrupaInfo[DaneGracza[playerid][gDzialalnosc2]][gTyp] == dzialnosc && DaneGracza[playerid][gUprawnienia2][uprawnienie] == 1)
    {
		return true;
 	}
 	else if(GrupaInfo[DaneGracza[playerid][gDzialalnosc3]][gTyp] == dzialnosc && DaneGracza[playerid][gUprawnienia3][uprawnienie] == 1)
    {
		return true;
 	}
 	else if(GrupaInfo[DaneGracza[playerid][gDzialalnosc4]][gTyp] == dzialnosc && GraczPremium(playerid) && DaneGracza[playerid][gUprawnienia4][uprawnienie] == 1)
    {
		return true;
 	}
 	else if(GrupaInfo[DaneGracza[playerid][gDzialalnosc5]][gTyp] == dzialnosc && GraczPremium(playerid) && DaneGracza[playerid][gUprawnienia5][uprawnienie] == 1)
    {
		return true;
 	}
 	else if(GrupaInfo[DaneGracza[playerid][gDzialalnosc6]][gTyp] == dzialnosc && GraczPremium(playerid) && DaneGracza[playerid][gUprawnienia6][uprawnienie] == 1)
    {
		return true;
 	}
	else
	{
		return false;
	}
}
stock NalezyDoDzialalnosci(playerid, dzialnosc)
{
	if(GrupaInfo[DaneGracza[playerid][gDzialalnosc1]][gTyp] == dzialnosc)
    {
		return true;
 	}
    else if(GrupaInfo[DaneGracza[playerid][gDzialalnosc2]][gTyp] == dzialnosc)
    {
		return true;
 	}
 	else if(GrupaInfo[DaneGracza[playerid][gDzialalnosc3]][gTyp] == dzialnosc)
    {
		return true;
 	}
 	else if(GrupaInfo[DaneGracza[playerid][gDzialalnosc4]][gTyp] == dzialnosc && GraczPremium(playerid))
    {
		return true;
 	}
 	else if(GrupaInfo[DaneGracza[playerid][gDzialalnosc5]][gTyp] == dzialnosc && GraczPremium(playerid))
    {
		return true;
 	}
 	else if(GrupaInfo[DaneGracza[playerid][gDzialalnosc6]][gTyp] == dzialnosc && GraczPremium(playerid))
    {
		return true;
 	}
	else
	{
		return false;
	}
}
stock MontowanieElektryki(playerid)
{
	if(GetPVarInt(playerid, "g1u15") == 1 && GetPlayerVirtualWorld(playerid) != 0 && DaneGracza[playerid][gDzialalnosc1] == DaneGracza[playerid][gSluzba])
    {
		return true;
 	}
    else if(GetPVarInt(playerid, "g2u15") == 1 && GetPlayerVirtualWorld(playerid) != 0 && DaneGracza[playerid][gDzialalnosc2] == DaneGracza[playerid][gSluzba])
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g3u15") == 1 && GetPlayerVirtualWorld(playerid) != 0 && DaneGracza[playerid][gDzialalnosc3] == DaneGracza[playerid][gSluzba])
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g4u15") == 1 && GetPlayerVirtualWorld(playerid) != 0 && DaneGracza[playerid][gDzialalnosc4] == DaneGracza[playerid][gSluzba])
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g5u15") == 1 && GetPlayerVirtualWorld(playerid) != 0 && DaneGracza[playerid][gDzialalnosc5] == DaneGracza[playerid][gSluzba])
    {
		return true;
 	}
 	else if(GetPVarInt(playerid, "g6u15") == 1 && GetPlayerVirtualWorld(playerid) != 0 && DaneGracza[playerid][gDzialalnosc6] == DaneGracza[playerid][gSluzba])
    {
		return true;
 	}
	else
	{
		return false;
	}
}
stock MikrofonWVW(playerid)
{
	if(DaneGracza[playerid][gDzialalnosc1] == DaneGracza[playerid][gSluzba] && GetPVarInt(playerid, "g1u9") == 1)
    {
		return true;
 	}
    else if(DaneGracza[playerid][gDzialalnosc2] == DaneGracza[playerid][gSluzba] && GetPVarInt(playerid, "g2u9") == 1)
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gDzialalnosc3] == DaneGracza[playerid][gSluzba] && GetPVarInt(playerid, "g3u9") == 1)
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gDzialalnosc4] == DaneGracza[playerid][gSluzba] && GetPVarInt(playerid, "g4u9") == 1)
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gDzialalnosc5] == DaneGracza[playerid][gSluzba] && GetPVarInt(playerid, "g5u9") == 1)
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gDzialalnosc6] == DaneGracza[playerid][gSluzba] && GetPVarInt(playerid, "g6u9") == 1)
    {
		return true;
 	}
	else if(DaneGracza[playerid][gAdmGroup] == 4 && DutyAdmina[playerid] == 1)
	{
		return true;
	}
	else if(DaneGracza[playerid][gAdmGroup] == 7 && DutyAdmina[playerid] == 1)
	{
		return true;
	}
	else if(DaneGracza[playerid][gAdmGroup] == 14 && DutyAdmina[playerid] == 1)
	{
		return true;
	}
	else
	{
		return false;
	}
}
stock UprawnienieNaSluzbie(playerid, uprawnienie)
{
	if(DaneGracza[playerid][gDzialalnosc1] == DaneGracza[playerid][gSluzba] && DaneGracza[playerid][gUprawnienia1][uprawnienie] == 1)
    {
		return true;
 	}
    else if(DaneGracza[playerid][gDzialalnosc2] == DaneGracza[playerid][gSluzba] && DaneGracza[playerid][gUprawnienia2][uprawnienie] == 1)
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gDzialalnosc3] == DaneGracza[playerid][gSluzba] && DaneGracza[playerid][gUprawnienia3][uprawnienie] == 1)
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gDzialalnosc4] == DaneGracza[playerid][gSluzba] && DaneGracza[playerid][gUprawnienia4][uprawnienie] == 1)
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gDzialalnosc5] == DaneGracza[playerid][gSluzba] && DaneGracza[playerid][gUprawnienia5][uprawnienie] == 1)
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gDzialalnosc6] == DaneGracza[playerid][gSluzba] && DaneGracza[playerid][gUprawnienia6][uprawnienie] == 1)
    {
		return true;
 	}
	else
	{
		return false;
	}
}
stock ZamawianiePrzedmiotow(playerid)
{
	if(DaneGracza[playerid][gDzialalnosc1] == DaneGracza[playerid][gSluzba] && GetPVarInt(playerid, "g1u3") == 1)
    {
		return true;
 	}
    else if(DaneGracza[playerid][gDzialalnosc2] == DaneGracza[playerid][gSluzba] && GetPVarInt(playerid, "g2u3") == 1)
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gDzialalnosc3] == DaneGracza[playerid][gSluzba] && GetPVarInt(playerid, "g3u3") == 1)
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gDzialalnosc4] == DaneGracza[playerid][gSluzba] && GetPVarInt(playerid, "g4u3") == 1)
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gDzialalnosc5] == DaneGracza[playerid][gSluzba] && GetPVarInt(playerid, "g5u3") == 1)
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gDzialalnosc6] == DaneGracza[playerid][gSluzba] && GetPVarInt(playerid, "g6u3") == 1)
    {
		return true;
 	}
	else
	{
		return false;
	}
}
stock ZarzadzanieGrupaUID(playerid, uid)
{
	if(DaneGracza[playerid][gDzialalnosc1] == uid && GetPVarInt(playerid, "g1u1") == 1)
    {
		return true;
 	}
    else if(DaneGracza[playerid][gDzialalnosc2] == uid && GetPVarInt(playerid, "g2u1") == 1)
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gDzialalnosc3] == uid && GetPVarInt(playerid, "g3u1") == 1)
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gDzialalnosc4] == uid && GetPVarInt(playerid, "g4u1") == 1)
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gDzialalnosc5] == uid && GetPVarInt(playerid, "g5u1") == 1)
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gDzialalnosc6] == uid && GetPVarInt(playerid, "g6u1") == 1)
    {
		return true;
 	}
	else
	{
		return false;
	}
}
stock ZarzadzanieGrupa(playerid)
{
	if(DaneGracza[playerid][gDzialalnosc1] == DaneGracza[playerid][gSluzba] && GetPVarInt(playerid, "g1u1") == 1)
    {
		return true;
 	}
    else if(DaneGracza[playerid][gDzialalnosc2] == DaneGracza[playerid][gSluzba] && GetPVarInt(playerid, "g2u1") == 1)
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gDzialalnosc3] == DaneGracza[playerid][gSluzba] && GetPVarInt(playerid, "g3u1") == 1)
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gDzialalnosc4] == DaneGracza[playerid][gSluzba] && GetPVarInt(playerid, "g4u1") == 1)
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gDzialalnosc5] == DaneGracza[playerid][gSluzba] && GetPVarInt(playerid, "g5u1") == 1)
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gDzialalnosc6] == DaneGracza[playerid][gSluzba] && GetPVarInt(playerid, "g6u1") == 1)
    {
		return true;
 	}
	else
	{
		return false;
	}
}
stock ZarzadzanieBramami(uid, playerid)
{
	if(BudynekInfo[uid][nWlascicielD] == 0 && BudynekInfo[uid][nWlascicielP] == DaneGracza[playerid][gUID])
	{
		return true;
 	}
	else if(BudynekInfo[uid][nWlascicielD] == 0 && BudynekInfo[uid][nUID] == DaneGracza[playerid][gWynajem])
	{
		return true;
 	}
    else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc1] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g1u6") == 1)
    {
		return true;
 	}
    else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc2] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g2u6") == 1)
    {
		return true;
 	}
 	else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc3] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g3u6") == 1)
    {
		return true;
 	}
 	else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc4] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g4u6") == 1)
    {
		return true;
 	}
 	else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc5] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g5u6") == 1)
    {
		return true;
 	}
 	else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc6] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g6u6") == 1)
    {
		return true;
 	}
	else
	{
		return false;
 	}
}
stock OwnerDzialalnosci(uid, playerid)
{
	if(BudynekInfo[uid][nWlascicielD] == 0 && BudynekInfo[uid][nWlascicielP] == DaneGracza[playerid][gUID])
	{
		return true;
 	}
    else if(BudynekInfo[uid][nWlascicielP] == 0 && GrupaInfo[BudynekInfo[uid][nWlascicielD]][gOwnerUID] == DaneGracza[playerid][gUID])
    {
		return true;
 	}
	else
	{
		return false;
 	}
}
stock ZarzadzanieSzafa(uid, playerid)
{
	if(BudynekInfo[uid][nWlascicielD] == 0 && BudynekInfo[uid][nWlascicielP] == DaneGracza[playerid][gUID])
	{
		return true;
 	}
    else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc1] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g1u5") == 1)
    {
		return true;
 	}
    else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc2] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g2u5") == 1)
    {
		return true;
 	}
 	else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc3] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g3u5") == 1)
    {
		return true;
 	}
 	else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc4] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g4u5") == 1)
    {
		return true;
 	}
 	else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc5] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g5u5") == 1)
    {
		return true;
 	}
 	else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc6] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g6u5") == 1)
    {
		return true;
 	}
	else
	{
		return false;
 	}
}
stock ZarzadzanieBudynkiem(uid, playerid)
{
	if(BudynekInfo[uid][nWlascicielD] == 0 && BudynekInfo[uid][nWlascicielP] == DaneGracza[playerid][gUID])
	{
		return true;
 	}
    else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc1] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g1u4") == 1)
    {
		return true;
 	}
    else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc2] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g2u4") == 1)
    {
		return true;
 	}
 	else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc3] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g3u4") == 1)
    {
		return true;
 	}
 	else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc4] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g4u4") == 1)
    {
		return true;
 	}
 	else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc5] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g5u4") == 1)
    {
		return true;
 	}
 	else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc6] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g6u4") == 1)
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gAdmGroup] == 4 && DutyAdmina[playerid] == 1)
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gAdmGroup] == 7 && DutyAdmina[playerid] == 1)
    {
		return true;
 	}
	else if(DaneGracza[playerid][gAdmGroup] == 14 && DutyAdmina[playerid] == 1)
    {
		return true;
 	}
	else if(DaneGracza[playerid][gAdmGroup] == 8 && DutyAdmina[playerid] == 1)
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gZarzadzajElektryka] == uid)
    {
		return true;
 	}
	else
	{
		return false;
 	}
}
stock ZarzadzanieMAPObiektamiVW0OBJ(playerid)
{
    new uido = ObiektNaTerenie(playerid);
 	if(DaneGracza[playerid][gAdmGroup] == 4 && DutyAdmina[playerid] == 1)//CEO
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gAdmGroup] == 7 && DutyAdmina[playerid] == 1)
    {
		return true;
 	}
	else if(DaneGracza[playerid][gAdmGroup] == 14 && DutyAdmina[playerid] == 1)
		{
			return true;
		}
 	else if(DaneGracza[playerid][gBudowanie] == 1)//cmd:budowanie
 	{
 	    return true;
 	}
 	if(Lokacja[uido][gOwnerP] == DaneGracza[playerid][gUID] && Lokacja[uido][gOwner] == 0)
 	{
		return true;
 	}
 	else if(Lokacja[uido][gOwnerP] != 0 && Lokacja[uido][gOwner] == DaneGracza[playerid][gDzialalnosc1] && GetPVarInt(playerid, "g1u4") == 1)
 	{
		return true;
 	}
 	else if(Lokacja[uido][gOwnerP] != 0 && Lokacja[uido][gOwner] == DaneGracza[playerid][gDzialalnosc2] && GetPVarInt(playerid, "g2u4") == 1)
 	{
		return true;
 	}
 	else if(Lokacja[uido][gOwnerP] != 0 && Lokacja[uido][gOwner] == DaneGracza[playerid][gDzialalnosc3] && GetPVarInt(playerid, "g3u4") == 1)
 	{
		return true;
 	}
 	else if(Lokacja[uido][gOwnerP] != 0 && Lokacja[uido][gOwner] == DaneGracza[playerid][gDzialalnosc4] && GetPVarInt(playerid, "g4u4") == 1)
 	{
		return true;
 	}
 	else if(Lokacja[uido][gOwnerP] != 0 && Lokacja[uido][gOwner] == DaneGracza[playerid][gDzialalnosc5] && GetPVarInt(playerid, "g5u4") == 1)
 	{
		return true;
 	}
 	else if(Lokacja[uido][gOwnerP] != 0 && Lokacja[uido][gOwner] == DaneGracza[playerid][gDzialalnosc6] && GetPVarInt(playerid, "g6u4") == 1)
 	{
		return true;
 	}
	else
	{
		return false;
 	}
}
stock ZarzadzanieMAPObiektamiVW0(playerid)
{
    new uidt = GraczNaTerenie(playerid);
 	if(DaneGracza[playerid][gAdmGroup] == 4)//CEO
    {
		return true;
 	}
	else if(DaneGracza[playerid][gAdmGroup] == 14)//Administrator
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gAdmGroup] == 7)//SGM
    {
		return true;
 	}
 	else if(DaneGracza[playerid][gBudowanie] == 1)//cmd:budowanie
 	{
 	    return true;
 	}
 	if(Lokacja[uidt][gOwnerP] == DaneGracza[playerid][gUID] && Lokacja[uidt][gOwner] == 0)
 	{
		return true;
 	}
 	else if(Lokacja[uidt][gOwnerP] != 0 && Lokacja[uidt][gOwner] == DaneGracza[playerid][gDzialalnosc1] && GetPVarInt(playerid, "g1u4") == 1)
 	{
		return true;
 	}
 	else if(Lokacja[uidt][gOwnerP] != 0 && Lokacja[uidt][gOwner] == DaneGracza[playerid][gDzialalnosc2] && GetPVarInt(playerid, "g2u4") == 1)
 	{
		return true;
 	}
 	else if(Lokacja[uidt][gOwnerP] != 0 && Lokacja[uidt][gOwner] == DaneGracza[playerid][gDzialalnosc3] && GetPVarInt(playerid, "g3u4") == 1)
 	{
		return true;
 	}
 	else if(Lokacja[uidt][gOwnerP] != 0 && Lokacja[uidt][gOwner] == DaneGracza[playerid][gDzialalnosc4] && GetPVarInt(playerid, "g4u4") == 1)
 	{
		return true;
 	}
 	else if(Lokacja[uidt][gOwnerP] != 0 && Lokacja[uidt][gOwner] == DaneGracza[playerid][gDzialalnosc5] && GetPVarInt(playerid, "g5u4") == 1)
 	{
		return true;
 	}
 	else if(Lokacja[uidt][gOwnerP] != 0 && Lokacja[uidt][gOwner] == DaneGracza[playerid][gDzialalnosc6] && GetPVarInt(playerid, "g6u4") == 1)
 	{
		return true;
 	}
	else
	{
		return false;
 	}
}
stock SwiatloBudynku(uid, playerid)
{
	if(BudynekInfo[uid][nWlascicielD] == 0 && BudynekInfo[uid][nWlascicielP] == DaneGracza[playerid][gUID])
	{
		return true;
 	}
    else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc1] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g1u4") == 1)
    {
		return true;
 	}
    else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc2] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g2u4") == 1)
    {
		return true;
 	}
 	else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc3] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g3u4") == 1)
    {
		return true;
 	}
 	else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc4] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g4u4") == 1)
    {
		return true;
 	}
 	else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc5] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g5u4") == 1)
    {
		return true;
 	}
 	else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc6] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g6u4") == 1)
    {
		return true;
 	}
	else if(DaneGracza[playerid][gAdmGroup] == 4)
	{
		return true;
	}
	else if(DaneGracza[playerid][gAdmGroup] == 14)
	{
		return true;
	}
	else if(DaneGracza[playerid][gAdmGroup] == 7)
	{
		return true;
	}
	else
	{
		return false;
 	}
}
stock OtwieranieBudynku(uid, playerid)
{
	if(BudynekInfo[uid][nWlascicielD] == 0 && BudynekInfo[uid][nWlascicielP] == DaneGracza[playerid][gUID])
	{
		return true;
 	}
	else if(BudynekInfo[uid][nWlascicielD] == 0 && BudynekInfo[uid][nUID] == DaneGracza[playerid][gWynajem])
	{
		return true;
 	}
    else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc1] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g1u23") == 1)
    {
		return true;
 	}
    else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc2] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g2u23") == 1)
    {
		return true;
 	}
 	else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc3] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g3u23") == 1)
    {
		return true;
 	}
 	else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc4] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g4u23") == 1)
    {
		return true;
 	}
 	else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc5] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g5u23") == 1)
    {
		return true;
 	}
 	else if(BudynekInfo[uid][nWlascicielP] == 0 && DaneGracza[playerid][gDzialalnosc6] == BudynekInfo[uid][nWlascicielD] && GetPVarInt(playerid, "g6u23") == 1)
    {
		return true;
 	}
	else if(DaneGracza[playerid][gAdmGroup] == 4)
	{
		return true;
	}
	else if(DaneGracza[playerid][gAdmGroup] == 14)
	{
		return true;
	}
	else if(DaneGracza[playerid][gAdmGroup] == 7)
	{
		return true;
	}
	else
	{
		return false;
 	}
}
forward Speedrower(g);
public Speedrower(g)
{
	new vehid = GetPlayerVehicleID(g);
	if(IsPlayerInAnyVehicle(g) && GetVehicleModel(vehid) == 510 || IsPlayerInAnyVehicle(g) && GetVehicleModel(vehid) == 509 || IsPlayerInAnyVehicle(g) && GetVehicleModel(vehid) == 481)
	{
		if(Predkosc(g) >= 80)
		{
			GameTextForPlayer(g, "~r~Zbyt duza predkosc dla roweru!", 3000, 5);
			TogglePlayerControllable(g, 0);
			SetTimerEx("RowerFreez", 1000, 0, "i", g);
			return 1;
		}
	}
	return 1;
}
public OnQueryError(errorid, error[], resultid, extraid, callback[], query[], connectionHandle)
{
	printf("[MySQL Error] %s (%d), Zapytanie: %s", error, errorid, query);
	return 1;
}
forward Unfreeze_SetHP(playerid);
public Unfreeze_SetHP(playerid)
{
	SetPVarInt(playerid, "USetHPHP", 1);
	return 1;
}
forward RowerFreez(playerid);
public RowerFreez(playerid)
{
    TogglePlayerControllable(playerid, 1);
    return 1;
}
forward Unfreeze_AC(uid);
public Unfreeze_AC(uid)
{
	ACOFF[uid] = 0;
	return 1;
}
stock GraczNaTerenie(playerid)
{
    new Float:X, Float:Y, Float:Z;
    GetPlayerPos(playerid, X, Y, Z);
    ForeachEx(i, MAX_ZON)
	{
		if(X <= Lokacja[i][gX] && X >= Lokacja[i][gXX] && Y <= Lokacja[i][gY] && Y >= Lokacja[i][gYY] || X <= Lokacja[i][gXX] && X >= Lokacja[i][gX] && Y <= Lokacja[i][gYY] && Y >= Lokacja[i][gY])
		{
			return i;
		}
    }
    return 0;
}
stock BudynekNaTerenie(uid)
{
    ForeachEx(i, MAX_ZON )
	{
		if(BudynekInfo[uid][nX] <= Lokacja[i][gX] && BudynekInfo[uid][nX] >= Lokacja[i][gXX] && BudynekInfo[uid][nY] <= Lokacja[i][gY] && BudynekInfo[uid][nY] >= Lokacja[i][gYY] || BudynekInfo[uid][nX] <= Lokacja[i][gXX] && BudynekInfo[uid][nX] >= Lokacja[i][gX] && BudynekInfo[uid][nY] <= Lokacja[i][gYY] && BudynekInfo[uid][nY] >= Lokacja[i][gY])
		{
			return i;
		}
    }
    return 0;
}
stock ObiektNaTerenie(playerid)
{
    new uids = GetPVarInt(playerid, "inedit");
    ForeachEx(i, MAX_ZON )
	{
		if(ObiektInfo[uids][objPozX] <= Lokacja[i][gX] && ObiektInfo[uids][objPozX] >= Lokacja[i][gXX] && ObiektInfo[uids][objPozY] <= Lokacja[i][gY] && ObiektInfo[uids][objPozY] >= Lokacja[i][gYY] || ObiektInfo[uids][objPozX] <= Lokacja[i][gXX] && ObiektInfo[uids][objPozX] >= Lokacja[i][gX] && ObiektInfo[uids][objPozY] <= Lokacja[i][gYY] && ObiektInfo[uids][objPozY] >= Lokacja[i][gY])
		{
			return i;
		}
    }
    return 0;
}
public OnVehicleStreamIn(vehicleid, forplayerid)
{
	return 1;
}
public OnEnterExitModShop(playerid, enterexit, interiorid)
{
	if(enterexit == 1)
    {
		NadajKare(playerid,-1, 2, ""PREFIXAC".AntyCheat: Wymuszony tuning pojazdu", -1);
    }
    return 1;
}
public OnVehicleMod(playerid,vehicleid,componentid)
{
	if(GetPlayerInterior(playerid) == 0)
    {
        NadajKare(playerid,-1, 2, ""PREFIXAC".AntyCheat: Wymuszony tuning pojazdu", -1);
        RemoveVehicleComponent(vehicleid, componentid);
    }
    return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
    NadajKare(playerid,-1, 2, ""PREFIXAC".AntyCheat: Wymuszony PaintJob", -1);
    ChangeVehiclePaintjob(vehicleid, 3);
    return 1;
}

stock AntiDeAMX()
{
	new a[][] =
	{
		"Unarmed (Fist)",
		"Brass K"
	};
	#pragma unused a
}
stock ComparisonString(text1[], text2[])
{
    new cmpTest1 = strlen(text1);
    new cmpTest2 = strlen(text2);
    if(cmpTest1 == cmpTest2)
    {
        new BAD = 0;
        for(new c = 0; c < cmpTest1; c++)
        {
            if(text1[c] == text2[c]) continue;
            else
            {
                BAD = 1;
                break;
            }
        }
        if(BAD == 1) return false;
        else return true;
    }
    return false;
}
forward UsuwanieTwardejSpacji(imie[]);
public UsuwanieTwardejSpacji(imie[])
{
	for(new i = 0; i < strlen(imie); i++)
	{
		if(imie[i] == '_') imie[i] = ' ';
	}
}
//////////////////////////////////////////////////////////////////////////
stock mysql_query2(sql[])
{
	qr++;
    mysql_query(sql);
}
////////////////////////////////////////////////////////////////////////////////
CMD:raport(playerid,cmdtext[]) return cmd_report(playerid, cmdtext);
CMD:report(playerid,cmdtext[])
{
	//printf("U¿yta komenda raport");
	if(zalogowany[playerid] == false)
	{
		return 0;
	}
	new playerid2, tekst[128];
	if(sscanf(cmdtext, "is[128]", playerid2, tekst))
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby napisaæ raport na gracza u¿yj /report lub /raport [id gracza] [powód]", "Zamknij", "");
		return 1;
	}
	if(DaneGracza[playerid][gRaport] > gettime()+CZAS_LETNI)
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Wys³a³eœ ostatnio report. Odczekaj minutê, by napisaæ nastêpny.", "Zamknij", "");
		return 0;
	}
	if(zalogowany[playerid2] == false)
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz na którego piszesz report nie jest zalogowany.", "Zamknij", "");
		return 0;
	}
	if(strfind(tekst, "kurwa", true) >= 0  || strfind(tekst, "chuj", true) >= 0  || strfind(tekst, "wypier", true) >= 0  || strfind(tekst, "spierd", true) >= 0  || strfind(tekst, "dupa", true) >= 0  || strfind(tekst, "cipa", true) >= 0 )
    {
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Wysy³aj¹c raport musisz zachowaæ kulturê osobist¹. Popraw go.", "Zamknij", "");
	}
	else
	{
		new ip = 0;
		ForeachEx(i, MAX_PLAYERS)
		{
			if(IsPlayerConnected(i))
			{
				if(zalogowany[i] == true)
				{
					if((DaneGracza[i][gAdmGroup] == 4 || DaneGracza[i][gAdmGroup] == 7 || DaneGracza[i][gAdmGroup] == 14 || DaneGracza[i][gAdmGroup] == 8) && DutyAdmina[i] == 1)
					{
						new str[256], strs[256];
						format(str, sizeof(str), "{ff6600}[Raport] {dedede}%s (ID:%d) {ff6600}raportuje gracza {dedede}%s (ID:%d)",ZmianaNicku(playerid), playerid, ZmianaNicku(playerid2), playerid2);
						SendClientMessage(i, 0xFFb00000, str);
						format(strs, sizeof(strs), "{ff6600}Powód: {dedede}%s", tekst);
						SendClientMessage(i, 0xFFb00000, strs);
						ip++;
					}
				}
			}
		}
		if(ip == 0)
		{
			//Transakcja(T_RAPORT, DaneGracza[playerid][gUID], DaneGracza[playerid2][gUID], DaneGracza[playerid][gGUID], DaneGracza[playerid2][gGUID], -1, -1, -1, -1, tekst, gettime()+CZAS_LETNI);
		}
		DaneGracza[playerid][gRaport] = gettime()+CZAS_LETNI+60;
		new strss[256];
		format(strss, sizeof(strss), "{CC0000}Wys³a³eœ raport na gracza: {CC0000}%s (ID:%d){CC0000}, powód: {CC0000}%s",ZmianaNicku(playerid2), playerid2, tekst);
		SendClientMessage(playerid, 0xFFb00000, strss);
		SendClientMessage(playerid, 0xFFb00000, "{CC0000}Raport z³o¿ony poprawnie, Administracja zosta³a o nim poinformowana!");
		//SendClientMessage(playerid2, 0xFFb00000, "{CC0000}Ktoœ wys³a³ na ciebie raport - pamiêtaj raporty s¹ weryfikowane przez administracje, byæ mo¿e coœ przeskroba³eœ.");
		new log[256];
		format(log, sizeof(log), "[REPORT] [%s] (UID: %d, ID: %d) reported to [%s] (UID: %d, ID: %d) reason: %s", ZmianaNicku(playerid), DaneGracza[playerid][gUID], playerid, ZmianaNicku(playerid2), DaneGracza[playerid2][gUID], playerid2, tekst);
		Transakcja(T_IC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
		Transakcja(T_IC, DaneGracza[playerid2][gUID], -1, DaneGracza[playerid2][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
	}
	return 1;
}
CMD:pytanie(playerid,cmdtext[])
{
	//printf("U¿yta komenda pytanie");
	if(zalogowany[playerid] == false)
	{
		return 0;
	}
	new tekst[128];
	if(sscanf(cmdtext, "s[128]", tekst))
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby napisaæ pytanie wpisz: /pytanie [treœæ].", "Zamknij", "");
		return 1;
	}
	if(DaneGracza[playerid][gPytanie] > gettime()+CZAS_LETNI)
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Wys³a³eœ ostatnio pytanie. Odczekaj minutê, by napisaæ kolejne.", "Zamknij", "");
		return 0;
	}
	if(strfind(tekst, "kurwa", true) >= 0  || strfind(tekst, "chuj", true) >= 0  || strfind(tekst, "wypier", true) >= 0  || strfind(tekst, "spierd", true) >= 0  || strfind(tekst, "dupa", true) >= 0  || strfind(tekst, "cipa", true) >= 0 )
    {
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Wysy³aj¹c pytanie musisz zachowaæ kulturê osobist¹. Popraw to.", "Zamknij", "");
		return 1;
	}
	else
	{
		new ip = 0;
		ForeachEx(i, MAX_PLAYERS)
		{
			if(IsPlayerConnected(i))
			{
				if(zalogowany[i] == true)
				{
					if((DaneGracza[i][gAdmGroup] == 4 || DaneGracza[i][gAdmGroup] == 7 || DaneGracza[i][gAdmGroup] == 14 || DaneGracza[i][gAdmGroup] == 8) && DutyAdmina[i] == 1)
					{
						new str[256];
						format(str, sizeof(str), "{ff6600}[%s(ID: %d) zada³ pytanie] {dedede} %s",ZmianaNicku(playerid), playerid, tekst);
						SendClientMessage(i, 0xFFb00000, str);
						ip++;
					}
				}
			}
		}
		DaneGracza[playerid][gPytanie] = gettime()+CZAS_LETNI+60;
		new strss[256];
		if(ip != 0)
		{
			format(strss, sizeof(strss), "[Pytanie do Administracji]:{DEDEDE} %s", tekst);
			SendClientMessage(playerid, 0xFFb00000, strss);
		}
		else
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Obecnie nie ma ¿adnego Administratora na s³uzbiê - spóbuj ponownie póŸniej.", "Zamknij", "");
			return 1;
		}
	}
	return 1;
}
CMD:screenshot(playerid, cmdtext[])
{
	if(zalogowany[playerid] == false)
	{
		return 0;
	}
	if(GetPVarInt(playerid, "blindfold") == 0)
	{
		TextDrawShowForPlayer(playerid, Worek2);
		SetPVarInt(playerid, "blindfold", 1);
		return 1;
	}
	else
	{
		TextDrawHideForPlayer(playerid, Worek2);
		SetPVarInt(playerid, "blindfold", 0);
		return 1;
	}
}
CMD:worek(playerid,cmdtext[])
{
	//printf("U¿yta komenda worek");
	if(zalogowany[playerid] == false)
	{
		return 0;
	}
	/*if(!GraczaMaTypPrzedmiotu(playerid, P_WOREK))
	{
		return 0;
	}*/
	new playerid2;
	if(sscanf(cmdtext, "i", playerid2))
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby u¿yæ worka wpisz: /worek [id gracza].", "Zamknij", "");
		return 1;
	}
	if(!GraczaMaTypPrzedmiotu(playerid, P_WOREK))
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "TIP:", "Aby u¿yæ tej komendy, musisz posiadac w ekwipunku worek!", "Zamknij", "");
		return 1;
	}
	if(playerid == playerid2) return 0;
	if(!PlayerObokPlayera(playerid, playerid2, 5))
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie znajdujesz siê obok gracza któremu chcesz za³o¿yæ worek na g³owê.", "Zamknij", "");
	    return 0;
	}
	if(zalogowany[playerid2] == false)
	{
		return 0;
	}
	if(DaneGracza[playerid2][gWorek] == 0)
	{
	    TextDrawShowForPlayer(playerid2, Worek);
	    DaneGracza[playerid2][gWorek] = 1;
		new str[256];
		format(str, sizeof(str), "zak³ada worek na g³owe %s.", ZmianaNicku(playerid2));
	    cmd_fasdasfdfive(playerid, str);
	}
	else
	{
	    TextDrawHideForPlayer(playerid2, Worek);
	    DaneGracza[playerid2][gWorek] = 0;
		new str[256];
		format(str, sizeof(str), "zdejmuje worek z g³owy %s.", ZmianaNicku(playerid2));
	    cmd_fasdasfdfive(playerid, str);
	}
	return 1;
}

/*CMD:przebierz(playerid,params[])
{
	//printf("U¿yta komenda przebierz");
	if(zalogowany[playerid] == false)
    {
        return 0;
    }
	if(DaneGracza[playerid][gBW] != 0)
	{
		return 0;
	}
	if(GetPlayerVirtualWorld(playerid) == 0)
	{
		return 0;
	}
	new uidd = GetPlayerVirtualWorld(playerid);
	if(GrupaInfo[uidd][gTyp] == DZIALALNOSC_HOTEL)
	{
		if(!OtwieranieBudynku(GetPlayerVirtualWorld(playerid), playerid))
		{
		    GameTextForPlayer(playerid, "~r~Mozesz przebierac sie tylko w budynku do ktorego posiadasz klucze.", 3000, 5);
		    return 0;
		}//2,8,14,20,26,32,DaneGracza[playerid][gPrzynaleznosci][6]
	}
	new	dzg_lista[350], find = 1;
	format(dzg_lista, sizeof(dzg_lista), "%s\n»  Domyœlny", dzg_lista);
	if(DaneGracza[playerid][gDzialalnosc1] != 0)
	{
     new uid = DaneGracza[playerid][gDzialalnosc1];
		format(dzg_lista, sizeof(dzg_lista), "%s\n%d\t%s", dzg_lista, find, GrupaInfo[uid][gNazwa]);
	    find++;
	}
	if(DaneGracza[playerid][gDzialalnosc2] != 0)
	{
		new uid = DaneGracza[playerid][gDzialalnosc2];
		format(dzg_lista, sizeof(dzg_lista), "%s\n%d\t%s", dzg_lista, find, GrupaInfo[uid][gNazwa]);
	    find++;
	}
	if(DaneGracza[playerid][gDzialalnosc3] != 0)
	{
		new uid = DaneGracza[playerid][gDzialalnosc3];
		format(dzg_lista, sizeof(dzg_lista), "%s\n%d\t%s", dzg_lista, find, GrupaInfo[uid][gNazwa]);
	    find++;
	}
	if(DaneGracza[playerid][gDzialalnosc4] != 0 && GraczPremium(playerid))
	{
		new uid = DaneGracza[playerid][gDzialalnosc4];
		format(dzg_lista, sizeof(dzg_lista), "%s\n%d\t%s", dzg_lista, find, GrupaInfo[uid][gNazwa]);
	    find++;
	}
	if(DaneGracza[playerid][gDzialalnosc5] != 0 && GraczPremium(playerid))
	{
		new uid = DaneGracza[playerid][gDzialalnosc5];
		format(dzg_lista, sizeof(dzg_lista), "%s\n%d\t%s", dzg_lista, find, GrupaInfo[uid][gNazwa]);
	    find++;
	}
	if(DaneGracza[playerid][gDzialalnosc6] != 0 && GraczPremium(playerid))
	{
		new uid = DaneGracza[playerid][gDzialalnosc6];
		format(dzg_lista, sizeof(dzg_lista), "%s\n%d\t%s", dzg_lista, find, GrupaInfo[uid][gNazwa]);
	    find++;
	}
	dShowPlayerDialog(playerid, DIALOG_PRZEBIERZ, DIALOG_STYLE_LIST, GUIOPIS "{FFFFFF}Przebierz:", dzg_lista, "Przebierz", "Wyjdz");
	return 1;
}*/
CMD:hazard(playerid, params[])
{
	if(PrzyObiekcie(playerid, 2640, 3) != 0)
	{
		SetPVarInt(playerid, "Vegas", 1);
		Vegas_Rand[playerid][0] = random(7);
		Vegas_Rand[playerid][1] = random(7);
		Vegas_Rand[playerid][2] = random(7);
		TextDrawShowForPlayer(playerid, VegasBG[0]);
		TextDrawShowForPlayer(playerid, VegasBG[1]);
		TextDrawShowForPlayer(playerid, VegasBG[2]);
		TextDrawShowForPlayer(playerid, VegasBG[3]);
		TextDrawShowForPlayer(playerid, VegasBG[4]);
		TextDrawShowForPlayer(playerid, Vegas_Player[playerid][0]);
		TextDrawShowForPlayer(playerid, Vegas_Player[playerid][1]);
		TextDrawShowForPlayer(playerid, Vegas_LOS[0][Vegas_Rand[playerid][0]]);
		TextDrawShowForPlayer(playerid, Vegas_LOS[1][Vegas_Rand[playerid][1]]);
		TextDrawShowForPlayer(playerid, Vegas_LOS[2][Vegas_Rand[playerid][2]]);
		TextDrawShowForPlayer(playerid, Vegas_Button[0]);
		TextDrawShowForPlayer(playerid, Vegas_Button[1]);
		TextDrawShowForPlayer(playerid, Vegas_Button[2]);
		TextDrawShowForPlayer(playerid, Vegas_Button[3]);
		TextDrawShowForPlayer(playerid, Vegas_Button[4]);
		SelectTextDraw(playerid, 0x00AAFFFF);
		return 1;
	}
	else
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie znajdujesz siê ko³o obiektu (model: 2640)", "Zamknij", "");
	    return 1;
	}
}
CMD:zamknij(playerid,params[])
{
	//printf("U¿yta komenda zamknij");
    if(zalogowany[playerid] == false)
    {
        return 0;
    }
	if(DaneGracza[playerid][gBW] != 0)
	{
		return 0;
	}
	new id = -1;
	for(new h = 0; h < sizeof(BudynekInfo); h++)
	{
		if(BudynekInfo[h][nUID] != 0)
		{
			if(Dystans(3.0, playerid, BudynekInfo[h][nX], BudynekInfo[h][nY], BudynekInfo[h][nZ]) && BudynekInfo[h][nVW] == GetPlayerVirtualWorld(playerid) || Dystans(3.0, playerid, BudynekInfo[h][nXW], BudynekInfo[h][nYW], BudynekInfo[h][nZW]) && BudynekInfo[h][nVWW] == GetPlayerVirtualWorld(playerid))
			{
				id = h;
			}
		}
	}
	if(id == -1)
	{
		return 1;
	}
	if(!OtwieranieBudynku(id, playerid))
	{
	    GameTextForPlayer(playerid, "~r~~h~Nie posiadasz uprawnien do~n~~w~/zamknij.", 3000, 5);
	    return 0;
	}
	if(BudynekInfo[id][nZamek] == 1)
	{
		BudynekInfo[id][nZamek] = 0;
		new logtekst[256];
		format(logtekst, sizeof(logtekst), "[DOOR] [%s] [ID: %d] Closed doors %s", ZmianaNicku(playerid), playerid, BudynekInfo[id][nAdres]);
		Transakcja(T_CDRZWI, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, logtekst, gettime()+KOREKTA_CZASOWA);
		ForeachEx(x, MAX_PLAYERS)
		{
			if(IsPlayerConnected(x))
			{
				if(zalogowany[x] == true)
				{
					if(PlayerObokPlayera(playerid, x, 10))
					{
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						PlayerPlaySound(x, 1145, 0.0, 0.0, 0.0);

					}
				}
			}
        }
        if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid,"INT_HOUSE","wash_up",4.1,0,0,0,0,0);
        format(tekst_global, sizeof(tekst_global), "zamyka drzwi na klucz.");
		cmd_fasdasfdfive(playerid, tekst_global);
		new akcja[126];
		format(akcja,sizeof(akcja),"*zamyka drzwi na klucz*");
		SetPlayerChatBubble(playerid, akcja, FIOLETOWY, 10.0, 4000);
		new akcja2[126];
		format(akcja2,sizeof(akcja2),"zamyka drzwi na klucz");
		TextDrawSetString(AkcjaTD[playerid], akcja2);
		TextDrawShowForPlayer(playerid, AkcjaTD[playerid]);
		CzasWyswietlaniaTextuNaDrzwiach[playerid] = 10;
	}
	else
	{
		BudynekInfo[id][nZamek] = 1;
		new logtekst[256];
		format(logtekst, sizeof(logtekst), "[DOOR] [%s] [ID: %d] Open doors %s", ZmianaNicku(playerid), playerid, BudynekInfo[id][nAdres]);
		Transakcja(T_CDRZWI, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, logtekst, gettime()+KOREKTA_CZASOWA);
		ForeachEx(x, MAX_PLAYERS)
		{
			if(IsPlayerConnected(x))
			{
				if(zalogowany[x] == true)
				{
					if(PlayerObokPlayera(playerid, x, 10))
					{
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						PlayerPlaySound(x, 1145, 0.0, 0.0, 0.00);
					}
				}
			}
        }
        if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid,"INT_HOUSE","wash_up",4.1,0,0,0,0,0);
        format(tekst_global, sizeof(tekst_global), "otwiera drzwi kluczem.");
		cmd_fasdasfdfive(playerid, tekst_global);
		new akcja[126];
		format(akcja,sizeof(akcja),"*otwiera drzwi kluczem*");
		SetPlayerChatBubble(playerid, akcja, FIOLETOWY, 10.0, 4000);
		new akcja2[126];
		format(akcja2,sizeof(akcja2),"otwiera drzwi kluczem");
		TextDrawSetString(AkcjaTD[playerid], akcja2);
		TextDrawShowForPlayer(playerid, AkcjaTD[playerid]);
		CzasWyswietlaniaTextuNaDrzwiach[playerid] = 10;
	}
	ZapiszNieruchomosc(id);
	return 1;
}
CMD:yo(playerid, params[])
{
	//printf("U¿yta komenda yo");
	if(zalogowany[playerid] == false)
    {
        return 0;
    }
	if(DaneGracza[playerid][gBW] != 0)
	{
		return 0;
	}
	new id;
	if(sscanf(params, "d", id))
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby oferowaæ graczu przywitanie wpisz: /yo [id gracza].", "Zamknij", "");
		return 1;
	}
	if(id == INVALID_PLAYER_ID) return 0;
	if(!PlayerObokPlayera(playerid, id, 5))
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz oferowaæ przywitanie nie znajduje siê obok ciebie.", "Zamknij", "");
		return 1;
	}
	if(!IsPlayerFacingPlayer(playerid, id, 20))
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz oferowaæ przywitanie nie patrzy w twoj¹ strone.", "Zamknij", "");
		return 1;
	}
	else
	{
		GameTextForPlayer(playerid, "~y~Oferta:~n~~w~Zostala wyslana czekaj na reakcje gracza.", 3000, 5);
		Oferuj(playerid, id, 0, 0, 0, 0, OFEROWANIE_YO, 0, "", 0);
	}
	return 1;
}
forward Spawns(playerid);
public Spawns(playerid)
{
	SpawnPlayer(playerid);
	SetTimerEx("SprawdzSpawn",1000, 0, "d", playerid);
	return 1;
}
forward SprawdzSpawn(playerid);
public SprawdzSpawn(playerid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	if(DaneGracza[playerid][gAJ] != 0)
	{
		if(x+20.0 < 1174.3706 || x-20.0 > 1174.3706)
		{
			SetTimerEx("Spawns",500, 0, "d", playerid);
		}
		return 1;
	}
	else if(DaneGracza[playerid][gBW] != 0)
	{
	    if(x+20.0 < DaneGracza[playerid][gX] || x-20.0 > DaneGracza[playerid][gX])
		{
			SetTimerEx("Spawns",500, 0, "d", playerid);
		}
		return 1;
	}
	else if(DaneGracza[playerid][gPrzetrzmanie] != 0)
	{
		if(x+20.0 < DaneGracza[playerid][gPX] || x-20.0 > DaneGracza[playerid][gPX])
		{
			SetTimerEx("Spawns",500, 0, "d", playerid);
		}
		return 1;
	}
	else if(DaneGracza[playerid][gQS] >= gettime())
	{
		if(x+20.0 < DaneGracza[playerid][gX] || x-20.0 > DaneGracza[playerid][gX])
		{
			SetTimerEx("Spawns",500, 0, "d", playerid);
		}
		return 1;
	}
	else if(DaneGracza[playerid][gWynajem] != 0)
	{
		new ui = DaneGracza[playerid][gWynajem];
		if(x+20.0 < BudynekInfo[ui][nXW] || x-20.0 > BudynekInfo[ui][nXW])
		{
			SetTimerEx("Spawns",500, 0, "d", playerid);
		}
		return 1;
	}
	else
	{
		if(DaneGracza[playerid][gSpawn] == 0)//SprawdŸ spawn gracza 0
		{
			if(x+20.0 < BudynekInfo[1][nX] || x-20.0 > BudynekInfo[1][nX])
			{
				SetTimerEx("Spawns",500, 0, "d", playerid);
			}
			return 1;
		}
		if(DaneGracza[playerid][gSpawn] == 1)//SprawdŸ spawn gracza 1
		{
			if(x+20.0 < BudynekInfo[69][nX] || x-20.0 > BudynekInfo[69][nX])
			{
				SetTimerEx("Spawns",500, 0, "d", playerid);
			}
			return 1;
		}
	}
	return 1;
}
forward SpecSystem(playerid);
public SpecSystem(playerid)
{
	if(SpecUruchomiony[playerid] && SpecCel[playerid] != -1 )
	{
	    new specowany = SpecCel[playerid];
	    if(IsPlayerConnected(specowany) && DutyAdmina[playerid] == 1)
	    {
			strdel(tekst_global, 0, 2048);
			new interior = GetPlayerInterior(specowany), vw = GetPlayerVirtualWorld(specowany);
		  	SetPlayerInterior(playerid, interior );
		   	SetPlayerVirtualWorld(playerid, vw);
			format( tekst_global, sizeof( tekst_global ), "~y~%s ~r~(ID: %d, UID: %d, GUID: %d)~n~Kasa: $%d Bank: $%d", ZmianaNicku(specowany), specowany, DaneGracza[specowany][gUID], DaneGracza[specowany][gGUID], DaneGracza[specowany][gPORTFEL], DaneGracza[specowany][gSTAN_KONTA]);
			GameTextForPlayer(playerid, tekst_global, 5500, 1);
			if(!IsPlayerInAnyVehicle(specowany))
			{
				TogglePlayerSpectating ( playerid, 1 ) ;
				PlayerSpectatePlayer(playerid, specowany);
			}
			else
			{
				TogglePlayerSpectating ( playerid, 1 ) ;
				PlayerSpectateVehicle(playerid, GetPlayerVehicleID(specowany));
			}
			SetTimerEx("SpecSystem", 1000, 0, "d", playerid);
		}
		else
		{
			SetCameraBehindPlayer(playerid);
			TogglePlayerSpectating ( playerid, 0 ) ;
			SpecCel[playerid] 			= -1;
			SpecUruchomiony[playerid]	= 0;
			GameTextForPlayer(playerid, "~r~Gracz rozlaczyl sie!", 5500, 3);
		}
	}
	return 1;
}

CMD:plac(playerid,cmdtext[])
{
    if(zalogowany[playerid] == false)
    {
        return 0;
    }
	if(DaneGracza[playerid][gBW] != 0)
	{
		return 0;
	}
	new playerid2, cash, str[64];
	if(sscanf(cmdtext, "id", playerid2, cash))
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby daæ graczu pieni¹dze wpisz: /plac [id gracza] [iloœæ pieniêdzy]", "Zamknij", "");
		return 1;
	}
	if(playerid == playerid2) return 1;
	if(!PlayerObokPlayera(playerid, playerid2, 5))
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz daæ pieni¹dze nie znajduje siê obok ciebie.", "Zamknij", "");
	    return 1;
	}
	if(zalogowany[playerid2] == false)
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz daæ pieni¹dze nie jest zalogowany.", "Zamknij", "");
		return 1;
	}
	if(cash > DaneGracza[playerid][gPORTFEL])
	{
	    GameTextForPlayer(playerid, "~r~Nie posiadasz takiej kwoty.", 3000, 5);
		return 1;
	}
	if(cash <= 0)
	{
	    return 1;
	}
	if(DaneGracza[playerid][gCZAS_ONLINE] < 2 * 60 * 60)
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie mo¿esz tego zrobiæ, twoja postaæ ma mniej ni¿ 2h.\nPamiêtaj, ¿e ka¿de /plac znajduje siê w logach!", "Zamknij", "");
		return 1;
	}
	if(DaneGracza[playerid][gCZAS_ONLINE] < 10 * 60 * 60)
	{
		new przelew[124];
		format(przelew, sizeof(przelew), "[OSTRZEZENIE] Gracz: %s (ID:%d) da³ graczu: %s (ID:%d) ($%d)",ZmianaNicku(playerid), playerid, ZmianaNicku(playerid2), playerid2,cash);
		KomunikatAdmin(1, przelew);
	}
	else if(DaneGracza[playerid2][gCZAS_ONLINE] < 10 * 60 * 60)
	{
		new przelew[124];
		format(przelew, sizeof(przelew), "[OSTRZEZENIE] Gracz: %s (ID:%d) da³ graczu: %s (ID:%d) ($%d)",ZmianaNicku(playerid), playerid, ZmianaNicku(playerid2), playerid2,cash);
		KomunikatAdmin(1, przelew);
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie mo¿esz tego zrobiæ, gdy kogoœ specujesz!", "Zamknij", "");
		return 0;
	}
	if(GetPlayerState(playerid2) == PLAYER_STATE_SPECTATING)
	{
		return 0;
	}
	Dodajkase(playerid, -cash);
	Dodajkase(playerid2, cash);
	format(str, sizeof(str), "podaje trochê pieniêdzy %s.", ZmianaNicku(playerid2));
	cmd_fasdasfdfive(playerid,str);
	new text[124];
	format(text, sizeof(text), "%s da³ Tobie $%d", ZmianaNicku(playerid), cash);
	new texts[124];
	format(texts, sizeof(texts), "Podano %s $%d. Pamiêtaj by dokonaæ przelew udaj siê do banku, u¿yj /bank", ZmianaNicku(playerid2), cash);
	SendClientMessage(playerid2, SZARY, text);
	SendClientMessage(playerid, SZARY, texts);
	OnPlayerText(playerid, "-daj");
	new log[256];
	format(log, sizeof(log), "[CASH] [%s] (UID: %d, ID: %d) transfers %d USD to [%s] (UID: %d, ID: %d)", ZmianaNicku(playerid), DaneGracza[playerid][gUID], playerid, cash, ZmianaNicku(playerid2), DaneGracza[playerid2][gUID], playerid2);
	Transakcja(T_IC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
	Transakcja(T_IC, DaneGracza[playerid2][gUID], -1, DaneGracza[playerid2][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
	return 1;
}
CMD:euro(playerid,cmdtext[])
{
	if(WlaczEuro == 0)
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Euro zosta³o wy³¹czone przez w³aœciciela projektu.", "Zamknij", "");
		return 0;
	}
    if(zalogowany[playerid] == false)
    {
        return 0;
    }
	if(DaneGracza[playerid][gBW] != 0)
	{
		return 0;
	}
	new playerid2, cash, str[64];
	if(sscanf(cmdtext, "id", playerid2, cash))
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby daæ graczu euro wpisz: /euro [id gracza] [iloœæ euro]", "Zamknij", "");
		return 1;
	}
	if(playerid == playerid2) return 1;
	if(!PlayerObokPlayera(playerid, playerid2, 5))
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz daæ euro nie znajduje siê obok ciebie.", "Zamknij", "");
	    return 1;
	}
	if(zalogowany[playerid2] == false)
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz daæ euro nie jest zalogowany.", "Zamknij", "");
		return 1;
	}
	if(cash > DaneGracza[playerid][gPORTFEL])
	{
	    GameTextForPlayer(playerid, "~r~Nie posiadasz takiej kwoty.", 3000, 5);
		return 1;
	}
	if(cash <= 0)
	{
	    return 1;
	}
	if(DaneGracza[playerid][gCZAS_ONLINE] < 2 * 60 * 60)
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie mo¿esz tego zrobiæ, twoja postaæ ma mniej ni¿ 2h.\nPamiêtaj, ¿e ka¿de /euro znajduje siê w logach!", "Zamknij", "");
		return 1;
	}
	if(DaneGracza[playerid][gCZAS_ONLINE] < 10 * 60 * 60)
	{
		new przelew[124];
		format(przelew, sizeof(przelew), "[OSTRZEZENIE] Gracz: %s (ID:%d) da³ graczu: %s (ID:%d) (€%d)",ZmianaNicku(playerid), playerid, ZmianaNicku(playerid2), playerid2,cash);
		KomunikatAdmin(1, przelew);
	}
	else if(DaneGracza[playerid2][gCZAS_ONLINE] < 10 * 60 * 60)
	{
		new przelew[124];
		format(przelew, sizeof(przelew), "[OSTRZEZENIE] Gracz: %s (ID:%d) da³ graczu: %s (ID:%d) (€%d)",ZmianaNicku(playerid), playerid, ZmianaNicku(playerid2), playerid2,cash);
		KomunikatAdmin(1, przelew);
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie mo¿esz tego zrobiæ, gdy kogoœ specujesz!", "Zamknij", "");
		return 0;
	}
	if(GetPlayerState(playerid2) == PLAYER_STATE_SPECTATING)
	{
		return 0;
	}
	DodajEuro(playerid, -cash);
	DodajEuro(playerid2, cash);
	format(str, sizeof(str), "podaje trochê euro %s.", ZmianaNicku(playerid2));
	cmd_fasdasfdfive(playerid,str);
	new text[124];
	format(text, sizeof(text), "%s da³ Tobie €%d", ZmianaNicku(playerid), cash);
	new texts[124];
	format(texts, sizeof(texts), "Podano %s €%d. Pamiêtaj by dokonaæ przelew udaj siê do banku, u¿yj /bank", ZmianaNicku(playerid2), cash);
	SendClientMessage(playerid2, SZARY, text);
	SendClientMessage(playerid, SZARY, texts);
	OnPlayerText(playerid, "-daj");
	new log[256];
	format(log, sizeof(log), "[EURO] [%s] (UID: %d, ID: %d) transfers %d EUR to [%s] (UID: %d, ID: %d)", ZmianaNicku(playerid), DaneGracza[playerid][gUID], playerid, cash, ZmianaNicku(playerid2), DaneGracza[playerid2][gUID], playerid2);
	Transakcja(T_IC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
	Transakcja(T_IC, DaneGracza[playerid2][gUID], -1, DaneGracza[playerid2][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
	return 1;
}
stock Debug(typ, powod[])
{
	if(typ == 1)
	{
		ForeachEx(i, MAX_PLAYERS)
		{
			if(IsPlayerConnected(i))
			{
				if(zalogowany[i] == true)
				{
					if(GetPVarInt(i, "TrybDebugowania") == 1)
					{
						if((DaneGracza[i][gAdmGroup] == 4))
						{
							SendClientMessage(i, 0x00FFFF00, powod);
						}
					}
				}
			}
		}
	}
	return 1;
}
stock KomunikatAdmin(sluzba, powod[])
{
	if(sluzba == 1)
	{
		ForeachEx(i, MAX_PLAYERS)
		{
			if(IsPlayerConnected(i))
			{
				if(zalogowany[i] == true)
				{
					if((DaneGracza[i][gAdmGroup] == 4 || DaneGracza[i][gAdmGroup] == 7 || DaneGracza[i][gAdmGroup] == 14 || DaneGracza[i][gAdmGroup] == 8) && DutyAdmina[i] == 1)
					{
						SendClientMessage(i, 0x00FFFF00, powod);
					}
				}
			}
		}
	}
	else
	{
		ForeachEx(i, MAX_PLAYERS)
		{
			if(IsPlayerConnected(i))
			{
				if(zalogowany[i] == true)
				{
					if(DaneGracza[i][gAdmGroup] == 4 || DaneGracza[i][gAdmGroup] == 7 || DaneGracza[i][gAdmGroup] == 14 || DaneGracza[i][gAdmGroup] == 8)
					{
						SendClientMessage(i, 0x00FFFF00, powod);
					}
				}
			}
		}
	}

	return 1;
}
stock KomunikatOpiekun(pytanie[])
{
	ForeachEx(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i))
		{
			if(zalogowany[i] == true)
			{
				if((DaneGracza[i][gAdmGroup] == 4 || DaneGracza[i][gAdmGroup] == 7 || DaneGracza[i][gAdmGroup] == 14 || DaneGracza[i][gAdmGroup] == 8) && DutyAdmina[i] == 1)
				{
					SendClientMessage(i, 0x99CCFF00, pytanie);
				}
			}
		}
	}
	return 1;
}
CMD:pokoj(playerid, params[])
{
	//printf("U¿yta komenda pokoj");
    if(zalogowany[playerid] == false) return 0;
	if(DaneGracza[playerid][gBW] != 0) return 0;
	new vw = GetPlayerVirtualWorld(playerid);
	if(vw == 0) return 0;
	new uids = GetPlayerVirtualWorld(playerid);//GetPVarInt(playerid, "uiddrzwi");
	if(BudynekInfo[uids][nWlascicielP] != 0 && BudynekInfo[uids][nWlascicielD] == 0) return 0;
	new uid = BudynekInfo[uids][nWlascicielD];
	if(GrupaInfo[uid][gTyp] != DZIALALNOSC_HOTEL) return 0;
	if(DaneGracza[playerid][gWynajem] != 0)
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Wynajmujesz ju¿ gdzieœ hotel lub mieszkanie, /wymelduj siê by ponownie siê zameldowaæ!", "Zamknij", "");
	}
	else
	{
		new pokoj[512];
		format(pokoj, sizeof(pokoj), "Aby wynaj¹æ pokój w tym hotelu wybierz przycisk ''Wynajmij''\nKoszt wynajêcia pokoju na 3 dni wynosi: $%d, pierwsze zameldowanie wynosi: $%d", BudynekInfo[vw][nHotel], (BudynekInfo[vw][nHotel]+50));
		dShowPlayerDialog(playerid, DIALOG_HOTEL, DIALOG_STYLE_MSGBOX, GUIOPIS "Hotel:", pokoj, "Wynajmij", "Zamknij");
	}
	return 1;
}
CMD:wymelduj(playerid, params[])
{
	if(DaneGracza[playerid][gWynajem] != 0)
	{
		DaneGracza[playerid][gWynajem] = 0;
		ZapiszGracza(playerid);
		strdel(zapyt, 0, 1024);
		format(zapyt, sizeof(zapyt),"UPDATE `jochym_postacie` SET `WYNAJEM`='%d' WHERE `ID`='%d'", DaneGracza[playerid][gWynajem], DaneGracza[playerid][gUID]);
		mysql_query(zapyt);
		dShowPlayerDialog( playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja","Zrezygnowa³es z wynajmu w tej nieruchomoœci.", "Zamknij", "" );
	}
	return 1;
}
CMD:salonbot247(playerid, params[])
{
	//printf("U¿yta komenda salon");
	new vw = GetPlayerVirtualWorld(playerid);
    if(zalogowany[playerid] == false) return 0;
	if(DaneGracza[playerid][gBW] != 0) return 0;
	if(vw == 0) return 0;
	new uids = GetPlayerVirtualWorld(playerid);
	if(BudynekInfo[uids][nWlascicielP] != 0 && BudynekInfo[uids][nWlascicielD] == 0) return 0;
	new uid = BudynekInfo[uids][nWlascicielD];
	if(GrupaInfo[uid][gTyp] != DZIALALNOSC_SALON) return 0;
	dShowPlayerDialog(playerid, DIALOG_SALON_POJAZDOW, DIALOG_STYLE_LIST, GUIOPIS "Salon Pojazdów:", "»  Tanie\n»  Znane Tanie\n»  Popularne\n»  Prawie luksusowe\n»  Sport & Exclusive\n»  £odzie\n»  Jednoœlady\n»  Samoloty & Helikoptery\n»  Pojazdy premium", "Wybierz", "Zamknij");
	return 1;
}
CMD:akcesoria(playerid, params[])
{
    if(zalogowany[playerid] == false) return 0;
	if(DaneGracza[playerid][gBW] != 0) return 0;
	new vw = GetPlayerVirtualWorld(playerid);
	if(vw == 0) return 0;
	new uids = GetPlayerVirtualWorld(playerid);
	if(BudynekInfo[uids][nWlascicielP] != 0 && BudynekInfo[uids][nWlascicielD] == 0) return 0;
	new uid = BudynekInfo[uids][nWlascicielD];
	if(GrupaInfo[uid][gTyp] != DZIALALNOSC_BINCO)
	{
	    return 0;
	}
	dShowPlayerDialog(playerid, DIALOG_ATTACH_INDEX_SELECTION, DIALOG_STYLE_LIST, GUIOPIS "Informacja", "»  Slot 1\n»  Slot 2", "Wybierz", "Zamknij");
	return 1;
}
CMD:ubranie(playerid, params[])
{
	//printf("U¿yta komenda ubranie");
    if(zalogowany[playerid] == false) return 0;
	if(DaneGracza[playerid][gBW] != 0) return 0;
	new vw = GetPlayerVirtualWorld(playerid);
	if(vw == 0) return 0;
	new uids = GetPlayerVirtualWorld(playerid);
	if(BudynekInfo[uids][nWlascicielP] != 0 && BudynekInfo[uids][nWlascicielD] == 0) return 0;
	new uid = BudynekInfo[uids][nWlascicielD];
	if(GrupaInfo[uid][gTyp] != DZIALALNOSC_BINCO)
	{
	    return 0;
	}
	dShowPlayerDialog(playerid, DIALOG_UBRANIE_WYBIERZ, DIALOG_STYLE_LIST, GUIOPIS "Victim:", "» Ubrania\n» Dodatki", "Wybierz", "Zamknij");
	return 1;
}
CMD:kupaktor247(playerid, params[])
{
	//printf("U¿yta komenda kup");
    if(zalogowany[playerid] == false) return 0;
	if(DaneGracza[playerid][gBW] != 0) return 0;
	new vw = GetPlayerVirtualWorld(playerid);
	if(vw == 0)
	{
		return 0;
	}
	new uids = GetPlayerVirtualWorld(playerid);
	if(BudynekInfo[uids][nWlascicielP] != 0 && BudynekInfo[uids][nWlascicielD] == 0) return 0;
	new uid = BudynekInfo[uids][nWlascicielD];
	if(GrupaInfo[uid][gTyp] != DZIALALNOSC_247)//|| GrupaInfo[uid][gTyp] != DZIALALNOSC_MEDYCZNA
	{
		return 0;
	}
	ZaladujMagazyny();
	ZapiszMagazyn(uid);
	Magazyn(playerid, DIALOG_247_KUP, GUIOPIS "Lista dostêpnych przedmiotów:", TYP_MAGAZYN, BudynekInfo[vw][nWlascicielD], "Kup", "Zamknij");
	return 1;
}
CMD:fcj(playerid, cmdtext[])
{
    new playerid2, powod[64];
	if(sscanf(cmdtext, "is[64]", playerid2, powod))
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby nadaæ graczu FCK/FCJ u¿yj: /fcj [id gracza] [powod]", "Zamknij", "");
		return 1;
	}
	if(DaneGracza[playerid][gSluzba] == 0)
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie znajdujesz siê na s³uzbie organizacji.", "Zamknij", "");
	    return 1;
	}
	if(!ZarzadzanieGrupa(playerid))
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie posiadasz uprawnieñ do tej komendy, musisz posiadaæ zarz¹dzanie grup¹!", "Zamknij", "");
	    return 1;
	}
	if(DaneGracza[playerid2][gDzialalnosc6] == DaneGracza[playerid][gSluzba] ||
	   DaneGracza[playerid2][gDzialalnosc5] == DaneGracza[playerid][gSluzba] ||
	   DaneGracza[playerid2][gDzialalnosc4] == DaneGracza[playerid][gSluzba] ||
	   DaneGracza[playerid2][gDzialalnosc3] == DaneGracza[playerid][gSluzba] ||
	   DaneGracza[playerid2][gDzialalnosc2] == DaneGracza[playerid][gSluzba] ||
	   DaneGracza[playerid2][gDzialalnosc1] == DaneGracza[playerid][gSluzba])
	{
		if(DaneGracza[playerid2][gBW] == 0)
		{
	        dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Ten gracz musi mieæ BW by dokonaæ FCK/FCJ.", "Zamknij", "");
		    return 1;
		}
		strdel(tekst_global, 0, 2048);
		format(tekst_global, sizeof(tekst_global), "Cia³o %s",ZmianaNicku(playerid2));
		DodajPrzedmiot(DaneGracza[playerid2][gUID], TYP_WLASCICIEL, P_TRUP, 0, 0, tekst_global, DaneGracza[playerid2][gUID], 0, -1, 0, 0, 0, 0, "");
		format(tekst_global, sizeof(tekst_global),"** %s umiera. Wszystkie jego przedmioty, które posiada³ obecnie przy sobie zosta³y przy jego martwym ciele. **",ZmianaNicku(playerid2));
		SendWrappedMessageToPlayerRange(playerid2, KOLOR_DO, tekst_global, 10);
		ForeachEx(i, MAX_PRZEDMIOT)
		{
			if(PrzedmiotInfo[i][pOwner] == DaneGracza[playerid2][gUID] && PrzedmiotInfo[i][pUID] != 0 && PrzedmiotInfo[i][pTypWlas] == TYP_WLASCICIEL)
			{
				if(PrzedmiotInfo[i][pUzywany] != 0)
				{
					PrzedmiotInfo[i][pUzywany] = 0;
				}
	            OdkladanieItemuFCJ(playerid2, i);
			}
		}
		Dodajkase(playerid, DaneGracza[playerid2][gPORTFEL]);
		DaneGracza[playerid2][gAKTYWNE] = 0;
		ZapiszGracza(playerid2);
		DodajDoBazyKare(DaneGracza[playerid2][gGUID], DaneGracza[playerid2][gUID], 13, powod, gettime()+CZAS_LETNI, -1, "NIE", DaneGracza[playerid][gGUID]);
		Kick(playerid2);
	}
	else
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Ten gracz nie nale¿y do ¿adnej grupy co Ty.", "Zamknij", "");
        return 1;
	}
	return 1;
}

stock BreakLines(string[], delimiter[], limit)
{
	new inserts, tempLimit = limit, pos[50], string2[150], lastEmptyPos;
	format(string2, 150, string);

	for(new i; i < strlen(string); i++)
	{
		if( string[i] == ' ' ) lastEmptyPos = i;
		if( string[i] == '~' && string[i+1] == 'n' && string[i+2] == '~' ) tempLimit = i + limit;
		if( i >= tempLimit )
		{
			inserts += 1;
			tempLimit = i + limit;

			pos[inserts-1] = lastEmptyPos + ((inserts-1) * strlen(delimiter));
			if( inserts > 1 ) pos[inserts-1] -= (inserts-1);
		}
	}

	for(new d; d < 50; d++)
	{
		if( pos[d] == 0 ) break;
		strdel(string2, pos[d], pos[d]+1);
		strins(string2, delimiter, pos[d]);
	}

	return _:string2;
}

CMD:opis(playerid, cmdtext[])
{
    if(zalogowany[playerid] == false)
    {
        return 0;
    }
	if(DaneGracza[playerid][gBW] != 0)
	{
		return 0;
	}
	new	comm1[200];
	if(sscanf(cmdtext, "s[200]", comm1))
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby wczytaæ listê u¿ywanych opisów i wybraæ wpisz: /opis lista, by stworzyæ nowy opis wpisz /opis [tekst].", "Zamknij", "");
		return 1;
	}
    if(!strcmp(comm1,"lista",true))
	{
	    ZaladujOpisy();
		new found = 0;
		strdel(tekst_global, 0, 2048);
		format(tekst_global, sizeof(tekst_global), "ID\tOpis gracza");
	    ForeachEx(i, MAX_OPISY)
		{
			if(Opisy[i][opUID] == DaneGracza[playerid][gUID])
			{
				format(tekst_global, sizeof(tekst_global), "%s\n%d\t%s", tekst_global, Opisy[i][opID], Opisy[i][opOpis]);
				found++;
			}
		}
		if(found != 0) dShowPlayerDialog(playerid, DIALOG_OPISY, DIALOG_STYLE_TABLIST_HEADERS, GUIOPIS "Lista opisów:", tekst_global, "Wybierz", "Anuluj");
		else dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Opis postaci", "Nie posiadasz ¿adnego opisu.", "Rozumiem", "");
		return 1;
	}
	else if(!strcmp(comm1,"usun",true))
	{
	    UpdateDynamic3DTextLabelText(DaneGracza[playerid][gOpisPostaci], 0xAAAAFFFF, " ");
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Opis postaci", "Opis postaci zosta³ poprawnie usuniêty.", "Zamknij", "");
		return 1;
	}
	else
	{
	    new text[200], String[256];
		if(sscanf(cmdtext, "s[200]",text))
		{
		    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Opis postaci", "Aby ustawiæ opis swojej postaci wpisz: /opis [treœæ] lub skorzystaj z /opis lista lub /opis usun.", "Zamknij", "");
	 		return 1;
		}
		new text_escaped[200];
		mysql_real_escape_string(text, text_escaped);
		UsunRycieKodu(text);
		if(GraczPremium(playerid))
		{
			A_KOL(text);
	    	A_KOLS(text);
	    }
		format(String, sizeof(String), "%s", text);
	    DestroyDynamic3DTextLabel(Text3D:Opisek[playerid]);
		strdel(tekst_globals, 0, 2048);
		format(tekst_globals, sizeof(tekst_globals), "%s", BreakLines(String, "\n", 32));
		UpdateDynamic3DTextLabelText(DaneGracza[playerid][gOpisPostaci], 0xAAAAFFFF, tekst_globals);
		new string[256];
	    format(string, sizeof(string), "Twój opis zosta³ ustawiony na:\n\n%s", text);
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Opis postaci", string, "Zamknij", "");
		new astr[512];
		format(astr, sizeof(astr), "INSERT INTO `jochym_opisy` (`Opis`, `GUID`, `UID`) VALUES ('%s', '%d', '%d')", text, DaneGracza[playerid][gGUID], DaneGracza[playerid][gUID]);
		mysql_check();
		mysql_query2(astr);
		mysql_free_result();
		return 1;
	}
}
CMD:o(playerid, params[])
{
	//printf("U¿yta komenda o");
    if(zalogowany[playerid] == false)
    {
        return 0;
    }
	if(DaneGracza[playerid][gBW] != 0)
	{
		return 0;
	}
	new	comm1[32], comm2[128];
	if(sscanf(params, "s[32]S()[128]", comm1, comm2))
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby oferowaæ coœ graczu wpisz: /o [rp, dlug, pojazd, teren, wyrejestrowanie, rejestracje, tatuaz, ochrone, blokade, mandat, przejazd, trening, tankowanie, naprawe, dokument, pozwolenie, haracz, paintjob, lakierowanie, wyscig, wywiad, autowypozycz]", "Zamknij", "");
		return 1;
	}
    if(!strcmp(comm1,"rp",true))
	{
	    new typ, war1;
		if(sscanf(comm2, "dd", typ, war1))
		{
            dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby oferowaæ us³ugê RP graczu wpisz: /o rp [id gracza] [cena]", "Zamknij", "");
			return 1;
		}
		if(DaneGracza[playerid][gSluzba] == 0)
		{
		    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie znajdujesz siê na s³uzbie organizacji.", "Zamknij", "");
		    return 1;
		}
		GameTextForPlayer(playerid, "~y~Oferta:~n~~w~Zostala wyslana czekaj na reakcje gracza.", 3000, 5);
		Oferuj(playerid, typ, 0, 0, 0, 0, OFEROWANIE_RP, war1, "", 0);
	}
	if(!strcmp(comm1,"dlug",true))
	{
	    new gracz, kwota, czas, typ[24], powod[256], okres;
		if(sscanf(comm2, "ddds[24]s[256]", gracz, kwota, czas, typ, powod))
		{
            dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby oferowaæ d³ug: /o dlug [id gracza] [kwota] [czas] [typ - d, h, m] [powód]\nPrzyk³ad: /o dlug 0 30 d Na samochod\nTypy: d - dni, h - godzin, m - minut", "Zamknij", "");
			return 1;
		}
		if(czas < 0)
		{
			return 0;
		}
		if(ComparisonString(typ, "m") || ComparisonString(typ, "h") || ComparisonString(typ, "d") || ComparisonString(typ, "M") || ComparisonString(typ, "H") || ComparisonString(typ, "D"))
		{
			if(strlen(powod) < 3 && strlen(powod) > 256)
			{
				dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja:", "Aby oferowaæ d³ug: /o dlug [id gracza] [kwota] [czas] [typ - d, h, m] [powód]\nPrzyk³ad: /o dlug 0 30 d Na samochod\nTypy: d - dni, h - godzin, m - minut", "Zamknij", "");
				return 0;
			}
			if(ComparisonString(typ, "d") || ComparisonString(typ, "D"))
			{
				okres = (gettime()+CZAS_LETNI)+(86400*czas);
			}
			else if(ComparisonString(typ, "m") || ComparisonString(typ, "M"))
			{
				okres = (gettime()+CZAS_LETNI)+(60*czas);
			}
			else if(ComparisonString(typ, "h") || ComparisonString(typ, "H"))
			{
				okres = (gettime()+CZAS_LETNI)+(3600*czas);
			}
			GameTextForPlayer(playerid, "~y~Oferta:~n~~w~Zostala wyslana czekaj na reakcje gracza.", 3000, 5);
			Oferuj(playerid, gracz, 0, 0, okres, 0, OFEROWANIE_DLUG, kwota, powod, 0);
		}
		else
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja:", "Aby oferowaæ d³ug: /o dlug [id gracza] [kwota] [czas] [typ - d, h, m] [powód]\nPrzyk³ad: /o dlug 0 30 d Na samochod\nTypy: d - dni, h - godzin, m - minut", "Zamknij", "");
		}
	}
	new teren = GraczNaTerenie(playerid);
	if(!strcmp(comm1, "teren", true))
	{
		new playerid2, cena;
		if(sscanf(comm2, "id", playerid2, cena))
		{
            dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby oferowaæ teren graczu wpisz: /o teren [id gracza] [cena]", "Zamknij", "");
			return 1;
		}
		if(Lokacja[teren][gOwnerP] == DaneGracza[playerid][gUID])
		{
			if(Lokacja[teren][gOwner] == 0)
			{
				GameTextForPlayer(playerid, "~y~Oferta:~n~~w~Zostala wyslana czekaj na reakcje gracza.", 3000, 5);
				Oferuj(playerid, playerid2, 0, 0, teren, 0, OFEROWANIE_TERENU, cena, "", 0);
			}
			else
			{
				dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby oferowaæ teren graczu odpisz teren spod grupy!", "Zamknij", "");
				return 1;
			}
		}
		else
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie jesteœ w³aœcicielem tego terenu!", "Zamknij", "");
			return 1;
		}
	}
	new vehicleid = GetPlayerVehicleID(playerid);
	new uid = SprawdzCarUID(vehicleid);
	if(!strcmp(comm1,"pojazd",true))
	{
	    new typ, war1;
		if(sscanf(comm2, "dd", typ, war1))
		{
            dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby oferowaæ pojazd graczu wpisz: /o pojazd [id gracza] [cena]", "Zamknij", "");
			return 1;
		}
		if(!IsPlayerInAnyVehicle(playerid))
	    {
	        dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby oferowaæ pojazd musisz siê w nim znajdowaæ.", "Zamknij", "");
	        return 0;
	    }
		if(PojazdInfo[uid][pOwnerDzialalnosc] != 0 || PojazdInfo[uid][pOwnerPostac] != DaneGracza[playerid][gUID])
		{
		    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Pojazd, który chcesz sprzedaæ musi nale¿eæ do Ciebie.", "Zamknij", "");
		    return 0;
		}
		if(PojazdInfo[uid][pAukcja] != 0)
		{
			GameTextForPlayer(playerid, "~r~Ten pojazd jest wystawiony na aukcji.", 3000, 5);
			return 0;
		}
		GameTextForPlayer(playerid, "~y~Oferta:~n~~w~Zostala wyslana czekaj na reakcje gracza.", 3000, 5);
		Oferuj(playerid, typ, 0, 0, uid, 0, OFEROWANIE_POJAZDU, war1, "", 0);
	}
	if(!strcmp(comm1,"wyrejestrowanie",true))
	{
		new vw = GetPlayerVirtualWorld(playerid);
		new uids = GetPlayerVirtualWorld(playerid);
		if(vw == 0)
		{
			return 0;
		}
		if(!ZarzadzanieDokumentami(playerid) && GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_RZADOWA)
		{
			GameTextForPlayer(playerid, "~r~Brak uprawnien, badz nie jestes na sluzbie dzialalnosci.", 3000, 5);
			return 0;
		}
	    new uida, playerid2;
		if(sscanf(comm2, "dd", uida, playerid2))
		{
            dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby oferowaæ wyrejestrowanie pojazdu wpisz: /o tablice [uid pojazdu] [id gracza]", "Zamknij", "");
			return 1;
		}
		if(playerid == playerid2) return 0;
		if(!PlayerObokPlayera(playerid, playerid2, 3))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz oferowaæ tablice jest zbyt daleko od ciebie.", "Zamknij", "");
			return 1;
		}
		if(zalogowany[playerid2] == false)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz oferowaæ tablice jest zbyt daleko od ciebie.", "Zamknij", "");
			return 0;
		}
		if(GrupaInfo[BudynekInfo[uids][nWlascicielD]][gTyp] != DZIALALNOSC_RZADOWA)
		{
			GameTextForPlayer(playerid, "~r~Brak uprawnien, badz nie jestes w budynku dzialalnosci.", 3000, 5);
			return 0;
		}
		if(!WlascicielpojazduUID(uida, playerid2))
		{
			GameTextForPlayer(playerid, "~r~Ten gracz nie posiada uprawnien do tego pojazdu!", 3000, 5);
			return 0;
		}
		if(PojazdInfo[uida][pTablicaON] == 0)
		{
			GameTextForPlayer(playerid, "~r~Ten pojazd nie posiada tablic!", 3000, 5);
			return 0;
		}
		Oferuj(playerid, playerid2, uida, DaneGracza[playerid][gSluzba], 0, 0, OFEROWANIE_WYREJ, 50,"", 0);
	}
	if(!strcmp(comm1,"rejestracje",true))
	{
		new vw = GetPlayerVirtualWorld(playerid);
		new uidsb = GetPlayerVirtualWorld(playerid);
		if(vw == 0)
		{
			return 0;
		}
		if(!ZarzadzanieDokumentami(playerid) && GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_RZADOWA)
		{
			GameTextForPlayer(playerid, "~r~Brak uprawnien, badz nie jestes na sluzbie dzialalnosci.", 3000, 5);
			return 0;
		}
	    new uids, playerid2;
		if(sscanf(comm2, "dd", uids, playerid2))
		{
            dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby oferowaæ tablice graczu wpisz: /o rejestracje [uid pojazdu] [id gracza]", "Zamknij", "");
			return 1;
		}
		if(playerid == playerid2) return 0;
		if(!PlayerObokPlayera(playerid, playerid2, 3))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz oferowaæ tablice jest zbyt daleko od ciebie.", "Zamknij", "");
			return 1;
		}
		if(zalogowany[playerid2] == false)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz oferowaæ tablice jest zbyt daleko od ciebie.", "Zamknij", "");
			return 0;
		}
		if(GrupaInfo[BudynekInfo[uidsb][nWlascicielD]][gTyp] != DZIALALNOSC_RZADOWA)
		{
			GameTextForPlayer(playerid, "~r~Brak uprawnien, badz nie jestes w budynku dzialalnosci.", 3000, 5);
			return 0;
		}
		if(!WlascicielpojazduUID(uids, playerid2))
		{
			GameTextForPlayer(playerid, "~r~Ten gracz nie posiada uprawnien do tego pojazdu!", 3000, 5);
			return 0;
		}
		if(PojazdInfo[uids][pTablicaON] != 0)
		{
			GameTextForPlayer(playerid, "~r~Ten pojazd posiada tablice badz zostaly juz wydane!", 3000, 5);
			return 0;
		}
		Oferuj(playerid, playerid2, uids, DaneGracza[playerid][gSluzba], 0, 0, OFEROWANIE_TABLIC, 200,"", 0);
	}
	if(!strcmp(comm1,"tatuaz",true))
	{
	    new vw = GetPlayerVirtualWorld(playerid);
	    new uids = GetPlayerVirtualWorld(playerid);
	    if(zalogowany[playerid] == false)
	    {
	        return 0;
	    }
		if(DaneGracza[playerid][gBW] != 0)
		{
			return 0;
		}
		if(vw == 0)
		{
		    return 0;
		}
		new id, cena;
		if(sscanf(comm2, "id", id, cena))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby zaoferowaæ tatua¿ graczu: /o tatuaz [id gracza] [cena]", "Zamknij", "");
			return 1;
		}
		if(playerid == id) return 0;
		if(GrupaInfo[BudynekInfo[uids][nWlascicielD]][gTyp] != DZIALALNOSC_TATUAZ)
		{
			GameTextForPlayer(playerid, "~r~Brak uprawnien, badz nie jestes w budynku dzialalnosci.", 3000, 5);
			return 0;
		}
		if(cena < 100)
		{
		    GameTextForPlayer(playerid, "~r~Tatuaz musi kosztowac wiecej niz 100$!", 3000, 5);
			return 0;
		}
		if(!PlayerObokPlayera(playerid, id, 5))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz oferowaæ tatua¿ jest zbyt daleko od ciebie.", "Zamknij", "");
			return 1;
		}
		Oferuj(playerid, id, vw, GrupaInfo[DaneGracza[playerid][gSluzba]][gUID], DaneGracza[playerid][gSluzba], 0, OFEROWANIE_TATUAZU, cena, "Tatuaz", 0);
	}
	if(!strcmp(comm1,"haracz",true))
	{
	    new vw = GetPlayerVirtualWorld(playerid);
	    if(zalogowany[playerid] == false)
	    {
	        return 0;
	    }
		if(DaneGracza[playerid][gBW] != 0)
		{
			return 0;
		}
		if(vw == 0)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Haracze", "Musisz znajdowaæ siê w lokalu z którego chcesz sci¹gaæ haracz.", "Zamknij", "");
			return 1;
		}
		new id, cena;
		if(sscanf(comm2, "id", id, cena))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby wymusiæ haracz w lokalu od w³aœciciela wpisz: /o haracz [id gracza] [cena]", "Zamknij", "");
			return 1;
		}
		if(playerid == id) return 0;
		if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_ZMOTORYZOWANA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_MAFIE || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_GANGI)
		{
		    //nale¿y
		}
		else
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Haracze", "By oferowaæ w³aœcicielowi lokalu haracz, musisz znajdowaæ siê na s³u¿bie organizacji.", "Zamknij", "");
			return 1;
		}
		if(cena < 0)
		{
		    GameTextForPlayer(playerid, "~r~Haracz musi byæ wiêkszy od zera.", 3000, 5);
			return 0;
		}
		if(!PlayerObokPlayera(playerid, id, 5))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz oferowaæ haracz jest zbyt daleko od ciebie.", "Zamknij", "");
			return 1;
		}
		Oferuj(playerid, id, vw, GrupaInfo[DaneGracza[playerid][gSluzba]][gUID], DaneGracza[playerid][gSluzba], 1, OFEROWANIE_HARACZU, cena, "Haracz", 0);
	}
	if(!strcmp(comm1,"naprawe",true))
	{
	    if(zalogowany[playerid] == false)
	    {
	        return 0;
	    }
		if(DaneGracza[playerid][gBW] != 0)
		{
			return 0;
		}
		new id, cena;
		if(sscanf(comm2, "id", id, cena))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby oferowaæ naprawe silnika w pojezdzie wpisz: /o naprawe [id gracza] [cena]", "Zamknij", "");
			return 1;
		}
		if(playerid == id) return 0;
		if(cena < 0)
		{
		    GameTextForPlayer(playerid, "~r~Kwota musi byc wieksza od zera.", 3000, 5);
			return 0;
		}
		if(!PlayerObokPlayera(playerid, id, 5))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz naprawiæ pojazd jest zbyt daleko od ciebie.", "Zamknij", "");
			return 1;
		}
		if(!IsPlayerInAnyVehicle(id))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz naprawiæ pojazd nie znajduje sie w pojezdzie.", "Zamknij", "");
			return 0;
		}
		new vw = GetPlayerVirtualWorld(playerid);
		if(NaprawiaCzas[playerid] != 0)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aktualnie naprawiasz ju¿ jakiœ pojazd.", "Zamknij", "");
			return 0;
		}
		if(!Wlascicielpojazdu(GetPlayerVehicleID(id), id))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja :", "Ten gracz nie jest w³aœcicielem tego pojazdu.", "Zamknij", "");
			return 0;
		}
		new vehids = GetPlayerVehicleID(id);
		new uipd = SprawdzCarUID(vehids);
		NaprawianieCena[playerid] = cena;
		new Float:HvP;
		GetVehicleHealth(vehids, HvP);
		NaprawiaID[playerid] = id;
		NaprawiaVeh[playerid] = vehids;
		SetPVarInt(id, "NaprawiaPojazdSobie", vehids);
		new calkowita = cena + (1000 - floatround(HvP));
		if(vw == 0)
		{
			if(PojazdInfo[uipd][pStan] >= 400 && GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] != DZIALALNOSC_POLICYJNA)
			{
				dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Ten pojazd nie wymaga naprawy poza budynkiem warsztatu.", "Zamknij", "");
				return 0;
			}
			if(PojazdInfo[uipd][pStan] == 1000)
			{
				dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Ten pojazd nie wymaga naprawy silnika.", "Zamknij", "");
				return 0;
			}
			Oferuj(playerid, id, vw, vehids, DaneGracza[playerid][gSluzba], 1, OFEROWANIE_NAP_ENG, calkowita, "Naprawa Silnika", 0);
			return 0;
		}
		else
		{
		    Oferuj(playerid, id, vw, vehids, DaneGracza[playerid][gSluzba], 1, OFEROWANIE_NAP_ENG, calkowita, "Naprawa Silnika", 0);
		}
		return 1;
	}
	if(!strcmp(comm1,"oplate",true))
	{
		new vw = GetPlayerVirtualWorld(playerid);
		new uidsa = GetPlayerVirtualWorld(playerid);
		if(vw == 0)
		{
		    GameTextForPlayer(playerid, "~r~Brak uprawnien, badz nie jestes w budynku dzialalnosci.", 3000, 5);
			return 0;
		}
  		if(!ZarzadzanieDokumentami(playerid) && GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_RZADOWA)
		{
			GameTextForPlayer(playerid, "~r~Brak uprawnien, badz nie jestes na sluzbie dzialalnosci.", 3000, 5);
			return 0;
		}
	    new uids, playerid2;
		if(sscanf(comm2, "dd", uids, playerid2))
		{
            dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby oferowaæ op³ate budynku graczu wpisz: /o oplate [uid budynku] [id gracza]", "Zamknij", "");
			return 1;
		}
		if(playerid == playerid2) return 0;
		if(!PlayerObokPlayera(playerid, playerid2, 3))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz oferowaæ op³ate budynku jest zbyt daleko od ciebie.", "Zamknij", "");
			return 1;
		}
		if(zalogowany[playerid2] == false)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz oferowaæ op³ate budynku jest zbyt daleko od ciebie.", "Zamknij", "");
			return 0;
		}
		if(GrupaInfo[BudynekInfo[uidsa][nWlascicielD]][gTyp] != DZIALALNOSC_RZADOWA)
		{
			GameTextForPlayer(playerid, "~r~Brak uprawnien, badz nie jestes w budynku dzialalnosci.", 3000, 5);
			return 0;
		}
		if(!OtwieranieBudynku(uids, playerid2))
		{
			GameTextForPlayer(playerid, "~r~Ten gracz nie posiada uprawnien do tego budynku!", 3000, 5);
			return 0;
		}
		Oferuj(playerid, playerid2, uids, DaneGracza[playerid][gSluzba], 0, 0, OFEROWANIE_OPLATY, 200,"", 0);
	}
	/*if(!strcmp(comm1,"grupa",true))
	{
		new vw = GetPlayerVirtualWorld(playerid);
		if(vw == 0)
		{
			return 0;
		}
		if(GrupaInfo[DaneGracza[playerid][gSluzba]][gOwnerUID] != DaneGracza[playerid][gUID])
		{
			GameTextForPlayer(playerid, "~r~Brak uprawnien, badz nie jestes na sluzbie dzialalnosci.", 3000, 5);
			return 0;
		}
	    new playerid2;
		strdel(tekst_global, 0, 200);
		if(sscanf(comm2, "ds[1024]", playerid2, tekst_global))
		{
            dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby oferowaæ firmê graczu wpisz: /o grupa [id gracza] [nazwa]", "Zamknij", "");
			return 1;
		}
		if(strlen(tekst_global) > 20 || strlen(tekst_global) < 3)
		{
			GameTextForPlayer(playerid, "~r~Podana nazwa musi miec od 3 do 20 znakow.", 3000, 5);
			return 0;
		}
		if(playerid == playerid2) return 0;
		if(!PlayerObokPlayera(playerid, playerid2, 3))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz oferowaæ grupe jest zbyt daleko od ciebie.", "Zamknij", "");
			return 1;
		}
		if(zalogowany[playerid2] == false)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz oferowaæ grupe jest zbyt daleko od ciebie.", "Zamknij", "");
			return 0;
		}
		if(GrupaInfo[BudynekInfo[vw][nWlascicielD]][gTyp] != DZIALALNOSC_RZADOWA)
		{
			GameTextForPlayer(playerid, "~r~Brak uprawnien, badz nie jestes w budynku grupy.", 3000, 5);
			return 0;
		}
		if((GraczPremium(playerid) && DaneGracza[playerid2][gDzialalnosc1] != 0 && DaneGracza[playerid2][gDzialalnosc2] != 0 && DaneGracza[playerid2][gDzialalnosc3] != 0 && DaneGracza[playerid2][gDzialalnosc4] != 0 && DaneGracza[playerid2][gDzialalnosc5] != 0 && DaneGracza[playerid2][gDzialalnosc6] != 0) || (!GraczPremium(playerid) && DaneGracza[playerid2][gDzialalnosc1] != 0 && DaneGracza[playerid2][gDzialalnosc2] != 0 && DaneGracza[playerid2][gDzialalnosc3] != 0))
		{
			GameTextForPlayer(playerid, "~r~Ten gracz ma zajete wszystkie sloty.", 3000, 5);
			return 1;
		}
		else
		{
			SetPVarInt(playerid, "IDDZGR", playerid2);
			SetPVarString(playerid, "NAZWADZST", tekst_global);
			dShowPlayerDialog(playerid, DIALOG_STWORZ_DZ, DIALOG_STYLE_LIST, GUIOPIS "Informacja", "»  Warsztat\n»  24/7\n»  Elektryka\n»  Gastronomia\n»  Hotel\n»  Taxi\n»  Si³ownia\n»  Radio\n»  Sieæ telefonów\n»  Strzelnica\n» Ammunation", "Wybierz", "Zamknij");
			return 1;
		}
	}*/
	if(!strcmp(comm1,"pozwolenie",true))
	{
	    if(!ZarzadzanieKartoteka(playerid) && GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_POLICYJNA)
		{
			GameTextForPlayer(playerid, "~r~Brak uprawnien, badz nie jestes na sluzbie organizacji.", 3000, 5);
			return 0;
		}
		new typ[124], playerid2, cena;
		new vw = GetPlayerVirtualWorld(playerid);
		new uids = GetPlayerVirtualWorld(playerid);
		if(sscanf(comm2, "s[124]dd", typ, playerid2, cena))
		{
            dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby oferowaæ graczu pozwolenie na broñ wpisz: /o pozwolenie [bron] [id gracza] [cena]", "Zamknij", "");
			return 1;
		}
		//if(playerid == playerid2) return 0;
		strtolower(typ);
		if(ComparisonString(typ, "bron"))
		{
			if(!PlayerObokPlayera(playerid, playerid2, 3))
			{
				dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz oferowaæ pozwolenie jest zbyt daleko od ciebie.", "Zamknij", "");
				return 1;
			}
			if(zalogowany[playerid2] == false)
			{
				dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz oferowaæ pozwolenie jest zbyt daleko od ciebie.", "Zamknij", "");
				return 0;
			}
			if(vw == 0)
			{
			    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie mo¿esz wydaæ pozwolenia na broñ poza budynkiem, tylko w Centrali, udaj siê na komisariat.", "Zamknij", "");
				return 0;
			}
			if(ComparisonString(typ, "bron"))
			{
				if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_POLICYJNA)
				{
					if(GrupaInfo[BudynekInfo[uids][nWlascicielD]][gTyp] != DZIALALNOSC_POLICYJNA)
					{
						GameTextForPlayer(playerid, "~r~Brak uprawnien, badz nie jestes w budynku dzialalnosci.", 3000, 5);
						return 0;
					}
					Oferuj(playerid, playerid2, 0, DaneGracza[playerid][gSluzba], 0, 0, OFEROWANIE_REJBRONI, cena,"", 0);
				}
			}
		}
		else
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby oferowaæ pozwolenie graczu wpisz: /o pozwolenie [bron] [id gracza] [cena]", "Zamknij", "");
		}
	}
	if(!strcmp(comm1,"dokument",true))
	{
		new vw = GetPlayerVirtualWorld(playerid);
		if(vw == 0)
		{
			return 0;
		}
  		if(!ZarzadzanieDokumentami(playerid) && GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_POLICYJNA || !ZarzadzanieDokumentami(playerid) && GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_RZADOWA)
		{
			GameTextForPlayer(playerid, "~r~Brak uprawnien, badz nie jestes na sluzbie dzialalnosci.", 3000, 5);
			return 0;
		}
	    new typ[124], playerid2;
		if(sscanf(comm2, "s[124]d", typ, playerid2))
		{
            dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby oferowaæ dokument graczu wpisz: /o dokument [prawkoa, prawkob, broni, niekaralnosci, niepoczytalnosci, wedkarska] [id gracza]", "Zamknij", "");
			return 1;
		}
		if(playerid == playerid2) return 0;
		strtolower(typ);
		if(ComparisonString(typ, "dowod") || ComparisonString(typ, "prawkoa") || ComparisonString(typ, "prawkob") || ComparisonString(typ, "broni") || ComparisonString(typ, "niekaralnosci") || ComparisonString(typ, "niepoczytalnosci") || ComparisonString(typ, "wedkarska"))
		{
			if(!PlayerObokPlayera(playerid, playerid2, 3))
			{
				dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz oferowaæ dokument jest zbyt daleko od ciebie.", "Zamknij", "");
				return 1;
			}
			if(zalogowany[playerid2] == false)
			{
				dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz oferowaæ dokument jest zbyt daleko od ciebie.", "Zamknij", "");
				return 0;
			}
			if(ComparisonString(typ, "prawko"))
			{
				if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_RZADOWA)
				{
					if(GrupaInfo[BudynekInfo[vw][nWlascicielD]][gTyp] != DZIALALNOSC_RZADOWA)
					{
						GameTextForPlayer(playerid, "~r~Brak uprawnien, badz nie jestes w budynku dzialalnosci.", 3000, 5);
						return 0;
					}
					if(Dokument(playerid2, D_PRAWKO_A))
					{
						GameTextForPlayer(playerid, "~r~Ten gracz posiada juz taki dokument.", 3000, 5);
						return 0;
					}
					Oferuj(playerid, playerid2, D_PRAWKO_A, DaneGracza[playerid][gSluzba], 0, 0, OFEROWANIE_DOKUMENTU, 150,"", 0);
				}
			}
			else if(ComparisonString(typ, "dowod"))
			{
				if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_RZADOWA)
				{
					if(GrupaInfo[BudynekInfo[vw][nWlascicielD]][gTyp] != DZIALALNOSC_RZADOWA)
					{
						GameTextForPlayer(playerid, "~r~Brak uprawnien, badz nie jestes w budynku dzialalnosci.", 3000, 5);
						return 0;
					}
					if(Dokument(playerid2, D_DOWOD))
					{
						GameTextForPlayer(playerid, "~r~Ten gracz posiada juz taki dokument.", 3000, 5);
						return 0;
					}
					Oferuj(playerid, playerid2, D_DOWOD, DaneGracza[playerid][gSluzba], 0, 0, OFEROWANIE_DOKUMENTU, 50,"", 0);
				}
			}
			else if(ComparisonString(typ, "wedkarska"))
			{
				if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_RZADOWA)
				{
					if(GrupaInfo[BudynekInfo[vw][nWlascicielD]][gTyp] != DZIALALNOSC_RZADOWA)
					{
						GameTextForPlayer(playerid, "~r~Brak uprawnien, badz nie jestes w budynku dzialalnosci.", 3000, 5);
						return 0;
					}
					if(Dokument(playerid2, D_WEDKARSKA))
					{
						GameTextForPlayer(playerid, "~r~Ten gracz posiada juz taki dokument.", 3000, 5);
						return 0;
					}
					Oferuj(playerid, playerid2, D_WEDKARSKA, DaneGracza[playerid][gSluzba], 0, 0, OFEROWANIE_DOKUMENTU, 100,"", 0);
				}
			}
			else if(ComparisonString(typ, "niekaralnosci"))
			{
				if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_POLICYJNA)
				{
					if(GrupaInfo[BudynekInfo[vw][nWlascicielD]][gTyp] != DZIALALNOSC_POLICYJNA)
					{
						GameTextForPlayer(playerid, "~r~Brak uprawnien, badz nie jestes w budynku dzialalnosci.", 3000, 5);
						return 0;
					}
					if(Dokument(playerid2, D_NIEKARALNOSC))
					{
						GameTextForPlayer(playerid, "~r~Ten gracz posiada juz taki dokument.", 3000, 5);
						return 0;
					}
					Oferuj(playerid, playerid2, D_NIEKARALNOSC, DaneGracza[playerid][gSluzba], 0, 0, OFEROWANIE_DOKUMENTU, 500,"", 0);
				}
			}
			else if(ComparisonString(typ, "niepoczytalnosci"))
			{
				if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_MEDYCZNA)
				{
					if(GrupaInfo[BudynekInfo[vw][nWlascicielD]][gTyp] != DZIALALNOSC_MEDYCZNA)
					{
						GameTextForPlayer(playerid, "~r~Brak uprawnien, badz nie jestes w budynku dzialalnosci.", 3000, 5);
						return 0;
					}
					if(Dokument(playerid2, D_NIEPOCZYTALNOSC))
					{
						GameTextForPlayer(playerid, "~r~Ten gracz posiada juz taki dokument.", 3000, 5);
						return 0;
					}
					Oferuj(playerid, playerid2, D_NIEPOCZYTALNOSC, DaneGracza[playerid][gSluzba], 0, 0, OFEROWANIE_DOKUMENTU, 400,"", 0);
				}
			}
		}
		else
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby oferowaæ dokument graczu wpisz: /o dokument [prawkoa, prawkob, broni, niekaralnosci, niepoczytalnosci, wedkarska] [id gracza]", "Zamknij", "");
		}
	}
	if(!strcmp(comm1,"ochrone",true))
	{
	    new war1, war2;
		new vw = GetPlayerVirtualWorld(playerid);
		new uids = GetPlayerVirtualWorld(playerid);
		if(vw == 0)
		{
		    GameTextForPlayer(playerid, "~r~Nie znajdujesz sie w budynku.", 3000, 5);
			return 0;
		}
	    new playerid2;
	    if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] != DZIALALNOSC_WYPOZYCZALNIA)
	 	{
	 	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie jesteœ na s³u¿bie ochrony lub nie posiadasz uprawnieñ.", "Zamknij", "");
			return 1;
	 	}
		if(sscanf(comm2, "ddd", playerid2, war1, war2))
		{
            dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby oferowaæ ochronê budynku graczu wpisz: /o ochrone [id gracza] [cena] [czas pracy]", "Zamknij", "");
			return 1;
		}
		if(playerid == playerid2) return 0;
		if(!PlayerObokPlayera(playerid, playerid2, 3))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz oferowaæ ochronê budynku, jest zbyt daleko od ciebie.", "Zamknij", "");
			return 1;
		}
		if(!OtwieranieBudynku(uids, playerid2))
		{
			GameTextForPlayer(playerid, "~r~Ten gracz nie posiada uprawnien do tego budynku!", 3000, 5);
			return 0;
		}
		Oferuj(playerid, playerid2, DaneGracza[playerid][gSluzba], 0, war2, GetPlayerVirtualWorld(playerid), OFEROWANIE_OCHRONY, war1, "", 0);
	}
	else if(!strcmp(comm1,"przejazd",true))
	{
		new playerid2,cena;
		if(sscanf(comm2, "ii", playerid2, cena))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby oferowaæ przejazd taksówk¹ graczu wpisz: /o przejazd [id gracza] [cena]", "Zamknij", "");
		    return 1;
		}
		if(!IsPlayerInAnyVehicle(playerid))
	    {
	        dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby oferowaæ przejazd taksówk¹ musisz siê w nim znajdowaæ.", "Zamknij", "");
	        return 0;
	    }
		if(GetPlayerState(playerid)!=PLAYER_STATE_DRIVER)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby oferowaæ przejazd taksówk¹ musisz siê znajdowaæ za kierownic¹.", "Zamknij", "");
	        return 0;
	    }
		new vehids = GetPlayerVehicleID(playerid);
		new uipd = SprawdzCarUID(vehids);
		if(GrupaInfo[PojazdInfo[uipd][pOwnerDzialalnosc]][gTyp] != DZIALALNOSC_TAXI)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Ten pojazd nie nale¿y do grupy taksówkarskiej.", "Zamknij", "");
			return 0;
		}
		if(DaneGracza[playerid][gSluzba] == 0)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby skokorzystaæ z tej komendy musisz wejœæ na s³u¿be grupy.", "Zamknij", "");
			return 0;
		}
		new uidg = DaneGracza[playerid][gSluzba];
		if(GrupaInfo[uidg][gTyp] != DZIALALNOSC_TAXI)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby skokorzystaæ z tej komendy musisz wejœæ na s³u¿be grupy.", "Zamknij", "");
			return 0;
		}
		if(!IsPlayerInAnyVehicle(playerid2))
	    {
	        dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby oferowaæ przejazd taksówk¹ musisz siê w nim znajdowaæ.", "Zamknij", "");
	        return 0;
	    }
		if(GetPlayerState(playerid2)!=PLAYER_STATE_PASSENGER)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby oferowaæ przejazd taksówk¹ musisz siê znajdowaæ za kierownic¹.", "Zamknij", "");
	        return 0;
	    }
		if(!PlayerObokPlayera(playerid, playerid2, 3))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz oferowaæ przejazd taksówk¹ nie znajduje siê obok ciebie.", "Zamknij", "");
			return 0;
		}
		if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(playerid2))
		{
			return 0;
		}
		Oferuj(playerid, playerid2, vehids, uidg, uipd, 0, OFEROWANIE_TAXI, cena, "", 0);
		return 1;
	}
	else if(!strcmp(comm1,"area",true))
	{
		new playerid2,cena;
		if(sscanf(comm2, "ii", playerid2, cena))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby oferowaæ strefê graczu wpisz: /o area [id gracza] [cena]", "Zamknij", "");
		    return 1;
		}
		if(!PlayerObokPlayera(playerid, playerid2, 3))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz oferowaæ przejazd taksówk¹ nie znajduje siê obok ciebie.", "Zamknij", "");
			return 0;
		}
	 	new uidst = GraczNaTerenie(playerid);
		if(Lokacja[uidst][gOwnerP] == DaneGracza[playerid][gUID])
		{
			Oferuj(playerid, playerid2, 0, 0, 0, 0, OFEROWANIE_STREFY, cena, "", 0);
		}
		else
		{
		    format(tekst_global, sizeof(tekst_global), "Strefa (%d)\nTa strefa nie nale¿y do Ciebie nie mo¿esz jej oferowaæ graczu.", Lokacja[uidst][gUID]);
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", tekst_global, "Zamknij", "");
		}
		return 1;
	}
	else if(!strcmp(comm1,"autowypozycz",true))
	{
		new typ, war1;
		if(sscanf(comm2, "dd", typ, war1))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby wypo¿yczyæ pojazd graczu wpisz: /o autowypozycz [id gracza] [czas (1-60 min)]", "Zamknij", "");
			return 1;
		}
		if(!IsPlayerInAnyVehicle(playerid))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby wypo¿yczyæ pojazd musisz siê w nim znajdowaæ.", "Zamknij", "");
			return 0;
		}
		if(PojazdInfo[uid][pOwnerPostac] != 0 && PojazdInfo[uid][pOwnerPostac] != DaneGracza[playerid][gUID])
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Pojazd, który chcesz wypo¿yczyæ musi nale¿eæ do Ciebie.", "Zamknij", "");
			return 0;
		}
		if(PojazdInfo[uid][pOwnerPostac] != 0 && PojazdInfo[uid][pOwnerPostac] == DaneGracza[playerid][gUID])
		{
			GameTextForPlayer(playerid, "~y~Oferta:~n~~w~Zostala wyslana czekaj na reakcje gracza.", 3000, 5);
			Oferuj(playerid, typ, 0, 0, uid, 0, OFEROWANIE_WYPOZYCZENIE, war1, "", 0);
			return 0;
		}
	}
	else if(!strcmp(comm1,"paintjob",true))
	{
	    new playerid2, kolor1, cena;
		if(sscanf(comm2, "idd", playerid2, kolor1, cena))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby oferowaæ paintjob graczu wpisz: /o paintjob [id gracza] [0-3] [cena]", "Zamknij", "");
			return 1;
		}
		if(kolor1 > 3 || kolor1 < 0) return 0;
		new vw = GetPlayerVirtualWorld(playerid);
		new uids = GetPlayerVirtualWorld(playerid);
		if(vw == 0)
		{
			return 0;
		}
		if(BudynekInfo[uids][nWlascicielP] != 0 && BudynekInfo[uids][nWlascicielD] == 0)
		{
			GameTextForPlayer(playerid, "~r~Brak uprawnien.", 3000, 5);
			return 0;
		}
		if(DaneGracza[playerid][gBW] != 0)
		{
			return 0;
		}
		if(!MontazItemow(playerid, uids))
		{
			GameTextForPlayer(playerid, "~r~Brak uprawnien.", 3000, 5);
			return 0;
		}
		if(!GraczaMaTypPrzedmiotuWu(playerid, 1, 41))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby oferowaæ graczu lakierowanie pojazdu musisz trzymaæ w rêce opryskiwacz.", "Zamknij", "");
			return 0;
		}
		if(NaprawiaCzas[playerid] != 0)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aktualnie naprawiasz ju¿ jakiœ pojazd.", "Zamknij", "");
			return 0;
		}
		if(LakierujeCzas[playerid] != 0)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aktualnie lakierujesz ju¿ jakiœ pojazd.", "Zamknij", "");
			return 0;
		}
		if(!PlayerObokPlayera(playerid, playerid2, 3))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz oferowaæ malowanie pojazdu nie znajduje siê obok ciebie.", "Zamknij", "");
			return 0;
		}
		if(!IsPlayerInAnyVehicle(playerid2))
		{
		    return 0;
		}
		if(!Wlascicielpojazdu(GetPlayerVehicleID(playerid2), playerid2))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja :", "Ten gracz nie jest w³aœcicielem tego pojazdu.", "Zamknij", "");
			return 0;
		}
		new uidss = SprawdzCarUID(GetPlayerVehicleID(playerid2));
		Oferuj(playerid, playerid2, DaneGracza[playerid][gSluzba], GetPlayerVehicleID(playerid2), kolor1, 0, OFEROWANIE_PJ, cena, "", uidss);
		return 1;
	}
	else if(!strcmp(comm1,"lakierowanie",true))
	{
	    new playerid2, kolor1, kolor2, cena;
		if(sscanf(comm2, "iddd", playerid2, kolor1, kolor2, cena))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby oferowaæ lakierowanie graczu wpisz: /o lakierowanie [id gracza] [kolor 1] [kolor 2] [cena]", "Zamknij", "");
			return 1;
		}
		if(DaneGracza[playerid][gBW] != 0)
		{
			return 0;
		}
		if(!GraczaMaTypPrzedmiotuWu(playerid, 1, 41))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby oferowaæ graczu lakierowanie pojazdu musisz trzymaæ w rêce opryskiwacz.", "Zamknij", "");
			return 0;
		}
		if(NaprawiaCzas[playerid] != 0)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aktualnie naprawiasz ju¿ jakiœ pojazd.", "Zamknij", "");
			return 0;
		}
		if(LakierujeCzas[playerid] != 0)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aktualnie lakierujesz ju¿ jakiœ pojazd.", "Zamknij", "");
			return 0;
		}
		if(!PlayerObokPlayera(playerid, playerid2, 3))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz oferowaæ malowanie pojazdu nie znajduje siê obok ciebie.", "Zamknij", "");
			return 0;
		}
		if(!IsPlayerInAnyVehicle(playerid2))
		{
		    return 0;
		}
		if(!Wlascicielpojazdu(GetPlayerVehicleID(playerid2), playerid2))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Ten gracz nie jest w³aœcicielem tego pojazdu.", "Zamknij", "");
			return 0;
		}
		new uidss = SprawdzCarUID(GetPlayerVehicleID(playerid2));
		Oferuj(playerid, playerid2, DaneGracza[playerid][gSluzba], GetPlayerVehicleID(playerid2), kolor1, kolor2, OFEROWANIE_LAKIEROWANIA, cena, "", uidss);
		return 1;
	}///amt 0 100 Mistral 74 0 0xFF88b711 0 1 (220022)Jochym*(000000)Boxton*Crips
	else if(!strcmp(comm1,"mandat",true))
	{
		if(DaneGracza[playerid][gSluzba] == 0)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie jesteœ na s³u¿bie odpowiedniej grupy!", "Zamknij", "");
			return 0;
		}
		if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] != DZIALALNOSC_POLICYJNA)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie jesteœ na s³u¿bie odpowiedniej grupy!", "Zamknij", "");
			return 0;
		}
	    new id, cena, pkt, powod[256];
		if(sscanf(comm2, "ddds[256]", id, cena, pkt, powod))
		{
            dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby oferowaæ graczu mandat wpisz: /o mandat [id gracza] [cena] [pkt karne] [powód]", "Zamknij", "");
			return 1;
		}
		if(cena <= 0) return 1;
		if(pkt < 0) return 1;
		if(playerid == id) return 1;
		if(!PlayerObokPlayera(playerid, id, 3))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz oferowaæ mandat nie znajduje siê obok ciebie.", "Zamknij", "");
			return 1;
		}
		if(zalogowany[id] == false)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz oferowaæ mandat nie jest zalogowany.", "Zamknij", "");
			return 0;
		}
		Oferuj(playerid, id, DaneGracza[playerid][gSluzba], pkt, gettime()+CZAS_LETNI, 0, OFEROWANIE_MANDATU, cena, powod, 0);
		Transakcja(T_OMANDAT, DaneGracza[playerid][gUID], DaneGracza[id][gUID], DaneGracza[playerid][gGUID], DaneGracza[id][gGUID], cena, pkt, -1, -1, powod, gettime()+KOREKTA_CZASOWA);
	}
	else if(!strcmp(comm1,"blokade",true))
	{
		if(!ZarzadzanieBlokadaKola(playerid) && GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] != DZIALALNOSC_POLICYJNA)
		{
			return 0;
		}
		if(DaneGracza[playerid][gSluzba] == 0)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie jesteœ na s³u¿bie odpowiedniej organizacji!", "Zamknij", "");
			return 0;
		}
		if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] != DZIALALNOSC_POLICYJNA)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie jesteœ na s³u¿bie odpowiedniej organizacji!", "Zamknij", "");
			return 0;
		}
	    new id;
		if(sscanf(comm2, "d", id))
		{
            dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby oferowaæ graczu zdjêcie blokady wpisz: /o blokade [id gracza]", "Zamknij", "");
			return 1;
		}
		if(playerid == id) return 1;
		if(!PlayerObokPlayera(playerid, id, 3))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz oferowaæ zdjêcie blokady nie znajduje siê obok ciebie.", "Zamknij", "");
			return 1;
		}
		if(!IsPlayerInAnyVehicle(id))
	    {
	        dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz oferowaæ zdjêcie blokady nie znajduje siê w pojezdzie..", "Zamknij", "");
	        return 0;
	    }
		if(!Wlascicielpojazdu(GetPlayerVehicleID(id), id))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Ten gracz nie jest w³aœcicielem tego pojazdu.", "Zamknij", "");
			return 0;
		}
		new vehicleids = GetPlayerVehicleID(id);
		new uids = SprawdzCarUID(vehicleids);
		Oferuj(playerid, id, DaneGracza[playerid][gSluzba], uids, 0, 0, OFEROWANIE_BLOKADY, PojazdInfo[uids][pBlokada], "", 0);
		Transakcja(T_OBLOKADE, DaneGracza[playerid][gUID], DaneGracza[id][gUID], DaneGracza[playerid][gGUID], DaneGracza[id][gGUID], PojazdInfo[uids][pBlokada], uids, -1, -1, "", gettime()+KOREKTA_CZASOWA);
	}
	else if(!strcmp(comm1,"wyscig",true))
	{
	    new id;
  		if(!ZarzadzanieDolaczanieWys(playerid) && GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_ZMOTORYZOWANA)
		{
			return 0;
		}
		if(sscanf(comm2, "d", id))
		{
            dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby zaprosic gracza do wyœcigu wpisz: /o wyscig [id gracza]", "Zamknij", "");
			return 1;
		}
		if(zalogowany[id] == false)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz którego chcesz zaprosiæ do wyœcigu, nie jest zalogowany.", "Zamknij", "");
			return 0;
		}
		if(DaneGracza[playerid][gWyscig] == 0)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie nale¿ysz do ¿adnego wyœcigu.", "Zamknij", "");
			return 0;
		}
		if(DaneGracza[id][gWyscig] != 0)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Ten gracz uczestniczy ju¿ w jakimœ wyœcigu.", "Zamknij", "");
			return 0;
		}
		if(!IsPlayerInAnyVehicle(id) || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    {
	        dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Ten gracz nie znajduje siê w pojeŸdzie, b¹dz nie jest jego kierownic¹", "Zamknij", "");
	        return 0;
	    }
		Oferuj(playerid, id, DaneGracza[playerid][gWyscig], 0, 0, 0, OFEROWANIE_WYSCIG, 0,"", 0);
	}
	else if(!strcmp(comm1,"tankowanie",true))
	{
	    new id, litry;
		if(zalogowany[playerid] == false)
		{
			return 0;
		}
		if(DaneGracza[playerid][gBW] != 0)
		{
			return 0;
		}
		if(sscanf(comm2, "dd", id, litry))
		{
            dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby oferowaæ graczu tankowanie pojazdu wpisz: /o tankowanie [id gracza] [iloœæ litrów (Aby zatankowaæ do pe³na wpisz: 100)]", "Zamknij", "");
			return 1;
		}
		if(!PrzyObiekcie(playerid, 3465, 5))
		{
			GameTextForPlayer(playerid, "~r~Jestes zbyt daleko od dystrybutora!", 3000, 5);
			return 0;
		}
		new vec = GetPlayerVehicleID(id);
		new vehc = SprawdzCarUID(vec);
		if(IsPlayerInAnyVehicle(playerid))
		{
			GameTextForPlayer(playerid, "~r~Nie mozesz tankowac pojazdu bedac w pojezdzie!", 3000, 5);
			return 0;
		}
		if(!IsPlayerInAnyVehicle(id))
		{
			GameTextForPlayer(playerid, "~r~Gracz, ktoremu oferujesz tankowanie nie znajduje sie w pojezdzie!", 3000, 5);
			return 0;
		}
		if(litry <= 0 || (litry+PojazdInfo[vehc][pPaliwo]) >= 100)
		{
			GameTextForPlayer(playerid, "~r~Niepoprawna ilosc litrow!", 3000, 5);
			return 0;
		}
		if(!Wlascicielpojazdu(vec, id))
		{
			GameTextForPlayer(playerid, "~r~Ten gracz nie posiada uprawnien do tego pojazdu!", 3000, 5);
			return 1;
		}
		if(PojazdInfo[vehc][pSilnik]==1)
		{
			GameTextForPlayer(playerid, "~r~Pojazd ktory chcesz zatankowac ma zapalony silnik!", 3000, 5);
			return 0;
		}
		if(Rowery(vec))
		{
		    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Tankowanie:", "Nie mo¿esz zatankowaæ roweru!", "Zamknij", "");
		    return 0;
		}
		new litrys;
		new litryow = floatround(PojazdInfo[vehc][pPaliwo]);
		if(litryow + litry <= 100)
		{
			litrys = 100;
		}
		else
		{
			litrys = litry+litryow;
		}
		Oferuj(playerid, id, vehc, litrys, litrys, 0, OFEROWANIE_TANKOWANIA, litrys,"", 0);
	}
	else if(!strcmp(comm1,"wywiad",true))
	{
	    new id;
		if(!ZarzadzanieLive(playerid) && GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_SANNEWS)
		{
			return 0;
		}
		if(sscanf(comm2, "d", id))
		{
            dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby przeprowadziæ z graczem wywiad wpisz: /o wywiad [id gracza]", "Zamknij", "");
			return 1;
		}
		if(zalogowany[id] == false)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz którego chcesz zaprosiæ do wywiadu, nie jest zalogowany.", "Zamknij", "");
			return 0;
		}
		if(DaneGracza[playerid][gWywiad] != 0)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aktualnie prowadzisz wywiad, aby go zakoñczyæ wpisz: /wywiad zakoncz.", "Zamknij", "");
			return 0;
		}
		if(DaneGracza[id][gWywiad] != 0)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz, któremu oferujesz wywiad aktualnie uczestniczy ju¿ w wywiadzie.", "Zamknij", "");
			return 0;
		}
		Oferuj(playerid, id, 0, 0, 0, 0, OFEROWANIE_WYWIAD, 0,"", 0);
	}
	else if(!strcmp(comm1,"sztukawalki",true))
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Sztukê walki podajemy za pomoc¹ /podaj [id gracza] (Karnety musz¹ byæ w magazynie grupy)!", "Zamknij", "");
		return 1;
	}
	else if(!strcmp(comm1,"karnet",true))
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Karnety podajemy za pomoc¹ /podaj [id gracza] (Karnety musz¹ byæ w magazynie grupy)!", "Zamknij", "");
		return 1;
	}
	return 1;
}
stock GetClosestVehicleTow(playerid){
if (!IsPlayerConnected(playerid))return -1;new Float:Prevdist = 10.000,Prevcar;
for(new carid = 0; carid < MAX_VEHICLES; carid++) {
new Float:Dist = GetDistanceToCar(playerid,carid);
if ((Dist < Prevdist && GetPlayerVehicleID(playerid) != carid)) {Prevdist = Dist;Prevcar = carid;}
}
return Prevcar;
}

stock GetDistanceToCar(playerid,carid){
new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2,Float:Dis;
if (!IsPlayerConnected(playerid))return -1;
GetPlayerPos(playerid,x1,y1,z1);GetVehiclePos(carid,x2,y2,z2);
Dis = floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
return floatround(Dis);}

stock GetDistanceToTag(playerid,carid)
{
	new Float:x1,Float:y1,Float:z1,Float:Dis;
	if (!IsPlayerConnected(playerid))return -1;
	GetPlayerPos(playerid,x1,y1,z1);
	Dis = floatsqroot(floatpower(floatabs(floatsub(ObiektInfo[carid][objPozX],x1)),2)+floatpower(floatabs(floatsub(ObiektInfo[carid][objPozY],y1)),2)+floatpower(floatabs(floatsub(ObiektInfo[carid][objPozZ],z1)),2));
	return floatround(Dis);
}

stock IsPlayerFacingVehicle(playerid,vehicleid)
{

	new Float:Xv,Float:fY,Float:pqZ,Float:Xf,Float:Y,Float:Z,Float:ang;

	if(!IsPlayerConnected(playerid)) return 0;

	GetVehiclePos(vehicleid, Xf, Y, Z);
	GetPlayerPos(playerid, Xv, fY, pqZ);

	if( Y > fY ) ang = (-acos((Xf - Xv) / floatsqroot((Xf - Xv)*(Xf - Xv) + (Y - fY)*(Y - fY))) - 90.0);
	else if( Y < fY && Xf < Xv ) ang = (acos((Xf - Xv) / floatsqroot((Xf - Xv)*(Xf - Xv) + (Y - fY)*(Y - fY))) - 450.0);
	else if( Y < fY ) ang = (acos((Xf - Xv) / floatsqroot((Xf - Xv)*(Xf - Xv) + (Y - fY)*(Y - fY))) - 90.0);

	if(Xf > Xv) ang = (floatabs(floatabs(ang) + 180.0));
	else ang = (floatabs(ang) - 180.0);
	new Float:russia;
	GetPlayerFacingAngle(playerid,russia);
	if(ang-russia<-130 || ang-russia>130) return 0;
	else return 1;
}///amt 0 100 Mistral 74 0 0xFF88b711 0 1 (220022)Five*(000000)Boxton*Crips
stock IsPlayerFacingTag(playerid,vehicleid)
{

	new Float:aaX,Float:aaY,Float:pqZ,Float:X,Float:Y,Float:ang;
	if(!IsPlayerConnected(playerid)) return 0;
	X = ObiektInfo[vehicleid][objPozX];
	Y = ObiektInfo[vehicleid][objPozY];
	GetPlayerPos(playerid, aaX, aaY, pqZ);
	if( Y > aaY ) ang = (-acos((X - aaX) / floatsqroot((X - aaX)*(X - aaX) + (Y - aaY)*(Y - aaY))) - 90.0);
	else if( Y < aaY && X < aaX ) ang = (acos((X - aaX) / floatsqroot((X - aaX)*(X - aaX) + (Y - aaY)*(Y - aaY))) - 450.0);
	else if( Y < aaY ) ang = (acos((X - aaX) / floatsqroot((X - aaX)*(X - aaX) + (Y - aaY)*(Y - aaY))) - 90.0);
	if(X > aaX) ang = (floatabs(floatabs(ang) + 180.0));
	else ang = (floatabs(ang) - 180.0);
	new Float:russia;
	GetPlayerFacingAngle(playerid,russia);
	if(ang-russia<-130 || ang-russia>130) return 0;
	else return 1;
}
CMD:qs(playerid, params[])
{
	//printf("U¿yta komenda qs");
	if(zalogowany[playerid] == false)
    {
        return 0;
    }
	if(DaneGracza[playerid][gBW] != 0)
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Podczas BW nie mo¿esz korzystaæ z tej komendy!", "Zamknij", "");
	    return 1;
	}
	DaneGracza[playerid][gQS] = gettime()+1200;
	GetPlayerPos(playerid, DaneGracza[playerid][gX],DaneGracza[playerid][gY],DaneGracza[playerid][gZ]);
	DaneGracza[playerid][gVW] = GetPlayerVirtualWorld(playerid);
	DaneGracza[playerid][gINT] = GetPlayerInterior(playerid);
	new Float:Pose[3];
	GetPlayerPos(playerid,Pose[0],Pose[1],Pose[2]);
	new sstr[124];
	format(sstr,sizeof(sstr),"%s\n(/qs)",ZmianaNicku(playerid));
	new logtekst[256];
	format(logtekst, sizeof(logtekst), "[Disconnect] [%s] [ID: %d] performed save the position /QS", ZmianaNicku(playerid), playerid);
	Transakcja(T_WYSZEDL, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, logtekst, gettime()+KOREKTA_CZASOWA);
	NapisWyszedl[playerid]=CreateDynamic3DTextLabel(sstr,0xDEDEDECC,Pose[0],Pose[1],Pose[2],10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,-1,-1,-1,10.0);
	Kick(playerid);
	return 1;
}
CMD:przedmioty(playerid,cmdtext[]) return cmd_p(playerid, cmdtext);
CMD:u(playerid,cmdtext[]) return cmd_p(playerid, cmdtext);
CMD:kanal(playerid, params[])
{
    new	comm2[256];
	if(sscanf(params, "s[256]", comm2))
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby zmieniæ kana³ wpisz /kanal [0-1000]", "Zamknij", "");
	    return 1;
	}
    if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		new uid = SprawdzCarUID(vehicleid);
	    if(!Wlascicielpojazdu(vehicleid, playerid))
		{
   			GameTextForPlayer(playerid, "~r~Brak uprawnien.", 3000, 5);
			return 1;
		}
		if(PojazdInfo[uid][pCB] == 0)
		{
			GameTextForPlayer(playerid, "~r~W pojezdzie nie ma CB-radia.", 3000, 5);
			return 0;
		}
		new kanal;
		if(sscanf(comm2, "d", kanal))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby zmieniæ kana³ wpisz: /kanal [1-1000]", "Zamknij", "");
			return 1;
		}
		if(kanal < 1 || kanal > 1000)
		{
			return 0;
		}
		PojazdInfo[uid][pKanal] = kanal;
		new kanstr[124];
		format(kanstr, sizeof(kanstr), "Kana³ zmieniony na: %d", PojazdInfo[uid][pKanal]);
		SendClientMessage( playerid, SZARY, kanstr);
		ZapiszPojazd(uid, 1);
		ZapiszPojazd(uid, 2);
    }
    return 1;
}
CMD:cb(playerid, params[])
{
    new	comm2[256];
	if(sscanf(params, "s[256]", comm2))
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby rozmawiaæ przez CB Radio wpisz: /cb [tekst]", "Zamknij", "");
	    return 1;
	}
    if(zalogowany[playerid] == false)
    {
        return 0;
    }
	if(DaneGracza[playerid][gBW] != 0)
    {
        return 0;
    }
	if(!IsPlayerInAnyVehicle(playerid))
	{
		return 0;
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		new uid = SprawdzCarUID(vehicleid);
		if(PojazdInfo[uid][pCB] == 0)
		{
			GameTextForPlayer(playerid, "~r~W pojezdzie nie ma CB-radia.", 3000, 5);
			return 0;
		}
		if(PojazdInfo[uid][pKanal] == 0)
		{
			GameTextForPlayer(playerid, "~r~Aby uzywac CB-radia musisz ustawic kanal.", 3000, 5);
			return 0;
		}
		strdel(tekst_global, 0, 2048);
		UsunPLZnaki(comm2);
		ForeachEx(i, MAX_VEH)
		{
			if(PojazdInfo[i][pKanal] == PojazdInfo[uid][pKanal] && PojazdInfo[i][pKanal] != 0)
			{
				ForeachEx(is, MAX_PLAYERS)
				{
					if(IsPlayerConnected(is))
					{
						if(zalogowany[is] == true)
						{
							if(GetPlayerVehicleID(is) == PojazdInfo[i][pID])
							{
								if(PojazdInfo[uid][pMoc] == 0)
								{
									format(tekst_global, sizeof(tekst_global), "~y~CB Radio ~>~~w~ %s przez radio: %s", ZmianaNicku(playerid), comm2);
									TextDrawShowForPlayer(is, CB);
									TextDrawSetString(CB, tekst_global);
								}
							}
						}
					}
				}
			}
		}
	}
	return 1;
}

CMD:p(playerid, params[])
{
	//printf("U¿yta komenda p");
    if(zalogowany[playerid] == false)
    {
        return 0;
    }
    if(DaneGracza[playerid][gBW] != 0)
	{
		return 0;
	}
	new	comm1[32], comm2[128];
	if(sscanf(params, "s[32]S()[128]", comm1, comm2))
	{
	    Przedmioty(playerid, playerid, DIALOG_PRZEDZMIOTY, GUIOPIS "Przedmioty:", TYP_WLASCICIEL, 0);
		return 1;
	}
	else if(!strcmp(comm1,"podnies",true))
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
		new uid = SprawdzCarUID(vehicleid);
	    if(IsPlayerInAnyVehicle(playerid))
		{
		    if(!WlascicielpojazduBezWYP(vehicleid, playerid))
			{
       			GameTextForPlayer(playerid, "~r~Brak uprawnien.", 3000, 5);
				return 1;
			}
            Przedmioty(playerid, playerid, DIALOG_PRZEDZMIOTY_PODNIES_VEH, GUIOPIS "Przedmioty» {FFFFFF}Pojazd:", TYP_AUTO, uid);
		}
	    else Przedmioty(playerid, playerid, DIALOG_PRZEDZMIOTY_PODNIES, GUIOPIS "Przedmioty» {FFFFFF}Ulica:", TYP_ULICA, 0);
		return 1;
	}
	else
	{
	    ForeachEx(i, MAX_PRZEDMIOT)
		{
			if(PrzedmiotInfo[i][pOwner] == DaneGracza[playerid][gUID] && PrzedmiotInfo[i][pUID] != 0 && PrzedmiotInfo[i][pTypWlas] == TYP_WLASCICIEL && strfind(PrzedmiotInfo[i][pNazwa], comm1, true) >= 0)
			{
				SetPVarInt(playerid, "UzytyItem", PrzedmiotInfo[i][pUID]);
				SetPVarString(playerid, "UzytyItemAkcja", comm2);
				UzywanieItemu(playerid, PrzedmiotInfo[i][pUID]);
				break;
			}
		}
	}
	return 1;
}
CMD:pokaz(playerid, params[])
{
	//printf("U¿yta komenda pokaz");
    if(zalogowany[playerid] == false)
    {
        return 0;
	}
	if(DaneGracza[playerid][gBW] != 0)
	{
		return 0;
	}	
	new	comm1[32], comm2[128];
	if(sscanf(params, "s[32]S()[128]", comm1, comm2))
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby coœ pokazaæ graczu wpisz: /pokaz [identyfikator (skrót: id), dowod, prawko, przedmioty, broni, niepoczytalnosci, niekaralnosci, wedkarska]", "Zamknij", "");
		return 1;
	}
	else if(!strcmp(comm1,"id",true) || !strcmp(comm1,"identyfikator",true))
	{
		new idgracza;
		if(sscanf(comm2, "d", idgracza))
		{
		    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby pokazaæ graczu identyfikator wpisz: /pokaz identyfikator [id gracza]", "Zamknij", "");
			return 1;
		}
		if(DaneGracza[playerid][gDzialalnosc1] == 0 &&
		DaneGracza[playerid][gDzialalnosc2] == 0 &&
		DaneGracza[playerid][gDzialalnosc3] == 0 &&
		DaneGracza[playerid][gDzialalnosc4] == 0 &&
		DaneGracza[playerid][gDzialalnosc5] == 0 &&
		DaneGracza[playerid][gDzialalnosc6] == 0)
		{
			GameTextForPlayer(playerid, "~r~Nie pracujesz w zadnej dzialalnosci gospodarczej.", 3000, 5);
			return 0;
		}
		if(zalogowany[playerid] == false) return 0;
		if(DaneGracza[idgracza][gBW] != 0) return 0;
		if(playerid == idgracza) return 0;
		if(!PlayerObokPlayera(playerid, idgracza, 3))
		{
			GameTextForPlayer(playerid, "~r~Znajdujesz sie zbyt daleko od gracza.", 3000, 5);
			return 0;
		}
		new dz[512];
		if(DaneGracza[playerid][gDzialalnosc1] != 0) format(dz, sizeof(dz), "%s\n1.\t»  %s (%s)", dz,GrupaInfo[DaneGracza[playerid][gDzialalnosc1]][gNazwa],DaneGracza[playerid][gNazwaRangi1]);
		if(DaneGracza[playerid][gDzialalnosc2] != 0) format(dz, sizeof(dz), "%s\n2.\t»  %s (%s)", dz,GrupaInfo[DaneGracza[playerid][gDzialalnosc2]][gNazwa],DaneGracza[playerid][gNazwaRangi2]);
		if(DaneGracza[playerid][gDzialalnosc3] != 0) format(dz, sizeof(dz), "%s\n3.\t»  %s (%s)", dz,GrupaInfo[DaneGracza[playerid][gDzialalnosc3]][gNazwa],DaneGracza[playerid][gNazwaRangi3]);
		if(DaneGracza[playerid][gDzialalnosc4] != 0 && GraczPremium(playerid)) format(dz, sizeof(dz), "%s\n4.\t»  %s (%s)", dz,GrupaInfo[DaneGracza[playerid][gDzialalnosc4]][gNazwa],DaneGracza[playerid][gNazwaRangi4]);
		if(DaneGracza[playerid][gDzialalnosc5] != 0 && GraczPremium(playerid)) format(dz, sizeof(dz), "%s\n5.\t»  %s (%s)", dz,GrupaInfo[DaneGracza[playerid][gDzialalnosc5]][gNazwa],DaneGracza[playerid][gNazwaRangi5]);
		if(DaneGracza[playerid][gDzialalnosc6] != 0 && GraczPremium(playerid)) format(dz, sizeof(dz), "%s\n6.\t»  %s (%s)", dz,GrupaInfo[DaneGracza[playerid][gDzialalnosc6]][gNazwa],DaneGracza[playerid][gNazwaRangi6]);
		dShowPlayerDialog(idgracza, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Grupy:", dz, "Wybierz", "Zamknij");
		GameTextForPlayer(playerid, "~y~Pokazales identyfikator graczu.", 3000, 5);
		format(tekst_global, sizeof(tekst_global), "pokazuje swój identyfikator %s. **", ZmianaNicku(idgracza));
		cmd_fasdasfdfive(playerid, tekst_global);
		return 1;
	}
	else if(!strcmp(comm1,"przedmioty",true))
	{
		new idgracza;
		if(sscanf(comm2, "d", idgracza))
		{
		    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby pokazaæ graczu przedmioty wpisz: /pokaz przedmioty [id gracza]", "Zamknij", "");
			return 1;
		}
		if(zalogowany[playerid] == false) return 0;
		if(DaneGracza[idgracza][gBW] != 0) return 0;
		if(playerid == idgracza) return 0;
		if(!PlayerObokPlayera(playerid, idgracza, 3))
		{
			GameTextForPlayer(playerid, "~r~Znajdujesz sie zbyt daleko od gracza.", 3000, 5);
			return 0;
		}
		Przedmioty(idgracza, playerid, DIALOG_INFO, GUIOPIS "Przedmioty:", TYP_WLASCICIEL, 0);
		GameTextForPlayer(playerid, "~y~Pokazales przedmioty graczu.", 3000, 5);
		return 1;
	}
	else if(!strcmp(comm1,"prawko",true))
	{
		new idgracza;
		if(sscanf(comm2, "d", idgracza))
		{
		    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby pokazaæ graczu prawo jazdy wpisz: /pokaz prawko [id gracza]", "Zamknij", "");
			return 1;
		}
		if(!Dokument(playerid, D_PRAWKO_A) && !Dokument(playerid, D_PRAWKO_B))
		{
			GameTextForPlayer(playerid, "~r~Nie posiadasz prawa jazdy.", 3000, 5);
			return 0;
		}
		if(zalogowany[playerid] == false) return 0;
		if(DaneGracza[idgracza][gBW] != 0) return 0;
		if(playerid == idgracza) return 0;
		if(!PlayerObokPlayera(playerid, idgracza, 3))
		{
			GameTextForPlayer(playerid, "~r~Znajdujesz sie zbyt daleko od gracza.", 3000, 5);
			return 0;
		}
		new imie[50], nazwisko[50];
		sscanf(ImieGracza(playerid), "p<_>s[50]s[50]",imie,nazwisko);
		new dz[512];
		format(dz, sizeof(dz), "%s\nImiê: %s\nNazwisko: %s\nPochodzenie: %s\nWiek: %d lat", dz,imie,nazwisko,DaneGracza[playerid][gPOCHODZENIE],DaneGracza[playerid][gWIEK]);
		new ka[10], kb[10];
		if(Dokument(playerid, D_PRAWKO_A)) ka="posiadane"; else ka="brak";
		if(Dokument(playerid, D_PRAWKO_B)) kb="posiadane"; else kb="brak";
		format(dz, sizeof(dz), "%s\n\nKat. A: %s\nKat. B: %s", dz,ka,kb);
		dShowPlayerDialog(idgracza, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Prawo jazdy:", dz, "Zamknij", "");
		GameTextForPlayer(playerid, "~y~Pokazales prawo jazdy graczu.", 3000, 5);
		format(tekst_global, sizeof(tekst_global), "pokazuje swoje prawo jazdy %s.", ZmianaNicku(idgracza));
		cmd_fasdasfdfive(playerid, tekst_global);
		return 1;
	}
	else if(!strcmp(comm1,"dowod",true))
	{
		new idgracza;
		if(sscanf(comm2, "d", idgracza))
		{
		    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby pokazaæ graczu dowód wpisz: /pokaz dowod [id gracza]", "Zamknij", "");
			return 1;
		}
		if(!Dokument(playerid, D_DOWOD))
		{
			GameTextForPlayer(playerid, "~r~Nie posiadasz dowodu osobistego.", 3000, 5);
			return 0;
		}
		if(zalogowany[playerid] == false) return 0;
		if(DaneGracza[idgracza][gBW] != 0) return 0;
		if(playerid == idgracza) return 0;
		if(!PlayerObokPlayera(playerid, idgracza, 3))
		{
			GameTextForPlayer(playerid, "~r~Znajdujesz sie zbyt daleko od gracza.", 3000, 5);
			return 0;
		}
		new imie[50], nazwisko[50];
		sscanf(ImieGracza(playerid), "p<_>s[50]s[50]",imie,nazwisko);
		new dz[512];
		format(dz, sizeof(dz), "%s\nImiê: %s\nNazwisko: %s\nPochodzenie: %s\nWiek: %d lat", dz,imie,nazwisko,DaneGracza[playerid][gPOCHODZENIE],DaneGracza[playerid][gWIEK]);
		dShowPlayerDialog(idgracza, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Dowód osobisty:", dz, "Zamknij", "");
		GameTextForPlayer(playerid, "~y~Pokazales dowod graczu.", 3000, 5);
		format(tekst_global, sizeof(tekst_global), "pokazuje swój dowód osobisty %s.", ZmianaNicku(idgracza));
		cmd_fasdasfdfive(playerid, tekst_global);
		return 1;
	}
	else if(!strcmp(comm1,"broni",true))
	{
		new idgracza;
		if(sscanf(comm2, "d", idgracza))
		{
		    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby pokazaæ graczu licencje na broñ wpisz: /pokaz broni [id gracza]", "Zamknij", "");
			return 1;
		}
		if(!Dokument(playerid, D_BRON))
		{
			GameTextForPlayer(playerid, "~r~Nie posiadasz licencje na bron.", 3000, 5);
			return 0;
		}
		if(zalogowany[playerid] == false) return 0;
		if(DaneGracza[idgracza][gBW] != 0) return 0;
		if(playerid == idgracza) return 0;
		if(!PlayerObokPlayera(playerid, idgracza, 3))
		{
			GameTextForPlayer(playerid, "~r~Znajdujesz sie zbyt daleko od gracza.", 3000, 5);
			return 0;
		}
		new imie[50], nazwisko[50];
		sscanf(ImieGracza(playerid), "p<_>s[50]s[50]",imie,nazwisko);
		new dz[512];
		format(dz, sizeof(dz), "%s\nImiê: %s\nNazwisko: %s\nPochodzenie: %s\nWiek: %d lat", dz,imie,nazwisko,DaneGracza[playerid][gPOCHODZENIE],DaneGracza[playerid][gWIEK]);
		new ka[10];
		if(Dokument(playerid, D_BRON)) ka="posiadana"; else ka="brak";
		format(dz, sizeof(dz), "%s\n\nLicencja na broñ: %s", dz,ka);
		dShowPlayerDialog(idgracza, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Licencja na broñ:", dz, "Zamknij", "");
		GameTextForPlayer(playerid, "~y~Pokazales licencjê na broñ", 3000, 5);
		return 1;
	}
	else if(!strcmp(comm1,"niekaralnosci",true))
	{
		new idgracza;
		if(sscanf(comm2, "d", idgracza))
		{
		    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby pokazaæ graczu zaœwiadczenie oniekaralnoœci wpisz: /pokaz niekaralosci [id gracza]", "Zamknij", "");
			return 1;
		}
		if(!Dokument(playerid, D_NIEKARALNOSC))
		{
			GameTextForPlayer(playerid, "~r~Nie posiadasz zaswiadzczenia o niekaralnosci.", 3000, 5);
			return 0;
		}
		if(zalogowany[playerid] == false) return 0;
		if(DaneGracza[idgracza][gBW] != 0) return 0;
		if(playerid == idgracza) return 0;
		if(!PlayerObokPlayera(playerid, idgracza, 3))
		{
			GameTextForPlayer(playerid, "~r~Znajdujesz sie zbyt daleko od gracza.", 3000, 5);
			return 0;
		}
		new imie[50], nazwisko[50];
		sscanf(ImieGracza(playerid), "p<_>s[50]s[50]",imie,nazwisko);
		new dz[512];
		format(dz, sizeof(dz), "%s\nImiê: %s\nNazwisko: %s\nPochodzenie: %s\nWiek: %d lat", dz,imie,nazwisko,DaneGracza[playerid][gPOCHODZENIE],DaneGracza[playerid][gWIEK]);
		new ka[10];
		if(Dokument(playerid, D_BRON)) ka="posiadane"; else ka="brak";
		format(dz, sizeof(dz), "%s\n\nZaœwiadczenie o niekaralnoœci: %s", dz,ka);
		dShowPlayerDialog(idgracza, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Zaœwiadczenie:", dz, "Zamknij", "");
		GameTextForPlayer(playerid, "~y~Pokazales zaswiadczenie o niekaralnosci graczu.", 3000, 5);
		return 1;
	}
	else if(!strcmp(comm1,"niepoczytalnosci",true))
	{
		new idgracza;
		if(sscanf(comm2, "d", idgracza))
		{
		    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby pokazaæ graczu zaœwiadczenie o niepoczytalnosci wpisz: /pokaz niepoczytalnosci [id gracza]", "Zamknij", "");
			return 1;
		}
		if(!Dokument(playerid, D_NIEPOCZYTALNOSC))
		{
			GameTextForPlayer(playerid, "~r~Nie posiadasz zaswiadzczenia o niepoczytalnosci.", 3000, 5);
			return 0;
		}
		if(zalogowany[playerid] == false) return 0;
		if(DaneGracza[idgracza][gBW] != 0) return 0;
		if(playerid == idgracza) return 0;
		if(!PlayerObokPlayera(playerid, idgracza, 3))
		{
			GameTextForPlayer(playerid, "~r~Znajdujesz sie zbyt daleko od gracza.", 3000, 5);
			return 0;
		}
		new imie[50], nazwisko[50];
		sscanf(ImieGracza(playerid), "p<_>s[50]s[50]",imie,nazwisko);
		new dz[512];
		format(dz, sizeof(dz), "%s\nImiê: %s\nNazwisko: %s\nPochodzenie: %s\nWiek: %d lat", dz,imie,nazwisko,DaneGracza[playerid][gPOCHODZENIE],DaneGracza[playerid][gWIEK]);
		new ka[10];
		if(Dokument(playerid, D_NIEPOCZYTALNOSC)) ka="posiadane"; else ka="brak";
		format(dz, sizeof(dz), "%s\n\nZaœwiadczenie o niepoczytalnosci: %s", dz,ka);
		dShowPlayerDialog(idgracza, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Zaœwiadczenie:", dz, "Zamknij", "");
		GameTextForPlayer(playerid, "~y~Pokazales zaswiadczenie o niepoczytalnosci graczu.", 3000, 5);
		return 1;
	}
	else if(!strcmp(comm1,"wedkarska",true))
	{
		new idgracza;
		if(sscanf(comm2, "d", idgracza))
		{
		    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby pokazaæ graczu zaœwiadczenie oniepoczytalnosci wpisz: /pokaz niepoczytalnosci [id gracza]", "Zamknij", "");
			return 1;
		}
		if(!Dokument(playerid, D_WEDKARSKA))
		{
			GameTextForPlayer(playerid, "~r~Nie posiadasz karty wedkarskiej.", 3000, 5);
			return 0;
		}
		if(zalogowany[playerid] == false) return 0;
		if(DaneGracza[idgracza][gBW] != 0) return 0;
		if(playerid == idgracza) return 0;
		if(!PlayerObokPlayera(playerid, idgracza, 3))
		{
			GameTextForPlayer(playerid, "~r~Znajdujesz sie zbyt daleko od gracza.", 3000, 5);
			return 0;
		}
		new imie[50], nazwisko[50];
		sscanf(ImieGracza(playerid), "p<_>s[50]s[50]",imie,nazwisko);
		new dz[512];
		format(dz, sizeof(dz), "%s\nImiê: %s\nNazwisko: %s\nPochodzenie: %s\nWiek: %d lat", dz,imie,nazwisko,DaneGracza[playerid][gPOCHODZENIE],DaneGracza[playerid][gWIEK]);
		new ka[10];
		if(Dokument(playerid, D_WEDKARSKA)) ka="posiadana"; else ka="brak";
		format(dz, sizeof(dz), "%s\n\nKarta wêdkarska: %s", dz,ka);
		dShowPlayerDialog(idgracza, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Karta wêdkarska:", dz, "Zamknij", "");
		GameTextForPlayer(playerid, "~y~Pokazales karte wedkarska graczu.", 3000, 5);
		return 1;
	}
	return 1;
}
stock GetFreeSQLUID(table[], row[])
{
	//printf("U¿yta komenda getfreesqluid");
	new r[25];
	format(zapyt, sizeof(zapyt), "SELECT (%s+1) FROM %s WHERE (%s+1) NOT IN (SELECT `%s` FROM %s) LIMIT 1", row, table, row, row, table);
	mysql_query2(zapyt);
	mysql_store_result();
	mysql_fetch_row(r);
	mysql_free_result();
	if(strval(r) == 0) return 1;
	else return strval(r);
}
CMD:sluzba(playerid, params[]) return cmd_duty(playerid, params);
CMD:duty(playerid, params[])
{
	//printf("U¿yta komenda duty");
    if(zalogowany[playerid] == false)
    {
        return 0;
    }
	new	comm1[32], comm2[128];
	if(DutyAdmina[playerid] != 0 && DutyDZ[playerid] != 0 && DutyNR[playerid] != 0 && DaneGracza[playerid][gSluzba] != 0)
	{
		ZapiszDuty(DaneGracza[playerid][gSluzba], playerid, DutyNR[playerid]);
		DutyAdmina[playerid] = 0;
		DutyDZ[playerid] = 0;
		DutyNR[playerid] = 0;
		DaneGracza[playerid][gSluzba] = 0;
		RefreshNick(playerid);
		GameTextForPlayer(playerid, "Schodzisz ze sluzby", 3000, 5);
		new msg[254];
		format(msg,254,"%s",ImieGracza2(playerid));
		TextDrawSetString(Duty[playerid], msg);
		TextDrawShowForPlayer(playerid, Duty[playerid]);
	}
	else if(sscanf(params, "s[32]S()[128]", comm1, comm2))
	{
 		if(DaneGracza[playerid][gSluzba] == 0)
    	{
	    	dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby wejœæ na s³u¿bê wpisz: /sluzba lub /duty [Nr grupy: (1-5)], gdy jesteœ cz³onkiem ekipy /aduty.", "Zamknij", "");
	    	return 1;
		}
		else
		{
			new drzwi = GetPVarInt(playerid, "uiddrzwi");
			new grupa = BudynekInfo[drzwi][nWlascicielD];
			if(DaneGracza[playerid][gSluzba] == 0)
   			{
				if(drzwi != 0)
				{
				    if(grupa != 0)
				    {
					    if(DaneGracza[playerid][gDzialalnosc1] == grupa)
					    {
			      			if(DaneGracza[playerid][gDzialalnosc1] != 0)
						    {
							    if(DaneGracza[playerid][gSluzba] == 0)
							    {
							        DaneGracza[playerid][gSluzba] = DaneGracza[playerid][gDzialalnosc1];
							        DutyNR[playerid] = 1;
									if(DutyAdmina[playerid] == 1)
									{
										ZapiszGraczaGlobal(playerid, 8);
										DutyAdmina[playerid] = 0;
									}
							        new dutyr[124];
							        format(dutyr, sizeof(dutyr), "~w~Rozpoczynasz sluzbe~n~~b~~h~~h~%s", GrupaInfo[DaneGracza[playerid][gSluzba]][gNazwa]);
							        GameTextForPlayer(playerid, dutyr, 3000, 5);
							        new msg[254];
									format(msg,254,"%s (%s)",ImieGracza2(playerid) ,GrupaInfo[DaneGracza[playerid][gSluzba]][gNazwa]);
									TextDrawSetString(Duty[playerid], msg);
									TextDrawShowForPlayer(playerid, Duty[playerid]);
							        if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_POLICYJNA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_ZMOTORYZOWANA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_SANNEWS ||
									GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_MEDYCZNA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_GANGI || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_RZADOWA)
							        {
							        	DutyDZ[playerid] = 1;
						        	}
						        	if(ComparisonString(comm2, "i") || ComparisonString(comm2, "incognito"))
									{
									    SetPVarInt(playerid, "Incognito", 1);
									}
									RefreshNick(playerid);
							    }
						    }
					    }
				 		if(DaneGracza[playerid][gDzialalnosc2] == grupa)
				 		{
				 		    if(DaneGracza[playerid][gDzialalnosc2] != 0)
						    {
						        if(DaneGracza[playerid][gSluzba] == 0)
							    {
							        DaneGracza[playerid][gSluzba] = DaneGracza[playerid][gDzialalnosc2];
							        DutyNR[playerid] = 2;
									if(DutyAdmina[playerid] == 1)
									{
										ZapiszGraczaGlobal(playerid, 8);
										DutyAdmina[playerid] = 0;
									}
							        new dutyr[124];
							        format(dutyr, sizeof(dutyr), "~w~Rozpoczynasz sluzbe~n~~b~~h~~h~%s", GrupaInfo[DaneGracza[playerid][gSluzba]][gNazwa]);
							        GameTextForPlayer(playerid, dutyr, 3000, 5);
							        new msg[254];
									format(msg,254,"%s (%s)",ImieGracza2(playerid) ,GrupaInfo[DaneGracza[playerid][gSluzba]][gNazwa]);
									TextDrawSetString(Duty[playerid], msg);
									TextDrawShowForPlayer(playerid, Duty[playerid]);
							        if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_POLICYJNA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_ZMOTORYZOWANA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_SANNEWS ||
									GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_MEDYCZNA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_GANGI || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_RZADOWA)
							        {
							        	DutyDZ[playerid] = 2;
						        	}
						        	if(ComparisonString(comm2, "i") || ComparisonString(comm2, "incognito"))
									{
									    SetPVarInt(playerid, "Incognito", 1);
									}
									RefreshNick(playerid);
							    }
							}
				 		}
				 		if(DaneGracza[playerid][gDzialalnosc3] == grupa)
				 		{
				 		    if(DaneGracza[playerid][gDzialalnosc3] != 0)
						    {
						        if(DaneGracza[playerid][gSluzba] == 0)
							    {
							        DaneGracza[playerid][gSluzba] = DaneGracza[playerid][gDzialalnosc3];
							        DutyNR[playerid] = 3;
									if(DutyAdmina[playerid] == 1)
									{
										ZapiszGraczaGlobal(playerid, 8);
										DutyAdmina[playerid] = 0;
									}
							        new dutyr[124];
							        format(dutyr, sizeof(dutyr), "~w~Rozpoczynasz sluzbe~n~~b~~h~~h~%s", GrupaInfo[DaneGracza[playerid][gSluzba]][gNazwa]);
							        GameTextForPlayer(playerid, dutyr, 3000, 5);
							        new msg[254];
									format(msg,254,"%s (%s)",ImieGracza2(playerid) ,GrupaInfo[DaneGracza[playerid][gSluzba]][gNazwa]);
									TextDrawSetString(Duty[playerid], msg);
									TextDrawShowForPlayer(playerid, Duty[playerid]);
							        if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_POLICYJNA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_ZMOTORYZOWANA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_SANNEWS ||
									GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_MEDYCZNA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_GANGI || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_RZADOWA)
							        {
							        	DutyDZ[playerid] = 3;
						        	}
						        	if(ComparisonString(comm2, "i") || ComparisonString(comm2, "incognito"))
									{
									    SetPVarInt(playerid, "Incognito", 1);
									}
									RefreshNick(playerid);
							    }
						    }
				 		}
					  	if(DaneGracza[playerid][gDzialalnosc4] == grupa)
					  	{
					  	    if(DaneGracza[playerid][gDzialalnosc4] != 0)
						    {
						        if(DaneGracza[playerid][gSluzba] == 0)
							    {
							        DaneGracza[playerid][gSluzba] = DaneGracza[playerid][gDzialalnosc4];
							        DutyNR[playerid] = 4;
									if(DutyAdmina[playerid] == 1)
									{
										ZapiszGraczaGlobal(playerid, 8);
										DutyAdmina[playerid] = 0;
									}
							        new dutyr[124];
							        format(dutyr, sizeof(dutyr), "~w~Rozpoczynasz sluzbe~n~~b~~h~~h~%s", GrupaInfo[DaneGracza[playerid][gSluzba]][gNazwa]);
							        GameTextForPlayer(playerid, dutyr, 3000, 5);
							        new msg[254];
									format(msg,254,"%s (%s)",ImieGracza2(playerid) ,GrupaInfo[DaneGracza[playerid][gSluzba]][gNazwa]);
									TextDrawSetString(Duty[playerid], msg);
									TextDrawShowForPlayer(playerid, Duty[playerid]);
							        if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_POLICYJNA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_ZMOTORYZOWANA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_SANNEWS ||
									GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_MEDYCZNA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_GANGI || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_RZADOWA)
							        {
							        	DutyDZ[playerid] = 4;
						        	}
						        	if(ComparisonString(comm2, "i") || ComparisonString(comm2, "incognito"))
									{
									    SetPVarInt(playerid, "Incognito", 1);
									}
									RefreshNick(playerid);
							    }
						    }
					  	}
					   	if(DaneGracza[playerid][gDzialalnosc5] == grupa)
					   	{
					   	    if(DaneGracza[playerid][gDzialalnosc5] != 0)
						    {
						        if(DaneGracza[playerid][gSluzba] == 0)
							    {
							        DaneGracza[playerid][gSluzba] = DaneGracza[playerid][gDzialalnosc5];
							        DutyNR[playerid] = 5;
									if(DutyAdmina[playerid] == 1)
									{
										ZapiszGraczaGlobal(playerid, 8);
										DutyAdmina[playerid] = 0;
									}
							        new dutyr[124];
							        format(dutyr, sizeof(dutyr), "~w~Rozpoczynasz sluzbe~n~~b~~h~~h~%s", GrupaInfo[DaneGracza[playerid][gSluzba]][gNazwa]);
							        GameTextForPlayer(playerid, dutyr, 3000, 5);
							        new msg[254];
									format(msg,254,"%s (%s)",ImieGracza2(playerid) ,GrupaInfo[DaneGracza[playerid][gSluzba]][gNazwa]);
									TextDrawSetString(Duty[playerid], msg);
									TextDrawShowForPlayer(playerid, Duty[playerid]);
							        if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_POLICYJNA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_ZMOTORYZOWANA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_SANNEWS ||
									GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_MEDYCZNA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_GANGI || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_RZADOWA)
							        {
							        	DutyDZ[playerid] = 5;
						        	}
						        	if(ComparisonString(comm2, "i") || ComparisonString(comm2, "incognito"))
									{
									    SetPVarInt(playerid, "Incognito", 1);
									}
									RefreshNick(playerid);
							    }
							}
					   	}
					    if(DaneGracza[playerid][gDzialalnosc6] == grupa)
					    {
					        if(DaneGracza[playerid][gDzialalnosc6] != 0)
						    {
						        if(DaneGracza[playerid][gSluzba] == 0)
							    {
							        DaneGracza[playerid][gSluzba] = DaneGracza[playerid][gDzialalnosc6];
							        DutyNR[playerid] = 6;
									if(DutyAdmina[playerid] == 1)
									{
										ZapiszGraczaGlobal(playerid, 8);
										DutyAdmina[playerid] = 0;
									}
							        new dutyr[124];
							        format(dutyr, sizeof(dutyr), "~w~Rozpoczynasz sluzbe~n~~b~~h~~h~%s", GrupaInfo[DaneGracza[playerid][gSluzba]][gNazwa]);
							        GameTextForPlayer(playerid, dutyr, 3000, 5);
							        new msg[254];
									format(msg,254,"%s (%s)",ImieGracza2(playerid) ,GrupaInfo[DaneGracza[playerid][gSluzba]][gNazwa]);
									TextDrawSetString(Duty[playerid], msg);
									TextDrawShowForPlayer(playerid, Duty[playerid]);
							        if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_POLICYJNA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_ZMOTORYZOWANA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_SANNEWS ||
									GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_MEDYCZNA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_GANGI || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_RZADOWA)
							        {
							        	DutyDZ[playerid] = 6;
						        	}
						        	if(ComparisonString(comm2, "i") || ComparisonString(comm2, "incognito"))
									{
									    SetPVarInt(playerid, "Incognito", 1);
									}
									RefreshNick(playerid);
							    }
						    }
					    }
					}
				}
			}
			else
			{
			    ZapiszDuty(DaneGracza[playerid][gSluzba], playerid, DutyNR[playerid]);
		    	DutyDZ[playerid] = 0;
		    	DutyNR[playerid] = 0;
		    	DaneGracza[playerid][gSluzba] = 0;
		    	GameTextForPlayer(playerid, "Schodzisz ze sluzby.", 3000, 5);
		    	new msg[254];
				format(msg,254,"%s",ImieGracza2(playerid));
				TextDrawSetString(Duty[playerid], msg);
				TextDrawShowForPlayer(playerid, Duty[playerid]);
		    	SetPVarInt(playerid, "Incognito", 0);
			}
		}
	}
	else if(!strcmp(comm1,"1",true))
	{
	    if(DaneGracza[playerid][gDzialalnosc1] != 0)
	    {
		    if(DaneGracza[playerid][gSluzba] == 0)
		    {
		        DaneGracza[playerid][gSluzba] = DaneGracza[playerid][gDzialalnosc1];
		        DutyNR[playerid] = 1;
				if(DutyAdmina[playerid] == 1)
				{
					ZapiszGraczaGlobal(playerid, 8);
					DutyAdmina[playerid] = 0;
				}
		        new dutyr[124];
		        format(dutyr, sizeof(dutyr), "~w~Rozpoczynasz sluzbe~n~~b~~h~~h~%s", GrupaInfo[DaneGracza[playerid][gSluzba]][gNazwa]);
		        GameTextForPlayer(playerid, dutyr, 3000, 5);
		        new msg[254];
				format(msg,254,"%s (%s)",ImieGracza2(playerid) ,GrupaInfo[DaneGracza[playerid][gSluzba]][gNazwa]);
				TextDrawSetString(Duty[playerid], msg);
				TextDrawShowForPlayer(playerid, Duty[playerid]);
		        if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_POLICYJNA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_ZMOTORYZOWANA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_SANNEWS ||
				GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_MEDYCZNA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_GANGI || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_RZADOWA)
		        {
		        	DutyDZ[playerid] = 1;
	        	}
	        	if(ComparisonString(comm2, "i") || ComparisonString(comm2, "incognito"))
				{
				    SetPVarInt(playerid, "Incognito", 1);
				}
				RefreshNick(playerid);
		    }else{
		        ZapiszDuty(DaneGracza[playerid][gSluzba], playerid, DutyNR[playerid]);
		    	DutyDZ[playerid] = 0;
		    	DutyNR[playerid] = 0;
		    	DaneGracza[playerid][gSluzba] = 0;
		    	GameTextForPlayer(playerid, "Schodzisz ze sluzby.", 3000, 5);
		    	new msg[254];
				format(msg,254,"%s",ImieGracza2(playerid));
				TextDrawSetString(Duty[playerid], msg);
				TextDrawShowForPlayer(playerid, Duty[playerid]);
		    	SetPVarInt(playerid, "Incognito", 0);
		    }
	    }
	}
	else if(!strcmp(comm1,"2",true))
	{
	    if(DaneGracza[playerid][gDzialalnosc2] != 0)
	    {
	        if(DaneGracza[playerid][gSluzba] == 0)
		    {
		        DaneGracza[playerid][gSluzba] = DaneGracza[playerid][gDzialalnosc2];
		        DutyNR[playerid] = 2;
				if(DutyAdmina[playerid] == 1)
				{
					ZapiszGraczaGlobal(playerid, 8);
					DutyAdmina[playerid] = 0;
				}
		        new dutyr[124];
		        format(dutyr, sizeof(dutyr), "~w~Rozpoczynasz sluzbe~n~~b~~h~~h~%s", GrupaInfo[DaneGracza[playerid][gSluzba]][gNazwa]);
		        GameTextForPlayer(playerid, dutyr, 3000, 5);
		        new msg[254];
				format(msg,254,"%s (%s)",ImieGracza2(playerid) ,GrupaInfo[DaneGracza[playerid][gSluzba]][gNazwa]);
				TextDrawSetString(Duty[playerid], msg);
				TextDrawShowForPlayer(playerid, Duty[playerid]);
		        if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_POLICYJNA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_ZMOTORYZOWANA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_SANNEWS ||
				GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_MEDYCZNA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_GANGI || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_RZADOWA)
		        {
		        	DutyDZ[playerid] = 2;
	        	}
	        	if(ComparisonString(comm2, "i") || ComparisonString(comm2, "incognito"))
				{
				    SetPVarInt(playerid, "Incognito", 1);
				}
				RefreshNick(playerid);
		    }else{
		        ZapiszDuty(DaneGracza[playerid][gSluzba], playerid, DutyNR[playerid]);
		    	DutyDZ[playerid] = 0;
		    	DutyNR[playerid] = 0;
		    	DaneGracza[playerid][gSluzba] = 0;
		    	GameTextForPlayer(playerid, "Schodzisz ze sluzby.", 3000, 5);
		    	new msg[254];
				format(msg,254,"%s",ImieGracza2(playerid));
				TextDrawSetString(Duty[playerid], msg);
				TextDrawShowForPlayer(playerid, Duty[playerid]);
		    	SetPVarInt(playerid, "Incognito", 0);
		    }
	    }
	}
	else if(!strcmp(comm1,"3",true))
	{
	    if(DaneGracza[playerid][gDzialalnosc3] != 0)
	    {
	        if(DaneGracza[playerid][gSluzba] == 0)
		    {
		        DaneGracza[playerid][gSluzba] = DaneGracza[playerid][gDzialalnosc3];
		        DutyNR[playerid] = 3;
				if(DutyAdmina[playerid] == 1)
				{
					ZapiszGraczaGlobal(playerid, 8);
					DutyAdmina[playerid] = 0;
				}
		        new dutyr[124];
		        format(dutyr, sizeof(dutyr), "~w~Rozpoczynasz sluzbe~n~~b~~h~~h~%s", GrupaInfo[DaneGracza[playerid][gSluzba]][gNazwa]);
		        GameTextForPlayer(playerid, dutyr, 3000, 5);
		        new msg[254];
				format(msg,254,"%s (%s)",ImieGracza2(playerid) ,GrupaInfo[DaneGracza[playerid][gSluzba]][gNazwa]);
				TextDrawSetString(Duty[playerid], msg);
				TextDrawShowForPlayer(playerid, Duty[playerid]);
		        if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_POLICYJNA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_ZMOTORYZOWANA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_SANNEWS ||
				GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_MEDYCZNA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_GANGI || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_RZADOWA)
		        {
		        	DutyDZ[playerid] = 3;
	        	}
	        	if(ComparisonString(comm2, "i") || ComparisonString(comm2, "incognito"))
				{
				    SetPVarInt(playerid, "Incognito", 1);
				}
				RefreshNick(playerid);
		    }else{
		        ZapiszDuty(DaneGracza[playerid][gSluzba], playerid, DutyNR[playerid]);
		    	DutyDZ[playerid] = 0;
		    	DutyNR[playerid] = 0;
		    	DaneGracza[playerid][gSluzba] = 0;
		    	GameTextForPlayer(playerid, "Schodzisz ze sluzby.", 3000, 5);
		    	new msg[254];
				format(msg,254,"%s",ImieGracza2(playerid));
				TextDrawSetString(Duty[playerid], msg);
				TextDrawShowForPlayer(playerid, Duty[playerid]);
		    	SetPVarInt(playerid, "Incognito", 0);
		    }
	    }
	}
	else if(!strcmp(comm1,"4",true) && GraczPremium(playerid))
	{
	    if(DaneGracza[playerid][gDzialalnosc4] != 0)
	    {
	        if(DaneGracza[playerid][gSluzba] == 0)
		    {
		        DaneGracza[playerid][gSluzba] = DaneGracza[playerid][gDzialalnosc4];
		        DutyNR[playerid] = 4;
				if(DutyAdmina[playerid] == 1)
				{
					ZapiszGraczaGlobal(playerid, 8);
					DutyAdmina[playerid] = 0;
				}
		        new dutyr[124];
		        format(dutyr, sizeof(dutyr), "~w~Rozpoczynasz sluzbe~n~~b~~h~~h~%s", GrupaInfo[DaneGracza[playerid][gSluzba]][gNazwa]);
		        GameTextForPlayer(playerid, dutyr, 3000, 5);
		        new msg[254];
				format(msg,254,"%s (%s)",ImieGracza2(playerid) ,GrupaInfo[DaneGracza[playerid][gSluzba]][gNazwa]);
				TextDrawSetString(Duty[playerid], msg);
				TextDrawShowForPlayer(playerid, Duty[playerid]);
		        if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_POLICYJNA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_ZMOTORYZOWANA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_SANNEWS ||
				GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_MEDYCZNA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_GANGI || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_RZADOWA)
		        {
		        	DutyDZ[playerid] = 4;
	        	}
	        	if(ComparisonString(comm2, "i") || ComparisonString(comm2, "incognito"))
				{
				    SetPVarInt(playerid, "Incognito", 1);
				}
				RefreshNick(playerid);
		    }else{
		        ZapiszDuty(DaneGracza[playerid][gSluzba], playerid, DutyNR[playerid]);
		    	DutyDZ[playerid] = 0;
		    	DutyNR[playerid] = 0;
		    	DaneGracza[playerid][gSluzba] = 0;
		    	GameTextForPlayer(playerid, "Schodzisz ze sluzby.", 3000, 5);
		    	new msg[254];
				format(msg,254,"%s",ImieGracza2(playerid));
				TextDrawSetString(Duty[playerid], msg);
				TextDrawShowForPlayer(playerid, Duty[playerid]);
		    	SetPVarInt(playerid, "Incognito", 0);
		    }
	    }
	}
	else if(!strcmp(comm1,"5",true) && GraczPremium(playerid))
	{
	    if(DaneGracza[playerid][gDzialalnosc5] != 0)
	    {
	        if(DaneGracza[playerid][gSluzba] == 0)
		    {
		        DaneGracza[playerid][gSluzba] = DaneGracza[playerid][gDzialalnosc5];
		        DutyNR[playerid] = 5;
				if(DutyAdmina[playerid] == 1)
				{
					ZapiszGraczaGlobal(playerid, 8);
					DutyAdmina[playerid] = 0;
				}
		        new dutyr[124];
		        format(dutyr, sizeof(dutyr), "~w~Rozpoczynasz sluzbe~n~~b~~h~~h~%s", GrupaInfo[DaneGracza[playerid][gSluzba]][gNazwa]);
		        GameTextForPlayer(playerid, dutyr, 3000, 5);
		        new msg[254];
				format(msg,254,"%s (%s)",ImieGracza2(playerid) ,GrupaInfo[DaneGracza[playerid][gSluzba]][gNazwa]);
				TextDrawSetString(Duty[playerid], msg);
				TextDrawShowForPlayer(playerid, Duty[playerid]);
		        if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_POLICYJNA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_ZMOTORYZOWANA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_SANNEWS ||
				GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_MEDYCZNA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_GANGI || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_RZADOWA)
		        {
		        	DutyDZ[playerid] = 5;
	        	}
	        	if(ComparisonString(comm2, "i") || ComparisonString(comm2, "incognito"))
				{
				    SetPVarInt(playerid, "Incognito", 1);
				}
				RefreshNick(playerid);
		    }else{
		        ZapiszDuty(DaneGracza[playerid][gSluzba], playerid, DutyNR[playerid]);
		    	DutyDZ[playerid] = 0;
		    	DutyNR[playerid] = 0;
		    	DaneGracza[playerid][gSluzba] = 0;
		    	GameTextForPlayer(playerid, "Schodzisz ze sluzby.", 3000, 5);
		    	new msg[254];
				format(msg,254,"%s",ImieGracza2(playerid));
				TextDrawSetString(Duty[playerid], msg);
				TextDrawShowForPlayer(playerid, Duty[playerid]);
		    	SetPVarInt(playerid, "Incognito", 0);
		    }
		}
	}
	else if(!strcmp(comm1,"6",true) && GraczPremium(playerid))
	{
	    if(DaneGracza[playerid][gDzialalnosc6] != 0)
	    {
	        if(DaneGracza[playerid][gSluzba] == 0)
		    {
		        DaneGracza[playerid][gSluzba] = DaneGracza[playerid][gDzialalnosc6];
		        DutyNR[playerid] = 6;
				if(DutyAdmina[playerid] == 1)
				{
					ZapiszGraczaGlobal(playerid, 8);
					DutyAdmina[playerid] = 0;
				}
		        new dutyr[124];
		        format(dutyr, sizeof(dutyr), "~w~Rozpoczynasz sluzbe~n~~b~~h~~h~%s", GrupaInfo[DaneGracza[playerid][gSluzba]][gNazwa]);
		        GameTextForPlayer(playerid, dutyr, 3000, 5);
		        new msg[254];
				format(msg,254,"%s (%s)",ImieGracza2(playerid) ,GrupaInfo[DaneGracza[playerid][gSluzba]][gNazwa]);
				TextDrawSetString(Duty[playerid], msg);
				TextDrawShowForPlayer(playerid, Duty[playerid]);
		        if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_POLICYJNA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_ZMOTORYZOWANA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_SANNEWS ||
				GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_MEDYCZNA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_GANGI || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_RZADOWA)
		        {
		        	DutyDZ[playerid] = 6;
	        	}
	        	if(ComparisonString(comm2, "i") || ComparisonString(comm2, "incognito"))
				{
				    SetPVarInt(playerid, "Incognito", 1);
				}
				RefreshNick(playerid);
		    }else{
		        ZapiszDuty(DaneGracza[playerid][gSluzba], playerid, DutyNR[playerid]);
		    	DutyDZ[playerid] = 0;
		    	DutyNR[playerid] = 0;
		    	DaneGracza[playerid][gSluzba] = 0;
		    	GameTextForPlayer(playerid, "Schodzisz ze sluzby.", 3000, 5);
		    	new msg[254];
				format(msg,254,"%s",ImieGracza2(playerid));
				TextDrawSetString(Duty[playerid], msg);
				TextDrawShowForPlayer(playerid, Duty[playerid]);
		    	SetPVarInt(playerid, "Incognito", 0);
		    }
	    }
	}
	RefreshNick(playerid);
	return 1;
}
stock MegafonVWZero(uid)
{
	if(GrupaInfo[uid][gTyp] == DZIALALNOSC_POLICYJNA)
	{
		return true;
 	}
    else if(GrupaInfo[uid][gTyp] == DZIALALNOSC_MEDYCZNA)
	{
		return true;
 	}
	else if(GrupaInfo[uid][gTyp] == DZIALALNOSC_SANNEWS)
	{
		return true;
 	}
	else
	{
		return false;
 	}
}
CMD:megafon(playerid,cmdtext[])
{
	//printf("U¿yta komenda megafon");
    if(zalogowany[playerid] == false)
    {
        return 0;
    }
	if(DaneGracza[playerid][gBW] != 0)
	{
		return 0;
	}
	new vw = GetPlayerVirtualWorld(playerid);
	new tekst[512];
	strdel(tekst_globals, 0, 2048);
	if(sscanf(cmdtext, "s[512]", tekst))
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby u¿ywaæ megafonu/mikrofonu wpisz: /m [treœæ]", "Zamknij", "");
		return 1;
	}
	if(DaneGracza[playerid][gSluzba] == 0 && !UzywanieMikrofonu(playerid, vw) || RozprawaSadowa != playerid && GetPlayerVirtualWorld(playerid) == 13 || RozprawaSadowa != playerid && GetPlayerVirtualWorld(playerid) == 61)
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby u¿ywaæ megafonu/mikrofonu musisz wejœæ na s³u¿bê organizacji lub znajdywaæ siê w budynku z uprawnieniami do mikrofonu.", "Zamknij", "");
		return 0;
	}
	if(!MegafonVWZero(DaneGracza[playerid][gSluzba]) && vw == 0)
	{
	   return 0;
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_POLICYJNA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_MEDYCZNA)
	{
		if(ComparisonString(tekst, "1"))
		{
			if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_POLICYJNA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_MEDYCZNA)
			{
				if(!IsPlayerInAnyVehicle(playerid))
				{
					dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie znajdujesz siê w pojeŸdzie.", "Zamknij", "");
					return 1;
				}
				new Float: x, Float: y, Float: z;
				GetPlayerPos(playerid, x, y, z);
				strdel(tekst_globals, 0, 2048);
				if(Nieznajomy[playerid] == 0)
				{
					format(tekst_globals, sizeof(tekst_globals), "%s (megafon): Tutaj LSPD, zjedŸ na poboczê i zgaœ silnik!", ZmianaNicku(playerid));
				}
				else
				{
					if(DaneGracza[playerid][gPLEC] == 0)
					{
						format(tekst_globals, sizeof(tekst_globals), "Nieznajomy %s (megafon): Tutaj LSPD, zjedŸ na poboczê i zgaœ silnik!", Maska(playerid));
					}
					else
					{
						format(tekst_globals, sizeof(tekst_globals), "Nieznajoma %s (megafon): Tutaj LSPD, zjedŸ na poboczê i zgaœ silnik!", Maska(playerid));
					}
				}
				SendWrappedMessageToPlayerRange(playerid, 0xf6f42fFF, tekst_globals, 60);
				return 1;
			}
		}
	}
	if(MegafonVWZero(DaneGracza[playerid][gSluzba]))
	{
	    if(!MikrofonWVW(playerid))
	    {
	        return 0;
	    }
	    if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_POLICYJNA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_MEDYCZNA)
	    {
	        if(Nieznajomy[playerid] == 0)
	        {
				format(tekst_globals, sizeof(tekst_globals), "%s (megafon) :o< %s!!!", ZmianaNicku(playerid), tekst);
			}
			else
			{
			    if(DaneGracza[playerid][gPLEC] == 0)
			    {
			    	format(tekst_globals, sizeof(tekst_globals), "Nieznajomy %s (megafon) :o< %s!!!", Maska(playerid), tekst);
				}
				else
				{
				    format(tekst_globals, sizeof(tekst_globals), "Nieznajoma %s (megafon) :o< %s!!!", Maska(playerid), tekst);
				}
			}
		}
		else if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_SANNEWS)
		{
		    if(Nieznajomy[playerid] == 0)
	        {
		    	format(tekst_globals, sizeof(tekst_globals), "%s (mikrofon): %s", ZmianaNicku(playerid), tekst);
			}
			else
			{
       			if(DaneGracza[playerid][gPLEC] == 0)
			    {
  					format(tekst_globals, sizeof(tekst_globals), "Nieznajomy %s (mikrofon): %s", Maska(playerid), tekst);
				}
				else
				{
				    format(tekst_globals, sizeof(tekst_globals), "Nieznajoma %s (mikrofon): %s", Maska(playerid), tekst);
				}
			}
		}
	}
	else
	{
	    if(!UzywanieMikrofonu(playerid, vw))
	    {
	        return 0;
	    }
	    if(Nieznajomy[playerid] == 0)
		{
			format(tekst_globals, sizeof(tekst_globals), "%s (mikrofon): %s", ZmianaNicku(playerid), tekst);
		}
		else
		{
		    if(DaneGracza[playerid][gPLEC] == 0)
		    {
		    	format(tekst_globals, sizeof(tekst_globals), "Nieznajomy %s (mikrofon): %s", Maska(playerid), tekst);
			}
			else
			{
			    format(tekst_globals, sizeof(tekst_globals), "Nieznajoma %s (mikrofon): %s", Maska(playerid), tekst);
			}
		}
	}
	SendWrappedMessageToPlayerRange(playerid, 0xf6f42fFF, tekst_globals, 60);
	return 1;
}
CMD:m(playerid,cmdtext[]) return cmd_megafon(playerid, cmdtext);
CMD:a(playerid, params[])
{
    if(zalogowany[playerid] == false)
    {
        return 0;
    }
	new str[512], temp = 0;
	//CEO - {FF0000}
	//CM - {247323}
	//GM - {3498db}
    format(str, sizeof(str), "Grupa\tOsoba\tID\tUprawnienia");
	ForeachEx(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i))
		{
			if(zalogowany[i] == true)
			{
				if(DaneGracza[i][gUID] != 0 && DutyAdmina[i] == 1)
				{
					temp++;
					if(DaneGracza[i][gAdmGroup] == 4)
					{
						if(DutyAdmina[i] == 1) format(str, sizeof(str), "%s\n{c5281c}Zarz¹d{FFFFFF}\t%s\t%d\t-", str, ImieGracza2(i), i);
					}
					else if(DaneGracza[i][gAdmGroup] == 14)
					{
						if(DutyAdmina[i] == 1) format(str, sizeof(str), "%s\n{c5281c}Administrator{FFFFFF}\t%s\t%d\t-", str, ImieGracza2(i), i);
					}
					else if(DaneGracza[i][gAdmGroup] == 7)
					{
						if(DutyAdmina[i] == 1) format(str, sizeof(str), "%s\n{61cc73}Starszy Gamemaster{FFFFFF}\t%s\t%d\tCM %d", str, ImieGracza2(i), i, DaneGracza[i][gAdmLVL]);
					}
					else if(DaneGracza[i][gAdmGroup] == 8)
					{
						if(DutyAdmina[i] == 1) format(str, sizeof(str), "%s\n{a95bb7}Gamemaster{FFFFFF}\t%s\t%d\tGM %d", str, ImieGracza2(i), i, DaneGracza[i][gAdmLVL]);
					}
				}
			}
		}
	}
	if(temp == 0) return dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Administracja", "Brak administracji na s³u¿bie!", "Zamknij", "");
	dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_TABLIST_HEADERS, GUIOPIS "Administracja online:", str, "Zamknij", "");
	return 1;
}
CMD:admins(playerid,params[]) return cmd_a(playerid, params);
CMD:login(playerid, params[])
{
    new id;
	if(sscanf(params, "i", id))
	{
		if(zalogowany[playerid] == false)
	    {
	        return 0;
	    }
		if(Wylogowany[playerid] == 0)
		{
			if(DaneGracza[playerid][gBW] == 0)
			{
				DaneGracza[playerid][gQS] = gettime()+1200;
				GetPlayerPos(playerid, DaneGracza[playerid][gX],DaneGracza[playerid][gY],DaneGracza[playerid][gZ]);
				DaneGracza[playerid][gVW] = GetPlayerVirtualWorld(playerid);
				DaneGracza[playerid][gINT] = GetPlayerInterior(playerid);
			}
			if(DaneGracza[playerid][gBronUID] != 0)
			{
				UsunBronieGracza(playerid);
				PrzedmiotInfo[DaneGracza[playerid][gBronUID]][pUzywany] = 0;
				ZapiszPrzedmiot(DaneGracza[playerid][gBronUID]);
				DaneGracza[playerid][gBronUID] = 0;
				DaneGracza[playerid][gBronAmmo] = 0;
				DeletePVar(playerid, "UzywanaBron");
			}
			ZapiszGracza(playerid);
			ZapiszBankKasa(playerid);
			ZapiszGraczaGlobal(playerid, 1);
			TextDrawHideForPlayer(playerid, Duty[playerid]);
			if(DutyAdmina[playerid] != 0 && DutyDZ[playerid] != 0 && DutyNR[playerid] != 0 && DaneGracza[playerid][gSluzba] != 0)
			{
				ZapiszDuty(DaneGracza[playerid][gSluzba], playerid, DutyNR[playerid]);
				DutyAdmina[playerid] = 0;
				DutyDZ[playerid] = 0;
				DutyNR[playerid] = 0;
				DaneGracza[playerid][gSluzba] = 0;
				RefreshNick(playerid);
			}
			Transakcja(T_LOGOUT, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, "Used to /login", gettime()+KOREKTA_CZASOWA);
			DaneGracza[playerid][gLogin] = 1;
			Relog[playerid] = 1;
			OnPlayerDisconnect(playerid, 1002);
			zalogowany[playerid] = false;
			SetPlayerHealth(playerid,100);
			OnPlayerConnect(playerid);
			DaneGracza[playerid][gLogin] = 1;
			Relog[playerid] = 1;
			SetPVarInt(playerid, "ZabezpieczenieAC", 1);
			SetTimerEx("ZabezpieczenieACLogin",3000,0,"d",playerid);
			
		}
		else
		{
	    	dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Musisz odczekaæ minutê od poprzedniego zalogowania b¹dz od ostatniej bójki.", "Zamknij", "");
		}
	}
	else
	{
	    if((DaneGracza[playerid][gAdmGroup] == 4 || DaneGracza[playerid][gAdmGroup] == 7 || DaneGracza[playerid][gAdmGroup] == 14 || DaneGracza[playerid][gAdmGroup] == 8) && DutyAdmina[playerid] == 1)
		{
		    if(zalogowany[id] == false)
		    {
		        return 0;
		    }
			if(DaneGracza[id][gBW] == 0)
			{
				DaneGracza[id][gQS] = gettime()+1200;
				GetPlayerPos(id, DaneGracza[id][gX],DaneGracza[id][gY],DaneGracza[id][gZ]);
				DaneGracza[id][gVW] = GetPlayerVirtualWorld(id);
				DaneGracza[id][gINT] = GetPlayerInterior(id);
			}
			if(DaneGracza[id][gBronUID] != 0)
			{
				UsunBronieGracza(id);
				PrzedmiotInfo[DaneGracza[id][gBronUID]][pUzywany] = 0;
				ZapiszPrzedmiot(DaneGracza[id][gBronUID]);
				DaneGracza[id][gBronUID] = 0;
				DaneGracza[id][gBronAmmo] = 0;
				DeletePVar(id, "UzywanaBron");
			}
			ZapiszGracza(id);
			ZapiszBankKasa(id);
			ZapiszGraczaGlobal(id, 1);
			TextDrawHideForPlayer(id, Duty[id]);
			if(DutyAdmina[id] != 0 && DutyDZ[id] != 0 && DutyNR[id] != 0 && DaneGracza[id][gSluzba] != 0)
			{
				ZapiszDuty(DaneGracza[id][gSluzba], id, DutyNR[id]);
				DutyAdmina[id] = 0;
				DutyDZ[id] = 0;
				DutyNR[id] = 0;
				DaneGracza[id][gSluzba] = 0;
				RefreshNick(id);
				TextDrawHideForPlayer(id, Duty[id]);
			}
			Transakcja(T_LOGOUT, DaneGracza[id][gUID], -1, DaneGracza[id][gGUID], -1, -1, -1, -1, -1, "Used to /login", gettime()+KOREKTA_CZASOWA);
			DaneGracza[id][gLogin] = 1;
			Relog[id] = 1;
			OnPlayerDisconnect(id, 1002);
			zalogowany[id] = false;
			SetPlayerHealth(id,100);
			OnPlayerConnect(id);
			DaneGracza[id][gLogin] = 1;
			Relog[id] = 1;
			SetPVarInt(id, "ZabezpieczenieAC", 1);
			SetTimerEx("ZabezpieczenieACLogin",3000,0,"d",id);
		}
	}
	return 1;
}
stock GetPlayerDistanceToPoint( playerid, Float:x1, Float:y1, Float:z1 )
{
	new
		Float:x2,
		Float:y2,
		Float:z2
	;
	GetPlayerPos( playerid, x2, y2, z2);
	return floatround(GetDistanceBetweenPoints( x1, y1, z1, x2, y2, z2 ), floatround_tozero );
}
forward SpamKomend3(playerid);
public SpamKomend3(playerid)
{
	AntySpam[playerid][2] = 0;
	return 1;
}
CMD:b(playerid,cmdtext[])
{
	//printf("U¿yta komenda b");
    if(zalogowany[playerid] == false)
    {
        return 0;
    }
    if(BlokadaOOC(playerid))
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie mo¿esz tego zrobiæ, poniewa¿ posiadasz aktywn¹ blokade czatów OOC \
		\nJeœli uwa¿asz, ¿e kara zosta³a nadana nies³usznie mo¿esz od niej apelowaæ na forum (www."PROJEKT").", "Zamknij", "");
	    return 0;
	}
	if(GetPVarInt(playerid, "CZATOOC") == 1)
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "W³¹cz czat OOC w ustawieniach postaci, by z niego korzystaæ!", "Zamknij", "");
		return 1;
	}
	strdel(tekst_globals, 0, 2048);
	strdel(tekst_global, 0, 2048);
	new tekst_globalsf[200];
	if(sscanf(cmdtext, "s[200]", tekst_globals))
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby u¿ywaæ czatu OOC wpisz: /b [treœæ]", "Zamknij", "");
		return 1;
	}
	tekst_globals[0] = toupper(tekst_globals[0]);
	format(tekst_global, sizeof(tekst_global), "(( %d. %s: %s ))", playerid, ZmianaNicku(playerid), tekst_globals);
	SendWrappedMessageToPlayerRange(playerid, 0xe6e6e6FF, tekst_global, 10);
	format(tekst_globalsf,sizeof(tekst_globalsf),"(( %s ))", tekst_globals);
	SetPlayerChatBubble(playerid, tekst_globalsf, 0xFFFFFFFF, 10.0, 10000);
	Transakcja(T_OOC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, tekst_globals, gettime()+KOREKTA_CZASOWA);
	return 1;
}
stock GetPlayerIdWithName(const playername[])
{
  	foreach(Player, C) if(!strcmp(ZmianaNicku(C), playername)) return C;
  	return -1;
}
IsNumerich(const stra[])
{
	for (new i = 0, j = strlen(stra); i < j; i++)
	{
		if (stra[i] > '9' || stra[i] < '0') return 0;
	}
	return 1;
}
stock isNumeric(tekst_global1[])
{
	new length=strlen(tekst_global1);
	if (length==0) return false;
	for (new i = 0; i < length; i++)
	{
		if ((tekst_global1[i] > '9' || tekst_global1[i] < '0' && tekst_global1[i]!='-' && tekst_global1[i]!='+') // Not a number,'+' or '-'
             || (tekst_global1[i]=='-' && i!=0)                                             // A '-' but not at first.
             || (tekst_global1[i]=='+' && i!=0)                                             // A '+' but not at first.
         ) return false;
    }
	if (length==1 && (tekst_global1[0]=='-' || tekst_global1[0]=='+')) return false;
	return true;
}
CMD:idtest(playerid, params[])
{
	new gracz[MAX_PLAYER_NAME];

	if(sscanf(params, "s[MAX_PLAYER_NAME]", gracz))
	    return dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby wyszukaæ gracza po nicku wpisz: /id [Nick/id]", "Zamknij", "");
	if(isNumeric(gracz))
	{
	    new val = strval(gracz);
		if(zalogowany[val] == false)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz do którego szukasz nie jest zalogowany.", "Zamknij", "");
			return 0;
		}
		PokazGraczy(playerid, ImieGracza(val));
	}
	else
	{
	    PokazGraczy(playerid, gracz);
	}
	return 1;
}
stock IdPoNicku(playerid, name[])
{
	new cos, ammm = 0;
	ForeachEx(id, MAX_PLAYERS)
	{
		if(IsPlayerConnected(id))
		{
			if(zalogowany[id] == true)
			{
				if(strfind(ZmianaNickuP(id), name, true) >= 0 && zalogowany[id] == true && playerid != id)
				{
					cos = id;
					ammm++;
					break;
				}
			}
		}
	}
	if(ammm != 0) return cos;
	else return 2000;
}
stock PokazGraczy(playerid, name[MAX_PLAYER_NAME])
{
	new big_str[ 512 ], amount;
	ForeachEx(id, MAX_PLAYERS)
	{
		if(IsPlayerConnected(id))
		{
			if(zalogowany[id] == true)
			{
				if((!IsPlayerConnected(id)) || (strfind(ImieGracza(id), name, true) == (-1)))
					continue;
				format(big_str, sizeof(big_str), "%s\n%d\t%s", big_str, id, ZmianaNicku(id));
				amount++;
			}
		}
	}
	if(amount) return dShowPlayerDialog( playerid, DIALOG_PW2, DIALOG_STYLE_LIST, GUIOPIS "Informacja", big_str, "PW", "Zamknij" );
	else return GameTextForPlayer( playerid, "~r~~h~nie znaleziono graczy.", 3000, 5);
}
CMD:w(playerid,params[])
{
    if(zalogowany[playerid] == false)
    {
        return 0;
    }
	new mestring[128], playerid3[24];
	if(sscanf(params, "s[24]s[128]", playerid3, mestring)) return dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby napisaæ do gracza prywatn¹ wiadomoœæ wpisz: /w [id] [wiadomoœæ]", "Zamknij", "");
	if(isNumeric(playerid3))
	{
		new playerid2 = strval(playerid3);
		if(zalogowany[playerid2] == false)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz do którego piszesz nie jest zalogowany.", "Zamknij", "");
			return 0;
		}
		if(GetPVarInt(playerid2, "UdzialWRozprawie") == 1)
		{
		    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz do którego piszesz bierze udzia³ w rozprawie, zablokowaliœmy PW.", "Zamknij", "");
			return 0;
		}
		if(playerid == playerid2) return 1;
		if(BlokadaOOC(playerid))
		{
			if(DutyAdmina[playerid2] == 0)
			{
				dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie mo¿esz tego zrobiæ, poniewa¿ posiadasz aktywn¹ blokade czatów OOC \
				\nJeœli uwa¿asz, ¿e kara zosta³a nadana nies³usznie mo¿esz od niej apelowaæ na forum (www."PROJEKT").", "Zamknij", "");
				return 0;
			}
		}
		if(BlokadaOOC(playerid2))
		{
			if(DutyAdmina[playerid] == 0)
			{
				dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie mo¿esz tego zrobiæ, poniewa¿ gracz posiada aktywn¹ blokadê czatu OOC! \
				\nJeœli uwa¿asz, ¿e kara zosta³a nadana nies³usznie mo¿esz od niej apelowaæ na forum (www."PROJEKT").", "Zamknij", "");
				return 0;
			}
		}
		if(DaneGracza[playerid][gAJ] != 0)
		{
			if(DutyAdmina[playerid2] == 0)
			{
				dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Podczas AJ mo¿esz pisaæ wiadomoœci tylko i wy³¹cznie do administracji.", "Zamknij", "");
				return 0;
			}
		}
		if(DaneGracza[playerid][gBW] != 0)
		{
			if(!PlayerObokPlayera(playerid, playerid2, 5))
			{
				if(DutyAdmina[playerid2] == 0)
				{
					dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Podczas BW mo¿esz pisaæ wiadomoœci na krótk¹ odleg³oœæ.", "Zamknij", "");
					return 0;
				}
			}
		}
		if(GetPVarInt(playerid, "UdzialWRozprawie") == 1)
		{
		    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Podczas rozprawy nie mo¿esz wysy³aæ wiadomoœci prywatnych.", "Zamknij", "");
			return 0;
		}
		if(GetPVarInt(playerid, "CZATPW") == 1)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Masz wy³¹czone prywatne wiadomoœci (/tog w).", "Zamknij", "");
			return 0;
		}
		if(DutyAdmina[playerid] == 0)
		{
			if(GetPVarInt(playerid2, "CZATPW") == 1)
			{
				dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz do którego piszesz ma wy³¹czone prywatne wiadomoœci.", "Zamknij", "");
				return 0;
			}
		}
		if(GraczJestAFK(playerid2))
		{
			new msg[254];
			format(msg,254,"Gracz do ktorego piszesz ma status AFK");
			TextDrawSetString(TextDrawMainInfo[playerid], msg);
			TextDrawShowForPlayer(playerid, TextDrawMainInfo[playerid]);
			CzasWyswietlaniaTextuNaDrzwiach[playerid] = 10;
		}
		mestring[0] = toupper(mestring[0]);
		if((DaneGracza[playerid2][gAdmGroup] == 4 || DaneGracza[playerid2][gAdmGroup] == 7 || DaneGracza[playerid2][gAdmGroup] == 14) && DutyAdmina[playerid2] == 1)
		{
			SendWrappedMessageToPlayerFormat(playerid, 0xf3be5eFF, "(( > %s (%d): %s ))", ZmianaNicku(playerid2), playerid2, mestring);
		}
		else
		{
			SendWrappedMessageToPlayerFormat(playerid, 0xf3be5eFF, "(( > %s (%d): %s ))", ZmianaNicku(playerid2), playerid2, mestring);
		}
		if((DaneGracza[playerid][gAdmGroup] == 4 || DaneGracza[playerid][gAdmGroup] == 7|| DaneGracza[playerid][gAdmGroup] == 14) && DutyAdmina[playerid] == 1)
		{
			SendWrappedMessageToPlayerFormat(playerid2, 0xffa500FF, "(( %s (%d): %s ))", ZmianaNicku(playerid), playerid, mestring);
			PlayerPlaySound(playerid2, 1190, 0.0, 0.0, 0.0);
		}
		else
		{
			SendWrappedMessageToPlayerFormat(playerid2, 0xffa500FF, "(( %s (%d): %s ))", ZmianaNicku(playerid), playerid, mestring);
			PlayerPlaySound(playerid2, 1190, 0.0, 0.0, 0.0);
		}
		SetPVarInt(playerid2, "RE", playerid);
		SetPVarInt(playerid, "WyslalPW", 1);
		SetTimerEx("WyslalPW",3000,0,"d",playerid);
		RefreshNick(playerid);
		new log[256];
		format(log, sizeof(log), "[PRIV] [%s] (UID: %d) > [%s] (UID: %d) %s", ZmianaNicku(playerid), DaneGracza[playerid][gUID], ZmianaNicku(playerid2), DaneGracza[playerid2][gUID], mestring);
		Transakcja(T_IC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
		Transakcja(T_IC, DaneGracza[playerid2][gUID], -1, DaneGracza[playerid2][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);

	}
	else
	{
		new playerid2 = IdPoNicku(playerid, playerid3);
		if(playerid2 == 2000)
		{
			GameTextForPlayer(playerid, "~r~Nick, ktory wpisales jest niepoprawny badz wpisales zly nick.", 3000, 5);
			return 0;
		}
		if(zalogowany[playerid2] == false)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz do którego piszesz nie jest zalogowany.", "Zamknij", "");
			return 0;
		}
		if(playerid == playerid2) return 1;
		if(BlokadaOOC(playerid))
		{
			if(DutyAdmina[playerid2] == 0)
			{
				dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie mo¿esz tego zrobiæ, poniewa¿ posiadasz aktywn¹ blokade czatów OOC \
				\nJeœli uwa¿asz, ¿e kara zosta³a nadana nies³usznie mo¿esz od niej apelowaæ na forum (www."PROJEKT").", "Zamknij", "");
				return 0;
			}
		}
		if(BlokadaOOC(playerid2))
		{
			if(DutyAdmina[playerid] == 0)
			{
				dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie mo¿esz tego zrobiæ, poniewa¿ gracz posiada aktywn¹ blokadê czatu OOC! \
				\nJeœli uwa¿asz, ¿e kara zosta³a nadana nies³usznie mo¿esz od niej apelowaæ na forum (www."PROJEKT").", "Zamknij", "");
				return 0;
			}
		}
		if(DaneGracza[playerid][gAJ] != 0)
		{
			if(DutyAdmina[playerid2] == 0)
			{
				dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Podczas AJ mo¿esz pisaæ wiadomoœci tylko i wy³¹cznie do administracji.", "Zamknij", "");
				return 0;
			}
		}
		if(DaneGracza[playerid][gBW] != 0)
		{
			if(!PlayerObokPlayera(playerid, playerid2, 5))
			{
				if(DutyAdmina[playerid2] == 0)
				{
					dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Podczas BW mo¿esz pisaæ wiadomoœci na krótk¹ odleg³oœæ.", "Zamknij", "");
					return 0;
				}
			}
		}
		if(GetPVarInt(playerid, "CZATPW") == 1)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Masz wy³¹czone prywatne wiadomoœci (/tog w).", "Zamknij", "");
			return 0;
		}
		if(GetPVarInt(playerid2, "CZATPW") == 1)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz do którego piszesz ma wy³¹czone prywatne wiadomoœci.", "Zamknij", "");
			return 0;
		}
		if(GraczJestAFK(playerid2))
		{
			CzasWyswietlaniaTextuNaDrzwiach[playerid] = 7;
			TextDrawHideForPlayer(playerid, TextNaDrzwi[playerid]);
			TextDrawSetString(TextNaDrzwi[playerid], "Gracz do ktorego piszesz ma status AFK");
			TextDrawShowForPlayer(playerid, TextNaDrzwi[playerid]);
		}
		mestring[0] = toupper(mestring[0]);
		if((DaneGracza[playerid2][gAdmGroup] == 4 || DaneGracza[playerid2][gAdmGroup] == 7 || DaneGracza[playerid2][gAdmGroup] == 14) && DutyAdmina[playerid2] == 1)
		{
			SendWrappedMessageToPlayerFormat(playerid, 0xf3be5eFF, "(( > %s (%d): %s ))", ZmianaNicku(playerid2), playerid2, mestring);
		}
		else
		{
			SendWrappedMessageToPlayerFormat(playerid, 0xf3be5eFF, "(( > %s (%d): %s ))", ZmianaNicku(playerid2), playerid2, mestring);
		}
		if((DaneGracza[playerid][gAdmGroup] == 4 || DaneGracza[playerid][gAdmGroup] == 7 || DaneGracza[playerid][gAdmGroup] == 14) && DutyAdmina[playerid] == 1)
		{
			SendWrappedMessageToPlayerFormat(playerid2, 0xffa500FF, "(( %s (%d): %s ))", ZmianaNicku(playerid), playerid, mestring);
			PlayerPlaySound(playerid2, 1190, 0.0, 0.0, 0.0);
		}
		else
		{
			SendWrappedMessageToPlayerFormat(playerid2, 0xffa500FF, "(( %s (%d): %s ))", ZmianaNicku(playerid), playerid, mestring);
			PlayerPlaySound(playerid2, 1190, 0.0, 0.0, 0.0);
		}
		SetPVarInt(playerid2, "RE", playerid);
		SetPVarInt(playerid, "WyslalPW", 1);
		SetTimerEx("WyslalPW",3000,0,"d",playerid);
		RefreshNick(playerid);
		new log[256];
		format(log, sizeof(log), "[PRIV] [%s] (UID: %d) > [%s] (UID: %d) %s", ZmianaNicku(playerid), DaneGracza[playerid][gUID], ZmianaNicku(playerid2), DaneGracza[playerid2][gUID], mestring);
		Transakcja(T_IC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
		Transakcja(T_IC, DaneGracza[playerid2][gUID], -1, DaneGracza[playerid2][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
	}
	return 1;
}
CMD:pm(playerid,cmdtext[]) return cmd_w(playerid, cmdtext);
CMD:re(playerid,params[])
{
	//printf("U¿yta komenda re");
    if(zalogowany[playerid] == false)
    {
        return 0;
    }
	if(isnull(params)) return dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby odpisaæ na prywatn¹ wiadomoœæ wpisz: /re [wiadomoœæ]", "Zamknij", "");
	if(zalogowany[GetPVarInt(playerid, "RE")] == false)
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz do którego piszesz nie jest zalogowany.", "Zamknij", "");
	    return 0;
	}
	if(playerid == GetPVarInt(playerid, "RE")) return 1;
	if(BlokadaOOC(playerid))
	{
		if(DutyAdmina[GetPVarInt(playerid, "RE")] == 0)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie mo¿esz tego zrobiæ, poniewa¿ posiadasz aktywn¹ blokade czatów OOC \
			\nJeœli uwa¿asz, ¿e kara zosta³a nadana nies³usznie mo¿esz od niej apelowaæ na forum (www."PROJEKT").", "Zamknij", "");
			return 0;
		}
	}
	if(BlokadaOOC(GetPVarInt(playerid, "RE")))
	{
		if(DutyAdmina[playerid] == 0)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie mo¿esz tego zrobiæ, poniewa¿ gracz posiada aktywn¹ blokadê czatu OOC! \
			\nJeœli uwa¿asz, ¿e kara zosta³a nadana nies³usznie mo¿esz od niej apelowaæ na forum (www."PROJEKT").", "Zamknij", "");
			return 0;
		}
	}
	if(DaneGracza[playerid][gAJ] != 0)
	{
		if(DutyAdmina[GetPVarInt(playerid, "RE")] == 1)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Podczas AJ mo¿esz pisaæ wiadomoœci tylko i wy³¹cznie do administracji.", "Zamknij", "");
			return 0;
		}
	}
	if(DaneGracza[playerid][gBW] != 0)
	{
	    if(!PlayerObokPlayera(playerid, GetPVarInt(playerid, "RE"), 5))
		{
			if(DutyAdmina[GetPVarInt(playerid, "RE")] == 0)
			{
				dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Podczas BW mo¿esz pisaæ wiadomoœci na krótk¹ odleg³oœæ.", "Zamknij", "");
				return 0;
			}
		}
	}
	if(GetPVarInt(playerid, "UdzialWRozprawie") == 1)
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Podczas rozprawy nie mozesz u¿ywaæ prywatnych wiadomoœci.", "Zamknij", "");
  		return 0;
	}
	if(GetPVarInt(playerid, "CZATPW") == 1)
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Masz wy³¹czone prywatne wiadomoœci (/tog w).", "Zamknij", "");
		return 0;
	}
	if(DutyAdmina[playerid] == 0)
	{
		if(GetPVarInt(GetPVarInt(playerid, "RE"), "CZATPW") == 1)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz do którego piszesz ma wy³¹czone prywatne wiadomoœci.", "Zamknij", "");
			return 0;
		}
	}
	if(GraczJestAFK(GetPVarInt(playerid, "RE")))
	{
	    CzasWyswietlaniaTextuNaDrzwiach[playerid] = 7;
		TextDrawHideForPlayer(playerid, TextNaDrzwi[playerid]);
		TextDrawSetString(TextNaDrzwi[playerid], "Gracz do ktorego piszesz ma status AFK");
		TextDrawShowForPlayer(playerid, TextNaDrzwi[playerid]);
	}
	SetPVarInt(GetPVarInt(playerid, "RE"), "RE", playerid);
	SetPVarInt(playerid, "WyslalPW", 1);
	SetTimerEx("WyslalPW",3000,0,"d",playerid);
	RefreshNick(playerid);
	params[0] = toupper(params[0]);
	SendWrappedMessageToPlayerFormat(playerid, 0xf3be5eFF, "((> %s (%d): %s ))", ZmianaNicku(GetPVarInt(playerid, "RE")), GetPVarInt(playerid, "RE"), params);
	SendWrappedMessageToPlayerFormat(GetPVarInt(playerid, "RE"), 0xffa500FF, "(( %s (%d): %s ))", ZmianaNicku(playerid), playerid, params);
	PlayerPlaySound(GetPVarInt(playerid, "RE"), 1190, 0.0, 0.0, 0.0);
	new log[256];
	format(log, sizeof(log), "[PRIV] [%s] (UID: %d) > [%s] (UID: %d) %s", ZmianaNicku(playerid), DaneGracza[playerid][gUID], ZmianaNicku(GetPVarInt(playerid, "RE")), DaneGracza[GetPVarInt(playerid, "RE")][gUID], params);
	Transakcja(T_IC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
	Transakcja(T_IC, DaneGracza[GetPVarInt(playerid, "RE")][gUID], -1, DaneGracza[GetPVarInt(playerid, "RE")][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
	return 1;
}
CMD:tog(playerid,cmdtext[])
{
    if(zalogowany[playerid] == false)
    {
        return 0;
    }
    SendClientMessage(playerid,0xb2b2b2FF,"/tog (w, !, @, kask)");
	if(ComparisonString(cmdtext, "!"))
    {
		if(GetPVarInt(playerid, "WYKRZYKNIK") == 0)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Czat IC grupy zosta³ wy³¹czony.", "Zamknij", "");
			SetPVarInt(playerid, "WYKRZYKNIK", 1);
		}
		else
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Czat IC grupy zosta³ w³¹czony.", "Zamknij", "");
			SetPVarInt(playerid, "WYKRZYKNIK", 0);
		}
	}
	if(ComparisonString(cmdtext, "@"))
    {
		if(GetPVarInt(playerid, "MALPA") == 0)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Czat OOC grupy zosta³ wy³¹czony.", "Zamknij", "");
			SetPVarInt(playerid, "MALPA", 1);
		}
		else
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Czat OOC grupy zosta³ w³¹czony.", "Zamknij", "");
			SetPVarInt(playerid, "MALPA", 0);
		}
	}
	if(ComparisonString(cmdtext, "kask"))
    {
		if(GetPVarInt(playerid, "KASK") == 0)
		{
		    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Kask zosta³ wy³¹czony.", "Zamknij", "");
			SetPVarInt(playerid, "KASK", 1);
		}
		else
		{
		    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Kask zosta³ w³¹czony.", "Zamknij", "");
			SetPVarInt(playerid, "KASK", 0);
		}
	}
    if(ComparisonString(cmdtext, "w"))
    {
        if(GetPVarInt(playerid, "CZATPW") == 0)
		{
		    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Prywatne wiadomoœci zosta³y wy³¹czone.", "Zamknij", "");
			SetPVarInt(playerid, "CZATPW", 1);
		}
		else
		{
		    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Prywatne wiadomoœci zosta³y w³¹czone.", "Zamknij", "");
			SetPVarInt(playerid, "CZATPW", 0);
		}
	}
	return 1;
}
CMD:tankuj(playerid,cmdtext[])
{
    if(zalogowany[playerid] == false)
    {
        return 0;
    }
	new vw = GetPlayerVirtualWorld(playerid);
	if(vw != 0)
	{
	    return 0;
	}
	if(DaneGracza[playerid][gBW] != 0)
	{
		return 0;
	}
	new litry;
	if(sscanf(cmdtext, "d", litry))
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby zatankowaæ pojazd wpisz: /tankuj [iloœæ litrów]", "Zamknij", "");
		return 1;
	}
	if(!PrzyObiekcie(playerid, 3465, 12))
	{
		GameTextForPlayer(playerid, "~r~Jestes zbyt daleko od dystrybutora!", 3000, 5);
		return 0;
	}
	new vec = GetClosestVehicle(playerid, 15);
    new vehc = SprawdzCarUID(vec);
    if(vec == INVALID_VEHICLE_ID)
    {
        GameTextForPlayer(playerid, "~r~Nie stoisz przy zadnym pojezdzie!", 3000, 5);
	    return 1;
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
		GameTextForPlayer(playerid, "~r~Nie mozesz tankowac pojazdu bedac w pojezdzie!", 3000, 5);
		return 0;
	}
	if(litry < 1 || litry >= 100)
	{
		GameTextForPlayer(playerid, "~r~Niepoprawna ilosc litrow!", 3000, 5);
		return 0;
	}
	if(!Wlascicielpojazdu(vec, playerid))
	{
	    GameTextForPlayer(playerid, "~r~Nie posiadasz uprawnien do otwierania tego pojazdu!", 3000, 5);
	    return 1;
	}
	if(PojazdInfo[vehc][pSilnik]==1)
	{
		GameTextForPlayer(playerid, "~r~Pojazd ktory chcesz zatankowac ma zapalony silnik!", 3000, 5);
		return 0;
	}
	//new kas;
	new Float:pal = PojazdInfo[vehc][pPaliwo];
	if(pal + litry >= 101)
	{
		GameTextForPlayer(playerid, "~r~Nie posiadasz tyle wolnego miejsca w baku!", 3000, 5);
		return 0;
	}
	if(DaneGracza[playerid][gPORTFEL] < litry*2)
	{
		GameTextForPlayer(playerid, "~r~Nie posiadasz takiej gotowki przy sobie!", 3000, 5);
		return 0;
	}
	if(Dostal[playerid] != 0)
 	{
 	    return 0;
 	}
 	if(Dostal2[playerid] != 0)
 	{
 	    return 0;
 	}
 	if(Rowery(vec))
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Tankowanie:", "Nie mo¿esz zatankowaæ roweru!", "Zamknij", "");
	    return 0;
	}
	new Float:ilosc = litry;
	PojazdInfo[vehc][pPaliwo] += ilosc;
	ZapiszPojazd(vehc, 1);
	Dodajkase(playerid, -litry*2);
	ApplyAnimation(playerid,"INT_HOUSE","wash_up",4.1,0,0,0,0,0);
	cmd_fasdasfdfive(playerid, "wk³ada pistolet do baku.");
	new akcja[126];
	format(akcja,sizeof(akcja),"*wk³ada pistolet do baku*");
	SetPlayerChatBubble(playerid, akcja, FIOLETOWY, 10.0, 4000);
	new akcja2[126];
	format(akcja2,sizeof(akcja2),"wklada pistolet do baku");
	TextDrawSetString(AkcjaTD[playerid], akcja2);
	TextDrawShowForPlayer(playerid, AkcjaTD[playerid]);
	CzasWyswietlaniaTextuNaDrzwiach[playerid] = 10;
	return 1;
}
CMD:podaj(playerid,cmdtext[])
{
    if(zalogowany[playerid] == false)
    {
        return 0;
    }
	if(DaneGracza[playerid][gBW] != 0)
	{
		return 0;
	}
	new id;
	if(sscanf(cmdtext, "d", id))
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby podaæ graczu przedmiot z magazynu wpisz: /podaj [id gracza]", "Zamknij", "");
		return 1;
	}
	if(!PlayerObokPlayera(playerid, id, 5))
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz podaæ przedmiot z magazynu nie znajdujê siê obok Ciebie.", "Zamknij", "");
	    return 1;
	}
	new vw = GetPlayerVirtualWorld(playerid);
	new uids = GetPlayerVirtualWorld(playerid);
	if(vw == 0)
	{
		new uid_budki = PrzyObiekcie(playerid, 1340, 5);
		if(uid_budki == 0)
		{
			GameTextForPlayer(playerid, "~r~Jestes zbyt daleko od straganu!", 3000, 5);
			return 0;
		}
		if(ObiektInfo[uid_budki][objOwnerDz] != DaneGracza[playerid][gSluzba])
		{
			GameTextForPlayer(playerid, "~r~Ten stragan nie nalezy do twojej dzialalnosci!", 3000, 5);
			return 0;
		}
		if(GetPVarInt(playerid, "g1u1") != 1 || GetPVarInt(playerid, "g2u1") != 1 || GetPVarInt(playerid, "g3u1") != 1 || GetPVarInt(playerid, "g4u1") != 1 || GetPVarInt(playerid, "g5u1") != 1 || GetPVarInt(playerid, "g6u1") != 1)
		{
			GameTextForPlayer(playerid, "~r~Brak uprawnien do sprzedawania przedmiotow, badz nie jestes na sluzbie dzialalnosci!", 3000, 5);
			return 0;
		}
		SetPVarInt(playerid, "idgrpodaj", id);
		ZaladujMagazyny();
		ZapiszMagazyn(id);
		Magazyn(playerid, DIALOG_GASTRO_KUP, GUIOPIS "Podaj:", TYP_MAGAZYN, ObiektInfo[uid_budki][objOwnerDz], "Wybierz", "Zamknij");
	}
	else
	{
		if(BudynekInfo[uids][nWlascicielP] != 0 && BudynekInfo[uids][nWlascicielD] == 0)
		{
			return 0;
		}
		if(!Podaj(playerid, uids))
		{
			GameTextForPlayer(playerid, "~r~Brak uprawnien, badz nie jestes na sluzbie", 3000, 5);
			return 0;
		}
		SetPVarInt(playerid, "idgrpodaj", id);
		ZaladujMagazyny();
		ZapiszMagazyn(id);
		Magazyn(playerid, DIALOG_GASTRO_KUP, GUIOPIS "Podaj:", TYP_MAGAZYN, BudynekInfo[vw][nWlascicielD], "Wybierz", "Zamknij");
	}
	return 1;
}
CMD:cennik(playerid,cmdtext[])
{
	//printf("U¿yta komenda cennik");
    if(zalogowany[playerid] == false)
    {
        return 0;
    }
	if(DaneGracza[playerid][gBW] != 0)
	{
		return 0;
	}
	new id;
	if(sscanf(cmdtext, "d", id))
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby podaæ graczu cennik wpisz: /cennik [id gracza]", "Zamknij", "");
		return 1;
	}
	if(!PlayerObokPlayera(playerid, id, 5))
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz podaæ cennik nie znajdujê siê obok Ciebie.", "Zamknij", "");
	    return 1;
	}
	new vw = GetPlayerVirtualWorld(playerid);
	new uids = GetPlayerVirtualWorld(playerid);
	if(vw == 0)
	{
		new uid_budki = PrzyObiekcie(playerid, 1340, 5);
		if(uid_budki == 0)
		{
			GameTextForPlayer(playerid, "~r~Jestes zbyt daleko od straganu!", 3000, 5);
			return 0;
		}
		if(ObiektInfo[uid_budki][objOwnerDz] != DaneGracza[playerid][gSluzba])
		{
			GameTextForPlayer(playerid, "~r~Ten stragan nie nalezy do twojej dzialalnosci!", 3000, 5);
			return 0;
		}
		if(GetPVarInt(playerid, "g1u1") != 1 || GetPVarInt(playerid, "g2u1") != 1 || GetPVarInt(playerid, "g3u1") != 1 || GetPVarInt(playerid, "g4u1") != 1 || GetPVarInt(playerid, "g5u1") != 1 || GetPVarInt(playerid, "g6u1") != 1)
		{
			GameTextForPlayer(playerid, "~r~Brak uprawnien do sprzedawania przedmiotow, badz nie jestes na sluzbie dzialalnosci!", 3000, 5);
			return 0;
		}
		SetPVarInt(playerid, "idgrpodaj", id);
  		ZaladujMagazyny();
		Magazyn(id, DIALOG_CENNIK_INFORMACJA, GUIOPIS "Cennik:", TYP_MAGAZYN, ObiektInfo[uid_budki][objOwnerDz], "Zamknij", "");
	}
	else
	{
		if(BudynekInfo[uids][nWlascicielP] != 0 && BudynekInfo[uids][nWlascicielD] == 0)
		{
			return 0;
		}
		if(!Podaj(playerid, uids))
		{
			GameTextForPlayer(playerid, "~r~Brak uprawnien, badz nie jestes na sluzbie", 3000, 5);
			return 0;
		}
		SetPVarInt(playerid, "idgrpodaj", id);
		ZaladujMagazyny();
		Magazyn(id, DIALOG_CENNIK_INFORMACJA, GUIOPIS "Cennik:", TYP_MAGAZYN, BudynekInfo[vw][nWlascicielD], "Zamknij", "");
	}
	return 1;
}
CMD:pay(playerid,cmdtext[]) return cmd_plac(playerid, cmdtext);
CMD:ja(playerid,cmdtext[]) return cmd_me(playerid, cmdtext);
CMD:spec(playerid,cmdtext[]) return cmd_rc(playerid, cmdtext);
CMD:fasdasfdfive(playerid,cmdtext[])
{
	//printf("U¿yta komenda fasdasf");
    if(zalogowany[playerid] == false)
    {
        return 0;
    }
	new mestring[200];
	if(sscanf(cmdtext, "s[200]", mestring))
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby u¿ywaæ akcji role play wpisz: /me [treœæ]", "Zamknij", "");
		return 1;
	}
	format(mestring, sizeof(mestring), "** %s %s **", ZmianaNicku(playerid), mestring);
	SendWrappedMessageToPlayerRange(playerid, FIOLETOWY, mestring, 10);
	return 1;
}
CMD:me(playerid,cmdtext[])
{
	//printf("U¿yta komenda me");
    if(zalogowany[playerid] == false)
    {
        return 0;
    }
    if(DaneGracza[playerid][gBW] != 0)
    {
        return 0;
    }
    if(GetPVarInt(playerid, "UdzialWRozprawie") == 1)
	{
		return 0;
	}
	new akcja[200];
	if(sscanf(cmdtext, "s[200]", akcja))
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby u¿ywaæ akcji role play wpisz: /me [treœæ]", "Zamknij", "");
		return 1;
	}
	format(akcja, sizeof(akcja), "* %s %s *", ZmianaNicku(playerid), akcja);
	SendWrappedMessageToPlayerRange(playerid, FIOLETOWY, akcja, 10);
	DaneGracza[playerid][gMe] = gettime()+CZAS_LETNI+60;
	Transakcja(T_ME, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, akcja, gettime()+KOREKTA_CZASOWA);
	return 1;
}
CMD:do(playerid,cmdtext[])
{
	//printf("U¿yta komenda do");
    if(zalogowany[playerid] == false)
    {
        return 0;
    }
    if(GetPVarInt(playerid, "UdzialWRozprawie") == 1)
	{
		return 0;
	}
	new akcja[200];
	if(sscanf(cmdtext, "s[200]", akcja))
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby u¿ywaæ akcji role play wpisz: /do [treœæ]", "Zamknij", "");
		return 1;
	}
	format(akcja, sizeof(akcja), "** %s (( %s )) **", akcja, ZmianaNicku(playerid));
	SendWrappedMessageToPlayerRange(playerid, KOLOR_DO, akcja, 10);
	Transakcja(T_DO, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, akcja, gettime()+KOREKTA_CZASOWA);
	return 1;
}
CMD:sprobuj(playerid,cmdtext[])
{
	//printf("U¿yta komenda sproboj");
    if(zalogowany[playerid] == false)
    {
        return 0;
    }
	if(DaneGracza[playerid][gBW] != 0)
	{
		return 0;
	}
	new tekst[200];
	if(sscanf(cmdtext, "s[200]", tekst))
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby spróbowaæ czegoœ wpisz: /sprobuj [akcja]", "Zamknij", "");
		return 1;
	}
	new rand = random(10);
	new akcja[256];
	if(rand == 1 || rand == 2 || rand == 4 || rand == 7 || rand == 10)
	{
		format(akcja, sizeof(akcja), "** %s odniós³ sukces próbuj¹c %s **", ZmianaNicku(playerid), tekst);
	}
	else
	{
		format(akcja, sizeof(akcja), "** %s zawiód³ próbuj¹c %s **", ZmianaNicku(playerid), tekst);
	}
	SendWrappedMessageToPlayerRange(playerid, FIOLETOWY, akcja, 10);
	return 1;
}
CMD:paczka( playerid, params[ ] )
{
    if(zalogowany[playerid] == false)
    {
        return 0;
    }
	if(DaneGracza[playerid][gBW] != 0)
	{
		return 0;
	}
	/*if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] != DZIALALNOSC_TRANS)
	{
		if(DaneGracza[playerid][gPracaTyp] != PRACA_KURIER)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby u¿yæ tej komendy musisz posiadaæ prace kuriera lub pracowaæ w dzia³alnoœci transportowej.", "Zamknij", "");
			return 0;
		}
	}*/
	if(DaneGracza[playerid][gPaczkaT] > gettime()+CZAS_LETNI)
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby u¿yæ tej komendy musisz odczekaæ minute od poprzedniego razu.", "Zamknij", "");
		return 0;
	}
	if(DaneGracza[playerid][gPaczkaM] == 0)
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby u¿yæ tej komendy musisz siê znajdowaæ w pojezdzie.", "Zamknij", "");
			return 0;
		}
		new vehid = GetPlayerVehicleID(playerid);
		if(GetVehicleModel(vehid) == 510 || GetVehicleModel(vehid) == 509 || GetVehicleModel(vehid) == 481)
		{
			return 0;
		}
		new item_list[2048],find;
		strdel(item_list, 0, 2048);
		ForeachEx(i, 200)
		{
			if(PaczkaInfo[i][xUID] != 0)
			{
				format(item_list, sizeof(item_list), "%s\n%d\t\t%s", item_list, PaczkaInfo[i][xUID], BudynekInfo[PaczkaInfo[i][xMIEJSCED]][nAdres]);
				find++;
			}
		}
		if(find == 0) dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aktualnie brak dostêpnych paczek.", "Zamknij", "");
		else dShowPlayerDialog(playerid, DIALOG_WEZ_PACZKE, DIALOG_STYLE_LIST, GUIOPIS "Paczki:", item_list, "Wybierz", "Zamknij");
		return 1;
	}
	else if(DaneGracza[playerid][gPaczkaM] == 1)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby u¿yæ tej komendy musisz siê znajdowaæ poza pojezdem.", "Zamknij", "");
			return 0;
		}
		new vehid = GetPlayerVehicleID(playerid);
		if(GetVehicleModel(vehid) == 510 || GetVehicleModel(vehid) == 509 || GetVehicleModel(vehid) == 481)
		{
			return 0;
		}
		new is = DaneGracza[playerid][gPaczkaUID];
		new i = PaczkaInfo[is][xHURT];
		if(Dystans(5.0, playerid, BudynekInfo[i][nX], BudynekInfo[i][nY], BudynekInfo[i][nZ]) && GetPlayerVirtualWorld(playerid) == BudynekInfo[i][nVW])
		{
			DaneGracza[playerid][gPaczkaM] = 2;
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Paczka odebrana z hurtowni teraz w³ó¿ paczkê do swojego pojazdu.", "Zamknij", "");
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			SetPlayerAttachedObject(playerid,8, 1220, 1, 0.35, 0.65, 0, 0, 0, 0);
			SetPVarInt(playerid, "WZIALPACZKA", 1);
		}
		else
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby u¿yæ tej komendy musisz znajdywaæ siê obok odpowiedniej hurtowni.", "Zamknij", "");
			new id = PaczkaInfo[is][xHURT];
			SetPlayerCheckpoint(playerid, BudynekInfo[id][nX], BudynekInfo[id][nY], BudynekInfo[id][nZ], 5.0);
		}
		return 1;
	}
	else if(DaneGracza[playerid][gPaczkaM] == 3)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby od³o¿yæ paczke musisz znajdywaæ siê poza pojazdem.", "Zamknij", "");
			return 0;
		}
		if(GetPVarInt(playerid, "WZIALPACZKA") != 3)
		{
		    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Najpierw weŸ paczkê z swojego pojazdu klawiszem Y.", "Zamknij", "");
			return 0;
		}
		new is = DaneGracza[playerid][gPaczkaUID];
		new i = PaczkaInfo[is][xMIEJSCED];
		if(Dystans(5.0, playerid, BudynekInfo[i][nX], BudynekInfo[i][nY], BudynekInfo[i][nZ]) && GetPlayerVirtualWorld(playerid) == BudynekInfo[i][nVW])
		{
			/*if(DaneGracza[playerid][gMe] < gettime()+CZAS_LETNI)
			{
				dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby u¿yæ tej komendy musisz odegraæ odpowiedni¹ akcje role play.", "Zamknij", "");
				return 0;
			}*/
			DodajDoMagazynu(PaczkaInfo[is][xUIDG], PaczkaInfo[is][xTYP], PaczkaInfo[is][xWAR1], PaczkaInfo[is][xWAR2], PaczkaInfo[is][xWAR5], PaczkaInfo[is][xNAZWA],PaczkaInfo[is][xCENA], PaczkaInfo[is][xILOSC]);
			Dodajkase( playerid, 50 );
			ZapiszGracza(playerid);
			UsunPaczke(is);
			DaneGracza[playerid][gPaczkaM] = 0;
			DaneGracza[playerid][gPaczkaUID] = 0;
			DisablePlayerCheckpoint(playerid);
			TextDrawHideForPlayer(playerid, OBJ[playerid]);
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Paczka dostarczona na miejsce.", "Zamknij", "");
			SetPVarInt(playerid, "WZIALPACZKA", 0);
			RemovePlayerAttachedObject(playerid, 8);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		}
		else
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby u¿yæ tej komendy musisz znajdywaæ siê obok odpowiedniego budynku.", "Zamknij", "");
			SetPlayerCheckpoint(playerid, BudynekInfo[i][nX], BudynekInfo[i][nY], BudynekInfo[i][nZ], 5.0);
		}
		return 1;
	}
	DaneGracza[playerid][gPaczkaT] = gettime()+CZAS_LETNI+60;
	return 1;
}
CMD:stats(playerid, params[])
{
	new id;
	if(sscanf(params, "i", id))
	{
		Pokazstatsy(playerid);
	}
	else
	{
		if((DaneGracza[playerid][gAdmGroup] == 4 || DaneGracza[playerid][gAdmGroup] == 7|| DaneGracza[playerid][gAdmGroup] == 14 || DaneGracza[playerid][gAdmGroup] == 8 && DaneGracza[playerid][gAdmLVL] >= 4) && DutyAdmina[playerid] == 1)
		{
			new stats[1024], IP[16], plec_gracza[24];
			//new GLOD = DaneGracza[id][gGlod]-4;
			GetPlayerIp(id, IP, sizeof(IP));
			new g, m, s;
			new gig, mig, sig;
			przelicznikonline(id, g, m, s);
			przelicznikwgrze(id, gig, mig, sig);
			GetPlayerHealth(id,ACHP);
			new PrefixCity[3];
			GetPVarString(id, "PrefixCountry", PrefixCity, sizeof(PrefixCity));
			switch(DaneGracza[id][gPLEC])
			{
				case 0:{
					plec_gracza = "Mê¿czyzna";
				}
				case 1:{
					plec_gracza = "Kobieta";
				}
			}
			//
			ZaladujZadluzenia();
			SetPVarInt(id, "DlugGracza", 0);
			ForeachEx(x, MAX_DLUG)
			{
				if(Zadluzenie[x][dUID] == DaneGracza[id][gUID] && Zadluzenie[x][dAktywne] == 1)
				{
					SetPVarInt(id, "DlugGracza", GetPVarInt(id, "DlugGracza")+Zadluzenie[x][dMoney]);
					SetPVarInt(id, "ZadluzeniePoTerminie", 0);
					if(Zadluzenie[x][dTime2] < gettime()+CZAS_LETNI)
					{
						SetPVarInt(id, "ZadluzeniePoTerminie", GetPVarInt(id, "ZadluzeniePoTerminie")+1);
					}
				}
			}
			new teren = GraczNaTerenie(id);
			new rokpr, miesiacpr, dzienpr, godzinapr, minutapr, sekundapr;
			sekundytodata(DaneGracza[id][gPrzetrzmanie], rokpr, miesiacpr, dzienpr, godzinapr, minutapr, sekundapr);
			new rokp, miesiacp, dzienp, godzinap, minutap, sekundap;
			sekundytodata(DaneGracza[id][gBetaTester], rokp, miesiacp, dzienp, godzinap, minutap, sekundap);//Po BW
			//
			format(stats, sizeof(stats), "Czas Gry:\t%dh %dmin %dsec", g,m,s);
			if(DaneGracza[id][gBetaTester] < (gettime()+CZAS_LETNI))
			{
			    new gs, ms, ss;
			    przeliczniksectoh(DaneGracza[id][gBW], gs, ms, ss);
				if(DaneGracza[id][gZDROWIE] >= 70)
				{
				format(stats, sizeof(stats), "%s\n{FFE5B4}¯{FFFFFF}ycie:\t{63D075}%0.1f%{FFFFFF} HP, %dmin BW", stats, DaneGracza[id][gZDROWIE], ms);
				}
				if(DaneGracza[id][gZDROWIE] >= 50 && DaneGracza[id][gZDROWIE] < 70)
				{
				format(stats, sizeof(stats), "%s\n{FFE5B4}¯{FFFFFF}ycie:\t{F07241}%0.1f%{FFFFFF} HP, %dmin BW", stats, DaneGracza[id][gZDROWIE], ms);
				}
				if(DaneGracza[id][gZDROWIE] < 50)
				{
				format(stats, sizeof(stats), "%s\n{FFE5B4}¯{FFFFFF}ycie:\t{C04848}%0.1f%{FFFFFF} HP, %dmin BW", stats, DaneGracza[id][gZDROWIE], ms);
				}
			}
			else
			{
			    new gs, ms, ss;
			    przeliczniksectoh(DaneGracza[id][gBW], gs, ms, ss);
				if(DaneGracza[id][gZDROWIE] >= 70)
				{
				format(stats, sizeof(stats), "%s\n{FFE5B4}¯{FFFFFF}ycie:\t{63D075}%0.1f%{FFFFFF} HP, %dmin BW", stats, DaneGracza[id][gZDROWIE], ms);
				}
				if(DaneGracza[id][gZDROWIE] >= 50 && DaneGracza[id][gZDROWIE] < 70)
				{
				format(stats, sizeof(stats), "%s\n{FFE5B4}¯{FFFFFF}ycie:\t{F07241}%0.1f%{FFFFFF} HP, %dmin BW", stats, DaneGracza[id][gZDROWIE], ms);
				}
				if(DaneGracza[id][gZDROWIE] < 50)
				{
				format(stats, sizeof(stats), "%s\n{FFE5B4}¯{FFFFFF}ycie:\t{C04848}%0.1f%{FFFFFF} HP, %dmin BW", stats, DaneGracza[id][gZDROWIE], ms);
				}
			    if(godzinap+czasjochym == 25)
				{
				    format(stats, sizeof(stats), "%s\nPo BW do:\t%d.%d.%d  1:%d:%d", stats, dzienp+1, miesiacp, rokp, minutap, sekundap);
				}
				if(godzinap+czasjochym == 26)
				{
				    format(stats, sizeof(stats), "%s\nPo BW do:\t%d.%d.%d  2:%d:%d", stats, dzienp+1, miesiacp, rokp, minutap, sekundap);
				}
				if(godzinap+czasjochym == 27)
				{
				    format(stats, sizeof(stats), "%s\nPo BW do:\t%d.%d.%d  3:%d:%d", stats, dzienp+1, miesiacp, rokp, minutap, sekundap);
				}
				if(godzinap+czasjochym == 28)
				{
				    format(stats, sizeof(stats), "%s\nPo BW do:\t%d.%d.%d  4:%d:%d", stats, dzienp+1, miesiacp, rokp, minutap, sekundap);
				}
				if(godzinap+czasjochym == 29)
				{
				    format(stats, sizeof(stats), "%s\nPo BW do:\t%d.%d.%d  5:%d:%d", stats, dzienp+1, miesiacp, rokp, minutap, sekundap);
				}
				if(godzinap+czasjochym == 30)
				{
				    format(stats, sizeof(stats), "%s\nPo BW do:\t%d.%d.%d  6:%d:%d", stats, dzienp+1, miesiacp, rokp, minutap, sekundap);
				}
				if(godzinap+czasjochym == 25 || godzinap+czasjochym == 26 || godzinap+czasjochym == 27 || godzinap+czasjochym == 28 || godzinap+czasjochym == 29 || godzinap+czasjochym == 30)
				{
			    	//format(stats, sizeof(stats), "%s\nPo BW do: \t\t%d.%d.%d  %d:%d:%d", stats, dzienp, miesiacp, rokp, godzinap+czasjochym, minutap, sekundap);
				}
				else
				{
				    format(stats, sizeof(stats), "%s\nPo BW do:\t%d.%d.%d  %d:%d:%d", stats, dzienp, miesiacp, rokp, godzinap+czasjochym, minutap, sekundap);
				}
			}
			format(stats, sizeof(stats), "%s\n{FFE5B4}R{FFFFFF}eputacja:\t{FFE5B4}%dRP", stats, DaneGracza[id][gReputacja]);
			format(stats, sizeof(stats), "%s\n{FFE5B4}G{FFFFFF}otówka:\t{63D075}${FFFFFF}%d", stats, DaneGracza[id][gPORTFEL]);
			format(stats, sizeof(stats), "%s\n{FFE5B4}E{FFFFFF}uro:\t{63D075}€{FFFFFF}%d", stats, DaneGracza[id][gEuro]);
			format(stats, sizeof(stats), "%s\n{FFE5B4}B{FFFFFF}ank:\t{63D075}${FFFFFF}%d, debet: $%d", stats, DaneGracza[id][gSTAN_KONTA], GetPVarInt(id, "DlugGracza"));
			format(stats, sizeof(stats), "%s\n{FFE5B4}N{FFFFFF}umer konta:\t{FFFFFF}%d", stats, DaneGracza[id][gNUMER_KONTA]);
			format(stats, sizeof(stats), "%s\n{222222}-\t ", stats);
			format(stats, sizeof(stats), "%s\n{FFE5B4}D{FFFFFF}ane:\t{FFE5B4}%s, %dlat.", stats, plec_gracza, DaneGracza[id][gWIEK]);
			format(stats, sizeof(stats), "%s\n{FFE5B4}S{FFFFFF}i³a:\t{FFE5B4}%dj", stats, DaneGracza[id][gSILA]);
			format(stats, sizeof(stats), "%s\n{FFE5B4}U{FFFFFF}branie:\t{FFE5B4}%d", stats, DaneGracza[id][gSKIN]);
			if(DaneGracza[id][gTelefon] == 0)
			{
				format(stats, sizeof(stats), "%s\n{FFE5B4}N{FFFFFF}umer telefonu:\t{FFE5B4}Brak", stats, DaneGracza[id][gTelefon]);
			}
			else
			{
				format(stats, sizeof(stats), "%s\n{FFE5B4}N{FFFFFF}umer telefonu:\t{FFE5B4}%d", stats, DaneGracza[id][gTelefon]);
			}
			format(stats, sizeof(stats), "%s\n{FFE5B4}U{FFFFFF}zale¿nienie:\t{FFE5B4}%0.1f", stats, DaneGracza[id][gUzaleznienie]);
			format(stats, sizeof(stats), "%s\n{FFE5B4}D{FFFFFF}NA:\t{FFE5B4}%d", stats, DaneGracza[id][gUID]+DaneGracza[id][gGUID]);
			format(stats, sizeof(stats), "%s\n{FFE5B4}S{FFFFFF}trefa:\t{FFE5B4}%d", stats, teren);
			if(ComparisonString(PrefixCity, ""))
			{
				format(PrefixCity, sizeof(PrefixCity), "PL");
			}
			format(stats, sizeof(stats), "%s\n{FFE5B4}K{FFFFFF}raj:\t{FFE5B4}%s", stats, PrefixCity);
		    if(DaneGracza[id][gPrzetrzmanie] == 0)
			{
				format(stats, sizeof(stats), "%s\n{FFE5B4}P{FFFFFF}rzetrzymanie:\t{FFE5B4}Wolny", stats);
			}
			else
			{
				if(godzinapr+czasjochym == 25)
				{
					format(stats, sizeof(stats), "%s\n{FFE5B4}P{FFFFFF}rzetrzymanie do:\t{FFE5B4}%d.%d.%d  1:%d:%d", stats, dzienpr+1, miesiacpr, rokpr, minutapr, sekundapr);
				}
				if(godzinapr+czasjochym == 26)
				{
					format(stats, sizeof(stats), "%s\n{FFE5B4}P{FFFFFF}rzetrzymanie do:\t{FFE5B4}%d.%d.%d  2:%d:%d", stats, dzienpr+1, miesiacpr, rokpr, minutapr, sekundapr);
				}
				if(godzinapr+czasjochym == 27)
				{
					format(stats, sizeof(stats), "%s\n{FFE5B4}P{FFFFFF}rzetrzymanie do:\t{FFE5B4}%d.%d.%d  3:%d:%d", stats, dzienpr+1, miesiacpr, rokpr, minutapr, sekundapr);
				}
				if(godzinapr+czasjochym == 28)
				{
					format(stats, sizeof(stats), "%s\n{FFE5B4}P{FFFFFF}rzetrzymanie do:\t{FFE5B4}%d.%d.%d  4:%d:%d", stats, dzienpr+1, miesiacpr, rokpr, minutapr, sekundapr);
				}
				if(godzinapr+czasjochym == 29)
				{
					format(stats, sizeof(stats), "%s\n{FFE5B4}P{FFFFFF}rzetrzymanie do:\t{FFE5B4}%d.%d.%d  5:%d:%d", stats, dzienpr+1, miesiacpr, rokpr, minutapr, sekundapr);
				}
				if(godzinapr+czasjochym == 30)
				{
					format(stats, sizeof(stats), "%s\n{FFE5B4}P{FFFFFF}rzetrzymanie do:\t{FFE5B4}%d.%d.%d  6:%d:%d", stats, dzienpr+1, miesiacpr, rokpr, minutapr, sekundapr);
				}
				if(godzinapr+czasjochym == 25 || godzinapr+czasjochym == 26 || godzinapr+czasjochym == 27 || godzinapr+czasjochym == 28 || godzinapr+czasjochym == 29 || godzinapr+czasjochym == 30)
				{
					//format(stats, sizeof(stats), "%s\nPrzetrzymanie do:\t%d.%d.%d  %d:%d:%d", stats, dzienp, miesiacp, rokp, godzinap+czasjochym, minutap, sekundap);
				}
				else
				{
					format(stats, sizeof(stats), "%s\n{FFE5B4}P{FFFFFF}rzetrzymanie do:\t{FFE5B4}%d.%d.%d  %d:%d:%d", stats, dzienpr, miesiacpr, rokpr, godzinapr+czasjochym, minutapr, sekundapr);
				}
			}
			format(stats, sizeof(stats), "%s\n{FFE5B4}H{FFFFFF}istoria:\t{FFE5B4}%s", stats, DaneGracza[id][gHistoria]);
		    format(stats, sizeof(stats), "{222222}%s\n-\t ", stats);
			format(stats, sizeof(stats), "%s\n»\t{9DB6D3}Dokumenty", stats);
			format(stats, sizeof(stats), "%s\n»\tWygl¹d", stats);
			format(stats, sizeof(stats), "%s\n»\t{9DB6D3}Ustawienia{FFFFFF}", stats);
			format(stats, sizeof(stats), "%s\n»\tUmiejêtnoœci postaci", stats);
			//
			strdel(tekst_global, 0, 2048);
			format(tekst_global,sizeof(tekst_global),"%s (%s) (ID: %d, UID: %d, GUID: %d, IP: %s)",ImieGracza2(id),DaneGracza[id][nickOOC],id,DaneGracza[id][gUID],DaneGracza[id][gGUID], IP);
			dShowPlayerDialog(playerid, DIALOG_STATS, DIALOG_STYLE_TABLIST_HEADERS, tekst_global, stats, "Wybierz", "Anuluj");
			return 1;
		}
	}
	return 1;
}
////mt 0 100 Mistral 54 0 0xFF88b711 0 1 (220022)Jochym*(000000)Zapraszamy
CMD:akceptujsmierc(playerid,cmdtext[])
{
	//printf("U¿yta komenda akceptujsmierc");
	if(zalogowany[playerid] == false)
    {
        return 0;
    }
	if(DaneGracza[playerid][gCZAS_ONLINE] < 10 * 60 * 60)
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Uœmiercenie swojej postaci jest mo¿liwe tylko i wy³¹cznie wtedy, gdy ma ona wiêcej ni¿ 10 godzin online.", "Zamknij", "");
		return 0;
	}
	if(DaneGracza[playerid][gBW] == 0)
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby akceptowaæ œmieræ twoja postaæ musi byæ nieprzytomna.", "Zamknij", "");
		return 0;
	}
	new playerid2[256];
	if(sscanf(cmdtext, "s[256]", playerid2))
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby uœmierciœ swoj¹ postaæ wpisz: /akceptujsmierc [powód]", "Zamknij", "");
		return 1;
	}
	strdel(tekst_global, 0, 2048);
	format(tekst_global, sizeof(tekst_global), "Cia³o %s",ZmianaNicku(playerid));
	new zabil = GetPVarInt(playerid, "Zabil");
	new zabil2 = GetPVarInt(playerid, "Zabil2");
	DodajPrzedmiot(DaneGracza[playerid][gUID], TYP_WLASCICIEL, P_TRUP, zabil, zabil2, tekst_global, DaneGracza[playerid][gUID], 0, -1, 0, 0, 0, 0, "");
	format(tekst_global, sizeof(tekst_global),"** %s umiera. Wszystkie jego przedmioty, które posiada³ obecnie przy sobie zosta³y przy jego martwym ciele. **",ZmianaNicku(playerid));
	SendWrappedMessageToPlayerRange(playerid, KOLOR_DO, tekst_global, 10);
	ForeachEx(i, MAX_PRZEDMIOT)
	{
		if(PrzedmiotInfo[i][pOwner] == DaneGracza[playerid][gUID] && PrzedmiotInfo[i][pUID] != 0 && PrzedmiotInfo[i][pTypWlas] == TYP_WLASCICIEL)
		{
			if(PrzedmiotInfo[i][pUzywany] != 0)
			{
				PrzedmiotInfo[i][pUzywany] = 0;
			}
            OdkladanieItemu(playerid, i);
		}
	}
	DeletePVar(playerid, "Zabil");
	DeletePVar(playerid, "Zabil2");
	DaneGracza[playerid][gAKTYWNE] = 0;
	ZapiszGracza(playerid);
	DodajDoBazyKare(DaneGracza[playerid][gGUID], DaneGracza[playerid][gUID], 13, playerid2, gettime()+CZAS_LETNI, -1, "Nie", DaneGracza[playerid][gGUID]);
	Kick(playerid);
	return 1;
}
CMD:corner(playerid, cmdtext[])
{
	if(GetPVarInt(playerid, "CornerLokalizacja") == 0)
	{
	    SetPVarInt(playerid, "CornerLokalizacja", 1);
		ForeachEx(id, MAX_CORNER)
		{
	    	SetPlayerMapIcon(playerid, id, Corner[id][cX], Corner[id][cY], Corner[id][cZ], 23, 0, MAPICON_LOCAL_CHECKPOINT);
		}
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Corner", "Wszystkie Cornery zosta³y oznaczone na mini-mapie, musisz znajdowaæ siê w pobli¿nu nich by zosta³y wyœwietlone udaj siê na poszukiwania!!", "Zamknij", "");
		return 1;
	}
	else
	{
	    SetPVarInt(playerid, "CornerLokalizacja", 0);
		ForeachEx(id, MAX_CORNER)
		{
	    	RemovePlayerMapIcon(playerid, id);
		}
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Corner", "Wszystkie Cornery na mini-mapie zosta³y ukryte!", "Zamknij", "");
		return 1;
	}
}
CMD:zlom(playerid, cmdtext[])
{
    new hour, minute;
	gettime(hour, minute);
    if(DaneGracza[playerid][gBW] != 0)
	{
		return 0;
	}
	new teren = GraczNaTerenie(playerid);
	if(teren != 798)
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Z³omowisko:", "Nie znajdujesz siê na terenie z³omowiska, udaj siê na z³omowisko by zez³omowac pojazd lub odkupiæ u¿ywany pojazd!", "Zamknij", "");
		return 1;
	}
	if(IsPlayerInAnyVehicle(playerid))
 	{
 	    new vehicleid = GetPlayerVehicleID(playerid);
 	    new veh = SprawdzCarUID(vehicleid);
 	    if(PojazdInfo[veh][pOwnerPostac] == DaneGracza[playerid][gUID] && PojazdInfo[veh][pOwnerDzialalnosc] == 0 || WlascicielpojazduBezWYP(vehicleid, playerid))
		{
			if(PojazdInfo[veh][pNaprawy] >= 15000 || PojazdInfo[veh][pTempomat] != 0)
			{
			    new text[512];
				new model = GetVehicleModel(vehicleid);
				new cenap;
	            ForeachEx(i, MAX_HURT)
				{
					if(HurtowniaInfo[i][hTypP] == 46 && HurtowniaInfo[i][hWar1] == model)
					{
			    		cenap = HurtowniaInfo[i][hCena];
			    		break;
					}
				}
			    new procent = floatround(cenap/10);
			    SetPVarInt(playerid, "zlomuj", veh);
			    SetPVarInt(playerid, "zlomujc", procent);
				format(text, sizeof(text), "Twój pojazd zostanie zez³omowany za: %d, oferujemy Ci dobr¹ cenê - decyzja nale¿y do Ciebie!\n(( Wy¿ej zosta³a podana wycena twojego pojazdu,za tyle z³omowisko mo¿e od Ciebie odkupiæ pojazd ))", procent);
				dShowPlayerDialog(playerid, DIALOG_ZLOMUJ, DIALOG_STYLE_MSGBOX, GUIOPIS "Z³omowisko:", text, "Akceptuj", "Anuluj");
				return 1;
			}
			else
			{
			    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Z³omowisko:", "Twój pojazd nie mo¿e zostaæ zez³omowany ze wzglêdu ¿e nie osi¹gn¹³ 15.000 napraw lub nie jest kradziony.\nPo osi¹gniêciu limitu udaj siê tutaj z powrotem by siê go pozbyæ lub przywieŸ do nas samochód bez dokumentów!", "Zamknij", "");
				return 1;
			}
		}
		else
		{
		    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Z³omowisk:", "Nie posiadasz uprawnieñ do tego pojazdu, by go zez³omowaæ.", "Zamknij", "");
			return 1;
		}
	}
	else
	{
	    new item_list[64], items_list[1024], find;
		format(items_list, sizeof(items_list), "%s\nUID\t\tCena\t\tNazwa",items_list);
		ForeachEx(i, MAX_VEH)
		{
			if(PojazdInfo[i][pOwnerDzialalnosc] == 13)
			{
				format(item_list, sizeof(item_list), "%d\t\t$%d\t\t%s", PojazdInfo[i][pUID], PojazdInfo[i][pMoc], GetVehicleModelName(PojazdInfo[i][pModel]));
				format(items_list, sizeof(items_list), "%s\n%s", items_list, item_list);
				find++;
	  		}
		}
		if(find != 0)
		{
			dShowPlayerDialog(playerid, DIALOG_ZLOMUJ_KUP, DIALOG_STYLE_LIST, GUIOPIS "Zlomowisko:", items_list, "Zakup", "Zamknij");
		}
		if(find == 0)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Z³omowisk:", "Brak dostêpnych pojazdów, które móg³byœ odkupiæ z z³omowiska.", "Zamknij", "");
			return 1;
		}
	}
	return 1;
}
CMD:pojazdy(playerid, cmdtext[])
{
    new	list_vehicles[2048], find = 0;
    spawns[playerid] = 0;
	format(list_vehicles, sizeof(list_vehicles), "%s\n{848484}UID\tStan (hp)\tPrzebieg (km)\tPaliwo (l)\tNazwa pojazdu", list_vehicles);
	ForeachEx(i, MAX_VEH)
	{
        if(PojazdInfo[i][pSpawn] != 0)
		{
			format(list_vehicles, sizeof(list_vehicles), "%s\n%d\t%0.01f\t\t%0.01f\t\t%0.01f\t\t* %s", list_vehicles, PojazdInfo[i][pUID], PojazdInfo[i][pStan], PojazdInfo[i][pPrzebieg]/1000, PojazdInfo[i][pPaliwo], GetVehicleModelName(PojazdInfo[i][pModel]));
			spawns[playerid]++;
		}
        else format(list_vehicles, sizeof(list_vehicles), "%s\n%d\t%0.01f\t\t%0.01f\t\t%0.01f\t\t %s", list_vehicles, PojazdInfo[i][pUID], PojazdInfo[i][pStan], PojazdInfo[i][pPrzebieg]/1000, PojazdInfo[i][pPaliwo], GetVehicleModelName(PojazdInfo[i][pModel]));
        find++;
        if(find > 0)
		{
			dShowPlayerDialog(playerid, DIALOG_VEH_SPAWN, DIALOG_STYLE_LIST, GUIOPIS "Pojazdy:", list_vehicles, "Wybierz", "Zamknij");
		}
		else dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "\nNie ma ¿adnego zespawnowanego pojazdu na serwerze,\ngdy któryœ bêdzie zespawnowany pojawi siê on tutaj na liscie!.", "Zamknij", "");
		return 1;
	}
	return 1;
}
CMD:v(playerid, cmdtext[])
{
	//printf("U¿yta komenda v");
    if(zalogowany[playerid] == false)
    {
        return 0;
    }
	if(DaneGracza[playerid][gBW] != 0)
	{
		return 0;
	}
    new	comm1[32], comm2[128];
    new vehicleid = GetPlayerVehicleID(playerid);
	new veh = SprawdzCarUID(vehicleid);
	spawns[playerid] = 0;
	if(sscanf(cmdtext, "s[32]S()[128]", comm1, comm2))
	{
        if(!IsPlayerInAnyVehicle(playerid))
		{
			new	list_vehicles[2024], find = 0;
			format(list_vehicles, sizeof(list_vehicles), "{848484}UID\t{848484}Stan (HP)\t{848484}Przebieg (KM)\t{848484}Nazwa pojazdu");
			ForeachEx(i, MAX_VEH)
			{
			    if(PojazdInfo[i][pOwnerPostac] == DaneGracza[playerid][gUID] && PojazdInfo[i][pOwnerDzialalnosc] == 0)
			    {
			        if(PojazdInfo[i][pSpawn] != 0)
					{
						format(list_vehicles, sizeof(list_vehicles), "%s\n%d\t%0.01f\t%0.01f\t* %s", list_vehicles, PojazdInfo[i][pUID], PojazdInfo[i][pStan], PojazdInfo[i][pPrzebieg]/1000, GetVehicleModelName(PojazdInfo[i][pModel]));
						spawns[playerid]++;
					}
			        else format(list_vehicles, sizeof(list_vehicles), "%s\n%d\t%0.01f\t%0.01f\t%s", list_vehicles, PojazdInfo[i][pUID], PojazdInfo[i][pStan], PojazdInfo[i][pPrzebieg]/1000, GetVehicleModelName(PojazdInfo[i][pModel]));
			        find++;
			    }
			}
			if(find >= 5 && DaneGracza[playerid][gZD4] == 0)
			{
			    CzasWyswietlaniaTextuNaDrzwiach[playerid] = 30;
				TextDrawHideForPlayer(playerid, TextNaDrzwi[playerid]);
				TextDrawSetString(TextNaDrzwi[playerid], "~y~Osiagniecie~n~~w~Kolekcjoner! ~g~+100QPoints");
				TextDrawShowForPlayer(playerid, TextNaDrzwi[playerid]);
				DaneGracza[playerid][gGAMESCORE] += 100;
				DaneGracza[playerid][gZD4] = 1;
			    SetPlayerScore(playerid,DaneGracza[playerid][gGAMESCORE]);
				ZapiszGracza(playerid);
				ZapiszGraczaGlobal(playerid, 1);
			}
			if(find > 0)
			{
				dShowPlayerDialog(playerid, DIALOG_VEH_SPAWN, DIALOG_STYLE_TABLIST_HEADERS, GUIOPIS "Pojazdy:", list_vehicles, "Wybierz", "Zamknij");
				if(GetPVarInt(playerid, "VPOMOC") == 0)
				{
					SendClientMessage(playerid,0xb2b2b2FF,"/v (lista, info, zamknij (z), parkuj, opis, namierz)");
					SetPVarInt(playerid, "VPOMOC", 1);
				}
			}
			else dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "\nW tym miejscu pojawi siê lista posiadanych przed Ciebie pojazdów\n\nKup nowy pojazd w salonie samochodowym lub u¿ywany od innego gracza.", "Zamknij", "");
			return 1;
		}
		else
		{
			new tekst[126];
			format(tekst, sizeof(tekst), "%s (UID: %d, HP: %0.01f, %0.01fkm)", GetVehicleModelName(PojazdInfo[veh][pModel]), PojazdInfo[veh][pUID], PojazdInfo[veh][pStan], PojazdInfo[veh][pPrzebieg]/1000);
			strdel(tekst_global, 0,2048);
	        format(tekst_global, sizeof(tekst_global), "%s\n{FFE5B4}P{FFFFFF}oka¿ informacje", tekst_global);
	        format(tekst_global, sizeof(tekst_global), "%s\n{FFE5B4}P{FFFFFF}rzepisz pojazd pod grupê", tekst_global);
	        format(tekst_global, sizeof(tekst_global), "%s\n{FFE5B4}Z{FFFFFF}obacz komponenty pojazdu", tekst_global);
	        format(tekst_global, sizeof(tekst_global), "%s\n{FFE5B4}Z{FFFFFF}arz¹dzanie pojazdem", tekst_global);
	        format(tekst_global, sizeof(tekst_global), "%s\n{FFE5B4}D{FFFFFF}odatkowe opcje", tekst_global);
	        format(tekst_global, sizeof(tekst_global), "%s\n-----------------", tekst_global);
	        format(tekst_global, sizeof(tekst_global), "%s\n{FFE5B4}S{FFFFFF}przedaj pojazd graczowi", tekst_global);
	        format(tekst_global, sizeof(tekst_global), "%s\n{FFE5B4}W{FFFFFF}ymieñ siê pojazdem z graczem", tekst_global);
	        dShowPlayerDialog(playerid, DIALOG_MANIPULATION_VEH, DIALOG_STYLE_LIST, tekst, tekst_global, "Wybierz", "Zamknij");
		}
	}
	else if(!strcmp(comm1,"parkuj",true))
	{
	    if(vehicleid == INVALID_VEHICLE_ID)
		{
		    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby przeprakowaæ pojazd musisz znajdowaæ siê w pojezdzie.", "Zamknij", "");
		    return 1;
		}
		if(GetPlayerState(playerid)!=PLAYER_STATE_DRIVER)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby przeprakowaæ pojazd musisz znajdowaæ siê za kierownic¹ pojazdu.", "Zamknij", "");
			return 1;
		}
		if(PojazdInfo[veh][pOwnerPostac] == DaneGracza[playerid][gUID] && PojazdInfo[veh][pOwnerDzialalnosc] == 0 || WlascicielpojazduBezWYP(vehicleid, playerid))
		{
			GetVehiclePos(vehicleid, PojazdInfo[veh][pX], PojazdInfo[veh][pY], PojazdInfo[veh][pZ]);
			GetVehicleZAngle(vehicleid, PojazdInfo[veh][pAngle]);
			PojazdInfo[veh][pVw] = GetVehicleVirtualWorld(vehicleid);
			ZapiszPojazd(veh, 1);
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Twój pojazd zosta³ przeparkowany w nowe miejsce.", "Zamknij", "");
			new logtekst[256];
			format(logtekst, sizeof(logtekst), "[CAR] [%s] [ID: %d] Park vehicles %s (%d)", ZmianaNicku(playerid), playerid, GetVehicleModelName(PojazdInfo[veh][pModel]), veh);
			Transakcja(T_CDRZWI, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, logtekst, gettime()+KOREKTA_CZASOWA);
		}
		else
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Ten pojazd nie nale¿y do ciebie - b¹dz nie jesteœ ownerem grupy do której nale¿y pojazd.", "Zamknij", "");
		}
		return 1;
	}
	else if(!strcmp(comm1,"opis",true))
	{
		if(!IsPlayerInAnyVehicle(playerid))
	    {
			return 0;
		}
		new veh1 = GetPlayerVehicleID(playerid);
		//new vehc = SprawdzCarUID(veh1);
		if(!Wlascicielpojazdu(veh1, playerid))
		{
		    GameTextForPlayer(playerid, "~r~Brak uprawnien.", 3000, 5);
		    return 1;
		}
		strdel(tekst_global, 0, 2048);
		strdel(tekst_globals, 0, 2048);
		if(sscanf(comm2, "s[300]",tekst_global))
		{
			UpdateDynamic3DTextLabelText(Vopis[veh1], 0xAAAAFFFF, " ");
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby ustawiæ opis swojego pojazdu wpisz: /v opis [treœæ]\nJeœli mia³eœ teraz ustawiony opis swojej postaci, b¹dz pojazdu zosta³ w³aœnie usuniêty.", "Zamknij", "");
			return 1;
		}
		UpdateDynamic3DTextLabelText(DaneGracza[playerid][gOpisPostaci], 0xAAAAFFFF, " ");
		new liczba = 30;
		for(new i = 0; i < strlen(tekst_global); i++)
		{
			if(i >= liczba && tekst_global[i] == ' ')
			{
				strins(tekst_global, "\n", i);
				liczba+=30;
			}
		}
		UpdateDynamic3DTextLabelText(Vopis[veh1], 0xAAAAFFFF, " ");
		format(tekst_globals, sizeof(tekst_globals), "Opis twojego pojazdu zosta³ ustawiony.\nAby usun¹æ opis swojego pojazdu wpisz: /v opis");
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", tekst_globals, "Zamknij", "");
		UpdateDynamic3DTextLabelText(Vopis[veh1], 0xAAAAFFFF, tekst_global);
		OpisekJaki[playerid] = veh1;
		return 1;
	}
	else if(!strcmp(comm1,"z",true)||!strcmp(comm1,"zamknij",true))
	{
	    new vec = GetClosestVehicle(playerid, 20);
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        vec = GetPlayerVehicleID(playerid);
	    }
	    new vehc = SprawdzCarUID(vec);
	    if(vec == INVALID_VEHICLE_ID)
	    {
	        GameTextForPlayer(playerid, "~r~Nie stoisz przy zadnym pojezdzie!", 3000, 5);
		    return 1;
		}
		new Creativ = 1;
		if(PojazdInfo[vehc][pOwnerPostac] == Creativ)
		{
			if(!Wlascicielpojazduv2(vec, playerid))
			{
				GameTextForPlayer(playerid, "~r~Nie posiadasz uprawnien do otwierania tego pojazdu!", 3000, 5);
				return 1;
			}
		}
		else
		{
			if(!Wlascicielpojazdu(vec, playerid))
			{
				GameTextForPlayer(playerid, "~r~Nie posiadasz uprawnien do otwierania tego pojazdu!", 3000, 5);
				return 1;
			}
		}
		if(Dostal[playerid] != 0)
	 	{
	 	    return 0;
	 	}
	 	if(Dostal2[playerid] != 0)
	 	{
	 	    return 0;
	 	}
		new lights,doors,bonnet,boot,objective,engine,alarm;
		GetVehicleParamsEx(vec,engine,lights,alarm,doors,bonnet,boot,objective);
		if(PojazdInfo[vehc][pLock] == 0)
		{
			PojazdInfo[vehc][pLock] = 1;
			ZapiszPojazd(veh, 1);
			new logtekst[256];
			format(logtekst, sizeof(logtekst), "[CAR] [%s] [ID: %d] Closed vehicle %s (%d)", ZmianaNicku(playerid), playerid, GetVehicleModelName(PojazdInfo[vehc][pModel]), vehc);
			Transakcja(T_CDRZWI, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, logtekst, gettime()+KOREKTA_CZASOWA);
			GameTextForPlayer(playerid, "Pojazd ~r~zamkniety", 3000, 5);
            if(!IsPlayerInAnyVehicle(playerid))
			{
				if(PojazdInfo[vehc][pAlarm] == 0)
				{
					ApplyAnimation(playerid,"INT_HOUSE","wash_up",4.1,0,0,0,0,0);
					new Float:x, Float:y, Float:z;
					GetPlayerPos(playerid, x, y, z);
					ForeachEx(ig, MAX_PLAYERS)
					{
						if(IsPlayerConnected(ig))
						{
							if(zalogowany[ig] == true)
							{
								if(IsPlayerInRangeOfPoint(ig, 30, x, y, z))
								{
									PlayerPlaySound(playerid,1145,0.0,0.0,0.0);
									PlayerPlaySound(ig,1145,0.0,0.0,0.0);
								}
							}
						}
					}
				}
				else
				{
					OnPlayerText(playerid, "-karta");
					new Float:x, Float:y, Float:z;
					GetPlayerPos(playerid, x, y, z);
					ForeachEx(ig, MAX_PLAYERS)
					{
						if(IsPlayerConnected(ig))
						{
							if(zalogowany[ig] == true)
							{
								if(IsPlayerInRangeOfPoint(ig, 30, x, y, z))
								{
									PlayerPlaySound(playerid,1147,0.0,0.0,0.0);
									PlayerPlaySound(ig,1147,0.0,0.0,0.0);
								}
							}
						}
					}
				}
			}
			SetVehicleParamsEx(vec,engine,lights,false,true,bonnet,boot,objective);
			new akcja[126];
			format(akcja,sizeof(akcja),"*zamyka pojazd*");
			SetPlayerChatBubble(playerid, akcja, FIOLETOWY, 10.0, 4000);
			TextDrawSetString(AkcjaTD[playerid], akcja);
			TextDrawShowForPlayer(playerid, AkcjaTD[playerid]);
			CzasWyswietlaniaTextuNaDrzwiach[playerid] = 10;
		}
		else
		{
			PojazdInfo[vehc][pLock] = 0;
			ZapiszPojazd(veh, 1);
			new logtekst[256];
			format(logtekst, sizeof(logtekst), "[CAR] [%s] [ID: %d] Open vehicle %s (%d)", ZmianaNicku(playerid), playerid, GetVehicleModelName(PojazdInfo[vehc][pModel]), vehc);
			Transakcja(T_CDRZWI, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, logtekst, gettime()+KOREKTA_CZASOWA);
			GameTextForPlayer(playerid, "Pojazd ~g~otwarty", 3000, 5);
			if(!IsPlayerInAnyVehicle(playerid))
			{
				if(PojazdInfo[vehc][pAlarm] == 0)
				{
					ApplyAnimation(playerid,"INT_HOUSE","wash_up",4.1,0,0,0,0,0);
				}
				else
				{
					OnPlayerText(playerid, "-karta");
					new Float:x, Float:y, Float:z;
					GetPlayerPos(playerid, x, y, z);
					ForeachEx(ig, MAX_PLAYERS)
					{
						if(IsPlayerConnected(ig))
						{
							if(zalogowany[ig] == true)
							{
								if(IsPlayerInRangeOfPoint(ig, 30, x, y, z))
								{
									PlayerPlaySound(ig,1147,0.0,0.0,0.0);
								}
							}
						}
					}
				}
			}
			SetVehicleParamsEx(vec,engine,lights,false,false,bonnet,boot,objective);
			new akcja[126];
			format(akcja,sizeof(akcja),"*otwiera pojazd*");
			SetPlayerChatBubble(playerid, akcja, FIOLETOWY, 10.0, 4000);
			TextDrawSetString(AkcjaTD[playerid], akcja);
			TextDrawShowForPlayer(playerid, AkcjaTD[playerid]);
			CzasWyswietlaniaTextuNaDrzwiach[playerid] = 10;
		}
		return 1;
	}
	else if(!strcmp(comm1,"klawiszz",true))
	{
	    new vec = GetClosestVehicle(playerid, 20);
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        vec = GetPlayerVehicleID(playerid);
	    }
	    new vehc = SprawdzCarUID(vec);
	    if(vec == INVALID_VEHICLE_ID)
	    {
		    return 0;
		}
		new Creativ = 1;
		if(PojazdInfo[vehc][pOwnerPostac] == Creativ)
		{
			if(!Wlascicielpojazduv2(vec, playerid))
			{
				GameTextForPlayer(playerid, "~r~Nie posiadasz uprawnien do otwierania tego pojazdu!", 3000, 5);
				return 1;
			}
		}
		else
		{
			if(!Wlascicielpojazdu(vec, playerid))
			{
				GameTextForPlayer(playerid, "~r~Nie posiadasz uprawnien do otwierania tego pojazdu!", 3000, 5);
				return 1;
			}
		}
		if(Dostal[playerid] != 0)
	 	{
	 	    return 0;
	 	}
	 	if(Dostal2[playerid] != 0)
	 	{
	 	    return 0;
	 	}
		new lights,doors,bonnet,boot,objective,engine,alarm;
		GetVehicleParamsEx(vec,engine,lights,alarm,doors,bonnet,boot,objective);
		if(PojazdInfo[vehc][pLock] == 0)
		{
			PojazdInfo[vehc][pLock] = 1;
			ZapiszPojazd(veh, 1);
			new logtekst[256];
			format(logtekst, sizeof(logtekst), "[CAR] [%s] [ID: %d] Closed vehicle %s (%d)", ZmianaNicku(playerid), playerid, GetVehicleModelName(PojazdInfo[vehc][pModel]), vehc);
			Transakcja(T_CDRZWI, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, logtekst, gettime()+KOREKTA_CZASOWA);
			GameTextForPlayer(playerid, "Pojazd ~r~zamkniety", 3000, 5);
            if(!IsPlayerInAnyVehicle(playerid))
			{
				if(PojazdInfo[vehc][pAlarm] == 0)
				{
					ApplyAnimation(playerid,"INT_HOUSE","wash_up",4.1,0,0,0,0,0);
				}
				else
				{
					OnPlayerText(playerid, "-karta");
					new Float:x, Float:y, Float:z;
					GetPlayerPos(playerid, x, y, z);
					ForeachEx(ig, MAX_PLAYERS)
					{
						if(IsPlayerConnected(ig))
						{
							if(zalogowany[ig] == true)
							{
								if(IsPlayerInRangeOfPoint(ig, 30, x, y, z))
								{
									PlayerPlaySound(ig,1147,0.0,0.0,0.0);
								}
							}
						}
					}
				}
			}
			SetVehicleParamsEx(vec,engine,lights,false,true,bonnet,boot,objective);
			new akcja[126];
			format(akcja,sizeof(akcja),"*zamyka pojazd*");
			SetPlayerChatBubble(playerid, akcja, FIOLETOWY, 10.0, 4000);
			TextDrawSetString(AkcjaTD[playerid], akcja);
			TextDrawShowForPlayer(playerid, AkcjaTD[playerid]);
			CzasWyswietlaniaTextuNaDrzwiach[playerid] = 10;
		}
		else
		{
			PojazdInfo[vehc][pLock] = 0;
			ZapiszPojazd(veh, 1);
			GameTextForPlayer(playerid, "Pojazd ~g~otwarty", 3000, 5);
			new logtekst[256];
			format(logtekst, sizeof(logtekst), "[CAR] [%s] [ID: %d] Open vehicle %s (%d)", ZmianaNicku(playerid), playerid, GetVehicleModelName(PojazdInfo[vehc][pModel]), vehc);
			Transakcja(T_CDRZWI, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, logtekst, gettime()+KOREKTA_CZASOWA);
			if(!IsPlayerInAnyVehicle(playerid))
			{
				if(PojazdInfo[vehc][pAlarm] == 0)
				{
					ApplyAnimation(playerid,"INT_HOUSE","wash_up",4.1,0,0,0,0,0);
				}
				else
				{
					OnPlayerText(playerid, "-karta");
					new Float:x, Float:y, Float:z;
					GetPlayerPos(playerid, x, y, z);
					ForeachEx(ig, MAX_PLAYERS)
					{
						if(IsPlayerConnected(ig))
						{
							if(zalogowany[ig] == true)
							{
								if(IsPlayerInRangeOfPoint(ig, 30, x, y, z))
								{
									PlayerPlaySound(ig,1147,0.0,0.0,0.0);
								}
							}
						}
					}
				}
			}
			SetVehicleParamsEx(vec,engine,lights,false,false,bonnet,boot,objective);
			new akcja[126];
			format(akcja,sizeof(akcja),"*otwiera pojazd*");
			SetPlayerChatBubble(playerid, akcja, FIOLETOWY, 10.0, 4000);
			TextDrawSetString(AkcjaTD[playerid], akcja);
			TextDrawShowForPlayer(playerid, AkcjaTD[playerid]);
			CzasWyswietlaniaTextuNaDrzwiach[playerid] = 10;
		}
		return 1;
	}
	else if(!strcmp(comm1,"odpal",true))
	{
	    new vehc = SprawdzCarUID(vehicleid);
	    if(PojazdInfo[vehc][pModel] != 481 && PojazdInfo[vehc][pModel] != 510 && PojazdInfo[vehc][pModel] != 509)
		{
		    if(vehicleid == INVALID_VEHICLE_ID)
			{
			    return 0;
			}
			if(GetPlayerState(playerid)!=PLAYER_STATE_DRIVER)
			{
				return 0;
			}
		    if(!Wlascicielpojazdu(vehicleid, playerid))
			{
			    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie posiadasz uprawnieñ do odpalenia tego pojazdu.", "Zamknij", "");
			    return 0;
			}
			if(PojazdInfo[vehc][pBlokada] != 0)
	        {
				strdel(tekst_global, 0, 2048);
	            format(tekst_global, sizeof(tekst_global), "Na ten pojazd zosta³a na³o¿ona blokada na ko³o o wartoœci: $%d.\nAby zdj¹æ blokade nale¿y skontaktowaæ siê z Police Departament.", PojazdInfo[vehc][pBlokada]);
	            dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", tekst_global, "Rozumiem", "");
	            return 0;
			}
			if(PojazdInfo[vehc][pStan] <= 350)
	        {
	            dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Ten pojazd jest zniszczony udaj siê do warsztatu aby go naprawiæ.\nZniszczone pojazdy mo¿na naprawiaæ w ka¿dym miejscu.", "Zamknij", "");
	            return 0;
			}
			if(PojazdInfo[vehc][pTypPaliwa] == 0)
			{
				return 0;
			}
			new lights,doors,bonnet,boot,objective,engine,alarm;
		    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
			if(PojazdInfo[vehc][pSilnik]==1)
			{
				GameTextForPlayer(playerid,"~r~Wylaczanie silnika!",3000,5);
				PojazdInfo[vehc][pSilnik] = 0;
				if(!Rowery(vehicleid))
		    	{
					new msg[64];
					format(msg,254,"~b~LCTRL~w~ by uruchomic silnik~n~~b~LPM~w~ by zapalic swiatla");
					TextDrawSetString(VehicleTD[playerid], msg);
					TextDrawShowForPlayer(playerid, VehicleTD[playerid]);
					SetPVarInt(playerid, "TDSilnika", 1);
				}
				SetPVarInt(playerid, "ZgasilSilnik", 1);
				GetVehiclePos(vehicleid,dOstatniX[playerid],dOstatniY[playerid],dOstatniZ[playerid]);
				SetTimerEx("Reczny",20000,0,"d",vehicleid, playerid);
				SetVehicleParamsEx(vehicleid,false,lights,alarm,doors,bonnet,boot,objective);
				TextDrawHideForPlayer(playerid, Licznik[playerid]);
				KillTimer(PojazdInfo[vehc][pTimer]);
				HideProgressBarForPlayer(playerid, PasekPaliwa[playerid]);
				HideProgressBarForPlayer(playerid, PasekNitro[playerid]);
				TextDrawHideForPlayer(playerid, VehicleTDP[playerid]);
				SetPVarInt(playerid, "silnikAC", 1);
				SetTimerEx("silnikSTOP",15000,0,"d",playerid);
				new logtekst[256];
				format(logtekst, sizeof(logtekst), "[CAR] [%s] [ID: %d] He turned off the vehicle's %s (%d) engine", ZmianaNicku(playerid), playerid, GetVehicleModelName(PojazdInfo[vehc][pModel]), vehc);
				Transakcja(T_CDRZWI, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, logtekst, gettime()+KOREKTA_CZASOWA);
       			if(GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), GetVehicleComponentType(1010)) == 1010)
				{
				    if(PojazdInfo[vehc][pPaliwoGaz] != 0)
					{
						DestroyProgressBar(PasekNitro[playerid]);
						PasekNitro[playerid] = CreateProgressBar(527.0,432.0,106.0,_, 0x00FF00FF, 100.0);
						SetProgressBarMaxValue(Bar:PasekNitro[playerid], 100.0);
						SetProgressBarValue(Bar:PasekNitro[playerid], PojazdInfo[vehc][pPaliwoGaz]);
						ShowProgressBarForPlayer(playerid, PasekNitro[playerid]);
					}
				}
			}
			else
			{
				if(PojazdInfo[vehc][pPaliwo]<=0 && PojazdInfo[vehc][pGaz] != 2)
		        {
		            dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie mo¿esz odpaliæ pojazdu, poniewa¿ skoñczy³o mu siê paliwo.", "Zamknij", "");
		            return 1;
		        }
				if(PojazdInfo[vehc][pPaliwoGaz]<=0 && PojazdInfo[vehc][pGaz] == 2)
		        {
		            dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie mo¿esz odpaliæ pojazdu, poniewa¿ skoñczy³ siê gaz.", "Zamknij", "");
		            return 1;
		        }
				GameTextForPlayer(playerid,"~g~Wlaczanie silnika!",2000,5);
				GetVehiclePos(vehicleid,dOstatniX[playerid],dOstatniY[playerid],dOstatniZ[playerid]);
				KillTimer(PojazdInfo[vehc][pStartSilnik]);
				PojazdInfo[vehc][pStartSilnik] = SetTimerEx("SilnikStart",2000,0,"ddd",vehc,vehicleid, playerid);
                if(GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), GetVehicleComponentType(1010)) == 1010)
				{
					if(PojazdInfo[vehc][pPaliwoGaz] != 0)
					{
						DestroyProgressBar(PasekNitro[playerid]);
						PasekNitro[playerid] = CreateProgressBar(527.0,432.0,106.0,_, 0x00FF00FF, 100.0);
						SetProgressBarMaxValue(Bar:PasekNitro[playerid], 100.0);
						SetProgressBarValue(Bar:PasekNitro[playerid], PojazdInfo[vehc][pPaliwoGaz]);
						ShowProgressBarForPlayer(playerid, PasekNitro[playerid]);
					}
				}
			}
		}
	    return 1;
	}
	else if(!strcmp(comm1,"namierz",true))
	{
	    DisablePlayerCheckpoint(playerid);
	    new	list_vehicles[512], find = 0;
	   	ForeachEx(i, MAX_VEH)
		{
		    if(PojazdInfo[i][pOwnerPostac] == DaneGracza[playerid][gUID] && PojazdInfo[i][pOwnerDzialalnosc] == 0 && PojazdInfo[i][pSpawn] == 1)
		    {
				format(list_vehicles, sizeof(list_vehicles), "%s\n%d\t%s", list_vehicles, PojazdInfo[i][pUID], GetVehicleModelName(PojazdInfo[i][pModel]));
				find++;
		    }
		}
		if(find > 0) dShowPlayerDialog(playerid, DIALOG_VEH_NAMIERZ, DIALOG_STYLE_LIST, GUIOPIS "Pojazdy:", list_vehicles, "Wybierz", "Zamknij");
		else dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby namierzyæ pojazd musi on byæ zespawnowany.", "Zamknij", "");
	    return 1;
	}
	else if(!strcmp(comm1,"info",true))
	{
	    if(vehicleid == INVALID_VEHICLE_ID)
		{
		    return 0;
		}
		if(IsPlayerInAnyVehicle(playerid))
	    {
			if(Wlascicielpojazdu(vehicleid, playerid))
			{
				new vehc1 = SprawdzCarUID(vehicleid);
				new Audiotxt[10], Alarmtxt[10], Immotxt[10], CBtxt[10], szyby2[32], gpstxt[10], skradziony[10];
				if(PojazdInfo[vehc1][pImmo] == 0) Immotxt="N"; else Immotxt="T";
				if(PojazdInfo[vehc1][pCB] == 0) CBtxt="N"; else CBtxt="T";
				if(PojazdInfo[vehc1][pAlarm] == 0) Alarmtxt="N"; else Alarmtxt="T";
				if(PojazdInfo[vehc1][pAudio] == 0) Audiotxt="N"; else Audiotxt="T";
				if(PojazdInfo[vehc1][pGPS] == 0) gpstxt="N"; else gpstxt="T";
				if(PojazdInfo[vehc1][pPSzyba] == 0) szyby2="Nieprzyciemnione"; else szyby2="Przyciemnione";
				if(PojazdInfo[vehc1][pTempomat] == 0) skradziony="N"; else skradziony="T";
				strdel(tekst_global, 0, 2048);
				format(tekst_global, sizeof(tekst_global), "~p~UID:~w~ %d  ~p~Owner:~w~ %d:%d  ~p~Model:~w~ %s~n~~p~ID:~w~ %d  ~p~Kolor:~w~ %d:%d~n~~b~Przebieg:~w~ %0.01f  ~b~HP:~w~ %0.01f  ~b~Paliwo:~w~ %0.01f~n~~n~~y~Alarm: ~w~%s  ~y~Immobiliser: ~w~%s  ~y~CB Radio: ~w~%s (K: %d)~n~~y~Audio: ~w~%s ~y~Kogut: ~w~%s ~y~Skradziony: ~w~%s~n~~y~Szyby: ~w~%s ~y~Zuzycie pojazdu: ~w~%0.01f ~y~Nitro: ~w~%0.01f",
				PojazdInfo[vehc1][pUID], PojazdInfo[vehc1][pOwnerPostac], PojazdInfo[vehc1][pOwnerDzialalnosc], GetVehicleModelName(PojazdInfo[vehc1][pModel]), PojazdInfo[vehc1][pID], PojazdInfo[vehc1][pKolor], PojazdInfo[vehc1][pKolor2], PojazdInfo[vehc1][pPrzebieg]/1000, PojazdInfo[vehc1][pStan], PojazdInfo[vehc1][pPaliwo], Alarmtxt, Immotxt, CBtxt, PojazdInfo[vehc1][pKanal], Audiotxt, gpstxt, skradziony, szyby2, PojazdInfo[vehc1][pNaprawy], PojazdInfo[vehc1][pPaliwoGaz]);
				TextDrawSetString(OBJ[playerid], tekst_global);
				TextDrawShowForPlayer(playerid, OBJ[playerid]);
				SetTimerEx("NapisUsunsV",15000,0,"d",playerid);
			}
			else
			{
				new vehc = SprawdzCarUID(vehicleid);
				new Audiotxt[10], Immotxt[10], CBtxt[10], szyby2[32], gpstxt[10], skradziony[10];
				if(PojazdInfo[vehc][pImmo] == 0) Immotxt="N"; else Immotxt="T";
				if(PojazdInfo[vehc][pCB] == 0) CBtxt="N"; else CBtxt="T";
				if(PojazdInfo[vehc][pAudio] == 0) Audiotxt="N"; else Audiotxt="T";
				if(PojazdInfo[vehc][pGPS] == 0) gpstxt="N"; else gpstxt="T";
				if(PojazdInfo[vehc][pPSzyba] == 0) szyby2="Nieprzyciemnione"; else szyby2="Przyciemnione";
				if(PojazdInfo[vehc][pTempomat] == 0) skradziony="N"; else skradziony="T";
				strdel(tekst_global, 0, 2048);
				format(tekst_global, sizeof(tekst_global), "~p~UID:~w~ %d  ~p~Owner:~w~ %d:%d  ~p~Model:~w~ %s~n~~p~ID:~w~ %d  ~p~Kolor:~w~ %d:%d~n~~b~Przebieg:~w~ %0.01f  ~b~HP:~w~ %0.01f~n~~n~~y~CB Radio: ~w~%s ~y~Audio: ~w~%s ~y~Skradziony: ~w~%s~n~~y~Szyby: ~w~%s ~y~Zuzycie pojazdu: ~w~%0.01f ~y~Nitro: ~w~%0.01f",
				PojazdInfo[vehc][pUID], PojazdInfo[vehc][pOwnerPostac], PojazdInfo[vehc][pOwnerDzialalnosc], GetVehicleModelName(PojazdInfo[vehc][pModel]), PojazdInfo[vehc][pID], PojazdInfo[vehc][pKolor], PojazdInfo[vehc][pKolor2], PojazdInfo[vehc][pPrzebieg]/1000, PojazdInfo[vehc][pStan], CBtxt, Audiotxt, skradziony, szyby2, PojazdInfo[vehc][pNaprawy], PojazdInfo[vehc][pPaliwoGaz]);
				TextDrawSetString(OBJ[playerid], tekst_global);
				TextDrawShowForPlayer(playerid, OBJ[playerid]);
				SetTimerEx("NapisUsunsV",15000,0,"d",playerid);
			}
		}
  		else
  		{
  		    new vec = GetClosestVehicle(playerid, 15);
		    if(IsPlayerInAnyVehicle(playerid))
		    {
		        vec = GetPlayerVehicleID(playerid);
		    }
		    new vehc = SprawdzCarUID(vec);
		    if(vec == INVALID_VEHICLE_ID)
		    {
		        GameTextForPlayer(playerid, "~r~Nie stoisz przy zadnym pojezdzie!", 3000, 5);
			    return 1;
			}
			if(Wlascicielpojazdu(vehicleid, playerid))
			{
				new Audiotxt[10], Alarmtxt[10], Immotxt[10], CBtxt[10], szyby2[32], gpstxt[10], skradziony[10];
				if(PojazdInfo[vehc][pImmo] == 0) Immotxt="N"; else Immotxt="T";
				if(PojazdInfo[vehc][pCB] == 0) CBtxt="N"; else CBtxt="T";
				if(PojazdInfo[vehc][pAlarm] == 0) Alarmtxt="N"; else Alarmtxt="T";
				if(PojazdInfo[vehc][pAudio] == 0) Audiotxt="N"; else Audiotxt="T";
				if(PojazdInfo[vehc][pGPS] == 0) gpstxt="N"; else gpstxt="T";
				if(PojazdInfo[vehc][pPSzyba] == 0) szyby2="Nieprzyciemnione"; else szyby2="Przyciemnione";
				if(PojazdInfo[vehc][pTempomat] == 0) skradziony="N"; else skradziony="T";
				strdel(tekst_global, 0, 2048);
				format(tekst_global, sizeof(tekst_global), "~p~UID:~w~ %d  ~p~Owner:~w~ %d:%d  ~p~Model:~w~ %s~n~~p~ID:~w~ %d  ~p~Kolor:~w~ %d:%d~n~~b~Przebieg:~w~ %0.01f  ~b~HP:~w~ %0.01f  ~b~Paliwo:~w~ %0.01f~n~~n~~y~Alarm: ~w~%s  ~y~Immobiliser: ~w~%s  ~y~CB Radio: ~w~%s (K: %d)~n~~y~Audio: ~w~%s ~y~Kogut: ~w~%s ~y~Skradziony: ~w~%s~n~~y~Szyby: ~w~%s ~y~Zuzycie pojazdu: ~w~%0.01f ~y~Nitro: ~w~%0.01f",
				PojazdInfo[vehc][pUID], PojazdInfo[vehc][pOwnerPostac], PojazdInfo[vehc][pOwnerDzialalnosc], GetVehicleModelName(PojazdInfo[vehc][pModel]), PojazdInfo[vehc][pID], PojazdInfo[vehc][pKolor], PojazdInfo[vehc][pKolor2], PojazdInfo[vehc][pPrzebieg]/1000, PojazdInfo[vehc][pStan], PojazdInfo[vehc][pPaliwo], Alarmtxt, Immotxt, CBtxt, PojazdInfo[vehc][pKanal], Audiotxt, gpstxt, skradziony, szyby2, PojazdInfo[vehc][pNaprawy], PojazdInfo[vehc][pPaliwoGaz]);
				TextDrawSetString(OBJ[playerid], tekst_global);
				TextDrawShowForPlayer(playerid, OBJ[playerid]);
				SetTimerEx("NapisUsunsV",15000,0,"d",playerid);
			}
			else
			{
				new Audiotxt[10], Immotxt[10], CBtxt[10], szyby2[32], gpstxt[10], skradziony[10];
				if(PojazdInfo[vehc][pImmo] == 0) Immotxt="N"; else Immotxt="T";
				if(PojazdInfo[vehc][pCB] == 0) CBtxt="N"; else CBtxt="T";
				if(PojazdInfo[vehc][pAudio] == 0) Audiotxt="N"; else Audiotxt="T";
				if(PojazdInfo[vehc][pGPS] == 0) gpstxt="N"; else gpstxt="T";
				if(PojazdInfo[vehc][pPSzyba] == 0) szyby2="Nieprzyciemnione"; else szyby2="Przyciemnione";
				if(PojazdInfo[vehc][pTempomat] == 0) skradziony="N"; else skradziony="T";
				strdel(tekst_global, 0, 2048);
				format(tekst_global, sizeof(tekst_global), "~p~UID:~w~ %d  ~p~Owner:~w~ %d:%d  ~p~Model:~w~ %s~n~~p~ID:~w~ %d  ~p~Kolor:~w~ %d:%d~n~~b~Przebieg:~w~ %0.01f  ~b~HP:~w~ %0.01f~n~~n~~y~CB Radio: ~w~%s ~y~Audio: ~w~%s ~y~Skradziony: ~w~%s~n~~y~Szyby: ~w~%s ~y~Zuzycie pojazdu: ~w~%0.01f ~y~Nitro: ~w~%0.01f",
				PojazdInfo[vehc][pUID], PojazdInfo[vehc][pOwnerPostac], PojazdInfo[vehc][pOwnerDzialalnosc], GetVehicleModelName(PojazdInfo[vehc][pModel]), PojazdInfo[vehc][pID], PojazdInfo[vehc][pKolor], PojazdInfo[vehc][pKolor2], PojazdInfo[vehc][pPrzebieg]/1000, PojazdInfo[vehc][pStan], CBtxt, Audiotxt, skradziony, szyby2, PojazdInfo[vehc][pNaprawy], PojazdInfo[vehc][pPaliwoGaz]);
				TextDrawSetString(OBJ[playerid], tekst_global);
				TextDrawShowForPlayer(playerid, OBJ[playerid]);
				SetTimerEx("NapisUsunsV",15000,0,"d",playerid);
			}
  		}
	}
	return 1;
}
forward Przejazd(playerid);
public Przejazd(playerid)
{
	SetPVarInt(playerid, "UzylPrzejazd", 0);
	return 1;
}
forward Reczny(vehicleid, playerid);
public Reczny(vehicleid, playerid)
{
    GetVehiclePos(vehicleid, handbrake_pos[vehicleid][0], handbrake_pos[vehicleid][1], handbrake_pos[vehicleid][2]);
	GetVehicleZAngle(vehicleid, handbrake_pos[vehicleid][3]);
	SetVehicleVelocity(vehicleid, 0, 0, 0);
	SetPVarInt(playerid, "ZgasilSilnik", 0);
	return 1;
}
forward WypadekDel(playerid);
public WypadekDel(playerid)
{
    SetPVarInt(playerid, "Wypadek", 0);
	return 1;
}
forward SilnikStart(vehc,vehicleid,playerid);
public SilnikStart(vehc,vehicleid,playerid)
{
	new lights,doors,bonnet,boot,objective,alarm,engine;
 	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	if(PojazdInfo[vehc][pNaprawy] >= 15000)
	{
	    new bzstr[124];
		format(bzstr, sizeof(bzstr), "**W pojezdzie %s silnik nie odpala, poniewa¿ zu¿ycie pojazdu osi¹gne³o maksymalny poziom**", GetVehicleModelName(PojazdInfo[vehc][pModel]));
		SendVehText(15.0, vehicleid, bzstr, KOLOR_DO, KOLOR_DO, KOLOR_DO, KOLOR_DO, KOLOR_DO);
		return 1;
	}
	if(PojazdInfo[vehc][pStan] < 400)
	{
		new bzstr[124];
		format(bzstr, sizeof(bzstr), "**W pojezdzie %s silnik nie odpala, poniewa¿ jego uszkodzenia s¹ zbyt wielkie**", GetVehicleModelName(PojazdInfo[vehc][pModel]));
		SendVehText(15.0, vehicleid, bzstr, KOLOR_DO, KOLOR_DO, KOLOR_DO, KOLOR_DO, KOLOR_DO);
	}
	else
	{
		PojazdInfo[vehc][pSilnik] = 1;
		TextDrawHideForPlayer(playerid, VehicleTD[playerid]);
		SetPVarInt(playerid, "TDSilnika", 0);
		handbrake_pos[vehicleid][0] = 0.0;
		handbrake_pos[vehicleid][1] = 0.0;
		handbrake_pos[vehicleid][2] = 0.0;
		handbrake_pos[vehicleid][3] = 0.0;
		GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(vehicleid,true,lights,alarm,doors,bonnet,boot,objective);
		new logtekst[256];
		format(logtekst, sizeof(logtekst), "[CAR] [%s] [ID: %d] The vehicle's %s (%d) engine fired", ZmianaNicku(playerid), playerid, GetVehicleModelName(PojazdInfo[vehc][pModel]), vehc);
		Transakcja(T_CDRZWI, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, logtekst, gettime()+KOREKTA_CZASOWA);
		//TextDrawHideForPlayer(playerid,Licznik[playerid]);
		PojazdInfo[vehc][pTimer] = SetTimerEx("MinusPaliwo", 15000, 1, "i", vehicleid);
		SetProgressBarValue(PasekPaliwa[playerid], PojazdInfo[vehc][pStan]);
        if(GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), GetVehicleComponentType(1010)) == 1010)
		{
			if(PojazdInfo[vehc][pPaliwoGaz] != 0)
			{
				DestroyProgressBar(PasekNitro[playerid]);
				PasekNitro[playerid] = CreateProgressBar(527.0,432.0,106.0,_, 0x00FF00FF, 100.0);
				SetProgressBarMaxValue(Bar:PasekNitro[playerid], 100.0);
				SetProgressBarValue(Bar:PasekNitro[playerid], PojazdInfo[vehc][pPaliwoGaz]);
				ShowProgressBarForPlayer(playerid, PasekNitro[playerid]);
			}
		}
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid)==PLAYER_STATE_DRIVER)
		{
		    if(!Rowery(vehicleid))
		    {
				if(PojazdInfo[vehc][pBoost] != 0)
				{
					new string[128];
					format(string, sizeof(string), "Predkosc: %dkm/h~n~Paliwo: %0.01fl~n~~b~Boost:~w~ %0.1fbar", Predkosc(playerid), PojazdInfo[vehc][pPaliwo], PojazdInfo[vehc][pBoost]);
					TextDrawSetString(VehicleTDP[playerid], string);
					TextDrawShowForPlayer(playerid, VehicleTDP[playerid]);
				}
				else
				{
					new string[128];
					format(string, sizeof(string), "Predkosc: %dkm/h~n~Paliwo: %0.01fl", Predkosc(playerid), PojazdInfo[vehc][pPaliwo]);
					TextDrawSetString(VehicleTDP[playerid], string);
					TextDrawShowForPlayer(playerid, VehicleTDP[playerid]);
				}
				return 1;
			}
		}
		if(PojazdInfo[vehc][pGlosnik] == 1)
		{
		    PojazdInfo[vehc][pGlosnik] = 0;
		    DestroyDynamicObject(GetPVarInt(playerid, "BoomboxObjectveh"));
	        DeletePVar(playerid, "BoomboxObjectveh"); DeletePVar(playerid, "BoomboxURLveh");
	        DeletePVar(playerid, "bposXveh"); DeletePVar(playerid, "bposYveh"); DeletePVar(playerid, "bposZveh");
	        if(GetPVarType(playerid, "bboxareaidveh"))
	        {
	            foreach(Player,i)
	            {
	                if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "bboxareaidveh")))
	                {
	                    StopAudioStreamForPlayer(i);
	                }
	            }
	            DeletePVar(playerid, "bboxareaidveh");
	            if(Discman[playerid] == 0)
				{
				    if(PojazdInfo[vehc][pRok] == 0)
					{
						if(PojazdInfo[vehc][pAudioStream] != 0)
						{
							if(GetPVarInt(playerid,"spawn"))
							{
								DeletePVar(playerid,"spawn");
							}
							new uids = PojazdInfo[vehc][pAudioStream];
							new audio[128];
							format(audio, sizeof(audio), "%s",PrzedmiotInfo[uids][pWar3]);
							PlayAudioStreamForPlayer(playerid, audio, 0, 0, 0, 14.0, 0);
						}
					}
				}
	        }
		}
	}
	return 1;
}
CMD:pomoc(playerid, cmdtext[])
{
	//printf("U¿yta komenda pomoc");
    if(zalogowany[playerid] == false)
    {
        return 0;
    }
	new stats[1024];
	format(stats, sizeof(stats), "%s\n{FFFFFF}1.\t{DEDEDE}» {FFFFFF}Pocz¹tek gry", stats);
	format(stats, sizeof(stats), "%s\n{FFFFFF}2.\t{DEDEDE}» {FFFFFF}Podstawowe komendy", stats);
	format(stats, sizeof(stats), "%s\n{FFFFFF}3.\t{DEDEDE}» {FFFFFF}Animacje", stats);
	format(stats, sizeof(stats), "%s\n{FFFFFF}4.\t{DEDEDE}» {FFFFFF}Przedmioty", stats);
	format(stats, sizeof(stats), "%s\n{FFFFFF}5.\t{DEDEDE}» {FFFFFF}Pojazdy", stats);
	format(stats, sizeof(stats), "%s\n{FFFFFF}6.\t{DEDEDE}» {FFFFFF}BW", stats);
	format(stats, sizeof(stats), "%s\n{FFFFFF}7.\t{DEDEDE}» {FFFFFF}Oferty", stats);
	format(stats, sizeof(stats), "%s\n{FFFFFF}8.\t{DEDEDE}» {FFFFFF}Prace dorywcze", stats);
	format(stats, sizeof(stats), "%s\n{FFFFFF}---------------------------------------------", stats);
	new gr1 = DaneGracza[playerid][gDzialalnosc1];
	new gr2 = DaneGracza[playerid][gDzialalnosc2];
	new gr3 = DaneGracza[playerid][gDzialalnosc3];
	new gr4 = DaneGracza[playerid][gDzialalnosc4];
	new gr5 = DaneGracza[playerid][gDzialalnosc5];
	new gr6 = DaneGracza[playerid][gDzialalnosc6];
	if(DaneGracza[playerid][gDzialalnosc1] != 0)
	{
		format(stats, sizeof(stats), "%s\n{FFFFFF}1. %s", stats, GrupaInfo[gr1][gNazwa]);
	}
	if(DaneGracza[playerid][gDzialalnosc2] != 0)
	{
		format(stats, sizeof(stats), "%s\n{FFFFFF}2. %s", stats, GrupaInfo[gr2][gNazwa]);
	}
	if(DaneGracza[playerid][gDzialalnosc3] != 0)
	{
		format(stats, sizeof(stats), "%s\n{FFFFFF}3. %s", stats, GrupaInfo[gr3][gNazwa]);
	}
	if(DaneGracza[playerid][gDzialalnosc4] != 0)
	{
		format(stats, sizeof(stats), "%s\n{FFFFFF}4. %s", stats, GrupaInfo[gr4][gNazwa]);
	}
	if(DaneGracza[playerid][gDzialalnosc5] != 0)
	{
		format(stats, sizeof(stats), "%s\n{FFFFFF}5. %s", stats, GrupaInfo[gr5][gNazwa]);
	}
	if(DaneGracza[playerid][gDzialalnosc6] != 0)
	{
		format(stats, sizeof(stats), "%s\n{FFFFFF}6. %s", stats, GrupaInfo[gr6][gNazwa]);
	}
	dShowPlayerDialog(playerid, DIALOG_POMOC, DIALOG_STYLE_LIST, GUIOPIS "Pomoc{FFFFFF}:", stats, "Wiêcej", "Zamknij");
	return 1;
}
CMD:przejazd(playerid, params[])
{
	//printf("U¿yta komenda przejazd");
    if(zalogowany[playerid] == false)
    {
        return 0;
    }
	if(DaneGracza[playerid][gBW] != 0)
	{
		return 0;
	}
	if(GraczPrzetrzymywany(playerid))
	{
		return 0;
	}
	new siedzenie;
	siedzenie = GetPlayerVehicleSeat(playerid);
	if(siedzenie != 0)
	{
		return 0;
	}
	new vehicleid = GetPlayerVehicleID(playerid);
	if(IsPlayerInAnyVehicle(playerid))
	{
		for(new i = 0; i < sizeof(BudynekInfo); i++)
		{
			if(BudynekInfo[i][nTyp] == 0 || BudynekInfo[i][nTyp] == 1)
			{
				if(Dystans(5.0, playerid, BudynekInfo[i][nX], BudynekInfo[i][nY], BudynekInfo[i][nZ]) && GetPlayerVirtualWorld(playerid) == BudynekInfo[i][nVW])
				{
					if(BudynekInfo[i][nZamek] == 1)
					{
					    if(BudynekInfo[i][nPrzejazd] == 1)
						{
		       				if(GetPVarInt(playerid, "idobiktu") != 0 || GetPVarInt(playerid, "inedit") != 0)
							{
								dShowPlayerDialog( playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja","{DEDEDE} Nie mo¿esz u¿ywaæ animacji{DEDEDE}, gdy edytujesz obiekt!", "Zamknij", "" );
								return 0;
							}
							WejscieDoBudynku(playerid, i, vehicleid, BudynekInfo[i][nVWW]);
							SetPVarInt(playerid, "UzylPrzejazd", 1);
							SetTimerEx("Przejazd",5000,0,"d",playerid, -1);
						}
					}
					else
					{
						GameTextForPlayer(playerid,"~r~~h~Drzwi sa zamkniete.",5000,3);
					}
				}
				if(Dystans(5.0, playerid, BudynekInfo[i][nXW], BudynekInfo[i][nYW], BudynekInfo[i][nZW]) && GetPlayerVirtualWorld(playerid) == BudynekInfo[i][nVWW])
				{
					if(BudynekInfo[i][nZamek] == 1)
					{
					    if(BudynekInfo[i][nPrzejazd] == 1)
						{
						    if(GetPVarInt(playerid, "idobiktu") != 0 || GetPVarInt(playerid, "inedit") != 0)
							{
								dShowPlayerDialog( playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja","{DEDEDE} Nie mo¿esz u¿ywaæ animacji{DEDEDE}, gdy edytujesz obiekt!", "Zamknij", "" );
								return 0;
							}
							WyjscieZBudynku(playerid, i, vehicleid, BudynekInfo[i][nVW]);
							SetPVarInt(playerid, "UzylPrzejazd", 1);
							SetTimerEx("Przejazd",5000,0,"d",playerid, -1);
						}
					}
					else
					{
						GameTextForPlayer(playerid,"~r~~h~Drzwi sa zamkniete.",5000,3);
	 				}
				}
			}
		}
	}
	return 1;
}
////////////////////////////////////////////////////////////////////////////////
forward GetPlayerID2(globalacc);
public GetPlayerID2(globalacc)
{
	ForeachEx(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i))
		{
			if(zalogowany[i] == true)
			{
				if(DaneGracza[i][gGUID] == globalacc) return i;
			}
		}
	}
	return INVALID_PLAYER_ID;
}
forward PrzyObiekcie(playerid, model, wykonanie);
public PrzyObiekcie(playerid, model, wykonanie)
{
	new find = 0, Float:radius = 0.2;
	for(new i = 0; i < wykonanie; i++)
	{
		ForeachEx(h, MAX_OBIEKT)
		{
			if(Dystans(radius, playerid, ObiektInfo[h][objPozX],ObiektInfo[h][objPozY],ObiektInfo[h][objPozZ]) && GetPlayerVirtualWorld(playerid) == ObiektInfo[h][objvWorld] || Dystans(radius, playerid, ObiektInfo[h][objPozX],ObiektInfo[h][objPozY],ObiektInfo[h][objPozZ]) && GetPlayerVirtualWorld(playerid) == 0 && ObiektInfo[h][objvWorld] == -1)
			{
				if(ObiektInfo[h][objModel] == model)
				{
					find = h;
					break;
				}
			}
		}
		radius+=0.5;
	}
	if(ObiektInfo[find][objModel] == model)
	{
		SetPVarInt(playerid, "AutomatUID", find);
	    return find;
	}
	else
	{
	    return 0;
	}
}
forward ObiektwBudynku(playerid, model, uid_budynku);
public ObiektwBudynku(playerid, model, uid_budynku)
{
	new find = 0;
    ForeachEx(h, BudynekInfo[uid_budynku][nStworzoneObiekty])
	{
	    if(ObiektInfo[BudynekInfo[uid_budynku][nObiekty][h]][objModel] == model && uid_budynku == ObiektInfo[BudynekInfo[uid_budynku][nObiekty][h]][objvWorld])
	    {
		    find = BudynekInfo[uid_budynku][nObiekty][h];
		    break;
		}
	}
	if(find != 0)
	{
	    return find;
	}
	else
	{
	    return 0;
	}
}
forward SprawdzWartoscWlacznika(playerid, model, uid_budynku, znacznik);
public SprawdzWartoscWlacznika(playerid, model, uid_budynku, znacznik)
{
	new find = 0;
    ForeachEx(h, BudynekInfo[uid_budynku][nStworzoneObiekty])
	{
	    if(ObiektInfo[BudynekInfo[uid_budynku][nObiekty][h]][objModel] == model && uid_budynku == ObiektInfo[BudynekInfo[uid_budynku][nObiekty][h]][objvWorld] && ObiektInfo[BudynekInfo[uid_budynku][nObiekty][h]][objWlacznik] == znacznik)
	    {
		    find = BudynekInfo[uid_budynku][nObiekty][h];
		    break;
		}
	}
	if(find != 0)
	{
	    return find;
	}
	else
	{
	    return 0;
	}
}
forward SprawdzZnacznikWlacznika(playerid, uid_budynku);
public SprawdzZnacznikWlacznika(playerid, uid_budynku)
{
	new find = 1, znalezione[250], znacznik;
    ForeachEx(h, BudynekInfo[uid_budynku][nStworzoneObiekty])
	{
	    if(ObiektInfo[BudynekInfo[uid_budynku][nObiekty][h]][objModel] == 364 && uid_budynku == ObiektInfo[BudynekInfo[uid_budynku][nObiekty][h]][objvWorld])
	    {
		    znalezione[find] =  ObiektInfo[BudynekInfo[uid_budynku][nObiekty][h]][objWlacznik];
			new find2 = find-1;
			if(find > 1 && znalezione[find] < znalezione[find2])
			{
				znalezione[find] = znalezione[find2];
				znalezione[find2] = ObiektInfo[BudynekInfo[uid_budynku][nObiekty][h]][objWlacznik];
			}
			find++;
		}
	}
	new i;
	for(i = 1; i <= find; i++)
	{
		if(znalezione[i] != i)
		{
			znacznik = i;
			break;
		}
	}
	if(find !=0)
	{
		return znacznik;
	}
	else
	{
		return 0;
	}
}
forward DodajElekr(model, Float:x, Float:y, Float:z, Float:rotx, Float:roty, Float:rotz, vw, interior, playid, wl, war);
public DodajElekr(model, Float:x, Float:y, Float:z, Float:rotx, Float:roty, Float:rotz, vw, interior, playid, wl, war)
{
		new id = false;
		format( zapyt, sizeof( zapyt ), "INSERT INTO `jochym_obiekty` (`model`, `vw`, `interior`, `pozX`, `pozY`, `pozZ`, \
		`rotX`, `rotY`, `rotZ`, `WLACZNIK`, `WARTOSC`) VALUES (%d, %d, %d, %f, %f, %f, %f, %f, %f, %d, %d)",
		 model, vw, interior, x, y, z, rotx, roty, rotz, wl, war);
		mysql_query(zapyt);
		id = mysql_insert_id();
		ObiektInfo[id][objUID] = id;
		ObiektInfo[id][objModel] = model;
		ObiektInfo[id][objvWorld] = vw;
		ObiektInfo[id][objInterior] = interior;
		ObiektInfo[id][objPozX] = x;
		ObiektInfo[id][objPozY] = y;
		ObiektInfo[id][objPozZ] = z;
		ObiektInfo[id][objPosX] = 0;
		ObiektInfo[id][objPosY] = 0;
		ObiektInfo[id][objPosZ] = 0;
		ObiektInfo[id][objBrama] = 0;
		ObiektInfo[id][objSprarowanyUID] = 0;
		ObiektInfo[id][objRotX] = rotx;
		ObiektInfo[id][objRotY] = roty;
		ObiektInfo[id][objRotZ] = rotz;
		ObiektInfo[id][objWlacznik] = wl;
		ObiektInfo[id][objWartosc] = war;
		ObiektInfo[id][objSAMP] = CreateDynamicObject(ObiektInfo[id][objModel], ObiektInfo[id][objPozX],
		ObiektInfo[id][objPozY], ObiektInfo[id][objPozZ], ObiektInfo[id][objRotX], ObiektInfo[id][objRotY],
		ObiektInfo[id][objRotZ], ObiektInfo[id][objvWorld], ObiektInfo[id][objInterior]);
		obiektinedit[id] = true;
		SetPVarInt(playid, "inedit", id);
		BudynekInfo[ObiektInfo[id][objvWorld]][nStworzoneObiekty]++;
		for(new i = 0; i < 2048; i++)
		{
			if(BudynekInfo[ObiektInfo[id][objvWorld]][nObiekty][i] == 0)
		    {
				BudynekInfo[ObiektInfo[id][objvWorld]][nObiekty][i] = ObiektInfo[id][objUID];
				break;
		    }
		}
		return id;
}
forward Naprawa(v2,vir);
public Naprawa(v2,vir)
{
    SetVehicleVirtualWorld(v2,vir);
	return 1;
}
CMD:taguj(playerid, params[])
{
	//printf("U¿yta komenda taguj");
	if(zalogowany[playerid] == false)
    {
        return 0;
    }
	if(DaneGracza[playerid][gBW] != 0)
	{
		return 0;
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] != DZIALALNOSC_GANGI)
	{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "{DEDEDE}Musisz znajdowaæ siê na s³u¿bie organizacji przestêpczej.", "Zamknij", "");
		return 0;
	}
	if(GetPlayerVirtualWorld(playerid) != 0)
	{
		return 0;
	}
	if(!GraczaMaTypPrzedmiotuWu(playerid, 1, 41))
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "{DEDEDE}Aby rozpocz¹æ tagowanie{DEDEDE} musisz trzymaæ w rêce spray.", "Zamknij", "");
		return 0;
	}
	if(NaprawiaCzas[playerid] != 0)
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "{DEDEDE}Aktualnie naprawiasz{DEDEDE} jakiœ pojazd.", "Zamknij", "");
		return 0;
	}
	if(LakierujeCzas[playerid] != 0)
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "{DEDEDE}Aktualnie lakierujesz{DEDEDE} jakiœ pojazd.", "Zamknij", "");
		return 0;
	}
	new uid_obiektu = PrzyObiekcie(playerid, 18663, 5);
	if(uid_obiektu != 0)
	{
		if(ObiektInfo[uid_obiektu][gZajety] == 0)
		{
			dShowPlayerDialog(playerid, DIALOG_TAG, DIALOG_STYLE_INPUT, GUIOPIS "Informacja", "Rozpocz¹³eœ proces tagowania poni¿ej wpisz tag jaki ma siê pokazaæ po zakoñczeniu tego procesu.\nAby przenieœæ wyraz poni¿ej u¿yj '*'\nAby pokolorowaæ tekst u¿yj '(kolor html) np (FF0000)Tekst(000000)Tekst'\nPrzyklad: '(FF0000)Avanagarde Casino*(000000)Zapraszamy'\n{DEDEDE}\n\t\t{FF0000}Avangarda Casino\n\t\t{000000}Zapraszamy", "Zatwierdz", "Zamknij");
			Tag[playerid] = uid_obiektu;
			ObiektInfo[uid_obiektu][gZajety] = 1;
			new bron_uid = GetPVarInt(playerid, "UzywanaBronUID");
			PoziomLakieru[playerid] = PrzedmiotInfo[bron_uid][pWar2];
			LakierujeCzas[playerid] = 1;
			new logtekst[256];
			format(logtekst, sizeof(logtekst), "[TAG] [%s] [ID: %d] create new tags", ZmianaNicku(playerid), playerid);
			Transakcja(T_CDRZWI, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, logtekst, gettime()+KOREKTA_CZASOWA);
		}
		else
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aktualnie ktoœ edytuje ten tag, poszukaj innego.", "Zamknij", "");
		}
	}else{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Jesteœ zbyt daleko od tagu (18663).", "Zamknij", "");
	}
	return 1;
}
stock SetWeaponAmmo(playerid, weaponid, ammo)
{
    for(new slot = 0; slot != 12; slot++)
	{
		new wep, ammo2;
		GetPlayerWeaponData(playerid, slot, wep, ammo2);
    	if(wep == weaponid)
    	{
    	    SetPlayerAmmo(playerid, slot, ammo);
			return 1;
    	}
	}
	return 0;
}
forward GetPlayerWeaponAmmo(playerid, weaponid);
public GetPlayerWeaponAmmo(playerid, weaponid)
{
	new zwrot, weapons[13][2];
	ForeachEx(i, 13)
	{
		GetPlayerWeaponData(playerid, i, weapons[i][0], weapons[i][1]);
		if(weapons[i][0] == weaponid)
		{
			zwrot = weapons[i][1];
		}
	}
	return zwrot;
}
stock Pokazstatsy(playerid)
{
	new stats[1024], IP[16], plec_gracza[24];
	GetPlayerIp(playerid, IP, sizeof(IP));
	new g, m, s;
	new gig, mig, sig;
	//new GLOD = DaneGracza[playerid][gGlod]-4;
	przelicznikonline(playerid, g, m, s);
	przelicznikwgrze(playerid, gig, mig, sig);
	GetPlayerHealth(playerid,ACHP);
	new PrefixCity[3];
	GetPVarString(playerid, "PrefixCountry", PrefixCity, sizeof(PrefixCity));
	switch(DaneGracza[playerid][gPLEC])
	{
		case 0:{
			plec_gracza = "Mê¿czyzna";
		}
		case 1:{
			plec_gracza = "Kobieta";
		}
	}
	//
	ZaladujZadluzenia();
	SetPVarInt(playerid, "DlugGracza", 0);
	ForeachEx(id, MAX_DLUG)
	{
		if(Zadluzenie[id][dUID] == DaneGracza[playerid][gUID] && Zadluzenie[id][dAktywne] == 1)
		{
			SetPVarInt(playerid, "DlugGracza", GetPVarInt(playerid, "DlugGracza")+Zadluzenie[id][dMoney]);
			SetPVarInt(playerid, "ZadluzeniePoTerminie", 0);
			if(Zadluzenie[id][dTime2] < gettime()+CZAS_LETNI)
			{
				SetPVarInt(playerid, "ZadluzeniePoTerminie", GetPVarInt(playerid, "ZadluzeniePoTerminie")+1);
			}
		}
	}
	new teren = GraczNaTerenie(playerid);
	new rokpr, miesiacpr, dzienpr, godzinapr, minutapr, sekundapr;
	sekundytodata(DaneGracza[playerid][gPrzetrzmanie], rokpr, miesiacpr, dzienpr, godzinapr, minutapr, sekundapr);
	new rokp, miesiacp, dzienp, godzinap, minutap, sekundap;
	sekundytodata(DaneGracza[playerid][gBetaTester], rokp, miesiacp, dzienp, godzinap, minutap, sekundap);
	//
	format(stats, sizeof(stats), "Czas Gry:\t%dh %dmin %dsec", g,m,s);
	if(DaneGracza[playerid][gBetaTester] < (gettime()+CZAS_LETNI))
	{
	    new gs, ms, ss;
	    przeliczniksectoh(DaneGracza[playerid][gBW], gs, ms, ss);
		if(DaneGracza[playerid][gZDROWIE] >= 70)
		{
		format(stats, sizeof(stats), "%s\n{FFE5B4}¯{FFFFFF}ycie:\t{63D075}%0.1f%{FFFFFF} HP, %dmin BW", stats, DaneGracza[playerid][gZDROWIE], ms);
		}
		if(DaneGracza[playerid][gZDROWIE] >= 50 && DaneGracza[playerid][gZDROWIE] < 70)
		{
		format(stats, sizeof(stats), "%s\n{FFE5B4}¯{FFFFFF}ycie:\t{F07241}%0.1f%{FFFFFF} HP, %dmin BW", stats, DaneGracza[playerid][gZDROWIE], ms);
		}
		if(DaneGracza[playerid][gZDROWIE] < 50)
		{
		format(stats, sizeof(stats), "%s\n{FFE5B4}¯{FFFFFF}ycie:\t{C04848}%0.1f%{FFFFFF} HP, %dmin BW", stats, DaneGracza[playerid][gZDROWIE], ms);
		}
	}
	else
	{
	    new gs, ms, ss;
	    przeliczniksectoh(DaneGracza[playerid][gBW], gs, ms, ss);
		if(DaneGracza[playerid][gZDROWIE] >= 70)
		{
		format(stats, sizeof(stats), "%s\n{FFE5B4}¯{FFFFFF}ycie:\t{63D075}%0.1f%{FFFFFF} HP, %dmin BW", stats, DaneGracza[playerid][gZDROWIE], ms);
		}
		if(DaneGracza[playerid][gZDROWIE] >= 50 && DaneGracza[playerid][gZDROWIE] < 70)
		{
		format(stats, sizeof(stats), "%s\n{FFE5B4}¯{FFFFFF}ycie:\t{F07241}%0.1f%{FFFFFF} HP, %dmin BW", stats, DaneGracza[playerid][gZDROWIE], ms);
		}
		if(DaneGracza[playerid][gZDROWIE] < 50)
		{
		format(stats, sizeof(stats), "%s\n{FFE5B4}¯{FFFFFF}ycie:\t{C04848}%0.1f%{FFFFFF} HP, %dmin BW", stats, DaneGracza[playerid][gZDROWIE], ms);
		}
	    if(godzinap+czasjochym == 25)
		{
		    format(stats, sizeof(stats), "%s\nPo BW do:\t%d.%d.%d  1:%d:%d", stats, dzienp+1, miesiacp, rokp, minutap, sekundap);
		}
		if(godzinap+czasjochym == 26)
		{
		    format(stats, sizeof(stats), "%s\nPo BW do:\t%d.%d.%d  2:%d:%d", stats, dzienp+1, miesiacp, rokp, minutap, sekundap);
		}
		if(godzinap+czasjochym == 27)
		{
		    format(stats, sizeof(stats), "%s\nPo BW do:\t%d.%d.%d  3:%d:%d", stats, dzienp+1, miesiacp, rokp, minutap, sekundap);
		}
		if(godzinap+czasjochym == 28)
		{
		    format(stats, sizeof(stats), "%s\nPo BW do:\t%d.%d.%d  4:%d:%d", stats, dzienp+1, miesiacp, rokp, minutap, sekundap);
		}
		if(godzinap+czasjochym == 29)
		{
		    format(stats, sizeof(stats), "%s\nPo BW do:\t%d.%d.%d  5:%d:%d", stats, dzienp+1, miesiacp, rokp, minutap, sekundap);
		}
		if(godzinap+czasjochym == 30)
		{
		    format(stats, sizeof(stats), "%s\nPo BW do:\t%d.%d.%d  6:%d:%d", stats, dzienp+1, miesiacp, rokp, minutap, sekundap);
		}
		if(godzinap+czasjochym == 25 || godzinap+czasjochym == 26 || godzinap+czasjochym == 27 || godzinap+czasjochym == 28 || godzinap+czasjochym == 29 || godzinap+czasjochym == 30)
		{
	    	//format(stats, sizeof(stats), "%s\nPo BW do: \t\t%d.%d.%d  %d:%d:%d", stats, dzienp, miesiacp, rokp, godzinap+czasjochym, minutap, sekundap);
		}
		else
		{
		    format(stats, sizeof(stats), "%s\nPo BW do:\t%d.%d.%d  %d:%d:%d", stats, dzienp, miesiacp, rokp, godzinap+czasjochym, minutap, sekundap);
		}
	}
	format(stats, sizeof(stats), "%s\n{FFE5B4}R{FFFFFF}eputacja:\t{FFE5B4}%dRP", stats, DaneGracza[playerid][gReputacja]);
	format(stats, sizeof(stats), "%s\n{FFE5B4}G{FFFFFF}otówka:\t{63D075}${FFFFFF}%d", stats, DaneGracza[playerid][gPORTFEL]);
	format(stats, sizeof(stats), "%s\n{FFE5B4}E{FFFFFF}uro:\t{63D075}€{FFFFFF}%d", stats, DaneGracza[playerid][gEuro]);
    format(stats, sizeof(stats), "%s\n{FFE5B4}B{FFFFFF}ank:\t{63D075}${FFFFFF}%d, debet: $%d", stats, DaneGracza[playerid][gSTAN_KONTA], GetPVarInt(playerid, "DlugGracza"));
    format(stats, sizeof(stats), "%s\n{FFE5B4}N{FFFFFF}umer konta:\t{FFFFFF}%d", stats, DaneGracza[playerid][gNUMER_KONTA]);
	format(stats, sizeof(stats), "%s\n{222222}-\t ", stats);
	format(stats, sizeof(stats), "%s\n{FFE5B4}D{FFFFFF}ane:\t{FFE5B4}%s, %dlat.", stats, plec_gracza, DaneGracza[playerid][gWIEK]);
	format(stats, sizeof(stats), "%s\n{FFE5B4}S{FFFFFF}i³a:\t{FFE5B4}%dj", stats, DaneGracza[playerid][gSILA]);
	format(stats, sizeof(stats), "%s\n{FFE5B4}U{FFFFFF}branie:\t{FFE5B4}%d", stats, DaneGracza[playerid][gSKIN]);
	format(stats, sizeof(stats), "%s\n{FFE5B4}N{FFFFFF}umer telefonu:\t{FFE5B4}%d", stats, DaneGracza[playerid][gTelefon]);
    format(stats, sizeof(stats), "%s\n{FFE5B4}U{FFFFFF}zale¿nienie:\t{FFE5B4}%0.1f", stats, DaneGracza[playerid][gUzaleznienie]);
    format(stats, sizeof(stats), "%s\n{FFE5B4}D{FFFFFF}NA:\t{FFE5B4}%d", stats, DaneGracza[playerid][gUID]+DaneGracza[playerid][gGUID]);
    format(stats, sizeof(stats), "%s\n{FFE5B4}S{FFFFFF}trefa:\t{FFE5B4}%d", stats, teren);
	if(ComparisonString(PrefixCity, ""))
	{
		format(PrefixCity, sizeof(PrefixCity), "PL");
	}
	format(stats, sizeof(stats), "%s\n{FFE5B4}K{FFFFFF}raj:\t{FFE5B4}%s", stats, PrefixCity);
    if(DaneGracza[playerid][gPrzetrzmanie] == 0)
    {
    	format(stats, sizeof(stats), "%s\n{FFE5B4}P{FFFFFF}rzetrzymanie:\t{FFE5B4}Wolny", stats);
	}
	else
	{
	    if(godzinapr+czasjochym == 25)
		{
		    format(stats, sizeof(stats), "%s\n{FFE5B4}P{FFFFFF}rzetrzymanie do:\t{FFE5B4}%d.%d.%d  1:%d:%d", stats, dzienpr+1, miesiacpr, rokpr, minutapr, sekundapr);
		}
		if(godzinapr+czasjochym == 26)
		{
		    format(stats, sizeof(stats), "%s\n{FFE5B4}P{FFFFFF}rzetrzymanie do:\t{FFE5B4}%d.%d.%d  2:%d:%d", stats, dzienpr+1, miesiacpr, rokpr, minutapr, sekundapr);
		}
		if(godzinapr+czasjochym == 27)
		{
		    format(stats, sizeof(stats), "%s\n{FFE5B4}P{FFFFFF}rzetrzymanie do:\t{FFE5B4}%d.%d.%d  3:%d:%d", stats, dzienpr+1, miesiacpr, rokpr, minutapr, sekundapr);
		}
		if(godzinapr+czasjochym == 28)
		{
		    format(stats, sizeof(stats), "%s\n{FFE5B4}P{FFFFFF}rzetrzymanie do:\t{FFE5B4}%d.%d.%d  4:%d:%d", stats, dzienpr+1, miesiacpr, rokpr, minutapr, sekundapr);
		}
		if(godzinapr+czasjochym == 29)
		{
		    format(stats, sizeof(stats), "%s\n{FFE5B4}P{FFFFFF}rzetrzymanie do:\t{FFE5B4}%d.%d.%d  5:%d:%d", stats, dzienpr+1, miesiacpr, rokpr, minutapr, sekundapr);
		}
		if(godzinapr+czasjochym == 30)
		{
		    format(stats, sizeof(stats), "%s\n{FFE5B4}P{FFFFFF}rzetrzymanie do:\t{FFE5B4}%d.%d.%d  6:%d:%d", stats, dzienpr+1, miesiacpr, rokpr, minutapr, sekundapr);
		}
		if(godzinapr+czasjochym == 25 || godzinapr+czasjochym == 26 || godzinapr+czasjochym == 27 || godzinapr+czasjochym == 28 || godzinapr+czasjochym == 29 || godzinapr+czasjochym == 30)
		{
	    	//format(stats, sizeof(stats), "%s\nPrzetrzymanie do:\t%d.%d.%d  %d:%d:%d", stats, dzienp, miesiacp, rokp, godzinap+czasjochym, minutap, sekundap);
		}
		else
		{
		    format(stats, sizeof(stats), "%s\n{FFE5B4}P{FFFFFF}rzetrzymanie do:\t{FFE5B4}%d.%d.%d  %d:%d:%d", stats, dzienpr, miesiacpr, rokpr, godzinapr+czasjochym, minutapr, sekundapr);
		}
	}
	format(stats, sizeof(stats), "%s\n{FFE5B4}H{FFFFFF}istoria:\t{FFE5B4}%s", stats, DaneGracza[playerid][gHistoria]);
    format(stats, sizeof(stats), "%s\n{222222}-\t ", stats);
    format(stats, sizeof(stats), "%s\n»\t{9DB6D3}Dokumenty", stats);
    format(stats, sizeof(stats), "%s\n»\tWygl¹d", stats);
    format(stats, sizeof(stats), "%s\n»\t{9DB6D3}Ustawienia{FFFFFF}", stats);
    format(stats, sizeof(stats), "%s\n»\tUmiejêtnoœci postaci", stats);
	//
	strdel(tekst_global, 0, 2048);
	format(tekst_global,sizeof(tekst_global),"%s (%s) (ID: %d, UID: %d, GUID: %d, IP: %s)",ImieGracza2(playerid),DaneGracza[playerid][nickOOC],playerid,DaneGracza[playerid][gUID],DaneGracza[playerid][gGUID], IP);
	dShowPlayerDialog(playerid, DIALOG_STATS, DIALOG_STYLE_TABLIST_HEADERS, tekst_global, stats, "Wybierz", "Anuluj");
	return 1;
}
stock PoczatekGry(playerid)
{
	new stats[2048];
	format(stats, sizeof(stats), "%s\n{DEDEDE}Drogi Graczu. Pragniemy powitaæ Ciê na innowacyjnym projekcie Role Play, jakim jest w³aœnie ten serwis!", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}W³aœnie wkroczy³eœ do œwiata, który przeniesie Ciê w ca³kowicie inny wymiar gry.", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}Tutaj zrealizujesz swoje ukryte fantazje, wcielisz siê w wykreowan¹ przez siebie osobowoœæ oraz osi¹gniesz to,", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}co do tego momentu mog³o wydawaæ siê abstrakcj¹. Nie stawiamy ¿adnych ograniczeñ.", stats);
    format(stats, sizeof(stats), "%s\n{DEDEDE}Od tej pory to Ty jesteœ odpowiedzialny za swoj¹ wirtualn¹ postaæ w œwiecie In Character.", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}I pamiêtaj, ¿e po drugiej stronie monitora siedzi cz³owiek z krwi i koœci,", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}zachowaj wiêc odpowiedni dystans oraz kulturê podczas gry na naszym serwerze.", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}Zale¿y Nam na solidnej, interpersonalnej wspó³pracy, aby zabawa by³a jak najprzyjemniejsza.", stats);
    format(stats, sizeof(stats), "%s\n{DEDEDE}¯yczymy niezapomnianych przygód, przyjemnej rozgrywki w sympatycznym gronie graczy oraz czystej,", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}bezkonfliktowej rywalizacji. - Administracja "PROJEKT".", stats);
	dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Pomoc:", stats, "Zamknij", "");
	return 1;
}
stock PodstawoweKomendy(playerid)
{
	new stats[1024];
	format(stats, sizeof(stats), "%s\n{DEDEDE}Komendy: /q  /login /qs  /me ", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}/do /c /k /w /re", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}/b /g /v /area", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}/p /o /anim /kup", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}/report, /a", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}/stats /plac, /drzwi, /pokaz,", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}/tog, /brama, /sprobuj, /wyrzuc", stats);
	dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Pomoc:", stats, "Zamknij", "");
	return 1;
}
stock ICOOC(playerid)
{
	new stats[1024];
	format(stats, sizeof(stats), "%s\n{DEDEDE}W Role Play stale pojawiaj¹ siê dwa podstawowe pojêcia.", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}Mianowicie IC i OOC. Pamiêtaj, ¿e gra na tego typu serwerze musi byæ rozdzielona na dwa œwiaty; œwiat gry oraz œwiat rzeczywisty.", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}Spróbujemy Ci to wyt³umaczyæ jak najproœciej.", stats);
    format(stats, sizeof(stats), "%s\n{DEDEDE}In Character (IC), jest to okreœlenie na wszystko, co dzieje siê w œwiecie wirtualnym.", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}Tutaj w grê wchodzi Twoja postaæ i jakakolwiek zwi¹zana z ni¹ intereakcja.", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}Ka¿da jej czynnoœæ oraz dowolne wypowiedziane s³owo na chacie IC.", stats);
    format(stats, sizeof(stats), "%s\n{DEDEDE}Natomiast pojêcie Out Of Character (OOC), jest nierozerwalnie zwi¹zane ze œwiatem rzeczywistym.", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}Tu jesteœ wa¿ny tylko Ty, a nie Twoja postaæ. Tutaj s¹ opisywane Twoje sytuacje z dnia codziennego, wszelkie znajomoœci, nabyta wiedza.", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}Chaty OOC charakteryzuj¹ siê treœci¹ zawart¹ miêdzy dwoma nawiasami.", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}Chatami OOC s¹: /w oraz .(kropka), /b. Mamy nadzieje, ¿e wszystko zosta³o zrozumiale wyt³umaczone.", stats);
    format(stats, sizeof(stats), "%s\n{DEDEDE}Pamiêtaj, ¿e postaæ jest narzêdziem w rêkach Ciebie - gracza.", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}To Ty jesteœ aktorem i to Ty decydujesz, jakie cechy posiada Twoja w³asna fikcyjna osobowoœæ.", stats);
	dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Pomoc:", stats, "Zamknij", "");
	return 1;
}
stock Animacje(playerid)
{
	new stats[1024];
	format(stats, sizeof(stats), "%s\n{DEDEDE}Nasz serwer oferuje mo¿liwoœæ korzystania z animacji. Mog¹ one s³u¿yæ za", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}uzupe³nienie akcji Role Play rozgrywanych na /me{DEDEDE} i", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}/do{DEDEDE}", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}S¹ dwa sposoby na u¿ycie animacji:", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}1. Na czacie wpisujemy jej nazwê poprzedzon¹ myœlnikiem, np.", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}\"-idz6{DEDEDE}\"", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}2. U¿ywamy komendy /anim{DEDEDE} i z listy wybieramy po¿¹dan¹", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}animacjê.", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}Pamiêtaj, ¿e niektóre animacje musz¹ byæ u¿yte dwa razy, poniewa¿ za", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}pierwszym razem siê nie w³¹czaj¹. Wina nie le¿y po naszej stronie. Do ich", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}zakoñczenia u¿ywamy prawego przycisku myszy, b¹dŸ awaryjnie", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}\"-stopani{DEDEDE}\".", stats);
	dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Pomoc:", stats, "Zamknij", "");
	return 1;
}
stock PrzedmiotyPomoc(playerid)
{
	new stats[1524];
	format(stats, sizeof(stats), "%s\n{DEDEDE}System przedmiotów jest funkcjonalny i intuicyjny. Dostêp do przedmiotów,", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}które mamy przy sobie mo¿na uzyskaæ za pomoc¹ komendy /p{DEDEDE}.", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}S¹ one przedstawione w formie listy i po klikniêciu w któryœ z nich mamy", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}do wyboru kilka opcji.", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}Przedmiotu mo¿emy u¿yæ, zniszczyæ go, oferowaæ komuœ za pewn¹ kwotê lub", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}za darmo (wystarczy wpisaæ 0 w okienku kwoty), schowaæ do magazynu, szafy", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}b¹dŸ torby czy wreszcie po prostu od³o¿yæ go na ziemiê lub do pojazdu. Do", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}podnoszenia przedmiotów s³u¿y komenda /p podnies. Istnieje równie¿", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}uproszczony i szybszy sposób na ich u¿ycie. W tym celu mo¿na wpisaæ pe³n¹", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}nazwê b¹dŸ kilka pierwszych liter poprzedzaj¹c j¹ komend¹ /p, np.", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}\"/p nokia\"{DEDEDE}. Oczywiœcie przed wyjêciem telefonu", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}komórkowego, broni a¿ na wêdce koñcz¹c jesteœmy zobowi¹zani do odegrania", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}stosownej akcji Role Play.", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}Przechowywanie przedmiotu w szafie jest mo¿liwe po uprzednim jej", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}zakupieniu w swoim domku. Natomiast odk³adanie przedmiotów w magazynie", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}jest dostêpne tylko i wy³¹cznie w biznesach czy organizacjach.", stats);
	dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Pomoc:", stats, "Zamknij", "");
	return 1;
}
stock Pojazdy(playerid)
{
	new stats[1524];
	format(stats, sizeof(stats), "%s\n{DEDEDE}W zale¿noœci od naszych funduszy, mo¿emy kupiæ pojazd nowy w salonie lub", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}u¿ywany od innego gracza. Ze wzglêdu na bezpieczeñstwo musisz pamiêtaæ,", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}¿eby akceptowaæ tylko oferty sprzeda¿y pojazdu a nie transakcje na", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}zasadzie: najpierw pieni¹dze, potem auto. Liczba mo¿liwych pojazdów", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}zespawnowanych jednoczeœnie wynosi 2{DEDEDE}. Konto", stats);
	format(stats, sizeof(stats), "%s\npremium{DEDEDE} zwiêksza t¹ liczbê do 3{DEDEDE}.", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}Dokument prawa jazdy jest niezbêdny, jeœli chcemy czegoœ wiêcej ni¿ tylko", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}przechowywaæ przedmioty w pojeŸdzie ;) Aby uzyskaæ prawo jazdy najpierw", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}musimy odbyæ kurs w jednej ze szkó³ nauki jazdy. W przypadku, kiedy nie", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}posiadamy owego dokumentu jazda pojazdem jest niemo¿liwa. Opcje zwi¹zane", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}z pojazdem mo¿emy zobaczyæ dziêki komendzie /v{DEDEDE}. Mo¿emy", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}otwieraæ/zamykaæ baga¿nik, maskê oraz okna, ustawiæ unikaln¹ rejestracjê,", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}w³¹czyæ œwiat³a a tak¿e przepisaæ pojazd pod grupê czy przejrzeæ", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}komponenty zainstalowane w pojeŸdzie. System pojazdów na naszym serwerze", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}umo¿liwia tuning, dziêki czemu twój pojazd mo¿e byæ unikatowy.", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}Pojazdy mo¿na tankowaæ na stacjach benzynowych, natomiast naprawiaæ je ", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}mo¿na w warsztatach. Nale¿y pamiêtaæ, ¿e wraz ze wzrostem liczby napraw", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}roœnie spalanie benzyny.", stats);
	dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Pomoc:", stats, "Zamknij", "");
	return 1;
}
stock BW(playerid)
{
	new stats[1024];
	format(stats, sizeof(stats), "%s\n{DEDEDE}BW{DEDEDE} (Brutally Wounded) oznacza, ¿e nasza postaæ jest", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}nieprzytomna. Do takiego stanu mog³o dojœæ poprzez pobicie, postrzelenie,", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}upadek z wysokoœci, wypadek komunikacyjny czy wyg³odzenie. W takiej", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}sytuacji pomóc nam mo¿e medyk, który posiada odpowiedni medykament. Akcjê", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}ratownicz¹ trzeba rzecz jasna odegraæ poprzez stosowne", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}/me{DEDEDE} i /do{DEDEDE}. Po zakonczeniu 'BW' udaj siê do apteki", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}w celu zakupienia leku, który pozwoli twojej postaci na dalsze funkcjonowanie.", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}Oczywiœcie po BW nie mo¿emy uczestniczyæ w bójkach przez okreœlony czas (1h).", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}Podczas BW mo¿na uœmierciæ swoj¹ postaæ za pomoc¹ komendy", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}/akceptujsmierc. Po jej wpisaniu zalogowanie na dan¹ postaæ nie bêdzie", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}ju¿ nigdy wiêcej mo¿liwe. CK{DEDEDE} (Character Kill) jest to", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}proces nieodwracalny.", stats);
	dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Pomoc:", stats, "Zamknij", "");
	return 1;
}
stock Oferty(playerid)
{
	new stats[1024];
	format(stats, sizeof(stats), "%s\n{DEDEDE}Oferty zosta³y stworzone, aby oferowaæ innym graczom ró¿nego rodzaju", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}us³ugi. Na przyk³ad za pomoc¹ oferty policjant mo¿e wystawiæ mandat a", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}lekarz zaœwiadczenie o poczytalnoœci.", stats);
	dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Pomoc:", stats, "Zamknij", "");
	return 1;
}
stock PracaInfo(playerid)
{
	new stats[2524];
	format(stats, sizeof(stats), "%s\n{DEDEDE}Pracê dorywcz¹ mo¿na otrzymaæ poprzez udanie siê do urzêdu. W urzêdzie", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}jest umieszczony pickup przy którym nale¿y wpisaæ /praca{DEDEDE}. Dalsze kroki postêpowania", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}s¹ wyjaœnione. Prace jak¹ mo¿emy otrzymaæ to:", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}Mechanik - jego praca to tankowanie pojazdów na stacjach benzynowych za", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}pomoc¹ komendy /o tankowanie oraz naprawa ich za pomoc¹ /o naprawe.)", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}-Wêdkarz (Aby zacz¹æ ³owiæ ryby, nale¿y w pierwszej kolejnoœci udaæ siê", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}do 24/7, za pomoc¹ komendy /kup trzeba nabyæ wêdkê, haczyk, przynêtê.", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}Kiedy owe rzeczy mamy w /p udajemy siê na molo z ko³em, tam stajemy obok", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}wêdki, klikaj¹c zarazem przycisk \"Enter\")", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}-Kurier (Ostatnia praca jaka zostaje nam do wybrania to kurier.", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}Dla tej¿e pracy podstawow¹ komend¹ jest /paczka. Gracz który wybiera ow¹", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}pracê, musi posiadaæ samochód. Po wpisaniu wy¿ej wymienionej komendy, wyskocz¹ nam", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}dostêpne paczki które mo¿emy rozwieœæ do biznesów które w³asnie zamówi³y produkty.", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}Po wybraniu paczki pojawi siê nam na radarze gdzie mamy siê udaæ po paczkê by odebraæ", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}j¹ z hurtowni, nastêpnie gdy mamy ju¿ paczkê odebran¹ musimy j¹ dostarczyæ do biznesu", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}, miejsce równie¿ zostanie zaznaczone na radarze, po dostarczeniu otrzymujemy nale¿n¹", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}gotówkê za dowiezienie produktu na miejsce.", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}Oczywiœcie je¿eli Ci nie odpowiada praca z wy¿ej wymienionych, wcale nie", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}musisz siê zatrudniaæ! Wystarczy, ¿e wejdziesz na forum i napisze", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}odpowiednie podanie w biznesach graczy. Oferty prac z biznesów bêdziesz", stats);
	format(stats, sizeof(stats), "%s\n{DEDEDE}móg³ dojrzeæ na gie³dzie serwera.", stats);
	dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Pomoc:", stats, "Zamknij", "");
	return 1;
}
stock KomendyAdmina(playerid)
{
    new stats[1024];
    format(stats, sizeof(stats), "%s\n{DEDEDE}Komendy administracji:", stats);
	if(UprawnieniaGMa(playerid, 1))
	{
		format(stats, sizeof(stats), "%s\n{DEDEDE}Gamemaster poziom: 1", stats);
		format(stats, sizeof(stats), "%s\n{DEDEDE}/rc, /kick, /warn, /to, /bw, /sethp", stats);
	}
	if(UprawnieniaGMa(playerid, 2))
	{
		format(stats, sizeof(stats), "%s\n{DEDEDE}Gamemaster poziom: 2", stats);
		format(stats, sizeof(stats), "%s\n{DEDEDE}/res, /slap, /tm, /toto", stats);
	}
	if(UprawnieniaGMa(playerid, 3))
	{
		format(stats, sizeof(stats), "%s\n{DEDEDE}Gamemaster poziom: 3", stats);
		format(stats, sizeof(stats), "%s\n{DEDEDE}/setskin, /booc, /setvw, /brun, /bgun, /bveh", stats);
	}
	if(UprawnieniaGMa(playerid, 4))
	{
		format(stats, sizeof(stats), "%s\n{DEDEDE}Gamemaster poziom: 4", stats);
		format(stats, sizeof(stats), "%s\n{DEDEDE}/azabierz, /ban (do 30 dni),  /klatwa,  /freeze, /zablokuj (do 30 dni), /protekcja, /setekran", stats);
	}
	if(UprawnieniaGMa(playerid, 5))
	{
		format(stats, sizeof(stats), "%s\n{DEDEDE}Gamemaster poziom: 5", stats);
		format(stats, sizeof(stats), "%s\n{DEDEDE}/setnick, /ban (na zawsze), /zablokuj (na zawsze)", stats);
	}
	if(UprawnieniaCMa(playerid, 1))
	{
		format(stats, sizeof(stats), "%s\n{DEDEDE}Starszy Gamemaster poziom: 1", stats);
		format(stats, sizeof(stats), "%s\n{DEDEDE}/gs, /setint, /av, /ad, /ag, /getint, /celebryta, /restelefon", stats);
	}
	if(UprawnieniaCMa(playerid, 2))
	{
		format(stats, sizeof(stats), "%s\n{DEDEDE}Starszy Gamemaster poziom: 2", stats);
		format(stats, sizeof(stats), "%s\n{DEDEDE}/vreset, /pogoda, /dajsilnik", stats);
	}
	if(UprawnieniaCMa(playerid, 3))
	{
		format(stats, sizeof(stats), "%s\n{DEDEDE}Starszy Gamemaster poziom: 3", stats);
		format(stats, sizeof(stats), "%s\n{DEDEDE}/glob, /setpistol, /setshotgun, /setsmg, /setautomat, /setrifle, /premium, /setsila, /setekran, /afotoradar, /asay, /ap, /ab, /budowanie", stats);
	}
	if(UprawnieniaCEO(playerid, 0))
	{
		format(stats, sizeof(stats), "%s\n{DEDEDE}Zarz¹d", stats);
		format(stats, sizeof(stats), "%s\n{DEDEDE}/nazwa, /reload, /walkaoteren, /gm, /setonline", stats);
	}
	dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Pomoc:", stats, "Zamknij", "");
	return 1;
}
stock Maska(playerid, zmienna=0)
{
	if(zmienna == 0) zmienna = DaneGracza[playerid][gUID];
	new kominiarka;
	kominiarka = GetPVarInt(playerid, "Bandana");
	new nickname[24];
	format(nickname, sizeof(nickname), "%d", kominiarka);
	strtoupper(nickname);
	SetPVarString(playerid, "NieznajomyNICK", nickname);
	return nickname;
}
stock Tablice(playerid, zmienna=0)
{
	if(zmienna == 0) zmienna = playerid;
	new text[32];
	format(text, sizeof(text), "%d", zmienna);
	new char1[5], char2[5], char3[5], char4[4], charcode2[5];
	strmid(charcode2, MD5_Hash(text), 0, strlen(MD5_Hash(text)), 255);
	strmid(char1, charcode2[0], 0, 1, 255);
	strmid(char2, charcode2[1], 0, 1, 255);
	strmid(char3, charcode2[2], 0, 1, 255);
	strmid(char4, charcode2[3], 0, 1, 255);
	strdel(tekst_global, 0, 2048);
	format(tekst_global, sizeof(tekst_global), "%s%s%s%s", char1, char2, char3, char4);
	strtoupper(tekst_global);
	return tekst_global;
}
stock ZmianaNickuP(playerid)
{
	new nick[60];
 	if(DutyAdmina[playerid] == 1 && Nieznajomy[playerid] == 0 && GetPVarInt(playerid, "UkrytyN") == 0)
	{
	    if(DaneGracza[playerid][gAdmGroup] == 4 )
		{
		    format(nick, sizeof(nick), "%s", ImieGracza2(playerid));
		}
		else if(DaneGracza[playerid][gAdmGroup] == 7)
		{
			format(nick, sizeof(nick), "%s", ImieGracza2(playerid));
		}
		else if(DaneGracza[playerid][gAdmGroup] == 14)
		{
			format(nick, sizeof(nick), "%s", ImieGracza2(playerid));
		}
		else if(DaneGracza[playerid][gAdmGroup] == 8)
		{
			format(nick, sizeof(nick), "%s", ImieGracza2(playerid));
		}
	}
	if(DutyAdmina[playerid] == 1 && Nieznajomy[playerid] == 0 && GetPVarInt(playerid, "UkrytyN") == 1)
	{
	    if(DaneGracza[playerid][gAdmGroup] == 4)
		{
		    format(nick, sizeof(nick), "%s", ImieGracza2(playerid));
		}
		else if(DaneGracza[playerid][gAdmGroup] == 7)
		{
			format(nick, sizeof(nick), "%s", ImieGracza2(playerid));
		}
		else if(DaneGracza[playerid][gAdmGroup] == 14)
		{
			format(nick, sizeof(nick), "%s", ImieGracza2(playerid));
		}
		else if(DaneGracza[playerid][gAdmGroup] == 8)
		{
			format(nick, sizeof(nick), "%s", ImieGracza2(playerid));
		}
	}
	if(DutyAdmina[playerid] == 1 && Nieznajomy[playerid] == 1 && GetPVarInt(playerid, "UkrytyN") == 0)
	{
	    if(DaneGracza[playerid][gAdmGroup] == 4)
		{
		    format(nick, sizeof(nick), "%s", ImieGracza2(playerid));
		}
		else if(DaneGracza[playerid][gAdmGroup] == 7)
		{
			format(nick, sizeof(nick), "%s", ImieGracza2(playerid));
		}
		else if(DaneGracza[playerid][gAdmGroup] == 14)
		{
			format(nick, sizeof(nick), "%s", ImieGracza2(playerid));
		}
		else if(DaneGracza[playerid][gAdmGroup] == 8)
		{
			format(nick, sizeof(nick), "%s", ImieGracza2(playerid));
		}
	}
	if(DutyAdmina[playerid] == 0 && GetPVarInt(playerid, "UkrytyN") == 1)
	{
	    if(DaneGracza[playerid][gPLEC] == 0)
	    {
			format(nick, sizeof(nick), "Nieznajomy %s", Maska(playerid));
			new nickukryty[64];
			format(nickukryty, sizeof(nickukryty), "Nieznajomy_%s", Maska(playerid));
		 	SetPlayerName(playerid, nickukryty);
		 	SetPlayerScore(playerid,0);
		}
		else
		{
		    format(nick, sizeof(nick), "Nieznajoma %s", Maska(playerid));
			new nickukryty[64];
			format(nickukryty, sizeof(nickukryty), "Nieznajoma_%s", Maska(playerid));
		 	SetPlayerName(playerid, nickukryty);
		 	SetPlayerScore(playerid,0);
		}
	}
	if(DutyAdmina[playerid] == 0 && Nieznajomy[playerid] == 1)
	{
		if(DaneGracza[playerid][gPLEC] == 0)
	    {
			format(nick, sizeof(nick), "Nieznajomy %s", Maska(playerid));
			new nickukryty[64];
			format(nickukryty, sizeof(nickukryty), "Nieznajomy_%s", Maska(playerid));
		 	SetPlayerName(playerid, nickukryty);
		 	SetPlayerScore(playerid,0);
		}
		else
		{
		    format(nick, sizeof(nick), "Nieznajoma %s", Maska(playerid));
			new nickukryty[64];
			format(nickukryty, sizeof(nickukryty), "Nieznajoma_%s", Maska(playerid));
		 	SetPlayerName(playerid, nickukryty);
		 	SetPlayerScore(playerid,0);
		}
	}
	if(DutyAdmina[playerid] == 0 && Nieznajomy[playerid] == 0 && GetPVarInt(playerid, "UkrytyN") == 0)
	{
	    format(nick, sizeof(nick), "%s", ImieGracza2(playerid));
	}
	return nick;
}
stock ZmianaNicku(playerid)
{
	new nick[60];
	if(DutyAdmina[playerid] == 1 && Nieznajomy[playerid] == 0 && GetPVarInt(playerid, "UkrytyN") == 0)
	{
	    if(DaneGracza[playerid][gAdmGroup] == 4)
		{
		    format(nick, sizeof(nick), "%s", ImieGracza2(playerid));
		}
		else if(DaneGracza[playerid][gAdmGroup] == 7)
		{
			format(nick, sizeof(nick), "%s", ImieGracza2(playerid));
		}
		else if(DaneGracza[playerid][gAdmGroup] == 14)
		{
			format(nick, sizeof(nick), "%s", ImieGracza2(playerid));
		}
		else if(DaneGracza[playerid][gAdmGroup] == 8)
		{
			format(nick, sizeof(nick), "%s", ImieGracza2(playerid));
		}
	}
	if(DutyAdmina[playerid] == 1 && Nieznajomy[playerid] == 0 && GetPVarInt(playerid, "UkrytyN") == 1)
	{
	    if(DaneGracza[playerid][gAdmGroup] == 4)
		{
		    format(nick, sizeof(nick), "%s", ImieGracza2(playerid));
		}
		else if(DaneGracza[playerid][gAdmGroup] == 7)
		{
			format(nick, sizeof(nick), "%s", ImieGracza2(playerid));
		}
		else if(DaneGracza[playerid][gAdmGroup] == 14)
		{
			format(nick, sizeof(nick), "%s", ImieGracza2(playerid));
		}
		else if(DaneGracza[playerid][gAdmGroup] == 8)
		{
			format(nick, sizeof(nick), "%s", ImieGracza2(playerid));
		}
	}
	if(DutyAdmina[playerid] == 1 && Nieznajomy[playerid] == 1 && GetPVarInt(playerid, "UkrytyN") == 0)
	{
	    if(DaneGracza[playerid][gAdmGroup] == 4)
		{
		    format(nick, sizeof(nick), "%s", ImieGracza2(playerid));
		}
		else if(DaneGracza[playerid][gAdmGroup] == 7)
		{
			format(nick, sizeof(nick), "%s", ImieGracza2(playerid));
		}
		else if(DaneGracza[playerid][gAdmGroup] == 14)
		{
			format(nick, sizeof(nick), "%s", ImieGracza2(playerid));
		}
		else if(DaneGracza[playerid][gAdmGroup] == 8)
		{
			format(nick, sizeof(nick), "%s", ImieGracza2(playerid));
		}
	}
	if(DutyAdmina[playerid] == 0 && GetPVarInt(playerid, "UkrytyN") == 1)
	{
		if(DaneGracza[playerid][gPLEC] == 0)
	    {
			format(nick, sizeof(nick), "Nieznajomy %s", Maska(playerid));
			new nickukryty[64];
			format(nickukryty, sizeof(nickukryty), "Nieznajomy_%s", Maska(playerid));
		 	SetPlayerName(playerid, nickukryty);
		 	SetPlayerScore(playerid,0);
		}
		else
		{
		    format(nick, sizeof(nick), "Nieznajoma %s", Maska(playerid));
			new nickukryty[64];
			format(nickukryty, sizeof(nickukryty), "Nieznajoma_%s", Maska(playerid));
		 	SetPlayerName(playerid, nickukryty);
		 	SetPlayerScore(playerid,0);
		}
	}
	if(DutyAdmina[playerid] == 0 && Nieznajomy[playerid] == 1)
	{
		if(DaneGracza[playerid][gPLEC] == 0)
	    {
			format(nick, sizeof(nick), "Nieznajomy %s", Maska(playerid));
			new nickukryty[64];
			format(nickukryty, sizeof(nickukryty), "Nieznajomy_%s", Maska(playerid));
		 	SetPlayerName(playerid, nickukryty);
		 	SetPlayerScore(playerid,0);
		}
		else
		{
		    format(nick, sizeof(nick), "Nieznajoma %s", Maska(playerid));
			new nickukryty[64];
			format(nickukryty, sizeof(nickukryty), "Nieznajoma_%s", Maska(playerid));
		 	SetPlayerName(playerid, nickukryty);
		 	SetPlayerScore(playerid,0);
		}
	}
	if(DutyAdmina[playerid] == 0 && Nieznajomy[playerid] == 0 && GetPVarInt(playerid, "UkrytyN") == 0)
	{
	    format(nick, sizeof(nick), "%s", ImieGracza2(playerid));
	}
	UsunPLZnaki(nick);
	UsunPolskieZnaki(nick);
	return nick;
}
stock dajhpsy(playerid)
{
    DaneGracza[playerid][gDajHP] = 0;
    return 1;
}
stock CzarnyEkranGlod(playerid)
{
    TextDrawHideForPlayer(playerid, Light);
    GlodID[playerid] = 0;
    return 1;
}
stock Uderzony(playerid, kolor)
{
	new str[256];
	new g, m, s, dol[128], dol2[128];
	przelicznikonline(playerid, g, m, s);
	if(Nieznajomy[playerid] == 1 || GetPVarInt(playerid, "UkrytyN") == 1)
	{
		format(str, sizeof(str), "%s", ZmianaNicku(playerid));
	}
	else
	{
	    if(DutyAdmina[playerid] == 0)
	    {
			if(GraczPremium(playerid))
			{
				format(str, sizeof(str), "(( %d. %s, %dRP ))", playerid, ZmianaNicku(playerid), DaneGracza[playerid][gReputacja]);
			}
			else
			{
				format(str, sizeof(str), "(( %d. %s, %dRP ))", playerid, ZmianaNicku(playerid), DaneGracza[playerid][gReputacja]);
			}
		}
		else
		{
            format(str, sizeof(str), "(( %d. %s, %dRP ))", playerid, ZmianaNicku(playerid), DaneGracza[playerid][gReputacja]);
		}
	}
	new PrefixCity[3];
	GetPVarString(playerid, "PrefixCountry", PrefixCity, sizeof(PrefixCity));
	if(ComparisonString(PrefixCity, ""))
	{
		format(PrefixCity, sizeof(PrefixCity), "PL");
	}
	format(dol, sizeof(dol), "%s", PrefixCity);
	if(DaneGracza[playerid][gSILA] >= 3035)
	{
		format(dol, sizeof(dol), "%s, %dj", dol, DaneGracza[playerid][gSILA]);
	}
	else
	{
		if(GraczPremium(playerid))
		{
			format(dol, sizeof(dol), "%s, GOLD", dol);
		}
	}
	if(DutyAdmina[playerid] == 1)
	{
		if(DaneGracza[playerid][gAdmGroup] == 4 && DutyAdmina[playerid] == 1 && GetPVarInt(playerid, "Incognito") == 0)
		{
			format(dol, sizeof(dol), "%s, Zarz¹d", dol);
		}
		else if(DaneGracza[playerid][gAdmGroup] == 14 && DutyAdmina[playerid] == 1 && GetPVarInt(playerid, "Incognito") == 0)
		{
			format(dol, sizeof(dol), "%s, Administrator", dol);
		}
		else if(DaneGracza[playerid][gAdmGroup] == 7 && DutyAdmina[playerid] == 1 && GetPVarInt(playerid, "Incognito") == 0)
		{
   			format(dol, sizeof(dol), "%s, Starszy Gamemaster", dol);
		}
		else if(DaneGracza[playerid][gAdmGroup] == 8 && DutyAdmina[playerid] == 1 && GetPVarInt(playerid, "Incognito") == 0)
		{
			format(dol, sizeof(dol), "%s, Gamemaster", dol);
		}
	}
	if(DaneGracza[playerid][gTatuaze] >= 3)
	{
	    if(DaneGracza[playerid][gPLEC] == 0)
        {
        	format(dol, sizeof(dol), "%s, wytatuowany", dol);
		}
		else
		{
		    format(dol, sizeof(dol), "%s, wytatuowana", dol);
		}
	}
	if(DaneGracza[playerid][gUzaleznienie] >= 10)
	{
	    if(DaneGracza[playerid][gPLEC] == 0)
        {
        	format(dol, sizeof(dol), "%s, narkoman", dol);
		}
		else
		{
		    format(dol, sizeof(dol), "%s, narkomanka", dol);
		}
	}
	if(DaneGracza[playerid][gBW] >= 1)
	{
        if(DaneGracza[playerid][gPLEC] == 0)
        {
        	if(DaneGracza[playerid][gRASA] != 255)
			{
			    format(dol, sizeof(dol), "%s, nieprzytomny: %s", dol, NazwaBroni[DaneGracza[playerid][gRASA]]);
			}
			else
			{
			    format(dol, sizeof(dol), "%s, nieprzytomny", dol);
			}
		}
		else
		{
		    if(DaneGracza[playerid][gRASA] != 255)
			{
			    format(dol, sizeof(dol), "%s, nieprzytomna: %s", dol, NazwaBroni[DaneGracza[playerid][gRASA]]);
			}
			else
			{
			    format(dol, sizeof(dol), "%s, nieprzytomna", dol);
			}
		}
	}
 	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] > 0)
	{
	    new id = DaneGracza[playerid][gSluzba];
		format(dol2, sizeof(dol2), "%s", GrupaInfo[id][gNazwa]);
	}
	if(Rekawiczki[playerid] == 1 && !GraczJestAFK(playerid))
 	{
		format(dol, sizeof(dol), "%s, rêkawiczki", dol);
	}
	if(GraczPrzetrzymywany(playerid))
 	{
		if(DaneGracza[playerid][gPLEC] == 0)
        {
        	format(dol, sizeof(dol), "%s, przetrzymywany", dol);
		}
		else
		{
		    format(dol, sizeof(dol), "%s, przetrzymywana", dol);
		}
	}
	if(DaneGracza[playerid][gWAGA] == 1)
	{
		if(DaneGracza[playerid][gPLEC] == 0)
        {
        	format(dol, sizeof(dol), "%s, celebryta", dol);
		}
		else
		{
		    format(dol, sizeof(dol), "%s, celebrytka", dol);
		}
	}
	if(Rolki[playerid] != 0)
	{
		format(dol, sizeof(dol), "%s, rolki", dol);
	}
	if(Discman[playerid] != 0)
	{
		format(dol, sizeof(dol), "%s, s³uchawki", dol);
	}
	if(PASY[playerid] != 0)
	{
		if(Jednoslady(GetPlayerVehicleID(playerid)))
		{
			format(dol, sizeof(dol), "%s, kask", dol);
		}
		else
		{
			format(dol, sizeof(dol), "%s, pasy", dol);
		}
	}
	if(DaneGracza[playerid][gCzasTrwaniaUzaleznienia] != 0)
	{
		if(DaneGracza[playerid][gPLEC] == 0)
        {
        	format(dol, sizeof(dol), "%s, naæpany", dol);
		}
		else
		{
		    format(dol, sizeof(dol), "%s, naæpana", dol);
		}
	}
	if(GetPlayerDrunkLevel(playerid) >= 14000)
	{
		if(DaneGracza[playerid][gPLEC] == 0)
        {
        	format(dol, sizeof(dol), "%s, pijany", dol);
		}
		else
		{
		    format(dol, sizeof(dol), "%s, pijana", dol);
		}
	}
	if(GraczJestAFK(playerid))
 	{
 	    new godzina, minuta;
		gettime(godzina, minuta);
		format(dol, sizeof(dol), "%s, AFK od %02d:%02d", dol, godzina, minuta);
		if(godzina == 24)
		{
	        format(dol, sizeof(dol), "%s, AFK od 24:%02d", dol, minuta);
		}
        if(godzina == 25)
		{
		    format(dol, sizeof(dol), "%s, AFK od 01:%02d", dol, minuta);
		}
		if(godzina == 26)
		{
		    format(dol, sizeof(dol), "%s, AFK od 02:%02d", dol, minuta);
		}
		if(godzina == 27)
		{
		    format(dol, sizeof(dol), "%s, AFK od 03:%02d", dol, minuta);
		}
		if(godzina == 28)
		{
		    format(dol, sizeof(dol), "%s, AFK od 04:%02d", dol, minuta);
		}
		if(godzina == 29)
		{
		    format(dol, sizeof(dol), "%s, AFK od 05:%02d", dol, minuta);
		}
		if(godzina == 30)
		{
		    format(dol, sizeof(dol), "%s, AFK od 06:%02d", dol, minuta);
		}
		if(godzina == 24 || godzina == 25 || godzina == 26 || godzina == 27 || godzina == 28 || godzina == 29 || godzina == 30)
		{
	    	//format(stats, sizeof(stats), "%s\nPrzetrzymanie do: \t\t%d.%d.%d  %d:%d:%d", stats, dzienp, miesiacp, rokp, godzinap+czasjochym, minutap, sekundap);
		}
		else
		{
		    format(dol, sizeof(dol), "%s, AFK od %02d:%02d", dol, godzina, minuta);
		}
	}
	if(GetPVarInt(playerid, "WyslalPW") == 1)
	{
	    if(GraczPremium(playerid))
	    {
			format(dol, sizeof(dol), "%s, {ffa500}PW{e8d97f}", dol);
		}
		else
		{
		    format(dol, sizeof(dol), "%s, {ffa500}PW{b2b2b2}", dol);
		}
	}
 	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == 0)
	{
		if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "%s\n(%s)", str, dol);
	}
	new gr = GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp];
	if(gr == 1 && GrupaInfo[DaneGracza[playerid][gSluzba]][gUID] != 18)
	{
	    if(GetPVarInt(playerid, "Incognito") == 0)
	    {
	    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
			else format(str, sizeof(str), "%s\n(%s)\n[%s]", str, dol, dol2);
		}
		else
		{
		    if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
			else format(str, sizeof(str), "%s\n(%s)", str, dol);
		}
	}
	if(gr == 1 && GrupaInfo[DaneGracza[playerid][gSluzba]][gUID] == 18)
	{
    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "%s\n(%s)", str, dol);
	}
	if(gr == 14 || gr == 19)
	{
    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "%s\n(%s)\n[%s]", str, dol, dol2);
	}
	if(gr == 3 || gr == 4 || gr == 5 || gr == 6 || gr == 7 || gr == 8 || gr == 9 || gr == 10 || gr == 12 || gr == 15 || gr == 17 || gr == 18 || gr == 20 || gr == 22)
	{
    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "%s\n(%s)\n[%s]", str, dol, dol2);
	}
	if(gr == 16)
	{
     	if(GetPVarInt(playerid, "Incognito") == 0)
	    {
		    if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
			else format(str, sizeof(str), "• • •\n%s\n(%s)", str, dol);
		}
		else
		{
		    if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
			else format(str, sizeof(str), "%s\n(%s)", str, dol);
		}
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == 2)
	{
    	if(GetPVarInt(playerid, "Incognito") == 0)
	    {
		    if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
			else format(str, sizeof(str), "• • •\n%s\n(%s)", str, dol);
		}
		else
		{
		    if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
			else format(str, sizeof(str), "%s\n(%s)", str, dol);
		}
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == 11)
	{
    	if(GetPVarInt(playerid, "Incognito") == 0)
	    {
		    if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
			else format(str, sizeof(str), "• • •\n%s\n(%s)", str, dol);
		}
		else
		{
		    if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
			else format(str, sizeof(str), "%s\n(%s)", str, dol);
		}
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == 13)
	{
    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "%s\n(%s)", str, dol);
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == 21)
	{
    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "%s\n(%s)", str, dol);
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == 23)
	{
    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "%s\n(%s)\n[%s]", str, dol, dol2);
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == 24)
	{
    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "%s\n(%s)\n[%s]", str, dol, dol2);
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == 25)
	{
    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "%s\n(%s)\n[%s]", str, dol, dol2);
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == 26)
	{
    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "%s\n(%s)\n[%s]", str, dol, dol2);
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == 27)
	{
    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "%s\n(%s)\n[%s]", str, dol, dol2);
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == 28)
	{
    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "%s\n(%s)\n[%s]", str, dol, dol2);
	}
	strreplace(str, "(, ", "(");
	UpdateDynamic3DTextLabelText(DaneGracza[playerid][gNICK], kolor, str); //0xFF0000FF
	SetTimerEx("RefUderzony", 2000, 0, "u", playerid);
	FadeColorForPlayer(playerid, 255, 0, 0, floatround(90),255,0,0,0,floatround(10),0);
	return 1;
}
stock RefreshNick(playerid)
{
	new str[256];
	new g, m, s, dol[128], dol2[128];
	przelicznikonline(playerid, g, m, s);
	if(Nieznajomy[playerid] == 1 || GetPVarInt(playerid, "UkrytyN") == 1)
	{
		format(str, sizeof(str), "%s", ZmianaNicku(playerid));
	}
	else
	{
	    if(DutyAdmina[playerid] == 0)
	    {
			if(GraczPremium(playerid))
			{
				format(str, sizeof(str), "(( %d. %s, %dRP ))", playerid, ZmianaNicku(playerid), DaneGracza[playerid][gReputacja]);
			}
			else
			{
				format(str, sizeof(str), "(( %d. %s, %dRP ))", playerid, ZmianaNicku(playerid), DaneGracza[playerid][gReputacja]);
			}
		}
		else
		{
		    format(str, sizeof(str), "(( %d. %s, %dRP ))", playerid, ZmianaNicku(playerid), DaneGracza[playerid][gReputacja]);
		}
	}
	new PrefixCity[3];
	GetPVarString(playerid, "PrefixCountry", PrefixCity, sizeof(PrefixCity));
	if(ComparisonString(PrefixCity, ""))
	{
		format(PrefixCity, sizeof(PrefixCity), "PL");
	}
	format(dol, sizeof(dol), "%s", PrefixCity);
	if(DaneGracza[playerid][gSILA] >= 3035)
	{
		format(dol, sizeof(dol), "%s, %dj", dol, DaneGracza[playerid][gSILA]);
	}
	else
	{
		if(GraczPremium(playerid))
		{
			format(dol, sizeof(dol), "%s, GOLD", dol);
		}
	}
	if(DutyAdmina[playerid] == 1)
	{
		if(DaneGracza[playerid][gAdmGroup] == 4 && DutyAdmina[playerid] == 1 && GetPVarInt(playerid, "Incognito") == 0)
		{
		    if(GraczPremium(playerid))
		    {
				format(dol, sizeof(dol), "%s, {d51b26}Zarz¹d{e8d97f}", dol);
			}
			else
			{
			    format(dol, sizeof(dol), "%s, {d51b26}Zarz¹d{b2b2b2}", dol);
			}
		}
		else if(DaneGracza[playerid][gAdmGroup] == 14 && DutyAdmina[playerid] == 1 && GetPVarInt(playerid, "Incognito") == 0)
		{
		    if(GraczPremium(playerid))
		    {
				format(dol, sizeof(dol), "%s, {d51b26}Administrator{e8d97f}", dol);
			}
			else
			{
			    format(dol, sizeof(dol), "%s, {d51b26}Administrator{b2b2b2}", dol);
			}
		}
		else if(DaneGracza[playerid][gAdmGroup] == 7 && DutyAdmina[playerid] == 1 && GetPVarInt(playerid, "Incognito") == 0)
		{
		    if(GraczPremium(playerid))
		    {
				format(dol, sizeof(dol), "%s, {61cc73}Starszy Gamemaster{e8d97f}", dol);
			}
			else
			{
			    format(dol, sizeof(dol), "%s, {61cc73}Starszy Gamemaster{b2b2b2}", dol);
			}
		}
		else if(DaneGracza[playerid][gAdmGroup] == 8 && DutyAdmina[playerid] == 1 && GetPVarInt(playerid, "Incognito") == 0)
		{
		    if(GraczPremium(playerid))
		    {
				format(dol, sizeof(dol), "%s, {a95bb7}Gamemaster{e8d97f}", dol);
			}
			else
			{
			    format(dol, sizeof(dol), "%s, {a95bb7}Gamemaster{b2b2b2}", dol);
			}
		}
	}
	if(DaneGracza[playerid][gTatuaze] >= 3)
	{
	    if(DaneGracza[playerid][gPLEC] == 0)
        {
        	format(dol, sizeof(dol), "%s, wytatuowany", dol);
		}
		else
		{
		    format(dol, sizeof(dol), "%s, wytatuowana", dol);
		}
	}
	if(DaneGracza[playerid][gUzaleznienie] >= 4)
	{
	    if(DaneGracza[playerid][gPLEC] == 0)
        {
        	format(dol, sizeof(dol), "%s, narkoman", dol);
		}
		else
		{
		    format(dol, sizeof(dol), "%s, narkomanka", dol);
		}
	}
	if(DaneGracza[playerid][gBW] >= 1)
	{
        if(DaneGracza[playerid][gPLEC] == 0)
        {
        	if(DaneGracza[playerid][gRASA] != 255)
			{
			    format(dol, sizeof(dol), "%s, nieprzytomny: %s", dol, NazwaBroni[DaneGracza[playerid][gRASA]]);
			}
			else
			{
			    format(dol, sizeof(dol), "%s, nieprzytomny", dol);
			}
		}
		else
		{
		    if(DaneGracza[playerid][gRASA] != 255)
			{
			    format(dol, sizeof(dol), "%s, nieprzytomna: %s", dol, NazwaBroni[DaneGracza[playerid][gRASA]]);
			}
			else
			{
			    format(dol, sizeof(dol), "%s, nieprzytomna", dol);
			}
		}
	}
 	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] > 0)
	{
	    new id = DaneGracza[playerid][gSluzba];
		format(dol2, sizeof(dol2), "%s", GrupaInfo[id][gNazwa]);
	}
	if(Rekawiczki[playerid] == 1 && !GraczJestAFK(playerid))
 	{
		format(dol, sizeof(dol), "%s, rêkawiczki", dol);
	}
	if(GraczPrzetrzymywany(playerid))
 	{
		if(DaneGracza[playerid][gPLEC] == 0)
        {
        	format(dol, sizeof(dol), "%s, przetrzymywany", dol);
		}
		else
		{
		    format(dol, sizeof(dol), "%s, przetrzymywana", dol);
		}
	}
	if(DaneGracza[playerid][gWAGA] == 1)
	{
		if(DaneGracza[playerid][gPLEC] == 0)
        {
        	format(dol, sizeof(dol), "%s, celebryta", dol);
		}
		else
		{
		    format(dol, sizeof(dol), "%s, celebrytka", dol);
		}
	}
	if(Rolki[playerid] != 0)
	{
		format(dol, sizeof(dol), "%s, rolki", dol);
	}
	if(Discman[playerid] != 0)
	{
		format(dol, sizeof(dol), "%s, s³uchawki", dol);
	}
	if(PASY[playerid] != 0)
	{
		if(Jednoslady(GetPlayerVehicleID(playerid)))
		{
			format(dol, sizeof(dol), "%s, kask", dol);
		}
		else
		{
			format(dol, sizeof(dol), "%s, pasy", dol);
		}
	}
	if(DaneGracza[playerid][gCzasTrwaniaUzaleznienia] != 0)
	{
		if(DaneGracza[playerid][gPLEC] == 0)
        {
        	format(dol, sizeof(dol), "%s, naæpany", dol);
		}
		else
		{
		    format(dol, sizeof(dol), "%s, naæpana", dol);
		}
	}
	if(GetPlayerDrunkLevel(playerid) >= 14000)
	{
		if(DaneGracza[playerid][gPLEC] == 0)
        {
        	format(dol, sizeof(dol), "%s, pijany", dol);
		}
		else
		{
		    format(dol, sizeof(dol), "%s, pijana", dol);
		}
	}
	if(GraczJestAFK(playerid))
 	{
 	    new godzina, minuta;
		gettime(godzina, minuta);
		if(godzina == 24)
		{
	        format(dol, sizeof(dol), "%s, AFK od 24:%02d", dol, minuta);
		}
        if(godzina == 25)
		{
		    format(dol, sizeof(dol), "%s, AFK od 01:%02d", dol, minuta);
		}
		if(godzina == 26)
		{
		    format(dol, sizeof(dol), "%s, AFK od 02:%02d", dol, minuta);
		}
		if(godzina == 27)
		{
		    format(dol, sizeof(dol), "%s, AFK od 03:%02d", dol, minuta);
		}
		if(godzina == 28)
		{
		    format(dol, sizeof(dol), "%s, AFK od 04:%02d", dol, minuta);
		}
		if(godzina == 29)
		{
		    format(dol, sizeof(dol), "%s, AFK od 05:%02d", dol, minuta);
		}
		if(godzina == 30)
		{
		    format(dol, sizeof(dol), "%s, AFK od 06:%02d", dol, minuta);
		}
		if(godzina == 24 || godzina == 25 || godzina == 26 || godzina == 27 || godzina == 28 || godzina == 29 || godzina == 30)
		{
	    	//format(stats, sizeof(stats), "%s\nPrzetrzymanie do: \t\t%d.%d.%d  %d:%d:%d", stats, dzienp, miesiacp, rokp, godzinap+czasjochym, minutap, sekundap);
		}
		else
		{
		    format(dol, sizeof(dol), "%s, AFK od %02d:%02d", dol, godzina, minuta);
		}
	}
	if(GetPVarInt(playerid, "WyslalPW") == 1)
	{
	    if(GraczPremium(playerid))
	    {
			format(dol, sizeof(dol), "%s, {ffa500}PW{e8d97f}", dol);
		}
		else
		{
		    format(dol, sizeof(dol), "%s, {ffa500}PW{b2b2b2}", dol);
		}
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == 0 && GraczPremium(playerid))
	{
		if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "{e8d97f}%s\n(%s)", str, dol);
	}
	new gr = GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp];
	if((gr == 1 && GrupaInfo[DaneGracza[playerid][gSluzba]][gUID] != 9) && GraczPremium(playerid))//Typ Policja
	{
	    if(GetPVarInt(playerid, "Incognito") == 0)
	    {
	    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
			else format(str, sizeof(str), "{%s}%s{e8d97f}\n(%s)\n[%s]", GrupaInfo[DaneGracza[playerid][gSluzba]][gKolorNicku], str, dol, dol2);
		}
		else
		{
		    if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
			else format(str, sizeof(str), "{e8d97f}%s\n(%s)", str, dol);
		}
	}
	if((gr == 1 && GrupaInfo[DaneGracza[playerid][gSluzba]][gUID] == 9) && GraczPremium(playerid))//FBI
	{
	    if(GetPVarInt(playerid, "Incognito") == 0)
	    {
	    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
			else format(str, sizeof(str), "{%s}%s{e8d97f}\n(%s)\n[%s]", GrupaInfo[DaneGracza[playerid][gSluzba]][gKolorNicku], str, dol, dol2);
		}
		else
		{
		    if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
			else format(str, sizeof(str), "{e8d97f}%s\n(%s)", str, dol);
		}
	}
	if((gr == 14 || gr == 19) && GraczPremium(playerid))
	{
    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "{%s}%s{e8d97f}\n(%s)\n[%s]", GrupaInfo[DaneGracza[playerid][gSluzba]][gKolorNicku], str, dol, dol2);
	}
	if((gr == 3 || gr == 4 || gr == 5 || gr == 6 || gr == 7 || gr == 8 || gr == 9 || gr == 12 || gr == 15 || gr == 17 || gr == 18 || gr == 20 || gr == 22) && GraczPremium(playerid))
	{
    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "{e8d97f}%s\n(%s)\n[%s]", str, dol, dol2);
	}
	if(gr == 10 && GraczPremium(playerid))
	{
		if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "{%s}%s{e8d97f}\n(%s)\n[%s]", GrupaInfo[DaneGracza[playerid][gSluzba]][gKolorNicku], str, dol, dol2);
	}
	if(gr == 16 && GraczPremium(playerid))
	{
	    if(GetPVarInt(playerid, "Incognito") == 0)
	    {
		    if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
			else format(str, sizeof(str), "{%s}• • •\n{e8d97f}%s\n(%s)", GrupaInfo[DaneGracza[playerid][gSluzba]][gKolorNicku], str, dol);
		}
		else
		{
		    if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
			else format(str, sizeof(str), "{e8d97f}%s\n(%s)", str, dol);
		}
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == 2 && GraczPremium(playerid))
	{
    	if(GetPVarInt(playerid, "Incognito") == 0)
	    {
		    if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
			else format(str, sizeof(str), "{%s}• • •\n{e8d97f}%s\n(%s)", GrupaInfo[DaneGracza[playerid][gSluzba]][gKolorNicku], str, dol);
		}
		else
		{
		    if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
			else format(str, sizeof(str), "{e8d97f}%s\n(%s)", str, dol);
		}
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == 11 && GraczPremium(playerid))
	{
    	if(GetPVarInt(playerid, "Incognito") == 0)
	    {
		    if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
			else format(str, sizeof(str), "{%s}• • •\n{e8d97f}%s\n(%s)", GrupaInfo[DaneGracza[playerid][gSluzba]][gKolorNicku], str, dol);
		}
		else
		{
		    if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
			else format(str, sizeof(str), "{e8d97f}%s\n(%s)", str, dol);
		}
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == 13 && GraczPremium(playerid))
	{
    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "{e8d97f}%s\n(%s)", str, dol);
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == 21 && GraczPremium(playerid))
	{
    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "{e8d97f}%s\n(%s)", str, dol);
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == 23 && GraczPremium(playerid))
	{
    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "{e8d97f}%s\n(%s)\n[%s]", str, dol, dol2);
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == 24 && GraczPremium(playerid))
	{
    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "{e8d97f}%s\n(%s)\n[%s]", str, dol, dol2);
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == 25 && GraczPremium(playerid))
	{
    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "{e8d97f}%s\n(%s)\n[%s]", str, dol, dol2);
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == 26 && GraczPremium(playerid))
	{
    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "{e8d97f}%s\n(%s)\n[%s]", str, dol, dol2);
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == 27 && GraczPremium(playerid))
	{
    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "{e8d97f}%s\n(%s)\n[%s]", str, dol, dol2);
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == 28 && GraczPremium(playerid))
	{
    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "{e8d97f}%s\n(%s)\n[%s]", str, dol, dol2);
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == 0 && !GraczPremium(playerid))
	{
  if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "{b2b2b2}%s\n(%s)", str, dol);
	}
	//new gr = GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp];
	if((gr == 1 && GrupaInfo[DaneGracza[playerid][gSluzba]][gUID] != 9) && !GraczPremium(playerid))
	{
	    if(GetPVarInt(playerid, "Incognito") == 0)
	    {
	    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
			else format(str, sizeof(str), "{%s}%s{b2b2b2}\n(%s)\n[%s]", GrupaInfo[DaneGracza[playerid][gSluzba]][gKolorNicku], str, dol, dol2);
		}
		else
		{
		    if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
			else format(str, sizeof(str), "{b2b2b2}%s\n(%s)", str, dol);
		}
	}
	if((gr == 1 && GrupaInfo[DaneGracza[playerid][gSluzba]][gUID] == 9) && !GraczPremium(playerid))
	{
    	if(GetPVarInt(playerid, "Incognito") == 0)
	    {
	    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
			else format(str, sizeof(str), "{%s}%s{b2b2b2}\n(%s)\n[%s]", GrupaInfo[DaneGracza[playerid][gSluzba]][gKolorNicku], str, dol, dol2);
		}
		else
		{
		    if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
			else format(str, sizeof(str), "{b2b2b2}%s\n(%s)", str, dol);
		}
	}
	if((gr == 14 || gr == 19) && !GraczPremium(playerid))
	{
    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "{%s}%s{b2b2b2}\n(%s)\n[%s]", GrupaInfo[DaneGracza[playerid][gSluzba]][gKolorNicku], str, dol, dol2);
	}
	if((gr == 3 || gr == 4 || gr == 5 || gr == 6 || gr == 7 || gr == 8 || gr == 9 || gr == 12 || gr == 15 || gr == 17 || gr == 18 || gr == 20 || gr == 22) && !GraczPremium(playerid))
	{
    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "{b2b2b2}%s\n(%s)\n[%s]", str, dol, dol2);
	}
	if(gr == 10 && !GraczPremium(playerid))
	{
		if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "{%s}%s{b2b2b2}\n(%s)\n[%s]", GrupaInfo[DaneGracza[playerid][gSluzba]][gKolorNicku], str, dol, dol2);
	}
	if(gr == 16 && !GraczPremium(playerid))
	{
	    if(GetPVarInt(playerid, "Incognito") == 0)
	    {
		    if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
			else format(str, sizeof(str), "{%s}• • •\n{b2b2b2}%s\n(%s)", GrupaInfo[DaneGracza[playerid][gSluzba]][gKolorNicku], str, dol);
		}
		else
		{
		    if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
			else format(str, sizeof(str), "{b2b2b2}%s\n(%s)", str, dol);
		}
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == 2 && !GraczPremium(playerid))
	{
    	if(GetPVarInt(playerid, "Incognito") == 0)
	    {
		    if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
			else format(str, sizeof(str), "{%s}• • •\n{b2b2b2}%s\n(%s)", GrupaInfo[DaneGracza[playerid][gSluzba]][gKolorNicku], str, dol);
		}
		else
		{
		    if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
			else format(str, sizeof(str), "{b2b2b2}%s\n(%s)", str, dol);
		}
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == 11 && !GraczPremium(playerid))
	{
    	if(GetPVarInt(playerid, "Incognito") == 0)
	    {
		    if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
			else format(str, sizeof(str), "{%s}• • •\n{b2b2b2}%s\n(%s)", GrupaInfo[DaneGracza[playerid][gSluzba]][gKolorNicku], str, dol);
		}
		else
		{
		    if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
			else format(str, sizeof(str), "{b2b2b2}%s\n(%s)", str, dol);
		}
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == 13 && !GraczPremium(playerid))
	{
    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "{b2b2b2}%s\n(%s)", str, dol);
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == 21 && !GraczPremium(playerid))
	{
    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "{b2b2b2}%s\n(%s)", str, dol);
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == 23 && !GraczPremium(playerid))
	{
    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "{b2b2b2}%s\n(%s)\n[%s]", str, dol, dol2);
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == 24 && !GraczPremium(playerid))
	{
    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "{b2b2b2}%s\n(%s)\n[%s]", str, dol, dol2);
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == 25 && !GraczPremium(playerid))
	{
    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "{b2b2b2}%s\n(%s)\n[%s]", str, dol, dol2);
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == 26 && !GraczPremium(playerid))
	{
    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "{b2b2b2}%s\n(%s)\n[%s]", str, dol, dol2);
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == 27 && !GraczPremium(playerid))
	{
    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "{b2b2b2}%s\n(%s)\n[%s]", str, dol, dol2);
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == 28 && !GraczPremium(playerid))
	{
    	if(strlen(dol) == 0) format(str, sizeof(str), "%s", str);
		else format(str, sizeof(str), "{b2b2b2}%s\n(%s)\n[%s]", str, dol, dol2);
	}
	strreplace(str, "(, ", "(");
	UpdateDynamic3DTextLabelText(DaneGracza[playerid][gNICK], DaneGracza[playerid][gKOLOR], str);
	return 1;
}
stock przelicznikonline(playerid, &hours, &minutes, &second)
{
	hours 	= DaneGracza[playerid][gCZAS_ONLINE] / 3600;
	minutes = (DaneGracza[playerid][gCZAS_ONLINE] - (hours * 3600)) / 60;
	second 	= ((DaneGracza[playerid][gCZAS_ONLINE] - (hours * 3600)) - (minutes * 60));
	return 1;
}
stock przelicznikwgrze(playerid, &hours, &minutes, &second)
{
	hours 	= DaneGracza[playerid][gWGRZE] / 3600;
	minutes = (DaneGracza[playerid][gWGRZE] - (hours * 3600)) / 60;
	second 	= ((DaneGracza[playerid][gWGRZE] - (hours * 3600)) - (minutes * 60));
	return 1;
}
stock przeliczniksectoh(zmienna, &hours, &minutes, &second)
{
	hours 	= zmienna / 3600;
	minutes = (zmienna - (hours * 3600)) / 60;
	second 	= ((zmienna - (hours * 3600)) - (minutes * 60));
	return 1;
}
stock Sluchawka(playerid, msg[], range = 20, maxlength=100, const prefix[]="[...]")
{
    new length = strlen(msg);
    if(length <= maxlength) {
        TextBezPlayera(range, playerid, msg, 0xE6E6E6E6,0xC8C8C8C8,0xAAAAAAAA,0x8C8C8C8C,0x6E6E6E6E);
        return;
    }
    new idx;
    for(new i, space, plen, bool:useprefix; i < length; i++) {
        if(i - idx + plen >= maxlength) {
            if(idx == space || i - space >= 25) {
                strmid(tekst_global, msg, idx, i);
                idx = i;
            } else {
                strmid(tekst_global, msg, idx, space);
                idx = space + 1;
            }
            if(useprefix) {
                strins(tekst_global, prefix, 0);
            } else {
                plen = strlen(prefix);
                useprefix = true;
            }
            format(tekst_global, sizeof(tekst_global), "%s...", tekst_global);
            TextBezPlayera(range, playerid, tekst_global, 0xE6E6E6E6,0xC8C8C8C8,0xAAAAAAAA,0x8C8C8C8C,0x6E6E6E6E);
        } else if(msg[i] == ' ') {
            space = i;
        }
    }
    if(idx < length) {
        strmid(tekst_global, msg, idx, length);
        strins(tekst_global, prefix, 0);
        TextBezPlayera(range, playerid, tekst_global, 0xE6E6E6E6,0xC8C8C8C8,0xAAAAAAAA,0x8C8C8C8C,0x6E6E6E6E);
    }
    return;
}

stock CzatGlobalnyMEDO(playerid, text[], range = 20)
{
	new string[256];
	for (new i=0; i<strlen(text); i++)
	{
		string[i] = text[i];
	}
	SendPlayerTextMe(range, playerid, string, 0xE6E6E6E6,0xC8C8C8C8,0xAAAAAAAA,0x8C8C8C8C,0x6E6E6E6E);
	new log[256];
	format(log, sizeof(log), "[CZAT IC] [%s] [ID: %d] %s", ZmianaNicku(playerid), playerid, string);
	Transakcja(T_IC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
	return 1;
}

stock CzatGlobalny(playerid, text[], range = 20)
{
	new string[256];
	for (new i=0; i<strlen(text); i++)
	{
		string[i] = text[i];
	}
	SendPlayerTextMe(range, playerid, string, 0xE6E6E6E6,0xC8C8C8C8,0xAAAAAAAA,0x8C8C8C8C,0x6E6E6E6E);
	new log[256];
	format(log, sizeof(log), "[CZAT IC] [%s] [ID: %d] %s", ZmianaNicku(playerid), playerid, string);
	Transakcja(T_IC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
	return 1;
}

stock CzatGlobalnyBot(playerid, text[], range = 20)
{
	new string[256], asterisk = 0, skip = 0;
	new string2[128];
	for (new i=0; i<strlen(text); i++)
	{
		string[i] = text[i];
	}
	for (new i= 0; i<strlen(string); i++)
	{
		if (string[i] == '*')
		{
			if (asterisk == 0)
			{
				strins(string, "{C2A2DA}", i);
				asterisk = i;
				skip++;
			}
			else
			{
				asterisk = 0;
				if (skip%2 == 0)
				{
					strins(string, "{E6E6E6}", i+1);
				}
			}
		}
	}
	if (strlen(string) - 10 > 100)
	{
		strmid(string2, string, 100, 255);
		strdel(string, 100, 255);
		format(string, sizeof(string), "%s...", string);
  		SendPlayerTextBot(range, playerid, string, 0xE6E6E6E6,0xC8C8C8C8,0xAAAAAAAA,0x8C8C8C8C,0x6E6E6E6E);
		format(string2, sizeof(string2), "...%s", string2);
		SendPlayerTextBot(range, playerid, string2, 0xE6E6E6E6,0xC8C8C8C8,0xAAAAAAAA,0x8C8C8C8C,0x6E6E6E6E);
		return 1;
	}
	else
	{
		SendPlayerTextBot(range, playerid, string, 0xE6E6E6E6,0xC8C8C8C8,0xAAAAAAAA,0x8C8C8C8C,0x6E6E6E6E);
		return 1;
	}
}

stock SendWrappedMessageToBot(playerid, colour, msg[], range = 20, maxlength=100, const prefix[]="[...]")
{
    new length = strlen(msg);
    if(length <= maxlength) {
        SendPlayerTextBot(range, playerid, msg, colour, colour, colour, colour, colour);
        return;
    }
    new string[128], idx;
    for(new i, space, plen, bool:useprefix; i < length; i++) {
        if(i - idx + plen >= maxlength) {
            if(idx == space || i - space >= 25) {
                strmid(string, msg, idx, i);
                idx = i;
            } else {
                strmid(string, msg, idx, space);
                idx = space + 1;
            }
            if(useprefix) {
                strins(string, prefix, 0);
            } else {
                plen = strlen(prefix);
                useprefix = true;
            }
            format(string, sizeof(string), "%s...", string);
            SendPlayerTextBot(range, playerid, string, colour, colour, colour, colour, colour);
        } else if(msg[i] == ' ') {
            space = i;
        }
    }
    if(idx < length) {
        strmid(string, msg, idx, length);
        strins(string, prefix, 0);
        SendPlayerTextBot(range, playerid, string, colour, colour, colour, colour, colour);
    }
    return;
}
stock SendWrappedMessageToPlayerRange(playerid, colour, msg[], range = 20, maxlength=100, const prefix[]="[...]")
{
    new length = strlen(msg);
    if(length <= maxlength) {
        SendPlayerText(range, playerid, msg, colour, colour, colour, colour, colour);
        return;
    }
    new string[128], idx;
    for(new i, space, plen, bool:useprefix; i < length; i++) {
        if(i - idx + plen >= maxlength) {
            if(idx == space || i - space >= 25) {
                strmid(string, msg, idx, i);
                idx = i;
            } else {
                strmid(string, msg, idx, space);
                idx = space + 1;
            }
            if(useprefix) {
                strins(string, prefix, 0);
            } else {
                plen = strlen(prefix);
                useprefix = true;
            }
            format(string, sizeof(string), "%s...", string);
            SendPlayerText(range, playerid, string, colour, colour, colour, colour, colour);
        } else if(msg[i] == ' ') {
            space = i;
        }
    }
    if(idx < length) {
        strmid(string, msg, idx, length);
        strins(string, prefix, 0);
        SendPlayerText(range, playerid, string, colour, colour, colour, colour, colour);
    }
    return;
}
forward SendVehText(Float:radi, playerid, text[], col1, col2, col3, col4, col5);
public SendVehText(Float:radi, playerid, text[], col1, col2, col3, col4, col5)
{

	new Float:posx, Float:posy, Float:posz;
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetVehiclePos(playerid, oldposx, oldposy, oldposz);
	ForeachEx(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i))
		{
			if(zalogowany[i] == true)
			{
				if(IsPlayerConnected(i) && (GetVehicleVirtualWorld(playerid) == GetPlayerVirtualWorld(i)))
				{
					GetPlayerPos(i, posx, posy, posz);
					tempposx = (oldposx -posx);
					tempposy = (oldposy -posy);
					tempposz = (oldposz -posz);
					if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
					{
						SendClientMessage(i, col1, text);
					}
					else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
					{
						SendClientMessage(i, col2, text);
					}
					else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
					{
						SendClientMessage(i, col3, text);
					}
					else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
					{
						SendClientMessage(i, col4, text);
					}
					else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
					{
						SendClientMessage(i, col5, text);
					}
				}
			}
		}
	}
	return 1;
}
forward TextBezPlayera(Float:radi, playerid, text[], col1, col2, col3, col4, col5);
public TextBezPlayera(Float:radi, playerid, text[], col1, col2, col3, col4, col5)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		ForeachEx(i, MAX_PLAYERS)
		{
			if(IsPlayerConnected(i))
			{
				if(zalogowany[i] == true)
				{
					if(IsPlayerConnected(i) && (GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i)) && playerid != i)
					{
						GetPlayerPos(i, posx, posy, posz);
						tempposx = (oldposx -posx);
						tempposy = (oldposy -posy);
						tempposz = (oldposz -posz);
						if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
						{
							SendClientMessage(i, col1, text);
						}
						else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
						{
							SendClientMessage(i, col2, text);
						}
						else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
						{
							SendClientMessage(i, col3, text);
						}
						else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
						{
							SendClientMessage(i, col4, text);
						}
						else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
						{
							SendClientMessage(i, col5, text);
						}
					}
				}
			}
		}
	}//not connected
	return 1;
}
forward SendPlayerTextBot(Float:radi, playerid, text[], col1, col2, col3, col4, col5);
public SendPlayerTextBot(Float:radi, playerid, text[], col1, col2, col3, col4, col5)
{
	new Float:posx, Float:posy, Float:posz;
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetDynamicActorPos(playerid, oldposx, oldposy, oldposz);
	ForeachEx(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i))
		{
			if(zalogowany[i] == true)
			{
				if(IsPlayerConnected(i) && (GetDynamicActorVirtualWorld(playerid) == GetPlayerVirtualWorld(i)))
				{
					GetPlayerPos(i, posx, posy, posz);
					tempposx = (oldposx -posx);
					tempposy = (oldposy -posy);
					tempposz = (oldposz -posz);
					if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
					{
						SendClientMessage(i, col1, text);
					}
					else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
					{
						SendClientMessage(i, col2, text);
					}
					else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
					{
						SendClientMessage(i, col3, text);
					}
					else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
					{
						SendClientMessage(i, col4, text);
					}
					else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
					{
						SendClientMessage(i, col5, text);
					}
				}
			}
		}
	}
	return 1;
}
forward SendPlayerTextMe(Float:radi, playerid, text[], col1, col2, col3, col4, col5);
public SendPlayerTextMe(Float:radi, playerid, text[], col1, col2, col3, col4, col5)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		if(RozprawaSadowa != -1 && GetPlayerVirtualWorld(playerid) == 13 && radi >= 5 || RozprawaSadowa != -1 && GetPlayerVirtualWorld(playerid) == 61 && radi >= 5 || RozprawaSadowa != playerid && GetPlayerVirtualWorld(playerid) == 13 && radi >= 5 || RozprawaSadowa != playerid && GetPlayerVirtualWorld(playerid) == 61 && radi >= 5)
		{
			SendClientMessage(playerid, SZARY, "Twoja postac nie mo¿e obecnie rozmawiaæ, gdy przebiega rozprawa s¹dowa!");
			return 0;
		}
		ForeachEx(i, MAX_PLAYERS)
		{
			if(IsPlayerConnected(i))
			{
				if(zalogowany[i] == true)
				{
					if(IsPlayerConnected(i) && (GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i)))
					{
						GetPlayerPos(i, posx, posy, posz);
						tempposx = (oldposx -posx);
						tempposy = (oldposy -posy);
						tempposz = (oldposz -posz);
						if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
						{
							new string[256], asterisk = 0, skip = 0;
							for (new txt=0; txt<strlen(text); txt++)
							{
								string[txt] = text[txt];
							}
							new gwiazdka = 0;
							new mewtekscie = 0;
							new mewtekscieout = 0;
							new spacja = 0;
							new usunpo = 0;
							strreplace(string, ":D", "*œmieje siê*");
							strreplace(string, ";D", "*œmieje siê*");
							strreplace(string, ":)", "*uœmiecha siê*");
							strreplace(string, ";)", "*puszcza oczko*");
							strreplace(string, ":/", "*krzywi siê*");
							strreplace(string, ";/", "*krzywi siê*");
							strreplace(string, ";O", "*zdziwienie na twarz*");
							strreplace(string, ":O", "*zdziwienie na twarz*");
							strreplace(string, ";o", "*zdziwienie na twarz*");
							strreplace(string, ":o", "*zdziwienie na twarz*");
							strreplace(string, ";(", "*robi smutn¹ minê*");
							strreplace(string, ":(", "*robi smutn¹ minê*");
							strreplace(string, ":>", "*mru¿y oczy*");
							strreplace(string, ";>", "*mru¿y oczy*");
							strreplace(string, ";P", "*wystawia jêzyk*");
							strreplace(string, ":P", "*wystawia jêzyk*");
							strreplace(string, ";p", "*wystawia jêzyk*");
							strreplace(string, ":p", "*wystawia jêzyk*");
							strreplace(string, ":d", "*œmieje siê*");
							strreplace(string, ";d", "*œmieje siê*");
							strreplace(string, ";*", "*wysy³a buziaka*");
							strreplace(string, ":*", "*wysy³a buziaka*");
							strreplace(string, "XD", "*wybucha œmiechem*");
							strreplace(string, "xD", "*wybucha œmiechem*");
							strreplace(string, "xd", "*wybucha œmiechem*");
							strreplace(string, ";3", "*robi s³odk¹ minkê*");
							strreplace(string, ":3", "*robi s³odk¹ minkê*");
							for (new txt= 0; txt<strlen(string); txt++)
							{
								if (string[txt] == ' ')
								{
									spacja = txt;
									if (spacja >= 100)
									{
										if(usunpo == 0)
										{
											usunpo = spacja;
										}
									}
								}
								if (string[txt] == '*')
								{
									if (asterisk == 0)
									{
										strins(string, "{C2A2DA}", txt);
										asterisk = txt;
										skip++;
										if (strlen(string) - 10 < usunpo && usunpo <= 100)
										{
											mewtekscie = txt;
										}
									}
									else
									{
										asterisk = 0;
										if (skip%2 == 0)
										{
											strins(string, "{E6E6E6}", txt+1);
											if (strlen(string) - 10 > usunpo && usunpo >= 100)
											{
												mewtekscieout = txt;
											}
											if(mewtekscie < usunpo && mewtekscie <= 100)
											{
												if(mewtekscieout != 0)
												{
													strins(string, "{C2A2DA}", usunpo+1);
													strins(string, "{E6E6E6}", mewtekscieout);
													mewtekscie = 0;
													mewtekscieout = 0;
												}
											}
										}
										
									}
									gwiazdka++;
									if(gwiazdka > 6)
									{
										SendClientMessage(playerid, 0xDEDEDE00, "TIP: Maksymalnie 1 u¿ycie akcji RP w tekscie IC!");
										return 0;
									}
								}
							}
							new string2[128];
							if (strlen(string) - 10 > usunpo && usunpo >= 100)
							{
								strmid(string2, string, usunpo, 255);
								strdel(string, usunpo, 255);
								if(DaneGracza[i][gBW] != 0)
								{
									SendClientMessage(i, col1, "Twoja postaæ jest nieprzytomna i nie s³yszy wypowiedzi innych osób.");
								}
								else
								{
									format(string, sizeof(string), "%s...", string);
									SendClientMessage(i, col1, string);
									format(string2, sizeof(string2), "...%s", string2);
									SendClientMessage(i, col1, string2);
								}
							}
							else
							{
								if(DaneGracza[i][gBW] != 0)
								{
									SendClientMessage(i, col1, "Twoja postaæ jest nieprzytomna i nie s³yszy wypowiedzi innych osób.");
								}
								else
								{
									SendClientMessage(i, col1, string);
								}
							}
						}
						else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
						{
							new string[256], asterisk = 0, skip = 0;
							for (new txt=0; txt<strlen(text); txt++)
							{
								string[txt] = text[txt];
							}
							new gwiazdka = 0;
							new mewtekscie = 0;
							new mewtekscieout = 0;
							new spacja = 0;
							new usunpo = 0;
							strreplace(string, ":D", "*œmieje siê*");
							strreplace(string, ";D", "*œmieje siê*");
							strreplace(string, ":)", "*uœmiecha siê*");
							strreplace(string, ";)", "*puszcza oczko*");
							strreplace(string, ":/", "*krzywi siê*");
							strreplace(string, ";/", "*krzywi siê*");
							strreplace(string, ";O", "*zdziwienie na twarz*");
							strreplace(string, ":O", "*zdziwienie na twarz*");
							strreplace(string, ";o", "*zdziwienie na twarz*");
							strreplace(string, ":o", "*zdziwienie na twarz*");
							strreplace(string, ";(", "*robi smutn¹ minê*");
							strreplace(string, ":(", "*robi smutn¹ minê*");
							strreplace(string, ":>", "*mru¿y oczy*");
							strreplace(string, ";>", "*mru¿y oczy*");
							strreplace(string, ";P", "*wystawia jêzyk*");
							strreplace(string, ":P", "*wystawia jêzyk*");
							strreplace(string, ";p", "*wystawia jêzyk*");
							strreplace(string, ":p", "*wystawia jêzyk*");
							strreplace(string, ":d", "*œmieje siê*");
							strreplace(string, ";d", "*œmieje siê*");
							strreplace(string, ";*", "*wysy³a buziaka*");
							strreplace(string, ":*", "*wysy³a buziaka*");
							strreplace(string, "XD", "*wybucha œmiechem*");
							strreplace(string, "xD", "*wybucha œmiechem*");
							strreplace(string, "xd", "*wybucha œmiechem*");
							strreplace(string, ";3", "*robi s³odk¹ minkê*");
							strreplace(string, ":3", "*robi s³odk¹ minkê*");
							for (new txt= 0; txt<strlen(string); txt++)
							{
								if (string[txt] == ' ')
								{
									spacja = txt;
									if (spacja >= 100)
									{
										if(usunpo == 0)
										{
											usunpo = spacja;
										}
									}
								}
								if (string[txt] == '*')
								{
									if (asterisk == 0)
									{
										strins(string, "{C2A2DA}", txt);
										asterisk = txt;
										skip++;
										if (strlen(string) - 10 < usunpo && usunpo <= 100)
										{
											mewtekscie = txt;
										}
									}
									else
									{
										asterisk = 0;
										if (skip%2 == 0)
										{
											strins(string, "{C8C8C8}", txt+1);
											if (strlen(string) - 10 > usunpo && usunpo >= 100)
											{
												mewtekscieout = txt;
											}
											if(mewtekscie < usunpo && mewtekscie <= 100)
											{
												if(mewtekscieout != 0)
												{
													strins(string, "{C2A2DA}", usunpo+1);
													strins(string, "{C8C8C8}", mewtekscieout);
													mewtekscie = 0;
													mewtekscieout = 0;
												}
											}
										}
										
									}
									gwiazdka++;
									if(gwiazdka > 6)
									{
										SendClientMessage(playerid, 0xDEDEDE00, "TIP: Maksymalnie 1 u¿ycie akcji RP w tekscie IC!");
										return 0;
									}
								}
							}
							new string2[128];
							if (strlen(string) - 10 > usunpo && usunpo >= 100)
							{
								strmid(string2, string, usunpo, 255);
								strdel(string, usunpo, 255);
								if(DaneGracza[i][gBW] != 0)
								{
									SendClientMessage(i, col2, "Twoja postaæ jest nieprzytomna i nie s³yszy wypowiedzi innych osób.");
								}
								else
								{
									format(string, sizeof(string), "%s...", string);
									SendClientMessage(i, col2, string);
									format(string2, sizeof(string2), "...%s", string2);
									SendClientMessage(i, col2, string2);
								}
							}
							else
							{
								if(DaneGracza[i][gBW] != 0)
								{
									SendClientMessage(i, col2, "Twoja postaæ jest nieprzytomna i nie s³yszy wypowiedzi innych osób.");
								}
								else
								{
									SendClientMessage(i, col2, string);
								}
							}
						}
						else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
						{
							new string[256], asterisk = 0, skip = 0;
							for (new txt=0; txt<strlen(text); txt++)
							{
								string[txt] = text[txt];
							}
							new gwiazdka = 0;
							new mewtekscie = 0;
							new mewtekscieout = 0;
							new spacja = 0;
							new usunpo = 0;
							strreplace(string, ":D", "*œmieje siê*");
							strreplace(string, ";D", "*œmieje siê*");
							strreplace(string, ":)", "*uœmiecha siê*");
							strreplace(string, ";)", "*puszcza oczko*");
							strreplace(string, ":/", "*krzywi siê*");
							strreplace(string, ";/", "*krzywi siê*");
							strreplace(string, ";O", "*zdziwienie na twarz*");
							strreplace(string, ":O", "*zdziwienie na twarz*");
							strreplace(string, ";o", "*zdziwienie na twarz*");
							strreplace(string, ":o", "*zdziwienie na twarz*");
							strreplace(string, ";(", "*robi smutn¹ minê*");
							strreplace(string, ":(", "*robi smutn¹ minê*");
							strreplace(string, ":>", "*mru¿y oczy*");
							strreplace(string, ";>", "*mru¿y oczy*");
							strreplace(string, ";P", "*wystawia jêzyk*");
							strreplace(string, ":P", "*wystawia jêzyk*");
							strreplace(string, ";p", "*wystawia jêzyk*");
							strreplace(string, ":p", "*wystawia jêzyk*");
							strreplace(string, ":d", "*œmieje siê*");
							strreplace(string, ";d", "*œmieje siê*");
							strreplace(string, ";*", "*wysy³a buziaka*");
							strreplace(string, ":*", "*wysy³a buziaka*");
							strreplace(string, "XD", "*wybucha œmiechem*");
							strreplace(string, "xD", "*wybucha œmiechem*");
							strreplace(string, "xd", "*wybucha œmiechem*");
							strreplace(string, ";3", "*robi s³odk¹ minkê*");
							strreplace(string, ":3", "*robi s³odk¹ minkê*");
							for (new txt= 0; txt<strlen(string); txt++)
							{
								if (string[txt] == ' ')
								{
									spacja = txt;
									if (spacja >= 100)
									{
										if(usunpo == 0)
										{
											usunpo = spacja;
										}
									}
								}
								if (string[txt] == '*')
								{
									if (asterisk == 0)
									{
										strins(string, "{C2A2DA}", txt);
										asterisk = txt;
										skip++;
										if (strlen(string) - 10 < usunpo && usunpo <= 100)
										{
											mewtekscie = txt;
										}
									}
									else
									{
										asterisk = 0;
										if (skip%2 == 0)
										{
											strins(string, "{AAAAAA}", txt+1);
											if (strlen(string) - 10 > usunpo && usunpo >= 100)
											{
												mewtekscieout = txt;
											}
											if(mewtekscie < usunpo && mewtekscie <= 100)
											{
												if(mewtekscieout != 0)
												{
													strins(string, "{C2A2DA}", usunpo+1);
													strins(string, "{AAAAAA}", mewtekscieout);
													mewtekscie = 0;
													mewtekscieout = 0;
												}
											}
										}
										
									}
									gwiazdka++;
									if(gwiazdka > 6)
									{
										SendClientMessage(playerid, 0xDEDEDE00, "TIP: Maksymalnie 1 u¿ycie akcji RP w tekscie IC!");
										return 0;
									}
								}
							}
							new string2[128];
							if (strlen(string) - 10 > usunpo && usunpo >= 100)
							{
								strmid(string2, string, usunpo, 255);
								strdel(string, usunpo, 255);
								if(DaneGracza[i][gBW] != 0)
								{
									SendClientMessage(i, col3, "Twoja postaæ jest nieprzytomna i nie s³yszy wypowiedzi innych osób.");
								}
								else
								{
									format(string, sizeof(string), "%s...", string);
									SendClientMessage(i, col3, string);
									format(string2, sizeof(string2), "...%s", string2);
									SendClientMessage(i, col3, string2);
								}
							}
							else
							{
								if(DaneGracza[i][gBW] != 0)
								{
									SendClientMessage(i, col3, "Twoja postaæ jest nieprzytomna i nie s³yszy wypowiedzi innych osób.");
								}
								else
								{
									SendClientMessage(i, col3, string);
								}
							}
						}
						else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
						{
							new string[256], asterisk = 0, skip = 0;
							for (new txt=0; txt<strlen(text); txt++)
							{
								string[txt] = text[txt];
							}
							new gwiazdka = 0;
							new mewtekscie = 0;
							new mewtekscieout = 0;
							new spacja = 0;
							new usunpo = 0;
							strreplace(string, ":D", "*œmieje siê*");
							strreplace(string, ";D", "*œmieje siê*");
							strreplace(string, ":)", "*uœmiecha siê*");
							strreplace(string, ";)", "*puszcza oczko*");
							strreplace(string, ":/", "*krzywi siê*");
							strreplace(string, ";/", "*krzywi siê*");
							strreplace(string, ";O", "*zdziwienie na twarz*");
							strreplace(string, ":O", "*zdziwienie na twarz*");
							strreplace(string, ";o", "*zdziwienie na twarz*");
							strreplace(string, ":o", "*zdziwienie na twarz*");
							strreplace(string, ";(", "*robi smutn¹ minê*");
							strreplace(string, ":(", "*robi smutn¹ minê*");
							strreplace(string, ":>", "*mru¿y oczy*");
							strreplace(string, ";>", "*mru¿y oczy*");
							strreplace(string, ";P", "*wystawia jêzyk*");
							strreplace(string, ":P", "*wystawia jêzyk*");
							strreplace(string, ";p", "*wystawia jêzyk*");
							strreplace(string, ":p", "*wystawia jêzyk*");
							strreplace(string, ":d", "*œmieje siê*");
							strreplace(string, ";d", "*œmieje siê*");
							strreplace(string, ";*", "*wysy³a buziaka*");
							strreplace(string, ":*", "*wysy³a buziaka*");
							strreplace(string, "XD", "*wybucha œmiechem*");
							strreplace(string, "xD", "*wybucha œmiechem*");
							strreplace(string, "xd", "*wybucha œmiechem*");
							strreplace(string, ";3", "*robi s³odk¹ minkê*");
							strreplace(string, ":3", "*robi s³odk¹ minkê*");
							for (new txt= 0; txt<strlen(string); txt++)
							{
								if (string[txt] == ' ')
								{
									spacja = txt;
									if (spacja >= 100)
									{
										if(usunpo == 0)
										{
											usunpo = spacja;
										}
									}
								}
								if (string[txt] == '*')
								{
									if (asterisk == 0)
									{
										strins(string, "{C2A2DA}", txt);
										asterisk = txt;
										skip++;
										if (strlen(string) - 10 < usunpo && usunpo <= 100)
										{
											mewtekscie = txt;
										}
									}
									else
									{
										asterisk = 0;
										if (skip%2 == 0)
										{
											strins(string, "{8C8C8C}", txt+1);
											if (strlen(string) - 10 > usunpo && usunpo >= 100)
											{
												mewtekscieout = txt;
											}
											if(mewtekscie < usunpo && mewtekscie <= 100)
											{
												if(mewtekscieout != 0)
												{
													strins(string, "{C2A2DA}", usunpo+1);
													strins(string, "{8C8C8C}", mewtekscieout);
													mewtekscie = 0;
													mewtekscieout = 0;
												}
											}
										}
										
									}
									gwiazdka++;
									if(gwiazdka > 6)
									{
										SendClientMessage(playerid, 0xDEDEDE00, "TIP: Maksymalnie 1 u¿ycie akcji RP w tekscie IC!");
										return 0;
									}
								}
							}
							new string2[128];
							if (strlen(string) - 10 > usunpo && usunpo >= 100)
							{
								strmid(string2, string, usunpo, 255);
								strdel(string, usunpo, 255);
								if(DaneGracza[i][gBW] != 0)
								{
									SendClientMessage(i, col4, "Twoja postaæ jest nieprzytomna i nie s³yszy wypowiedzi innych osób.");
								}
								else
								{
									format(string, sizeof(string), "%s...", string);
									SendClientMessage(i, col4, string);
									format(string2, sizeof(string2), "...%s", string2);
									SendClientMessage(i, col4, string2);
								}
							}
							else
							{
								if(DaneGracza[i][gBW] != 0)
								{
									SendClientMessage(i, col4, "Twoja postaæ jest nieprzytomna i nie s³yszy wypowiedzi innych osób.");
								}
								else
								{
									SendClientMessage(i, col4, string);
								}
							}
						}
						else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
						{
							new string[256], asterisk = 0, skip = 0;
							for (new txt=0; txt<strlen(text); txt++)
							{
								string[txt] = text[txt];
							}
							new gwiazdka = 0;
							new mewtekscie = 0;
							new mewtekscieout = 0;
							new spacja = 0;
							new usunpo = 0;
							strreplace(string, ":D", "*œmieje siê*");
							strreplace(string, ";D", "*œmieje siê*");
							strreplace(string, ":)", "*uœmiecha siê*");
							strreplace(string, ";)", "*puszcza oczko*");
							strreplace(string, ":/", "*krzywi siê*");
							strreplace(string, ";/", "*krzywi siê*");
							strreplace(string, ";O", "*zdziwienie na twarz*");
							strreplace(string, ":O", "*zdziwienie na twarz*");
							strreplace(string, ";o", "*zdziwienie na twarz*");
							strreplace(string, ":o", "*zdziwienie na twarz*");
							strreplace(string, ";(", "*robi smutn¹ minê*");
							strreplace(string, ":(", "*robi smutn¹ minê*");
							strreplace(string, ":>", "*mru¿y oczy*");
							strreplace(string, ";>", "*mru¿y oczy*");
							strreplace(string, ";P", "*wystawia jêzyk*");
							strreplace(string, ":P", "*wystawia jêzyk*");
							strreplace(string, ";p", "*wystawia jêzyk*");
							strreplace(string, ":p", "*wystawia jêzyk*");
							strreplace(string, ":d", "*œmieje siê*");
							strreplace(string, ";d", "*œmieje siê*");
							strreplace(string, ";*", "*wysy³a buziaka*");
							strreplace(string, ":*", "*wysy³a buziaka*");
							strreplace(string, "XD", "*wybucha œmiechem*");
							strreplace(string, "xD", "*wybucha œmiechem*");
							strreplace(string, "xd", "*wybucha œmiechem*");
							strreplace(string, ";3", "*robi s³odk¹ minkê*");
							strreplace(string, ":3", "*robi s³odk¹ minkê*");
							for (new txt= 0; txt<strlen(string); txt++)
							{
								if (string[txt] == ' ')
								{
									spacja = txt;
									if (spacja >= 100)
									{
										if(usunpo == 0)
										{
											usunpo = spacja;
										}
									}
								}
								if (string[txt] == '*')
								{
									if (asterisk == 0)
									{
										strins(string, "{C2A2DA}", txt);
										asterisk = txt;
										skip++;
										if (strlen(string) - 10 < usunpo && usunpo <= 100)
										{
											mewtekscie = txt;
										}
									}
									else
									{
										asterisk = 0;
										if (skip%2 == 0)
										{
											strins(string, "{6E6E6E}", txt+1);
											if (strlen(string) - 10 > usunpo && usunpo >= 100)
											{
												mewtekscieout = txt;
											}
											if(mewtekscie < usunpo && mewtekscie <= 100)
											{
												if(mewtekscieout != 0)
												{
													strins(string, "{C2A2DA}", usunpo+1);
													strins(string, "{6E6E6E}", mewtekscieout);
													mewtekscie = 0;
													mewtekscieout = 0;
												}
											}
										}
										
									}
									gwiazdka++;
									if(gwiazdka > 6)
									{
										SendClientMessage(playerid, 0xDEDEDE00, "TIP: Maksymalnie 1 u¿ycie akcji RP w tekscie IC!");
										return 0;
									}
								}
							}
							new string2[128];
							if (strlen(string) - 10 > usunpo && usunpo >= 100)
							{
								strmid(string2, string, usunpo, 255);
								strdel(string, usunpo, 255);
								if(DaneGracza[i][gBW] != 0)
								{
									SendClientMessage(i, col5, "Twoja postaæ jest nieprzytomna i nie s³yszy wypowiedzi innych osób.");
								}
								else
								{
									format(string, sizeof(string), "%s...", string);
									SendClientMessage(i, col5, string);
									format(string2, sizeof(string2), "...%s", string2);
									SendClientMessage(i, col5, string2);
								}
							}
							else
							{
								if(DaneGracza[i][gBW] != 0)
								{
									SendClientMessage(i, col5, "Twoja postaæ jest nieprzytomna i nie s³yszy wypowiedzi innych osób.");
								}
								else
								{
									SendClientMessage(i, col5, string);
								}
							}
						}
					}
				}
			}
		}
	}//not connected
	return 1;
}
forward SendPlayerText(Float:radi, playerid, text[], col1, col2, col3, col4, col5);
public SendPlayerText(Float:radi, playerid, text[], col1, col2, col3, col4, col5)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		ForeachEx(i, MAX_PLAYERS)
		{
			if(IsPlayerConnected(i))
			{
				if(zalogowany[i] == true)
				{
					if(IsPlayerConnected(i) && (GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i)))
					{
						GetPlayerPos(i, posx, posy, posz);
						tempposx = (oldposx -posx);
						tempposy = (oldposy -posy);
						tempposz = (oldposz -posz);
						if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
						{
							SendClientMessage(i, col1, text);
						}
						else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
						{
							SendClientMessage(i, col2, text);
						}
						else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
						{
							SendClientMessage(i, col3, text);
						}
						else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
						{
							SendClientMessage(i, col4, text);
						}
						else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
						{
							SendClientMessage(i, col5, text);
						}
					}
				}
			}
		}
	}
	return 1;
}
forward AFKDetect();
public AFKDetect()
{
	ForeachEx(playerid, MAX_PLAYERS)
	{
		if(IsPlayerConnected(playerid))
		{
			if(zalogowany[playerid] == true)
			{
				if(PlayerPaused[playerid] == false)
				{
					InactiveTime[playerid]++;
					if(InactiveTime[playerid] == 5)
					{
						PlayerPaused[playerid] = true;
						if(AFK[playerid] == 0)
						{
							AFK[playerid] = 1;
							RefreshNick(playerid);
							TextDrawShowForPlayer(playerid, AFKInformacja);
						}
					}
				}
			}
		}
	}
	return 1;
}
forward AntyAFK();
public AntyAFK()
{
	static
  Float:OldPosX[MAX_PLAYERS],
  Float:OldPosY[MAX_PLAYERS],
  Float:OldPosZ[MAX_PLAYERS];
	ForeachEx(playerid, MAX_PLAYERS)
	{
		if(IsPlayerConnected(playerid))
		{
			if(zalogowany[playerid] == true)
			{
				new
					Float:NewPosX,
					Float:NewPosY,
					Float:NewPosZ;
				GetPlayerPos(playerid, NewPosX, NewPosY, NewPosZ);
				if(NewPosX == OldPosX[playerid] && NewPosY == OldPosY[playerid] && NewPosZ == OldPosZ[playerid])
				{
					if(AFK[playerid] == 0)
					{
						AFK[playerid] = 1;
						RefreshNick(playerid);
						TextDrawShowForPlayer(playerid, AFKInformacja);
					}
				}
				else
				{
					GraczWrocilZAFK(playerid);
				}
				OldPosX[playerid] = NewPosX;
				OldPosY[playerid] = NewPosY;
				OldPosZ[playerid] = NewPosZ;
			}
		}
	}
	return 1;
}
forward Minuta();//Timer Minuta
public Minuta()
{
    ForeachEx(playerid, MAX_PLAYERS)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(zalogowany[playerid] == true)
			{
			    PayDay(playerid);//Warunek PayDay'a ;3
			    Rozprawa(playerid);//Warunek rozprawy
			    Cornery(playerid);//Warunek Cornerów.
				new str[256];
				strdel(str, 0, 256);
			    new g, m, s;
				przelicznikonline(playerid, g, m, s);
				DaneGracza[playerid][gGODZIN] = g;
				DaneGracza[playerid][gMINUT] = m;
				ZapiszGracza(playerid);
				DaneGracza[playerid][gWGRZE]++;
				ZapiszWGrze(playerid);
			}
		}
	}
	ForeachEx(playerid, MAX_PLAYERS)
	{
		if(IsPlayerConnected(playerid))
		{
			if(zalogowany[playerid] == true)
			{
				if(DaneGracza[playerid][gZD8] == 0)//Osiagniecie maniak
				{
					new g, m, s;
					przelicznikonline(playerid, g, m, s);
					if(g == 1000 && DaneGracza[playerid][gZD8] == 0)
					{
						CzasWyswietlaniaTextuNaDrzwiach[playerid] = 30;
						TextDrawHideForPlayer(playerid, TextNaDrzwi[playerid]);
						TextDrawSetString(TextNaDrzwi[playerid], "~y~Osiagniecie~n~~w~Maniak ~g~+500QPoints");
						TextDrawShowForPlayer(playerid, TextNaDrzwi[playerid]);
						DaneGracza[playerid][gGAMESCORE] += 500;
						DaneGracza[playerid][gZD8] = 1;
						SetPlayerScore(playerid,DaneGracza[playerid][gGAMESCORE]);
						ZapiszGracza(playerid);
						ZapiszGraczaGlobal(playerid, 1);
					}
				}
				new i = GraczNaTerenie(playerid);
				if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTeren] == i)
				{
					if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_ZMOTORYZOWANA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_MAFIE || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_GANGI)
					{
						GrupaInfo[DaneGracza[playerid][gSluzba]][gWojna] += 1;
						ZapiszWojne(DaneGracza[playerid][gSluzba]);
						if(GrupaInfo[DaneGracza[playerid][gSluzba]][gWojna] != 0 && GrupaInfo[DaneGracza[playerid][gSluzba]][gOrg] != 0)
						{
							ForeachEx(org, MAX_PLAYERS)
							{
								if(DaneGracza[org][gDzialalnosc1] == DaneGracza[playerid][gSluzba] || DaneGracza[org][gDzialalnosc2] == DaneGracza[playerid][gSluzba] || DaneGracza[org][gDzialalnosc3] == DaneGracza[playerid][gSluzba] || DaneGracza[org][gDzialalnosc4] == DaneGracza[playerid][gSluzba] || DaneGracza[org][gDzialalnosc5] == DaneGracza[playerid][gSluzba]  || DaneGracza[org][gDzialalnosc6] == DaneGracza[playerid][gSluzba])
								{
									TextDrawHideForPlayer(org, TextNaDrzwi[org]);
									new walka[256];
									new atakujacy = GrupaInfo[Lokacja[i][gOwner]][gOrg];
									format(walka, sizeof(walka),"~r~Walka o teren~w~~n~~n~Ktos z waszej organizacji zdobyl punkty~n~by zdobyc teren wrogiej organizacji!~n~~n~~y~%s: ~r~%d~n~~y~vs~n~~y~%s: ~r~%d", GrupaInfo[atakujacy][gNazwa], GrupaInfo[atakujacy][gWojna], GrupaInfo[Lokacja[i][gOwner]][gNazwa], GrupaInfo[Lokacja[i][gOwner]][gWojna]);
									TextDrawSetString(TextNaDrzwi[org], walka);
									TextDrawShowForPlayer(org, TextNaDrzwi[org]);
									CzasWyswietlaniaTextuNaDrzwiach[org] = 30;
								}
							}
						}
					}
				}
				new hour, minute;
				gettime(hour, minute);
				if(hour == 4 && minute == 00)
				{
					vreset = 60;
					printf("Pozosta³o 60sekund do planowanego restaru pojazdow");
				}
				if(minute == 00)
				{
					OdladujBoty();
					ZaladujBoty();
					//OdswiezNasiona();
				}
				if(minute == 00)
				{
					ForeachEx(teren, MAX_ZON)
					{
						if(teren == Lokacja[teren][gUID] && Lokacja[teren][gWojna] != 0)
						{
							new wlasciciel = Lokacja[teren][gOwner];
							new wrog = Lokacja[teren][gWojna];
							new tekst[124];
							if(GrupaInfo[wrog][gWojna] <= GrupaInfo[wlasciciel][gWojna])//Wlasciciel obroni³ teren
							{
								format(tekst, sizeof(tekst), "Organizacja %s obroni³a kontrolê nad terenem.", GrupaInfo[wlasciciel][gNazwa]);
								SendWrappedMessageToAll(0x660000FF, tekst);
								GrupaInfo[wlasciciel][gTeren] = 0;
								GrupaInfo[wlasciciel][gOrg] = 0;
								GrupaInfo[wrog][gTeren] = 0;
								GrupaInfo[wrog][gOrg] = 0;
								GrupaInfo[wrog][gWojna] = 0;
								GrupaInfo[wlasciciel][gWojna] = 0;
								ZapiszWojne(wlasciciel);
								ZapiszWojne(wrog);
								Lokacja[teren][gWojna] = 0;
								ZapiszTeren(teren);
								GangZoneStopFlashForAll(teren);
							}
						}
					}
				}
				ForeachEx(teren, MAX_ZON)
				{
					if(teren == Lokacja[teren][gUID] && Lokacja[teren][gWojna] != 0)
					{
						new wlasciciel = Lokacja[teren][gOwner];
						new wrog = Lokacja[teren][gWojna];
						new tekst[124];
						if(GrupaInfo[wlasciciel][gWojna] >= 400 && GrupaInfo[wrog][gWojna] < GrupaInfo[wlasciciel][gWojna])//Wlasciciel obroni³ teren
						{
							format(tekst, sizeof(tekst), "Organizacja %s obroni³a kontrolê nad terenem.", GrupaInfo[wlasciciel][gNazwa]);
							SendWrappedMessageToAll(0x660000FF, tekst);
							GrupaInfo[wlasciciel][gTeren] = 0;
							GrupaInfo[wlasciciel][gOrg] = 0;
							GrupaInfo[wrog][gTeren] = 0;
							GrupaInfo[wrog][gOrg] = 0;
							GrupaInfo[wrog][gWojna] = 0;
							GrupaInfo[wlasciciel][gWojna] = 0;
							ZapiszWojne(wlasciciel);
							ZapiszWojne(wrog);
							Lokacja[teren][gWojna] = 0;
							ZapiszTeren(teren);
							GangZoneStopFlashForAll(teren);
						}
						else if(GrupaInfo[wrog][gWojna] >= 400 && GrupaInfo[wlasciciel][gWojna] < GrupaInfo[wrog][gWojna])//Wrog przej¹³ teren
						{
							format(tekst, sizeof(tekst), "Organizacja %s przejmuje kontrolê nad terenem organizacji %s.", GrupaInfo[wrog][gNazwa], GrupaInfo[wlasciciel][gNazwa]);
							SendWrappedMessageToAll(0x660000FF, tekst);
							GrupaInfo[wlasciciel][gTeren] = 0;
							GrupaInfo[wlasciciel][gOrg] = 0;
							GrupaInfo[wrog][gTeren] = 0;
							GrupaInfo[wrog][gOrg] = 0;
							GrupaInfo[wrog][gWojna] = 0;
							GrupaInfo[wlasciciel][gWojna] = 0;
							ZapiszWojne(wlasciciel);
							ZapiszWojne(wrog);
							Lokacja[teren][gOwner] = Lokacja[teren][gWojna];
							Lokacja[teren][gOwnerP] = GrupaInfo[wrog][gOwnerUID];
							Lokacja[teren][gWojna] = 0;
							GangZoneStopFlashForAll(teren);
							format(Lokacja[teren][gKolor], 10, "%s77", GrupaInfo[wrog][gKolorNicku]);
							GangZoneShowForAll(Lokacja[teren][gID], HexToInt(Lokacja[teren][gKolor]));
							ZapiszTeren(teren);
						}
					}
				}
			}
		}
    }
	return 1;
}
stock Dodajkase(playerid, money)
{
    DaneGracza[playerid][gPORTFEL] += money;
    ResetPlayerMoney(playerid);
    GivePlayerMoney(playerid, DaneGracza[playerid][gPORTFEL]);
}
stock DodajEuro(playerid, euro)
{
	DaneGracza[playerid][gEuro] += euro;
	ZapiszGracza(playerid);
	OdswiezEuro(playerid);
}
CMD:radio(playerid, params[])
{
	new tekst[512], find = 0;
	ForeachEx(i, MAX_GROUP)
	{
		if(GrupaInfo[i][gUID] != 0)
		{
			if(GrupaInfo[i][gTyp] == DZIALALNOSC_SANNEWS)
			{
				new findduty = 0;
				ForeachEx(id, MAX_PLAYERS)
				{
					if(IsPlayerConnected(id))
					{
						if(zalogowany[id] == true)
						{
							if(DaneGracza[id][gSluzba] == GrupaInfo[i][gUID])
							{
								findduty++;
							}
						}
					}
				}
				if(findduty != 0)
				{
					format(tekst, sizeof(tekst), "%s\n%d\t»  %s (Osoby na s³u¿bie: %d)", tekst, GrupaInfo[i][gUID], GrupaInfo[i][gNazwa], findduty);
					find++;
				}
			}
		}
	}
	if(find != 0)
	{
		dShowPlayerDialog(playerid, DIALOG_RADIOSTACJA, DIALOG_STYLE_LIST, "• Radiostacja:", tekst, "Wybierz", "Zamknij");
	}
	else
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "• Radiostacja:", "Obecnie ¿aden prezenter nie prowadzi ¿adnej audycji wiêc nie mo¿esz wybraæ radiostacji.", "Rozumiem", "");
	}
	return 1;
}
CMD:zabierz(playerid, cmdtext[])
{
	new	comm1[32], comm2[128];
	if(sscanf(cmdtext, "s[32]S()[128]", comm1, comm2))
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "/zabierz [przedmioty, pieniadze]", "Zamknij", "");
		return 1;
	}
	else if(!strcmp(comm1,"przedmioty",true))
	{
		new playerid2;
		if(sscanf(comm2, "d", playerid2))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby zabraæ graczu przedmiot wpisz: /zabierz przedmioty [id gracza]", "Zamknij", "");
			return 1;
		}
		new id = GraczNaTerenie(playerid);
		new dz1 = DaneGracza[playerid][gDzialalnosc1];
		new dz2 = DaneGracza[playerid][gDzialalnosc2];
		new dz3 = DaneGracza[playerid][gDzialalnosc3];
		new dz4 = DaneGracza[playerid][gDzialalnosc4];
		new dz5 = DaneGracza[playerid][gDzialalnosc5];
		new dz6 = DaneGracza[playerid][gDzialalnosc6];
		if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] != DZIALALNOSC_POLICYJNA)
		{
			if((Lokacja[id][gOwner] != dz1 || Lokacja[id][gOwner] != dz2 || Lokacja[id][gOwner] != dz3 || Lokacja[id][gOwner] != dz4 || Lokacja[id][gOwner] != dz5 || Lokacja[id][gOwner] != dz6) && Lokacja[id][gOwner] == 0)
			{
				dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie masz uprawnieñ by okradaæ na tej strefie.", "Zamknij", "");
				return 1;
			}
		}
		if(zalogowany[playerid2] == false)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz zabraæ przedmiot nie jest zalogowany.", "Zamknij", "");
			return 1;
		}
		if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] != DZIALALNOSC_POLICYJNA)
		{
			if(DaneGracza[playerid2][gBW] == 0)
			{
				dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz zabraæ przedmiot powinien byæ nieprzytomny.", "Zamknij", "");
				return 1;
			}
		}
		if(!PlayerObokPlayera(playerid, playerid2, 5))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz zabraæ przedmiot nie znajduje siê ko³o Ciebie.", "Zamknij", "");
			return 1;
		}
		if(playerid == playerid2) return 1;
		SetPVarInt(playerid, "IDZAB", playerid2);
		Przedmioty(playerid, playerid2, DIALOG_ZABIERZ, GUIOPIS "Przedmioty:", TYP_WLASCICIEL, 0);
		return 1;
	}
	else if(!strcmp(comm1,"pieniadze",true))
	{
		new playerid2, kwota;
		if(sscanf(comm2, "dd", playerid2, kwota))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Aby zabraæ graczu przedmiot wpisz: /zabierz pieniadze [id gracza] [kwota]", "Zamknij", "");
			return 1;
		}
		if(zalogowany[playerid2] == false)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz zabraæ przedmiot nie jest zalogowany.", "Zamknij", "");
			return 1;
		}
		new id = GraczNaTerenie(playerid);
		new dz1 = DaneGracza[playerid][gDzialalnosc1];
		new dz2 = DaneGracza[playerid][gDzialalnosc2];
		new dz3 = DaneGracza[playerid][gDzialalnosc3];
		new dz4 = DaneGracza[playerid][gDzialalnosc4];
		new dz5 = DaneGracza[playerid][gDzialalnosc5];
		new dz6 = DaneGracza[playerid][gDzialalnosc6];
		if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] != DZIALALNOSC_POLICYJNA)
		{
			if((Lokacja[id][gOwner] != dz1 || Lokacja[id][gOwner] != dz2 || Lokacja[id][gOwner] != dz3 || Lokacja[id][gOwner] != dz4 || Lokacja[id][gOwner] != dz5 || Lokacja[id][gOwner] != dz6) && Lokacja[id][gOwner] == 0)
			{
				dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Nie masz uprawnieñ by okradaæ na tej strefie.", "Zamknij", "");
				return 1;
			}
		}
		if(DaneGracza[playerid2][gBW] == 0)
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz zabraæ przedmiot powinien byæ nieprzytomny.", "Zamknij", "");
			return 1;
		}
		if(!PlayerObokPlayera(playerid, playerid2, 5))
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz któremu chcesz zabraæ przedmiot nie znajduje siê ko³o Ciebie.", "Zamknij", "");
			return 1;
		}
		if(DaneGracza[playerid2][gPORTFEL] >= kwota)
		{
			Dodajkase(playerid2, -kwota);
			ZapiszGracza(playerid2);
			Dodajkase(playerid, kwota);
			ZapiszGracza(playerid);
			new str[128];
			format(str, sizeof(str), "zabiera $%d od %s.", kwota, ZmianaNicku(playerid2));
			cmd_fasdasfdfive(playerid,str);
			new akcja[126];
			format(akcja,sizeof(akcja),"*zabiera $%d od %s*", kwota, ZmianaNicku(playerid2));
			SetPlayerChatBubble(playerid, akcja, FIOLETOWY, 10.0, 4000);
			new akcja2[126];
			format(akcja2,sizeof(akcja2),"zabiera $%d od %s", kwota, ZmianaNicku(playerid2));
			TextDrawSetString(AkcjaTD[playerid], akcja2);
			TextDrawShowForPlayer(playerid, AkcjaTD[playerid]);
			CzasWyswietlaniaTextuNaDrzwiach[playerid] = 10;
			return 1;
		}
		else
		{
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Ten gracz nie posiada przy sobie takiej sumy!", "Zamknij", "");
			return 0;
		}
	}
	return 1;	
}
forward AdmRepair(playerid);
public AdmRepair(playerid)
{
    SetPVarInt(playerid, "AdmRepair", 0);
    return 1;
}
forward UsunLPM(playerid);
public UsunLPM(playerid)
{
	UzylLPM[playerid] = 0;
	return 1;
}
forward WlaczAntyWizualizacje(playerid);
public WlaczAntyWizualizacje(playerid)
{
	AntyCheatWizualizacja[playerid] = 0;
	return 1;
}
forward WlaczAntyCheata(playerid);
public WlaczAntyCheata(playerid)
{
	AntyCheatBroni[playerid] = 0;
	return 1;
}
forward HolowanyTimer(playerid);
public HolowanyTimer(playerid)
{
	PojazdInfo[playerid][pHolowany] = 0;
	return 1;
}

forward UpdateLicznik(playerid);
public UpdateLicznik(playerid)
{
    if(GetPVarInt(playerid, "IsPlayerInAnyVehicle") == 1)
	{
	    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid)==PLAYER_STATE_DRIVER)
	    {
			new string[128];
			new vehicleid = GetPlayerVehicleID(playerid);
			new uid = SprawdzCarUID(vehicleid);
            if(!Rowery(vehicleid))
		    {
				if(PojazdInfo[uid][pBoost] != 0)
				{
					format(string, sizeof(string), "Predkosc: %dkm/h~n~Paliwo: %0.01fl~n~~b~Boost:~w~ %0.1fbar", Predkosc(playerid), PojazdInfo[uid][pPaliwo], PojazdInfo[uid][pBoost]);
					TextDrawSetString(VehicleTDP[playerid], string);
					TextDrawShowForPlayer(playerid, VehicleTDP[playerid]);
				}
				else
				{
					format(string, sizeof(string), "Predkosc: %dkm/h~n~Paliwo: %0.01fl", Predkosc(playerid), PojazdInfo[uid][pPaliwo]);
					TextDrawSetString(VehicleTDP[playerid], string);
					TextDrawShowForPlayer(playerid, VehicleTDP[playerid]);
				}
			}
			return 1;
		}
	}
	if(!IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid)!=PLAYER_STATE_DRIVER)
 	{
		if(GetPVarInt(playerid, "IsPlayerInAnyVehicle") == 1)
		{
		    SetPVarInt(playerid, "IsPlayerInAnyVehicle", 0);
		    TextDrawHideForPlayer(playerid, VehicleTDP[playerid]);
		    return 1;
		}
	}
	if(IsPlayerInAnyVehicle(playerid) || GetPlayerState(playerid) != PLAYER_STATE_PASSENGER)
	{
		if(GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), GetVehicleComponentType(1010)) == 1010)
		{
		    new vehicleid = GetPlayerVehicleID(playerid);
			new uid = SprawdzCarUID(vehicleid);
			if(PojazdInfo[uid][pPaliwoGaz] == 0)
			{
			    RemoveVehicleComponent(vehicleid, 1010);
			    DestroyProgressBar(PasekNitro[playerid]);
			    GameTextForPlayer(playerid, "Brak azotu w butli!",5000,4);
			}
			if(PojazdInfo[uid][pNitro] == 1)
			{
			    RemoveVehicleComponent(vehicleid, 1010);
			    DestroyProgressBar(PasekNitro[playerid]);
			    GameTextForPlayer(playerid, "Brak azotu w butli!",5000,4);
			}
		}
		if(Predkosc(GetPlayerVehicleID(playerid)) >= 225)
		{
		    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid)==PLAYER_STATE_DRIVER)
	    	{
	            if(DaneGracza[playerid][gZD12] == 0)
				{
				    CzasWyswietlaniaTextuNaDrzwiach[playerid] = 30;
					TextDrawHideForPlayer(playerid, TextNaDrzwi[playerid]);
					TextDrawSetString(TextNaDrzwi[playerid], "~y~Osiagniecie~n~~w~Road hog! ~g~+5QPoints");
					TextDrawShowForPlayer(playerid, TextNaDrzwi[playerid]);
					DaneGracza[playerid][gGAMESCORE] += 5;
					DaneGracza[playerid][gZD12] = 1;
				    SetPlayerScore(playerid,DaneGracza[playerid][gGAMESCORE]);
					ZapiszGracza(playerid);
					ZapiszGraczaGlobal(playerid, 1);
				}
			}
		}
	}
	return 1;
}
stock BiegaHP(playerid)
{
	SetPVarInt(playerid, "BiegnieCzas", GetPVarInt(playerid, "BiegnieCzas")+1);
	if(GetPVarInt(playerid, "BiegnieTeraz") == 1 && GetPVarInt(playerid, "BiegnieCzas") == 10)
	{
	    SetPVarInt(playerid, "BiegnieCzas", 0);
	    if(DaneGracza[playerid][gZDROWIE] > 10)
	    {
	    	DodajHP(playerid, -1);
	    	GameTextForPlayer(playerid, "~r~Podczas biegania tracisz HP!", 3000, 5);
	    	return 1;
		}
	}
	return 1;
}
forward ZaladujNPC();
public ZaladujNPC()
{
	if(NPCAktywne == 1)
	{
		if(NPCStworzone == 0)
		{
			ConnectNPC("Carl_Johnson","pociag");
			CJVehicle = AddStaticVehicle(538, 769.002, -1325.48, -0.001477, 229.778, -1, -1);
			NPCStworzone = 1;
		}
	}
	return 1;
}
forward CoSekunde();
public CoSekunde()
{
    new godzina,
	minuta,
    second;
	gettime(godzina, minuta, second);
	new godz;
	godz = 0;
	new mino;
	mino = 0;
	ForeachEx(gracz, MAX_PLAYERS)
	{
		if(zalogowany[gracz] == true)
		{
			if(second == 00 && mino != minuta)
			{
				mino = minuta;
				DaneGracza[gracz][gDoPelnejGodziny]++;
				if(DaneGracza[gracz][gDoPelnejGodziny] >= 60)
				{
					if(GraczPremium(gracz))
					{
						new msg[254], zasilek[256];
						if(godzina >= 18 || godzina <= 23 && minuta == 00)
						{
							DaneGracza[gracz][gGAMESCORE] += 50;
							format(msg,254,"Godzinna aktywnosc + BONUS!~n~Otrzymujesz ~y~+50QPoints");
							TextDrawSetString(Tutorial[gracz], msg);
							new logtekst[256];
							format(logtekst, sizeof(logtekst), "[BENEFIT] [%s] [ID: %d] system give a benefit $200 and 50QPoints", ZmianaNicku(gracz), gracz);
							Transakcja(T_CDRZWI, DaneGracza[gracz][gUID], -1, DaneGracza[gracz][gGUID], -1, -1, -1, -1, -1, logtekst, gettime()+KOREKTA_CZASOWA);
							TextDrawShowForPlayer(gracz, Tutorial[gracz]);
							CzasWyswietlaniaTextuNaDrzwiach[gracz] = 10;
							format(zasilek, sizeof(zasilek), "{009900}#Bank: {FFFFFF}Na konto wp³ynê³o $200. Zanotowano opcjê w transakcjach konta bankowego.");
							SendClientMessage(gracz, SZARY, zasilek);
							DaneGracza[gracz][gSTAN_KONTA] += 200;
							ZapiszBankKasa(gracz);
							ZapiszGracza(gracz);
							DodajHistorie(4, DaneGracza[gracz][gUID], 200, gettime()+CZAS_LETNI);
							TextDrawShowForPlayer(gracz, InformacjaMoney);
						}
						else
						{
							DaneGracza[gracz][gGAMESCORE] += 35;
							format(msg,254,"Godzinna aktywnosc!~n~Otrzymujesz ~y~+35QPoints");
							TextDrawSetString(Tutorial[gracz], msg);
							new logtekst[256];
							format(logtekst, sizeof(logtekst), "[BENEFIT] [%s] [ID: %d] system give a benefit $200 and 35QPoints", ZmianaNicku(gracz), gracz);
							Transakcja(T_CDRZWI, DaneGracza[gracz][gUID], -1, DaneGracza[gracz][gGUID], -1, -1, -1, -1, -1, logtekst, gettime()+KOREKTA_CZASOWA);
							TextDrawShowForPlayer(gracz, Tutorial[gracz]);
							CzasWyswietlaniaTextuNaDrzwiach[gracz] = 10;
							format(zasilek, sizeof(zasilek), "{009900}#Bank: {FFFFFF}Na konto wp³ynê³o $200. Zanotowano opcjê w transakcjach konta bankowego.");
							SendClientMessage(gracz, SZARY, zasilek);
							DaneGracza[gracz][gSTAN_KONTA] += 200;
							ZapiszBankKasa(gracz);
							ZapiszGracza(gracz);
							DodajHistorie(4, DaneGracza[gracz][gUID], 200, gettime()+CZAS_LETNI);
							TextDrawShowForPlayer(gracz, InformacjaMoney);
						}
					}
					else
					{
						new msg[254], zasilek[256];
						if(godzina >= 18 || godzina <= 23 && minuta == 00)
						{
							DaneGracza[gracz][gGAMESCORE] += 25;
							format(msg,254,"Godzinna aktywnosc + BONUS!~n~Otrzymujesz ~y~+25QPoints");
							TextDrawSetString(Tutorial[gracz], msg);
							new logtekst[256];
							format(logtekst, sizeof(logtekst), "[BENEFIT] [%s] [ID: %d] system give a benefit $200 and 25QPoints", ZmianaNicku(gracz), gracz);
							Transakcja(T_CDRZWI, DaneGracza[gracz][gUID], -1, DaneGracza[gracz][gGUID], -1, -1, -1, -1, -1, logtekst, gettime()+KOREKTA_CZASOWA);
							TextDrawShowForPlayer(gracz, Tutorial[gracz]);
							CzasWyswietlaniaTextuNaDrzwiach[gracz] = 10;
							format(zasilek, sizeof(zasilek), "{009900}#Bank: {FFFFFF}Na konto wp³ynê³o $200. Zanotowano opcjê w transakcjach konta bankowego.");
							SendClientMessage(gracz, SZARY, zasilek);
							DaneGracza[gracz][gSTAN_KONTA] += 200;
							ZapiszBankKasa(gracz);
							ZapiszGracza(gracz);
							DodajHistorie(4, DaneGracza[gracz][gUID], 200, gettime()+CZAS_LETNI);
							TextDrawShowForPlayer(gracz, InformacjaMoney);
						}
						else
						{
							DaneGracza[gracz][gGAMESCORE] += 15;
							format(msg,254,"Godzinna aktywnosc!~n~Otrzymujesz ~y~+15QPoints");
							TextDrawSetString(Tutorial[gracz], msg);
							new logtekst[256];
							format(logtekst, sizeof(logtekst), "[BENEFIT] [%s] [ID: %d] system give a benefit $200 and 15QPoints", ZmianaNicku(gracz), gracz);
							Transakcja(T_CDRZWI, DaneGracza[gracz][gUID], -1, DaneGracza[gracz][gGUID], -1, -1, -1, -1, -1, logtekst, gettime()+KOREKTA_CZASOWA);
							TextDrawShowForPlayer(gracz, Tutorial[gracz]);
							CzasWyswietlaniaTextuNaDrzwiach[gracz] = 10;
							format(zasilek, sizeof(zasilek), "{009900}#Bank: {FFFFFF}Na konto wp³ynê³o $200. Zanotowano opcjê w transakcjach konta bankowego.");
							SendClientMessage(gracz, SZARY, zasilek);
							DaneGracza[gracz][gSTAN_KONTA] += 200;
							ZapiszBankKasa(gracz);
							ZapiszGracza(gracz);
							DodajHistorie(4, DaneGracza[gracz][gUID], 200, gettime()+CZAS_LETNI);
							TextDrawShowForPlayer(gracz, InformacjaMoney);
						}
					}
					DaneGracza[gracz][gDoPelnejGodziny] = 0;
					SetPlayerScore(gracz,DaneGracza[gracz][gGAMESCORE]);
					ZapiszGraczaGlobal(gracz, 1);
				}
			}
		}
	}
	if(minuta == 00 && second == 00 && godz != godzina)
	{
		strdel(tekst_global, 0, 2048);
		godz = godzina;
		if(godzina == 0)
		{
	        format(tekst_global, sizeof(tekst_global), "** Dzwony w ratuszu bij¹ 24 razy. **");
	        SendClientMessageToAll(0xC2A2DAAA, tekst_global);
		}
		else
		{
		    format(tekst_global, sizeof(tekst_global), "** Dzwony w ratuszu bij¹ %d razy. **", godzina);
	        SendClientMessageToAll(0xC2A2DAAA, tekst_global);
		}

	}
	if(Xkara != 0)
	{
		Xkara--;
		if(Xkara < 1)
		{
			TextDrawHideForAll(Textdrawodkar);
			Xkara = 0;
		}
	}
	if(SNINFO != 0)
	{
		SNINFO--;
		if(SNINFO < 1)
		{
			TextDrawHideForAll(LosSantosFM);
			SNINFO = 0;
		}
	}
	if(vreset > 0)
	{
		strdel(tekst_global, 0, 2048);
	    format( tekst_global, sizeof(tekst_global), "~w~Unspawn pojazdow zgaszonych za:~r~ %d", vreset);
	    GameTextForAll( tekst_global, 1000, 6 );
	    vreset--;
	    if(vreset == 0)
	    {
	        vreset = 0;
	        GameTextForAll( "~w~Restart pojazdow zgaszonych:~r~ wykonany", 3000, 6 );
			ForeachEx(i, MAX_VEH)
			{
				if(PojazdInfo[i][pSpawn] == 1)
				{
					if(PojazdInfo[i][pSilnik] == 0)
					{
						PojazdInfo[i][pPrzepchany] = 1;
						PojazdInfo[i][pSpawn] = 0;
						UsunPojazdUID(i);
					}
				}
			}
	    }
	}
	if(aktualizacja > 0)
	{
		strdel(tekst_global, 0, 2048);
	    format( tekst_global, sizeof(tekst_global), "~w~Aktualizacja serwera za:~r~ %d", aktualizacja);
	    GameTextForAll( tekst_global, 1000, 6 );
	    aktualizacja--;
	    if(aktualizacja == 0)
	    {
	        aktualizacja = 0;
	        GameTextForAll( "~w~Aktualizacja serwera:~r~ wykonana", 3000, 6 );
			ForeachEx(id, MAX_PLAYERS)
			{
				if(IsPlayerConnected(id))
				{
					if(zalogowany[id] == true)
					{
						cmd_qs(id, "");
					}
				}
			}
	    }
	}
	if(ogmx > 0)
	{
		strdel(tekst_global, 0, 2048);
	    format( tekst_global, sizeof(tekst_global), "~w~Restart serwera za:~r~ %d", ogmx);
	    GameTextForAll( tekst_global, 1000, 6 );
	    ogmx--;
	    if(ogmx == 0)
	    {
	        ogmx = 0;
	        GameTextForAll( "~w~Restart serwera:~r~ wykonany", 3000, 6 );
	        SendRconCommand("gmx");
	    }
	}
	ForeachEx(playerid, MAX_PLAYERS)
	{
	    if(IsPlayerConnected(playerid))
	    {
			AntyCheat_v01();
			if(zalogowany[playerid] == true)
			{
				//Pocz¹tek CoSekunde
				//UpdateCameras(playerid);
				SprawdzCzyGraczBuguje(playerid);
				UpdateLicznik(playerid);
				if(DaneGracza[playerid][gAJ] > 0)
				{
					DaneGracza[playerid][gAJ]--;
					if(DaneGracza[playerid][gAJ] == 0)
					{
						CzasWyswietlaniaTextuNaDrzwiach[playerid] = 5;
						TextDrawHideForPlayer(playerid, TextNaDrzwi[playerid]);
						TextDrawSetString(TextNaDrzwi[playerid], "Koniec AJ.");
						TextDrawShowForPlayer(playerid, TextNaDrzwi[playerid]);
						SetPVarInt(playerid, "Teleportacja", 1);
						DaneGracza[playerid][gQS] = 0;
						OnPlayerSpawn(playerid);
						SetPVarInt(playerid, "Teleportacja", 0);
					}
					else
					{
						new ga, ma, sa;
						static str[256];
						strdel(str, 0, 256);
						przeliczniksectoh(DaneGracza[playerid][gAJ], ga, ma, sa);
						format(str, sizeof(str), "~w~Pozostala: ~r~%d ~y~min ~r~%d ~y~sec.",ma ,sa);
						CzasWyswietlaniaTextuNaDrzwiach[playerid] = 30;
						TextDrawHideForPlayer(playerid, TextNaDrzwi[playerid]);
						TextDrawSetString(TextNaDrzwi[playerid], str);
						TextDrawShowForPlayer(playerid, TextNaDrzwi[playerid]);
						if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1174.3706,-1180.3267,87.0350))
						{
							Teleportuj(playerid,1174.3706,-1180.3267,87.0350);
						}
					}
				}
				if(DaneGracza[playerid][gBW] > 0 && DaneGracza[playerid][gAJ] == 0)//Timer BW
				{
					DaneGracza[playerid][gBW]--;
					if(DaneGracza[playerid][gBW] == 0)
					{ 
						CzasWyswietlaniaTextuNaDrzwiach[playerid] = 5;
						TextDrawHideForPlayer(playerid, TextNaDrzwi[playerid]);
						TextDrawSetString(TextNaDrzwi[playerid], "Koniec BW.");
						TextDrawShowForPlayer(playerid, TextNaDrzwi[playerid]);
						Frezuj(playerid, 1);
						SetCameraBehindPlayer(playerid);
						RefreshNick(playerid);
						SetPlayerDrunkLevel(playerid, 6000);
						TextDrawHideForPlayer(playerid, pomoc[playerid]);
						UstawHP(playerid, 9);
						ClearAnimations(playerid);			
						BW1[playerid] = 0;
						BW2[playerid] = -1;
					}
					else
					{
						new gs, ms, ss;
						static str[256];
						strdel(str, 0, 256);
						przeliczniksectoh(DaneGracza[playerid][gBW], gs, ms, ss);
						format(str, sizeof(str), "~w~Pozostala: ~r~%d ~y~min ~r~%d ~y~sec.",ms ,ss);
						CzasWyswietlaniaTextuNaDrzwiach[playerid] = 30;
						TextDrawHideForPlayer(playerid, TextNaDrzwi[playerid]);
						TextDrawSetString(TextNaDrzwi[playerid], str);
						TextDrawShowForPlayer(playerid, TextNaDrzwi[playerid]);
						TogglePlayerControllable(playerid, 0);
			      		new pomoctd[256];
						TextDrawHideForPlayer(playerid, pomoc[playerid]);
						format(pomoctd, sizeof(pomoctd), "~w~Twoja postac utracila~n~przytomnosc. Ocknie sie za okolo %d minuty, ale przez 30min~n~nie bedzie w stanie atakowac~n~innych.~n~~n~~y~Postac moze pamietac co zaszlo przed BW.", ms);
						TextDrawSetString(pomoc[playerid], pomoctd);
						TextDrawShowForPlayer(playerid, pomoc[playerid]);
						AnimacjaBW(playerid);
					}
				}
				if(Pracuje[playerid] != 0)
				{
					if(DaneGracza[playerid][gSwp] > 0)
					{
						DaneGracza[playerid][gSwp]--;
						CzasWyswietlaniaTextuNaDrzwiach[playerid] = 5;
						TextDrawHideForPlayer(playerid, TextNaDrzwi[playerid]);
						static taxistra[256];
						format(taxistra, sizeof(taxistra), "~w~Czas do pokonania trasy: ~r~%d ~w~sec",DaneGracza[playerid][gSwp]);
						TextDrawSetString(TextNaDrzwi[playerid], taxistra);
						TextDrawShowForPlayer(playerid, TextNaDrzwi[playerid]);
						if(DaneGracza[playerid][gSwp] < 1)
						{
							CzasWyswietlaniaTextuNaDrzwiach[playerid] = 30;
							TextDrawHideForPlayer(playerid, TextNaDrzwi[playerid]);
							TextDrawSetString(TextNaDrzwi[playerid], "Spozniles sie do nastepnego checkpointa, zlecenie zostalo anulowane.");
							TextDrawShowForPlayer(playerid, TextNaDrzwi[playerid]);
							Pracuje[playerid] = 0;
							new Float: x, Float: y, Float: z;
							GetPlayerPos(playerid, x, y, z);
							Teleportuj(playerid, x, y, z + 5);
							PlayerPlaySound(playerid, 1190, 0.0, 0.0, 0.0);
							DaneGracza[playerid][gSwp] = 0;
							DaneGracza[playerid][gCheckopintID] = 0;
							DaneGracza[playerid][gWyscig] = 0;
							DaneGracza[playerid][gCheckopintID] = 0;
							DisablePlayerRaceCheckpoint(playerid);
							DaneGracza[playerid][gKoniecWyscigu] = 0;
							DaneGracza[playerid][gRaceTimeStart] = 0;
						}
					}
					if(GraczJestAFK(playerid))
					{
						CzasWyswietlaniaTextuNaDrzwiach[playerid] = 30;
						TextDrawHideForPlayer(playerid, TextNaDrzwi[playerid]);
						TextDrawSetString(TextNaDrzwi[playerid], "Wysiadles z pojazdu, zlecenie zostalo anulowane.");
						TextDrawShowForPlayer(playerid, TextNaDrzwi[playerid]);
						Pracuje[playerid] = 0;
						RemovePlayerFromVehicle(playerid);
						RemovePlayerFromVehicle(playerid);
						CzasWyswietlaniaTextuNaDrzwiach[playerid] = 30;
					}
				}
				if(taxijedz[playerid] != 0)
				{
					new vid = GetPVarInt(playerid, "przejazvid");
					new vuid = GetPVarInt(playerid, "przejazuid");
					new guid = GetPVarInt(playerid, "przejazguid");
					new cena = GetPVarInt(playerid, "przejazcena");
					new Float:przejechal, Float:cenak;
					przejechal = (PojazdInfo[vuid][pPrzebieg]/1000)-GetPVarFloat(playerid, "przejechanes");
					cenak = przejechal*cena;
					if(zalogowany[GetPVarInt(playerid, "przejazt")] == true)
					{
						if(GetPlayerVehicleID(GetPVarInt(playerid, "przejazt")) == vid)
						{
							if(IsPlayerInAnyVehicle(playerid))
							{
								if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
								{
									if(DaneGracza[playerid][gPORTFEL] <= floatround(cenak))
									{
										new taxistr[256],taxisstr[256];
										format(taxistr, sizeof(taxistr), "~y~~h~Nie stac cie na dalsza podroz.",przejechal,floatround( cenak ));
										GameTextForPlayer(playerid,taxistr,5000,4);
										format(taxisstr, sizeof(taxisstr), "~y~~h~Gracz ktorego wieziesz nie ma wystarczajacej gotowki.",przejechal,floatround( cenak ));
										GameTextForPlayer(GetPVarInt(playerid, "przejazt"),taxisstr,5000,4);
										}else{
										new taxistr[256],taxisstr[256];
										format(taxistr, sizeof(taxistr), "~y~~h~Przejechane: ~w~%0.03fkm~n~~b~~h~~h~Koszt: $%d",przejechal,floatround( cenak ));
										GameTextForPlayer(playerid,taxistr,5000,4);
										format(taxisstr, sizeof(taxisstr), "~y~~h~Przejechane: ~w~%0.03fkm~n~~b~~h~~h~Koszt: $%d",przejechal,floatround( cenak ));
										GameTextForPlayer(GetPVarInt(playerid, "przejazt"),taxisstr,5000,4);
									}
								}
							}
							else
							{
								if(DaneGracza[playerid][gPORTFEL] < floatround( cenak ))
								{
									cenak = DaneGracza[playerid][gPORTFEL];
								}
								strdel(tekst_global, 0, 2048);
								format(tekst_global, sizeof(tekst_global), "podaje $%d.", floatround( cenak ));
								cmd_fasdasfdfive(playerid, tekst_global);
								new procent = floatround(cenak/10);
								if(procent > 20)
								{
									procent = 20;
								}
								Dodajkase( GetPVarInt(playerid, "przejazt"), procent );
								//DaneGracza[GetPVarInt(playerid, "przejazt")][gPremia] += procent;
								GrupaInfo[guid][gSaldo] += (floatround( cenak )-procent);
								ZapiszSaldo(guid);
								if(DutyNR[GetPVarInt(playerid, "przejazt")] == 1) DaneGracza[GetPVarInt(playerid, "przejazt")][gPrzynaleznosci][3]++;
								else if(DutyNR[GetPVarInt(playerid, "przejazt")] == 2) DaneGracza[GetPVarInt(playerid, "przejazt")][gPrzynaleznosci][9]++;
								else if(DutyNR[GetPVarInt(playerid, "przejazt")] == 3) DaneGracza[GetPVarInt(playerid, "przejazt")][gPrzynaleznosci][15]++;
								else if(DutyNR[GetPVarInt(playerid, "przejazt")] == 4) DaneGracza[GetPVarInt(playerid, "przejazt")][gPrzynaleznosci][21]++;
								else if(DutyNR[GetPVarInt(playerid, "przejazt")] == 5) DaneGracza[GetPVarInt(playerid, "przejazt")][gPrzynaleznosci][27]++;
								else if(DutyNR[GetPVarInt(playerid, "przejazt")] == 6) DaneGracza[GetPVarInt(playerid, "przejazt")][gPrzynaleznosci][33]++;
								StatykujTransakcje(guid, GetPVarInt(playerid, "przejazt"), playerid, "Przejazd", floatround( cenak ));
								Dodajkase( playerid, -floatround( cenak ) );
								DisablePlayerCheckpoint(GetPVarInt(playerid, "przejazt"));
								taxijedz[playerid] = 0;
							}
						}
						else
						{
							if(DaneGracza[playerid][gPORTFEL] < floatround( cenak ))
							{
								cenak = DaneGracza[playerid][gPORTFEL];
							}
							strdel(tekst_global, 0, 2048);
							format(tekst_global, sizeof(tekst_global), "podaje $%d.", floatround( cenak ));
							cmd_fasdasfdfive(playerid, tekst_global);
							new procent = floatround(cenak/10);
							if(procent > 20)
							{
								procent = 20;
							}
							Dodajkase( GetPVarInt(playerid, "przejazt"), procent );
							//DaneGracza[GetPVarInt(playerid, "przejazt")][gPremia] += procent;
							GrupaInfo[guid][gSaldo] += (floatround( cenak )-procent);
							ZapiszSaldo(guid);
							if(DutyNR[GetPVarInt(playerid, "przejazt")] == 1) DaneGracza[GetPVarInt(playerid, "przejazt")][gPrzynaleznosci][3]++;
							else if(DutyNR[GetPVarInt(playerid, "przejazt")] == 2) DaneGracza[GetPVarInt(playerid, "przejazt")][gPrzynaleznosci][9]++;
							else if(DutyNR[GetPVarInt(playerid, "przejazt")] == 3) DaneGracza[GetPVarInt(playerid, "przejazt")][gPrzynaleznosci][15]++;
							else if(DutyNR[GetPVarInt(playerid, "przejazt")] == 4) DaneGracza[GetPVarInt(playerid, "przejazt")][gPrzynaleznosci][21]++;
							else if(DutyNR[GetPVarInt(playerid, "przejazt")] == 5) DaneGracza[GetPVarInt(playerid, "przejazt")][gPrzynaleznosci][27]++;
							else if(DutyNR[GetPVarInt(playerid, "przejazt")] == 6) DaneGracza[GetPVarInt(playerid, "przejazt")][gPrzynaleznosci][33]++;
							StatykujTransakcje(guid, GetPVarInt(playerid, "przejazt"), playerid, "Przejazd", floatround( cenak ));
							Dodajkase( playerid, -floatround( cenak ) );
							DisablePlayerCheckpoint(GetPVarInt(playerid, "przejazt"));
							taxijedz[playerid] = 0;
							GameTextForPlayer(playerid, "~r~Kierowca wyszedl z pojazdu.", 3000, 5);
						}
					}
					else
					{
						if(DaneGracza[playerid][gPORTFEL] < floatround( cenak ))
						{
							cenak = DaneGracza[playerid][gPORTFEL];
						}
						strdel(tekst_global, 0, 2048);
						format(tekst_global, sizeof(tekst_global), "podaje $%d.", floatround( cenak ));
						cmd_fasdasfdfive(playerid, tekst_global);
						new procent = floatround(cenak/10);
						if(procent > 20)
						{
							procent = 20;
						}
						Dodajkase( GetPVarInt(playerid, "przejazt"), procent );
						//DaneGracza[GetPVarInt(playerid, "przejazt")][gPremia] += procent;
						GrupaInfo[guid][gSaldo] += (floatround( cenak )-procent);
						ZapiszSaldo(guid);
						if(DutyNR[GetPVarInt(playerid, "przejazt")] == 1) DaneGracza[GetPVarInt(playerid, "przejazt")][gPrzynaleznosci][3]++;
						else if(DutyNR[GetPVarInt(playerid, "przejazt")] == 2) DaneGracza[GetPVarInt(playerid, "przejazt")][gPrzynaleznosci][9]++;
						else if(DutyNR[GetPVarInt(playerid, "przejazt")] == 3) DaneGracza[GetPVarInt(playerid, "przejazt")][gPrzynaleznosci][15]++;
						else if(DutyNR[GetPVarInt(playerid, "przejazt")] == 4) DaneGracza[GetPVarInt(playerid, "przejazt")][gPrzynaleznosci][21]++;
						else if(DutyNR[GetPVarInt(playerid, "przejazt")] == 5) DaneGracza[GetPVarInt(playerid, "przejazt")][gPrzynaleznosci][27]++;
						else if(DutyNR[GetPVarInt(playerid, "przejazt")] == 6) DaneGracza[GetPVarInt(playerid, "przejazt")][gPrzynaleznosci][33]++;
						StatykujTransakcje(guid, GetPVarInt(playerid, "przejazt"), playerid, "Przejazd", floatround( cenak ));
						Dodajkase( playerid, -floatround( cenak ) );
						static taxisstr[124];
						format(taxisstr, sizeof(taxisstr), "~b~~h~~h~Przychod: $%d",floatround( cenak ));
						GameTextForPlayer(GetPVarInt(playerid, "przejazt"),taxisstr,5000,4);
						DisablePlayerCheckpoint(GetPVarInt(playerid, "przejazt"));
						taxijedz[playerid] = 0;
					}
				}
				if(DaneGracza[playerid][gBetaTester] < (gettime()+CZAS_LETNI) && DaneGracza[playerid][gBronUID] < 0)
				{
				    ResetPlayerWeapons(playerid);
					PrzedmiotInfo[DaneGracza[playerid][gBronUID]][pUzywany] = 0;
					ZapiszPrzedmiot(DaneGracza[playerid][gBronUID]);
					DaneGracza[playerid][gBronUID] = 0;
					DaneGracza[playerid][gBronAmmo] = 0;
					DeletePVar(playerid, "UzywanaBron");
				}
				new PlayerWeapon = GetPlayerWeapon(playerid);
				new findgun = DaneGracza[playerid][gBronUID];
				new ammo = GetPlayerWeaponAmmo(playerid, PlayerWeapon);
				if(PrzedmiotInfo[findgun][pUzywany] != 0 && DaneGracza[playerid][gBronAmmo] == PlayerWeapon && GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
				{
					if(ammo > PrzedmiotInfo[findgun][pWar2]+5 || 0 > PrzedmiotInfo[findgun][pWar2])
					{
						SetPlayerAmmo(playerid, DaneGracza[playerid][gBronAmmo], PrzedmiotInfo[findgun][pWar2]);
						NadajKare(playerid,-1, 2, ""PREFIXAC".AntyCheat: Infinity Ammo", 30);
					}
					if(ammo > PrzedmiotInfo[findgun][pWar2])
					{
						SetWeaponAmmo(playerid, PlayerWeapon, PrzedmiotInfo[findgun][pWar2]);
					}
					else
					{
						if(ammo <= 1)
						{
							MozeBanowac[playerid] = 1;
							UzywanieItemu(playerid, findgun);
							PrzedmiotInfo[findgun][pWar2] = 0;
							ZapiszPrzedmiot(findgun);
							SetTimerEx("WlaczWeaponCheata",2000,0,"d",playerid);
							//Transakcja(T_AMMOL, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, findgun, PrzedmiotInfo[findgun][pWar1], -1, "-", gettime()+KOREKTA_CZASOWA);
						}
						else
						{
							PrzedmiotInfo[findgun][pWar2] = ammo;
							ZapiszPrzedmiot(findgun);
						}
					}
				}
				if(GetPVarInt(playerid, "NitroPojazd") != 0)//Nitro na przycisk
				{
				    new vehicleidnitro = GetPlayerVehicleID(playerid);
					new uidnitro = SprawdzCarUID(vehicleidnitro);
					if(GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), GetVehicleComponentType(1010)) == 1010)
					{
						if(PojazdInfo[uidnitro][pPaliwoGaz] != 0)
						{
							new Float: ilosc;
							ilosc = 1;
						    PojazdInfo[uidnitro][pPaliwoGaz] -= ilosc;
						    ZapiszPojazd(uidnitro, 1);
							SetProgressBarValue(Bar:PasekNitro[playerid], PojazdInfo[uidnitro][pPaliwoGaz]);
							UpdateProgressBar(PasekNitro[playerid], playerid);
						}
						if(PojazdInfo[uidnitro][pPaliwoGaz] == 0)
						{
						    RemoveVehicleComponent(vehicleidnitro, 1010);
						    GameTextForPlayer(playerid, "Brak azotu w butli!",5000,4);
						}
					}
				}
				if(GetPVarInt(playerid, "metry") != 0)//TD Metrów
				{
					new uid = GetPVarInt(playerid, "metry");
	 				if(BudynekInfo[uid][nIR] == DaneGracza[playerid][gGUID])
	 				{
						static Float:x, Float:y, Float:z;
					    static tekst_global_big[500];
					    GetPlayerPos(playerid, x, y ,z);
					    static Float:wynik;
						wynik = (BudynekInfo[uid][nIRX] - x)*(BudynekInfo[uid][nIRY] - y)*1;//(BudynekInfo[uid][nIRZ] - z+1
						if(wynik > 0)
						{
							format(tekst_global_big, sizeof(tekst_global_big), "~w~Oznaczone wymiary:~n~~r~%.2fm x %.2fm x %.2f~n~~g~(%.2fm2, max %.2fm2)~n~~n~~w~Jezeli dodasz tutaj punkt:~n~~y~%.2fm x %.2fm x %.2f (%.2fm2)~n~~n~~w~ Y - Zatwierdz metraz",
							BudynekInfo[uid][nIRX] - x, BudynekInfo[uid][nIRY] - y, BudynekInfo[uid][nIRZ] - z+1, wynik, BudynekInfo[uid][nPowieszchnia], BudynekInfo[uid][nIRX] - x, BudynekInfo[uid][nIRY] - y, 1, wynik);
							TextDrawSetString(OBJ2[playerid], tekst_global_big);
							TextDrawShowForPlayer(playerid, OBJ2[playerid]);
						}
						else
						{
						    format(tekst_global_big, sizeof(tekst_global_big), "~w~Oznaczone wymiary:~n~~r~%.2fm x %.2fm x %.2f~n~~g~(%.2fm2, max %.2fm2)~n~~n~~w~Jezeli dodasz tutaj punkt:~n~~y~%.2fm x %.2fm x %.2f (%.2fm2)~n~~n~~w~ Y - Zatwierdz metraz",
							BudynekInfo[uid][nIRX] - x, BudynekInfo[uid][nIRY] - y, BudynekInfo[uid][nIRZ] - z+1, -(wynik), BudynekInfo[uid][nPowieszchnia], BudynekInfo[uid][nIRX] - x, BudynekInfo[uid][nIRY] - y, 1, -(wynik));
							TextDrawSetString(OBJ2[playerid], tekst_global_big);
							TextDrawShowForPlayer(playerid, OBJ2[playerid]);
						}
					}
				}
				if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_POLICYJNA)
				{
					if(IsPlayerInAnyVehicle(playerid))
					{
						new vehid = GetPlayerVehicleID(playerid);
						new id = GetVehicleInfrontID (vehid);
						if(id < 0)
						{
							new pomiar[256];
							format(pomiar, sizeof(pomiar), "~b~Pomiar: ~w~N/A km/h~n~~b~Marka:~w~ N/A~n~Rejestracja:~w~ N/A");
							TextDrawSetString(Pomiar[playerid], pomiar);
							TextDrawShowForPlayer(playerid, Pomiar[playerid]);
							SetTimerEx("NapisUsunsV",15000,0,"d",playerid);
						}
						else
						{
							new vehc1 = SprawdzCarUID(id);
							new tablica[32];
							if(ComparisonString(PojazdInfo[vehc1][pTablice], ""))
							{
								format(tablica, sizeof(tablica), "N/A");
							}
							else
							{
								format(tablica, sizeof(tablica), "%s", PojazdInfo[vehc1][pTablice]);
							}
							new pomiar[256];
							format(pomiar, sizeof(pomiar), "~b~Pomiar: ~w~%d km/h~n~~b~Marka:~w~ %s~n~~b~Rejestracja: ~w~%s",
							PredkoscPojazdu(id), GetVehicleModelName(PojazdInfo[vehc1][pModel]), tablica);
							TextDrawSetString(Pomiar[playerid], pomiar);
							TextDrawShowForPlayer(playerid, Pomiar[playerid]);
							SetTimerEx("NapisUsunsV",15000,0,"d",playerid);
						}
					}
				}
				if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
				    new vehicleid=GetPlayerVehicleID(playerid);
				    if(!Wlascicielpojazdu(vehicleid, playerid) && GetPVarInt(playerid, "SprzedalPojazd") == 0 && DaneGracza[playerid][gWypozyczonyPojazdCZAS] > gettime()+CZAS_LETNI)
					{
						new armour[256];
						format(armour, sizeof(armour), ""PREFIXAC".AntyCheat: Nieautoryzowane wejscie do pojazdu v2 (%d)", vehicleid);
						NadajKare(playerid,-1, 0, armour, -1);
					}
				}
				if(GetPlayerVirtualWorld(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 999)//Budynki metra¿
				{
					new uid = GetPlayerVirtualWorld(playerid);
					if(!ZarzadzanieBudynkiem(uid, playerid))
					{
						static Float: x, Float: y, Float: z;
						GetPlayerPos(playerid, x, y, z);
						static tak;
						if(BudynekInfo[uid][nIRX] > BudynekInfo[uid][nORX])//
						{
							if(BudynekInfo[uid][nIRX]+2 <= x || BudynekInfo[uid][nORX]-2 >= x)
							{
			  					tak = 1;
							}
						}
						else
						{
						    if(BudynekInfo[uid][nIRX]-2 >= x || BudynekInfo[uid][nORX]+2 <= x)
							{
			  					tak = 1;
							}
						}
						if(BudynekInfo[uid][nIRX] < BudynekInfo[uid][nORX])//
						{
							if(BudynekInfo[uid][nIRX]-2 >= x || BudynekInfo[uid][nORX]+2 <= x)
							{
			  					tak = 1;
							}
						}
						else
						{
						    if(BudynekInfo[uid][nIRX]+2 <= x || BudynekInfo[uid][nORX]-2 >= x)
							{
			  					tak = 1;
							}
						}
						if(BudynekInfo[uid][nIRY] > BudynekInfo[uid][nORY])//
						{
							if(BudynekInfo[uid][nIRY]+2 <= y || BudynekInfo[uid][nORY]-2 >= y)
							{
			  					tak = 1;
							}
						}
						else
						{
						    if(BudynekInfo[uid][nIRY]-2 >= y || BudynekInfo[uid][nORY]+2 <= y)
							{
			  					tak = 1;
							}
						}
						if(BudynekInfo[uid][nIRY] < BudynekInfo[uid][nORY])//
						{
							if(BudynekInfo[uid][nIRY]-2 >= y || BudynekInfo[uid][nORY]+2 <= y)
							{
			  					tak = 1;
							}
						}
						else
						{
						    if(BudynekInfo[uid][nIRY]+2 <= y || BudynekInfo[uid][nORY]-2 >= y)
							{
			  					tak = 1;
							}
						}
						if(tak == 1)
						{
							if(uid != 999 || uid != 0)
							{
								tak = 0;
								WejscieDoBudynku(playerid, uid, 0, BudynekInfo[uid][nVWW]);
								GameTextForPlayer(playerid, "~r~Nieustalony metraz", 6000, 5);
							}
						}
					}
				}
				if(DaneGracza[playerid][gSluzba] == 0)
				{
					GPS[playerid] = 0;
				}
				if(GPS[playerid] == 1)
				{
					new slot = 0, Float:pozycjax, Float:pozycjay, Float:pozycjaz;
					ForeachEx(playeridg, MAX_PLAYERS)
					{
						if(IsPlayerConnected(playeridg))
						{
							if(zalogowany[playeridg] == true)
							{
								if(DaneGracza[playerid][gSluzba] == DaneGracza[playeridg][gSluzba] && IsPlayerInAnyVehicle(playerid) && playerid != playeridg && GetPlayerState(playeridg)==PLAYER_STATE_DRIVER)
								{
									slot++;
									GetPlayerPos(playeridg, pozycjax, pozycjay, pozycjaz);
									RemovePlayerMapIcon(playerid, slot);
									SetPlayerMapIcon( playerid, slot, pozycjax, pozycjay, pozycjaz, 55, 0, MAPICON_GLOBAL );
								}
							}
						}
					}
				}
				if(Namierzanie[playerid] > 0)//Warunek Namierzania
				{
					Namierzanie[playerid]--;
					if(Namierzanie[playerid] > 0)
					{
						//Namierzanie gracza
					}
					else
					{
					    new id = GetPVarInt(playerid, "NamierzanieID");
					    new Float: x, Float:y, Float:z;
					    GetPlayerPos(id, x, y, z);

                        GameTextForPlayer(playerid, "~g~Namierzony.", 6000, 5);
                        TextDrawHideForPlayer(playerid, TextNaDrzwi[playerid]);
						InterpolateCameraPos(playerid, -348.734527, 1498.441040, 75.862190+200, x, y, z+200, 5000, CAMERA_MOVE);
					}
				}
				if(C2[playerid] > 0)//Warunek C2
				{
					C2[playerid]--;
					if(C2[playerid] > 0)
					{
						PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
					}
					else
					{
					    new uid = GetPVarInt(playerid, "C3");
						CreateExplosion(BudynekInfo[uid][nX], BudynekInfo[uid][nY], BudynekInfo[uid][nZ], 12, 1.0);
						BudynekInfo[uid][nZamek] = 1;
						ZapiszNieruchomosc(uid);
					}
				}
				if(GetPVarInt(playerid, "CzarnaRobota") == 1 && GetPVarInt(playerid, "CzarnaRobotaCzas") > 0)
				{
				    SetPVarInt(playerid, "CzarnaRobotaCzas", GetPVarInt(playerid, "CzarnaRobotaCzas")-1);
				    if(GetPVarInt(playerid, "CzarnaRobotaCzas") > 0)
				    {
				        if(GetPVarInt(playerid, "CzarnaRobotaCzas") == 1)
				        {
							new czarnarobota[256];
					    	format(czarnarobota, sizeof(czarnarobota), "~r~~>~ Rabunek mieszkania ~<~~n~~n~~w~Udaj sie do goscia, ktory zlecil Ci rabunek by otrzymac kase za towar!~n~Udalo sie wam wyniesc ~r~%d~w~ przedmiotow", GetPVarInt(playerid, "IloscPaczekRobota"));
							TextDrawSetString(OBJ[playerid], czarnarobota);
							TextDrawShowForPlayer(playerid, OBJ[playerid]);
							SetTimerEx("NapisUsunsV",10000,0,"d",playerid);
							SetPVarInt(playerid, "CzarnaRobota", 2);
				        }
				        new CzasRoboty[64];
				        format(CzasRoboty, sizeof(CzasRoboty), "%d", GetPVarInt(playerid, "CzarnaRobotaCzas"));
				        GameTextForPlayer(playerid, CzasRoboty, 1000, 4);
				    }
				}
				if(GetPVarInt(playerid, "PaserCzas") > 0)//Timer dla Pasera
				{
				    SetPVarInt(playerid, "PaserCzas", GetPVarInt(playerid, "PaserCzas")-1);
   					if(GetPVarInt(playerid, "PaserObiekt") == 1271)
   					{
						if(GetPVarInt(playerid, "PaserCzas") > 0)
						{
						    if(GetPVarInt(playerid, "PaserCzas") == 4)
							{
							    new paser[256];
						    	format(paser, sizeof(paser), "~w~Nacicnij ~r~3~w~ razy ~y~SPRINT~w~ i zaczekaj aby otworzyc skrzynke..");
								TextDrawSetString(OBJ[playerid], paser);
								TextDrawShowForPlayer(playerid, OBJ[playerid]);
							}
						}
						else
						{
						    if(GetPVarInt(playerid, "PaserSpacja") == 3)
						    {
						        DodajPrzedmiot(DaneGracza[playerid][gUID], TYP_WLASCICIEL, P_PASERKA, P_TASMA_LED, 0, "Swiatla dzienne LED", DaneGracza[playerid][gUID], 0, -1, 0, 0, 0, 0, "");
							    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "• Rabunek na naczepy:", "W skrzynce znaleziono elektronikê. Przedmiot dodano do ekwipunku.\n\n- Swiatla dzienne LED.", "Zamknij", "");
	                            RemovePlayerAttachedObject(playerid, 7);
	                            SetPVarInt(playerid, "PaserSpacja", 0);
	                            TextDrawHideForPlayer(playerid, OBJ[playerid]);
	                            ClearAnimations(playerid);
	                            SetPVarInt(playerid, "ObecnieOtworzylPaser", 0);
							}
							else
							{
							    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "• Rabunek na naczepy:", "Nie uda³o Ci siê otworzyæ skrzynki z elektronik¹.\nSpróbuj otworzyæ skrzynkê w innej naczepie.", "Zamknij", "");
							    RemovePlayerAttachedObject(playerid, 7);
							    SetPVarInt(playerid, "PaserSpacja", 0);
							    TextDrawHideForPlayer(playerid, OBJ[playerid]);
							    ClearAnimations(playerid);
							    SetPVarInt(playerid, "ObecnieOtworzylPaser", 0);
							}
						}
   					}
   					if(GetPVarInt(playerid, "PaserObiekt") == 3014)
   					{
						if(GetPVarInt(playerid, "PaserCzas") > 0)
						{
						    if(GetPVarInt(playerid, "PaserCzas") == 4)
							{
							    new paser[256];
						    	format(paser, sizeof(paser), "~w~Nacicnij ~r~5~w~ razy ~y~SPRINT~w~ i zaczekaj aby otworzyc skrzynke..");
								TextDrawSetString(OBJ[playerid], paser);
								TextDrawShowForPlayer(playerid, OBJ[playerid]);
							}
						}
						else
						{
						    if(GetPVarInt(playerid, "PaserSpacja") == 5)
						    {
						        DodajPrzedmiot(DaneGracza[playerid][gUID], TYP_WLASCICIEL, P_PASERKA, P_PROCESORY, 0, "Procesory", DaneGracza[playerid][gUID], 0, -1, 0, 0, 0, 0, "");
							    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "• Rabunek na naczepy:", "W skrzynce znaleziono elektronikê. Przedmiot dodano do ekwipunku.\n\n- Procesory.", "Zamknij", "");
	                            RemovePlayerAttachedObject(playerid, 7);
	                            SetPVarInt(playerid, "PaserSpacja", 0);
	                            TextDrawHideForPlayer(playerid, OBJ[playerid]);
	                            ClearAnimations(playerid);
	                            SetPVarInt(playerid, "ObecnieOtworzylPaser", 0);
							}
							else
							{
							    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "• Rabunek na naczepy:", "Nie uda³o Ci siê otworzyæ skrzynki z elektronik¹.\nSpróbuj otworzyæ skrzynkê w innej naczepie.", "Zamknij", "");
							    RemovePlayerAttachedObject(playerid, 7);
							    SetPVarInt(playerid, "PaserSpacja", 0);
							    TextDrawHideForPlayer(playerid, OBJ[playerid]);
							    ClearAnimations(playerid);
							    SetPVarInt(playerid, "ObecnieOtworzylPaser", 0);
							}
						}
   					}
   					if(GetPVarInt(playerid, "PaserObiekt") == 2969)
   					{
						if(GetPVarInt(playerid, "PaserCzas") > 0)
						{
						    if(GetPVarInt(playerid, "PaserCzas") == 4)
							{
							    new paser[256];
						    	format(paser, sizeof(paser), "~w~Nacicnij ~r~7~w~ razy ~y~SPRINT~w~ i zaczekaj aby otworzyc skrzynke..");
								TextDrawSetString(OBJ[playerid], paser);
								TextDrawShowForPlayer(playerid, OBJ[playerid]);
							}
						}
						else
						{
						    if(GetPVarInt(playerid, "PaserSpacja") == 7)
						    {
						        DodajPrzedmiot(DaneGracza[playerid][gUID], TYP_WLASCICIEL, P_PASERKA, P_LAPTOPY, 0, "Laptopy", DaneGracza[playerid][gUID], 0, -1, 0, 0, 0, 0, "");
							    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "• Rabunek na naczepy:", "W skrzynce znaleziono elektronikê. Przedmiot dodano do ekwipunku.\n\n- Laptopy.", "Zamknij", "");
	                            RemovePlayerAttachedObject(playerid, 7);
	                            SetPVarInt(playerid, "PaserSpacja", 0);
	                            TextDrawHideForPlayer(playerid, OBJ[playerid]);
	                            ClearAnimations(playerid);
	                            SetPVarInt(playerid, "ObecnieOtworzylPaser", 0);
							}
							else
							{
							    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "• Rabunek na naczepy:", "Nie uda³o Ci siê otworzyæ skrzynki z elektronik¹.\nSpróbuj otworzyæ skrzynkê w innej naczepie.", "Zamknij", "");
							    RemovePlayerAttachedObject(playerid, 7);
							    SetPVarInt(playerid, "PaserSpacja", 0);
							    TextDrawHideForPlayer(playerid, OBJ[playerid]);
							    ClearAnimations(playerid);
							    SetPVarInt(playerid, "ObecnieOtworzylPaser", 0);
							}
						}
   					}
   					if(GetPVarInt(playerid, "PaserObiekt") == 19918)
   					{
						if(GetPVarInt(playerid, "PaserCzas") > 0)
						{
						    if(GetPVarInt(playerid, "PaserCzas") == 4)
							{
							    new paser[256];
						    	format(paser, sizeof(paser), "~w~Nacicnij ~r~6~w~ razy ~y~SPRINT~w~ i zaczekaj aby otworzyc skrzynke..");
								TextDrawSetString(OBJ[playerid], paser);
								TextDrawShowForPlayer(playerid, OBJ[playerid]);
							}
						}
						else
						{
						    if(GetPVarInt(playerid, "PaserSpacja") == 6)
						    {
						        DodajPrzedmiot(DaneGracza[playerid][gUID], TYP_WLASCICIEL, P_PASERKA, P_AUDIO, 0, "Zestawy audio", DaneGracza[playerid][gUID], 0, -1, 0, 0, 0, 0, "");
							    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "• Rabunek na naczepy:", "W skrzynce znaleziono elektronikê. Przedmiot dodano do ekwipunku.\n\n- Zestawy audio.", "Zamknij", "");
	                            RemovePlayerAttachedObject(playerid, 7);
	                            SetPVarInt(playerid, "PaserSpacja", 0);
	                            TextDrawHideForPlayer(playerid, OBJ[playerid]);
	                            ClearAnimations(playerid);
	                            SetPVarInt(playerid, "ObecnieOtworzylPaser", 0);
							}
							else
							{
							    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "• Rabunek na naczepy:", "Nie uda³o Ci siê otworzyæ skrzynki z elektronik¹.\nSpróbuj otworzyæ skrzynkê w innej naczepie.", "Zamknij", "");
							    RemovePlayerAttachedObject(playerid, 7);
							    SetPVarInt(playerid, "PaserSpacja", 0);
							    TextDrawHideForPlayer(playerid, OBJ[playerid]);
							    ClearAnimations(playerid);
							    SetPVarInt(playerid, "ObecnieOtworzylPaser", 0);
							}
						}
   					}
				}
				if(Rabunek[playerid] > 0)//Rabunek czesci tuningowych
				{
					Rabunek[playerid]--;
					if(Rabunek[playerid] > 0)
					{
						//PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
						format(tekst_global, sizeof(tekst_global), "~w~%d", Rabunek[playerid]);
						new id = GetPVarInt(playerid, "RabunekPojazdID");
						if(GetDistanceToCar(playerid, id) > 3.0)
						{
						    Rabunek[playerid] = 0;
						    SetPVarInt(playerid, "RabunekPojazd", 0);
						 	SetPVarInt(playerid, "RabunekPrzedmiot", 0);
						 	SetPVarInt(playerid, "RabunekPojazdID", 0);
						    GameTextForPlayer(playerid, "~r~Anulowales kradziez przedmiotu z pojazdu!", 3000, 5);
						    ClearAnimations(playerid);
						}
					}
					else
					{
					    new kostka = random(7);
					    new uidp = GetPVarInt(playerid, "RabunekPrzedmiot");
						if(kostka == 0) kostka = 1;
						if(kostka == 7) kostka = 6;
						if(kostka == 1 || kostka == 2 || kostka == 3 || kostka == 4)
						{
						    format(tekst_global, sizeof(tekst_global), "~r~Nie udalo Ci sie ukrasc tego przedmiotu z pojazdu!");
						    SetPVarInt(playerid, "RabunekPojazd", 0);
						 	SetPVarInt(playerid, "RabunekPrzedmiot", 0);
						 	SetPVarInt(playerid, "RabunekPojazdID", 0);
						 	ClearAnimations(playerid);
						}
						if(kostka == 5 || kostka == 6)
						{
							format(tekst_global, sizeof(tekst_global), "~g~Ukradles przedmiot z pojazdu!");
							PrzedmiotInfo[uidp][pOwner] = DaneGracza[playerid][gUID];
							PrzedmiotInfo[uidp][pTypWlas] = 0;
							ZapiszPrzedmiot(uidp);
							SetPVarInt(playerid, "RabunekPojazd", 0);
						 	SetPVarInt(playerid, "RabunekPrzedmiot", 0);
						 	SetPVarInt(playerid, "RabunekPojazdID", 0);
						 	ClearAnimations(playerid);
						 	format(tekst_global, sizeof(tekst_global), "W newsach pojawia siê informacja o kolejnych kradzie¿ach czêœci samochodowych.");
   							SendClientMessageToAll(0xaa3333AA, tekst_global);
						}
					}
					GameTextForPlayer(playerid, tekst_global, 1000, 4);
				}
				//TD SIlnik
				if(GetPVarInt(playerid, "TDSilnika") == 1)
				{
				    if(!IsPlayerInAnyVehicle(playerid))
	    			{
	    			    TextDrawHideForPlayer(playerid, VehicleTD[playerid]);
	    			    TextDrawHideForPlayer(playerid, VehicleTDP[playerid]);
	    			    SetPVarInt(playerid, "TDSilnika", 0);
	    			}
				}
				if(PierwszaPomoc[playerid] > 0)//Pierwsza Pomoc
				{
					PierwszaPomoc[playerid]--;
					new playerid2 = PierwszaPomocGracz[playerid];
					new Float:PosGraczaX, Float:PosGraczaY, Float:PosGraczaZ;
					GetPlayerPos(playerid2, PosGraczaX, PosGraczaY, PosGraczaZ);
					if(PierwszaPomoc[playerid] > 0)
					{
						format(tekst_global, sizeof(tekst_global), "~r~Do konca pozostalo: ~w~%d", PierwszaPomoc[playerid]);
						if(!IsPlayerInRangeOfPoint(playerid, 3.0, PosGraczaX, PosGraczaY, PosGraczaZ))
						{
						    format(tekst_global, sizeof(tekst_global), "~r~Odeszles za daleko gracza, anulowales akcje!");
						    PierwszaPomoc[playerid] = 0;
							PierwszaPomocGracz[playerid] = 0;
						}
					}
					else
					{
						new akcjame[126];
						format(akcjame, sizeof(akcjame), "udziela pierwszej pomocy %s.", ImieGracza2(playerid2));
						cmd_fasdasfdfive(playerid, akcjame);
						new akcja[126];
						format(akcja,sizeof(akcja),"*udziela pierwszej pomocy %s.*", ImieGracza2(playerid2));
						SetPlayerChatBubble(playerid, akcja, FIOLETOWY, 10.0, 4000);
						new akcja2[126];
						format(akcja2,sizeof(akcja2),"udziela pierwszej pomocy %s.", ImieGracza2(playerid2));
						TextDrawSetString(AkcjaTD[playerid], akcja2);
						TextDrawShowForPlayer(playerid, AkcjaTD[playerid]);
						CzasWyswietlaniaTextuNaDrzwiach[playerid] = 10;
						TextDrawHideForPlayer(playerid2, TextNaDrzwi[playerid2]);
						UstawHP(playerid2,9);
						DaneGracza[playerid2][gBW] = 0;
						BW1[playerid2] = 0;
						BW2[playerid2] = -1;
						ZapiszGracza(playerid2);
						RefreshNick(playerid2);
						TextDrawHideForPlayer(playerid2, pomoc[playerid2]);
						ClearAnimations(playerid2);
						new przelew[124];
						format(przelew, sizeof(przelew), "[POMOC] %s (ID:%d) udzieli³ pierwszej pomocy: %s (ID:%d)",ZmianaNicku(playerid), playerid, ZmianaNicku(playerid2), playerid2);
						KomunikatAdmin(1, przelew);
						SetPlayerDrunkLevel(playerid2, 6000);
						SetCameraBehindPlayer(playerid2);
						Frezuj(playerid2, 1);
						if(DaneGracza[playerid2][gWorek] == 0)
						{
							TextDrawHideForPlayer(playerid2, Worek);
						}
						PierwszaPomoc[playerid] = 0;
						PierwszaPomocGracz[playerid] = 0;
					}
					GameTextForPlayer(playerid, tekst_global, 1000, 4);
				}
				if(WytrychOrg[playerid] > 0)//Wytrych
				{
					WytrychOrg[playerid]--;
					if(WytrychOrg[playerid] > 0)
					{
						format(tekst_global, sizeof(tekst_global), "~w~%d", WytrychOrg[playerid]);
						new id = GetPVarInt(playerid, "WytrychPojazdID");
						if(GetDistanceToCar(playerid, id) > 3.0)
						{
						    WytrychOrg[playerid] = 0;
						    SetPVarInt(playerid, "WytrychPojazd", 0);
						 	SetPVarInt(playerid, "WytrychPrzedmiot", 0);
						 	SetPVarInt(playerid, "WytrychPojazdID", 0);
							SendClientMessage(playerid, SZARY, "Anulowales kradziez samochodu wytrychem!");
						    ClearAnimations(playerid);
						    RemovePlayerAttachedObject(playerid, 7);
						}
						if(WytrychOrg[playerid] == 30)
						{
							new kostka = random(7);
							if(kostka == 0) kostka = 1;
							if(kostka == 7) kostka = 6;
							new tekst[256];
							if(kostka == 1 || kostka == 2 || kostka == 3)
							{
								ForeachEx(i, MAX_PLAYERS)
								{
									if(IsPlayerConnected(i))
									{
										if(zalogowany[i] == true)
										{
											if(GrupaInfo[DaneGracza[i][gSluzba]][gTyp] == DZIALALNOSC_POLICYJNA)
											{
												//new Float: x, Float: y, Float: z;
												//GetPlayerPos(playerid, x, y, z);
												//SetPlayerMapIcon(i, 99, x, y, z, 60, 0, MAPICON_GLOBAL);
												format(tekst, sizeof(tekst), "{FF3366}[CENTRALA] {DEDEDE}Anonimowy przechodzieñ zg³osi³ kradzie¿ samochodu która jest w toku, lecz miejsce nie zostalo podane w zgloszeniu!");
												SendClientMessage(i, SZARY, tekst);
											}
										}
									}
								}
							}
							else
							{
								ForeachEx(i, MAX_PLAYERS)
								{
									if(IsPlayerConnected(i))
									{
										if(zalogowany[i] == true)
										{
											if(GrupaInfo[DaneGracza[i][gSluzba]][gTyp] == DZIALALNOSC_POLICYJNA)
											{
												new Float: x, Float: y, Float: z;
												GetPlayerPos(playerid, x, y, z);
												SetPlayerMapIcon(i, 99, x, y, z, 60, 0, MAPICON_GLOBAL);
												format(tekst, sizeof(tekst), "{FF3366}[CENTRALA] {DEDEDE}Anonimowy przechodzieñ zg³osi³ kradzie¿ samochodu która jest w toku, miejsce zaznaczone na radarze!");
												SendClientMessage(i, SZARY, tekst);
											}
										}
									}
								}
							}
						}
					}
					else
					{
					    new kostka = random(7);
					    new uid = GetPVarInt(playerid, "WytrychPojazd");
					    new uidp = GetPVarInt(playerid, "WytrychPrzedmiot");
						if(PojazdInfo[uid][pOwnerPostac] == 0 && PojazdInfo[uid][pOwnerDzialalnosc] != 0 && GrupaInfo[PojazdInfo[uid][pOwnerDzialalnosc]][gTyp] == DZIALALNOSC_POLICYJNA)
						{
							SendClientMessage(playerid, SZARY, "Nie udalo Ci sie ukrasc pojazdu wytrychem!");
							UsunPrzedmiot(uidp);
							ClearAnimations(playerid);
							SetPVarInt(playerid, "WytrychPojazd", 0);
							SetPVarInt(playerid, "WytrychPrzedmiot", 0);
							SetPVarInt(playerid, "WytrychPojazdID", 0);
							ClearAnimations(playerid);
							RemovePlayerAttachedObject(playerid, 7);
							DaneGracza[playerid][gWytrych] = (gettime()+CZAS_LETNI)+(5*60);
							ZapiszGracza(playerid);
						}
						else
						{
							if(PojazdInfo[uid][pAlarm] == 0 && PojazdInfo[uid][pImmo] == 0)
							{
								if(kostka == 0) kostka = 1;
								if(kostka == 7) kostka = 6;
								if(kostka == 1 || kostka == 2 || kostka == 3 || kostka == 4)
								{
									if(PojazdInfo[uid][pLock] == 1)
									{
										SendClientMessage(playerid, SZARY, "Nie udalo Ci sie ukrasc pojazdu wytrychem!");
										UsunPrzedmiot(uidp);
										ClearAnimations(playerid);
										SetPVarInt(playerid, "WytrychPojazd", 0);
										SetPVarInt(playerid, "WytrychPrzedmiot", 0);
										SetPVarInt(playerid, "WytrychPojazdID", 0);
										ClearAnimations(playerid);
										RemovePlayerAttachedObject(playerid, 7);
										DaneGracza[playerid][gWytrych] = (gettime()+CZAS_LETNI)+(5*60);
										ZapiszGracza(playerid);
									}
									else
									{
										SendClientMessage(playerid, SZARY, "Nie udalo Ci sie ukrasc pojazdu wytrychem!");
										UsunPrzedmiot(uidp);
										ClearAnimations(playerid);
										SetPVarInt(playerid, "WytrychPojazd", 0);
										SetPVarInt(playerid, "WytrychPrzedmiot", 0);
										SetPVarInt(playerid, "WytrychPojazdID", 0);
										ClearAnimations(playerid);
										RemovePlayerAttachedObject(playerid, 7);
										DaneGracza[playerid][gWytrych] = (gettime()+CZAS_LETNI)+(5*60);
										ZapiszGracza(playerid);
									}
								}
								if(kostka == 5 || kostka == 6)
								{
									if(PojazdInfo[uid][pLock] == 1)
									{
										PojazdInfo[uid][pLock] = 0;
										new lights,doors,bonnet,boot,objective,engine,alarm;
										GetVehicleParamsEx(uid,engine,lights,alarm,doors,bonnet,boot,objective);
										SetVehicleParamsEx(uid,engine,lights,false,false,bonnet,boot,objective);
										ZapiszPojazd(uid, 1);
										SendClientMessage(playerid, SZARY, "Udalo Ci sie otworzyc pojazd wytrychem!");
										ClearAnimations(playerid);
										SetPVarInt(playerid, "WytrychPojazd", 0);
										SetPVarInt(playerid, "WytrychPrzedmiot", 0);
										SetPVarInt(playerid, "WytrychPojazdID", 0);
										ClearAnimations(playerid);
										RemovePlayerAttachedObject(playerid, 7);
										return 1;
									}
									if(PojazdInfo[uid][pLock] == 0)
									{
										PojazdInfo[uid][pOwnerDzialalnosc] = 0;
										PojazdInfo[uid][pOwnerPostac] = DaneGracza[playerid][gUID];
										ZapiszPojazd(uid, 2);
										PojazdInfo[uid][pTempomat] = (gettime()+CZAS_LETNI)+(30*60);
										ZapiszPojazd(uid, 1);
										UsunPrzedmiot(uidp);
										SendClientMessage(playerid, SZARY, "Udalo Ci sie ukraœæ pojazd wytrychem!");
										ClearAnimations(playerid);
										SetPVarInt(playerid, "WytrychPojazd", 0);
										SetPVarInt(playerid, "WytrychPrzedmiot", 0);
										SetPVarInt(playerid, "WytrychPojazdID", 0);
										ClearAnimations(playerid);
										RemovePlayerAttachedObject(playerid, 7);
										format(tekst_global, sizeof(tekst_global), "W newsach pojawia siê informacja o kolejnym skradzionym pojeŸdzie.");
										SendClientMessageToAll(0xaa3333AA, tekst_global);
										DaneGracza[playerid][gWytrych] = (gettime()+CZAS_LETNI)+(5*60);
										ZapiszGracza(playerid);
										return 1;
									}
								}
							}
							else
							{
								SendClientMessage(playerid, SZARY, "Nie udalo Ci sie otworzyc pojazd wytrychem!");
								UsunPrzedmiot(uidp);
								ClearAnimations(playerid);
								SetPVarInt(playerid, "WytrychPojazd", 0);
								SetPVarInt(playerid, "WytrychPrzedmiot", 0);
								SetPVarInt(playerid, "WytrychPojazdID", 0);
								ClearAnimations(playerid);
								RemovePlayerAttachedObject(playerid, 7);
								DaneGracza[playerid][gWytrych] = (gettime()+CZAS_LETNI)+(5*60);
								ZapiszGracza(playerid);
							}
						}
					}
					GameTextForPlayer(playerid, tekst_global, 1000, 4);
				}
				if(Wywaz[playerid] > 0)//Warunek wywazania drzwi
				{
					Wywaz[playerid]--;
					if(Wywaz[playerid] > 0)
					{
						//PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
						format(tekst_global, sizeof(tekst_global), "~w~%d", Wywaz[playerid]);
						if(!IsPlayerInRangeOfPoint(playerid, 5.0, GetPVarFloat(playerid, "WywazX"), GetPVarFloat(playerid, "WywazY"), GetPVarFloat(playerid, "WywazZ")))
						{
						    format(tekst_global, sizeof(tekst_global), "~r~Odeszles za daleko budynku, anulowales akcje!");
						    Wywaz[playerid] = 0;
						    SetPVarInt(playerid, "Wywaz2", 0);
						    SetPVarFloat(playerid, "WywazX", 0);
						    SetPVarFloat(playerid, "WywazY", 0);
						    SetPVarFloat(playerid, "WywazZ", 0);
						}
					}
					else
					{
					    new kostka = random(7);
						if(kostka == 0) kostka = 1;
						if(kostka == 7) kostka = 6;
						if(kostka == 1 || kostka == 2 || kostka == 3 || kostka == 4)
						{
						    format(tekst_global, sizeof(tekst_global), "~r~Nie udalo sie wywazyc drzwi budynku!");
						    SetPVarInt(playerid, "Wywaz2", 0);
						    SetPVarFloat(playerid, "WywazX", 0);
						    SetPVarFloat(playerid, "WywazY", 0);
						    SetPVarFloat(playerid, "WywazZ", 0);
						}
						if(kostka == 5 || kostka == 6)
						{
						    new uid = GetPVarInt(playerid, "Wywaz2");
							format(tekst_global, sizeof(tekst_global), "~g~Wywazono drzwi budynku!");
							BudynekInfo[uid][nZamek] = 1;
							ZapiszNieruchomosc(uid);
							SetPVarInt(playerid, "Wywaz2", 0);
						    SetPVarFloat(playerid, "WywazX", 0);
						    SetPVarFloat(playerid, "WywazY", 0);
						    SetPVarFloat(playerid, "WywazZ", 0);
						}
					}
					GameTextForPlayer(playerid, tekst_global, 1000, 4);
				}
				if(DzwonekDom[playerid] > 0 && DzwonekDom2[playerid] > 0)//Warunek Dzwonka
				{
					DzwonekDom[playerid]--;
					if(DzwonekDom[playerid] > 0)
					{
						PlayerPlaySound(playerid,1137,0.0,0.0,0.0);
					}
					else
					{
					    DzwonekDom2[playerid] = 0;
					}
				}
				if(DaneGracza[playerid][gRaceTimeStart] > 0)
				{
					DaneGracza[playerid][gRaceTimeStart]--;
					strdel(tekst_global, 0, 2048);
					if(DaneGracza[playerid][gRaceTimeStart] > 0)
					{
						format(tekst_global, sizeof(tekst_global), "~w~%d", DaneGracza[playerid][gRaceTimeStart]);
						PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
					}
					else
					{
						format(tekst_global, sizeof(tekst_global), "~r~S~b~T~p~A~g~R~w~T");
						DaneGracza[playerid][gWyscigCzasLast] = gettime()+CZAS_LETNI;
						Frezuj(playerid, 1);
						PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
					}
					GameTextForPlayer(playerid, tekst_global, 1000, 4);
				}
				if(LakierujeCzas[playerid] != 0)
				{
					if(Tag[playerid] != -1)
					{
						if(GetPlayerVirtualWorld(playerid) != 0)
						{
							GameTextForPlayer(playerid,"~n~~g~Tagowanie przerwane!", 1000,3);
							UpdateDynamic3DTextLabelText(ObiektInfo[Tag[playerid]][objNapis], 0xC2A2DAFF, " ");
							Tag[playerid] = -1;
							RoznicaLakieru[playerid] = 0;
							LakierujeCzas[playerid] = 0;
						}
						new bron_uid = GetPVarInt(playerid, "UzywanaBronUID");
						if(GetDistanceToTag(playerid, Tag[playerid]) > 5.0)
						{
							if(LakierujeCzas[playerid] == 5)
							{
								GameTextForPlayer(playerid,"~n~~g~Tagowanie przerwane!", 1000,3);
								UpdateDynamic3DTextLabelText(ObiektInfo[Tag[playerid]][objNapis], 0xC2A2DAFF, " ");
								RoznicaLakieru[playerid] = 0;
								ObiektInfo[Tag[playerid]][gZajety] = 0;
								Tag[playerid] = -1;
								LakierujeCzas[playerid] = 0;
							}
							else
							{
								GameTextForPlayer(playerid, "~r~Nie oddalaj sie od tagu!", 1000, 3);
								LakierujeCzas[playerid]++;
							}
							PoziomLakieru[playerid] = PrzedmiotInfo[bron_uid][pWar2];
						}
						else
						{
							if(!IsPlayerFacingTag(playerid, Tag[playerid]))
							{
								if(LakierujeCzas[playerid] == 5)
								{
									GameTextForPlayer(playerid,"~n~~g~Tagowanie przerwane!", 1000,3);
									UpdateDynamic3DTextLabelText(ObiektInfo[Tag[playerid]][objNapis], 0xC2A2DAFF, " ");
									ObiektInfo[Tag[playerid]][gZajety] = 0;
									RoznicaLakieru[playerid] = 0;
									Tag[playerid] = -1;
									LakierujeCzas[playerid] = 0;
								}else{
									GameTextForPlayer(playerid,"~w~odwroc sie w strone ~n~tagu, inaczej tagowanie zostanie ~r~przerwane~w~!", 1000, 3);
									PoziomLakieru[playerid] = PrzedmiotInfo[bron_uid][pWar2];
									LakierujeCzas[playerid]++;
								}
							}
							else
							{
								LakierujeCzas[playerid] = 1;
								new Float:of;
								of = (RoznicaLakieru[playerid] * 100) / 4000;
								if(GetPlayerWeapon(playerid) == 41 && PoziomLakieru[playerid] > PrzedmiotInfo[bron_uid][pWar2])
								{
									static str[126];
									RoznicaLakieru[playerid] += PoziomLakieru[playerid]-PrzedmiotInfo[bron_uid][pWar2];
									format(str, 126, "Malowanie tagu.\nUkoñczone w %0.0f%%", of);
									UpdateDynamic3DTextLabelText(ObiektInfo[Tag[playerid]][objNapis], 0xC2A2DAFF, str);
									PoziomLakieru[playerid] = PrzedmiotInfo[bron_uid][pWar2];//100/5000*2500
								}
								if(of >= 100.0)
								{
									GameTextForPlayer(playerid,"~n~~g~Tagowanie zakonczone", 3000,4);
									new sted[256];
									new pmsg[256];
									GetPVarString(playerid, "tagnapis", pmsg, 256);
									format(sted, sizeof(sted), "%s",pmsg);
									UsunRycieKodu(sted);
									DodajTexture(Tag[playerid], 1, 0, 140, "Impact", 80, 0, "0xFFFFFF11", "0", 1, sted);
									UpdateDynamic3DTextLabelText(ObiektInfo[Tag[playerid]][objNapis], 0xC2A2DAFF, " ");
									RoznicaLakieru[playerid] = 0;
									ObiektInfo[Tag[playerid]][gZajety] = 0;
									Tag[playerid] = -1;
									LakierujeCzas[playerid] = 0;
								}
							}
						}
					}
					else
					{
						if(GetPlayerVirtualWorld(playerid) != NaprawianieVW[playerid] || GetPlayerVirtualWorld(NaprawiaID[playerid]) != NaprawianieVW[playerid] || GetVehicleVirtualWorld(NaprawiaVeh[playerid]) != NaprawianieVW[playerid])
						{
							GameTextForPlayer(playerid,"~n~~g~Malowanie przerwane!", 3000,4);
							RoznicaLakieru[playerid] = 0;
							NaprawiaID[playerid] = 0;
							UpdateDynamic3DTextLabelText(Vopis[MalowanieKolor[playerid][3]], 0xAAAAFFFF, " ");
							LakierujeCzas[playerid] = 0;
							GameTextForPlayer(NaprawiaID[playerid], "~n~~g~Malowanie przerwane!", 5000, 3);
							NaprawianieVW[playerid] = 0;
						}
						if(zalogowany[NaprawiaID[playerid]] == false)
						{
							GameTextForPlayer(playerid,"~n~~g~Malowanie przerwane!", 3000,4);
							RoznicaLakieru[playerid] = 0;
							UpdateDynamic3DTextLabelText(Vopis[MalowanieKolor[playerid][3]], 0xAAAAFFFF, " ");
							LakierujeCzas[playerid] = 0;
							NaprawiaID[playerid] = 0;
							GameTextForPlayer(NaprawiaID[playerid], "~n~~g~Malowanie przerwane!", 5000, 3);
							NaprawianieVW[playerid] = 0;
							GameTextForPlayer(playerid, "~r~~h~Gracz ktoremu lakierowales pojazd wyszedl z serwera.", 5000, 3);
						}
						new bron_uid = GetPVarInt(playerid, "UzywanaBronUID");
						if(GetDistanceToCar(playerid, MalowanieKolor[playerid][2]) > 3.0)
						{
							if(LakierujeCzas[playerid] == 5)
							{
								GameTextForPlayer(playerid,"~n~~g~Malowanie przerwane!", 3000,4);
								RoznicaLakieru[playerid] = 0;
								NaprawiaID[playerid] = 0;
								UpdateDynamic3DTextLabelText(Vopis[MalowanieKolor[playerid][3]], 0xAAAAFFFF, " ");
								LakierujeCzas[playerid] = 0;
							}
							else
							{
								GameTextForPlayer(playerid, "~r~Nie oddalaj sie od pojazdu!", 1000, 3);
								LakierujeCzas[playerid]++;
							}
							PoziomLakieru[playerid] = PrzedmiotInfo[bron_uid][pWar2];
						}
						else
						{
							if(!IsPlayerFacingVehicle(playerid, MalowanieKolor[playerid][2]))
							{
								GameTextForPlayer(playerid,"~w~odwroc sie w strone ~n~auta, inaczej malowanie zostanie ~r~przerwane~w~!", 3000, 3);
								PoziomLakieru[playerid] = PrzedmiotInfo[bron_uid][pWar2];
								LakierujeCzas[playerid]++;
							}
							else
							{
								LakierujeCzas[playerid] = 1;
								new Float:of;
								if(PJ[playerid] == 1)
								{
									of = (RoznicaLakieru[playerid] * 100) / 10000;
								}
								else
								{
									of = (RoznicaLakieru[playerid] * 100) / 5000;
								}
								if(GetPlayerWeapon(playerid) == 41 && PoziomLakieru[playerid] > PrzedmiotInfo[bron_uid][pWar2])
								{
									static str[126];
									new model = GetVehicleModel(MalowanieKolor[playerid][2])-400;
									RoznicaLakieru[playerid] += PoziomLakieru[playerid]-PrzedmiotInfo[bron_uid][pWar2];
									format(str, 126, "Malowanie pojazdu %s (%d).\nUkoñczone w %0.0f%%",NazwyAut[model], PojazdInfo[MalowanieKolor[playerid][3]][pID], of);
									UpdateDynamic3DTextLabelText(Vopis[MalowanieKolor[playerid][3]], 0xAAAAFFFF, str);
									PoziomLakieru[playerid] = PrzedmiotInfo[bron_uid][pWar2];
								}
								if(of >= 100.0)
								{
									ForeachEx(x, MAX_PLAYERS)
									{
										if(IsPlayerConnected(x))
										{
											if(zalogowany[x] == true)
											{
												if(PlayerObokPojazdu(x,	MalowanieKolor[playerid][2]) < 10.0)
												{
													PlayerPlaySound(playerid, 1134, 0.0, 0.0, 10.0);
												}
											}
										}
									}
									GameTextForPlayer(playerid,"~n~~g~Przemalowano", 3000,4);
									UpdateDynamic3DTextLabelText(Vopis[MalowanieKolor[playerid][3]], 0xAAAAFFFF, " ");
									if(PJ[playerid] == 1)
									{
										PojazdInfo[MalowanieKolor[playerid][3]][pPJ] = MalowanieKolor[playerid][0];
										ChangeVehiclePaintjob(MalowanieKolor[playerid][2], MalowanieKolor[playerid][0]);
									}
									else
									{
										PojazdInfo[MalowanieKolor[playerid][3]][pKolor] = MalowanieKolor[playerid][0];
										PojazdInfo[MalowanieKolor[playerid][3]][pKolor2] = MalowanieKolor[playerid][1];
										ChangeVehicleColor(MalowanieKolor[playerid][2], MalowanieKolor[playerid][0], MalowanieKolor[playerid][1]);
									}
									MalowanieKolor[playerid][0] = -1;
									MalowanieKolor[playerid][1] = -1;
									RoznicaLakieru[playerid] = 0;
									LakierujeCzas[playerid] = 0;
									ZapiszPojazd(MalowanieKolor[playerid][3], 1);
								}
							}
						}
					}
				}
				if(OferujeA[playerid] != -1)
				{
					if(zalogowany[OferujeA[playerid]] == false)
					{
						GameTextForPlayer(playerid,"~n~~r~Gracz ktoremu oferowales przedmiot opusicil serwer.", 3000,4);
						OferujeA[playerid] = -1;
					}
					else
					{
						//SelectTextDraw(OferujeA[playerid], 0xFF4040AA);
					}
				}
				if(WybralMozliwoscPoker[playerid] != 0)
				{
					SelectTextDraw(playerid, 0xFFFFFFFF);
					new uid_stolu = DaneGracza[playerid][gPoker];
					for(new i = 0; i < 6; i++)
					{
						if(ObiektInfo[uid_stolu][objPoker][i] != -1 && GraWPokera[playerid] != 0)
						{
							switch(DaneGracza[playerid][gPokerStanowisko])
							{
								case 0:{
									PlayerTextDrawHide(ObiektInfo[uid_stolu][objPoker][i],KartyGracza1[ObiektInfo[uid_stolu][objPoker][i]]);
								}
								case 1:{
									PlayerTextDrawHide(ObiektInfo[uid_stolu][objPoker][i],KartyGracza2[ObiektInfo[uid_stolu][objPoker][i]]);
								}
								case 2:{
									PlayerTextDrawHide(ObiektInfo[uid_stolu][objPoker][i],KartyGracza3[ObiektInfo[uid_stolu][objPoker][i]]);
								}
								case 3:{
									PlayerTextDrawHide(ObiektInfo[uid_stolu][objPoker][i],KartyGracza4[ObiektInfo[uid_stolu][objPoker][i]]);
								}
								case 4:{
									PlayerTextDrawHide(ObiektInfo[uid_stolu][objPoker][i],KartyGracza5[ObiektInfo[uid_stolu][objPoker][i]]);
								}
								case 5:{
									PlayerTextDrawHide(ObiektInfo[uid_stolu][objPoker][i],KartyGracza6[ObiektInfo[uid_stolu][objPoker][i]]);
								}
							}
						}
					}
					new Float:wartosc = 1.666*WybralMozliwoscPoker[playerid] + 4;
					OdswiesBarGracza(playerid, DaneGracza[playerid][gPoker], wartosc);
					WybralMozliwoscPoker[playerid]--;
					if(WybralMozliwoscPoker[playerid] == 0)
					{
						WybralMozliwoscPoker[playerid] = 0;
						for(new i = 0; i < 6; i++)
						{
							if(ObiektInfo[DaneGracza[playerid][gPoker]][gAktualniGracze][i] == playerid)
							{
								ObiektInfo[DaneGracza[playerid][gPoker]][gAktualniGracze][i] = -1;
								DaneGracza[playerid][gPokerKarty][0] = 0;
								DaneGracza[playerid][gPokerKarty][1] = 0;
								DaneGracza[playerid][gInformacjePoker][0] = 0;
								DaneGracza[playerid][gInformacjePoker][1] = 0;
								DaneGracza[playerid][gInformacjePoker][2] = 0;
								DaneGracza[playerid][gInformacjePoker][3] = 0;
								DaneGracza[playerid][gInformacjePoker][4] = 0;
								DaneGracza[playerid][gInformacjePoker][5] = 0;
								DaneGracza[playerid][gInformacjePoker][6] = 0;
							}
						}
						PlayerTextDrawHide(playerid,Poker2[playerid]);
						PlayerTextDrawHide(playerid,Poker3[playerid]);
						PlayerTextDrawHide(playerid,Poker4[playerid]);
						PlayerTextDrawHide(playerid,Poker5[playerid]);
						PlayerTextDrawHide(playerid,Poker6[playerid]);
						new ilosc = SprawdzIloscGraczy(DaneGracza[playerid][gPoker]);
						if(ilosc >= 2)
						{
							SprawdzKolejGracza(playerid);
						}
						else
						{
							KoniecRundy(DaneGracza[playerid][gPoker]);
						}
						dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{9999ff}» {FFFFFF}"VER" {9999ff}» {FFFFFF}Informacja{9999ff}:", "{DEDEDE}Czas na wybranie mo¿liwosci{9999ff} min¹³{DEDEDE} - system wybra³ za ciebie opcje \"Pasuje\"", "Zamknij", "");
						CancelSelectTextDraw(playerid);
					}
				}
				if(WpisalKase[playerid] != 0)
				{
					static tresc_wiadomosci[124];
					format(tresc_wiadomosci, sizeof(tresc_wiadomosci), "~w~Masz ~r~%d ~w~sec na wpisanie kwoty", WpisalKase[playerid]);
					GameTextForPlayer(playerid, tresc_wiadomosci, 1000, 4);
					WpisalKase[playerid]--;
					if(WpisalKase[playerid] == 0)
					{
						new id_pokera = DaneGracza[playerid][gPoker];
						for(new i = 0; i < 6; i++)
						{
							if(ObiektInfo[id_pokera][objPoker][i] == playerid)
							{
								ObiektInfo[id_pokera][objPoker][i] = -1;
								DaneGracza[playerid][gPoker] = 0;
								DaneGracza[playerid][gPokerStanowisko] = 0;
								break;
							}
						}
						Frezuj(playerid,1);
						SetCameraBehindPlayer(playerid);
						WpisalKase[playerid] = 0;
						GraWPokera[playerid] = 0;
						dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{9999ff}» {FFFFFF}"VER" {9999ff}» {FFFFFF}Informacja{9999ff}:", "{DEDEDE}Czas na wpisanie kwoty{9999ff} min¹³{DEDEDE} - aby do³¹czyæ do gry wpisz /poker", "Zamknij", "");
						return 0;
					}
				}
				if(DaneGracza[playerid][gRundaPokerCzas] != 0)
				{
					static tresc_wiadomosci1[124];
					format(tresc_wiadomosci1, sizeof(tresc_wiadomosci1), "Oczekiwanie na graczy, rozpoczecie rundy za ~r~%d~w~ sec", DaneGracza[playerid][gRundaPokerCzas]);
					GameTextForPlayer(playerid, tresc_wiadomosci1, 1000, 5);
					DaneGracza[playerid][gRundaPokerCzas]--;
					if(DaneGracza[playerid][gRundaPokerCzas] == 0)
					{
						ObiektInfo[DaneGracza[playerid][gPoker]][gRundaPoker] = 1;
						DaneGracza[playerid][gRundaPokerCzas] = 0;
						RozpocznijPokera(playerid, DaneGracza[playerid][gPoker]);
					}
				}
				if(DaneGracza[playerid][gPrzetrzmanie] != 0)
				{
					if(!GraczPrzetrzymywany(playerid))
					{
						new vw = DaneGracza[playerid][gPUID];
						DaneGracza[playerid][gPrzetrzmanie] = 0;
						RefreshNick(playerid);
						SendClientMessage(playerid, 0xFFb00000, "{f33d15}Twoje przetrzymanie siê skoñczy³o.");
						if(BudynekInfo[vw][nWlascicielD] != 0)
						{
							ForeachEx(is, MAX_PLAYERS)
							{
								if(IsPlayerConnected(is))
								{
									if(zalogowany[is] == true)
									{
										if(DaneGracza[is][gDzialalnosc1] == BudynekInfo[vw][nWlascicielD] ||
										DaneGracza[is][gDzialalnosc2] == BudynekInfo[vw][nWlascicielD] ||
										DaneGracza[is][gDzialalnosc3] == BudynekInfo[vw][nWlascicielD] ||
										DaneGracza[is][gDzialalnosc4] == BudynekInfo[vw][nWlascicielD] ||
										DaneGracza[is][gDzialalnosc5] == BudynekInfo[vw][nWlascicielD] ||
										DaneGracza[is][gDzialalnosc6] == BudynekInfo[vw][nWlascicielD])
										{
											static strs[256];
											format(strs, sizeof(strs), "{f33d15}Przetrzymanie gracza: %s (ID:%d) siê skoñczy³o.",ZmianaNicku(playerid), playerid);
											SendClientMessage(is, 0xFFb00000, strs);
										}
									}
								}
							}
							}else{
							new strs[256];
							format(strs, sizeof(strs), "{f33d15}Przetrzymanie gracza: %s (ID:%d) siê skoñczy³o.",ZmianaNicku(playerid), playerid);
							SendClientMessage(playerid, 0xFFb00000, strs);
						}
					}
				}
				if(NaprawiaCzas[playerid] > 0)
				{
					if(GetPlayerVirtualWorld(playerid) != NaprawianieVW[playerid] || GetPlayerVirtualWorld(NaprawiaID[playerid]) != NaprawianieVW[playerid] || GetVehicleVirtualWorld(NaprawiaVeh[playerid]) != NaprawianieVW[playerid])
					{
						GameTextForPlayer(playerid, "~r~~h~Naprawa pojazdu zostala zakonczona niepowodzeniem.", 5000, 3);
						GameTextForPlayer(NaprawiaID[playerid], "~r~~h~Naprawa pojazdu zostala zakonczona niepowodzeniem.", 5000, 3);
						NaprawiaODL[playerid] = 0;
						NaprawiaID[playerid] = 0;
						NaprawianieVW[playerid] = 0;
						NaprawiaVeh[playerid] = 0;
						NaprawiaIUID[playerid] = 0;
						NaprawiaCzas[playerid] = 0;
						DeletePVar(playerid,"TypM");
					}
					if(PlayerObokPojazdu(playerid,	NaprawiaVeh[playerid]) > 5.0)
					{
						GameTextForPlayer(playerid, "Jestes zbyt daleko naprawianego pojazdu.", 1000, 3);
						NaprawiaODL[playerid]++;
						if(NaprawiaODL[playerid] == 5)
						{
							NaprawiaODL[playerid] = 0;
							GameTextForPlayer(NaprawiaID[playerid], "~g~~h~Anulowano montaz komponentu.", 5000, 3);
							NaprawiaID[playerid] = 0;
							NaprawiaVeh[playerid] = 0;
							NaprawiaIUID[playerid] = 0;
							NaprawianieVW[playerid] = 0;
							NaprawiaCzas[playerid] = 0;
							DeletePVar(playerid,"TypM");
							GameTextForPlayer(playerid, "~g~~h~Anulowales montaz komponentu.", 5000, 3);
						}
					}
					else
					{
						NaprawiaODL[playerid] = 0;
						if(zalogowany[NaprawiaID[playerid]] == false)
						{
							NaprawiaODL[playerid] = 0;
							NaprawiaID[playerid] = 0;
							NaprawianieVW[playerid] = 0;
							NaprawiaVeh[playerid] = 0;
							NaprawiaIUID[playerid] = 0;
							NaprawiaCzas[playerid] = 0;
							DeletePVar(playerid,"TypM");
							GameTextForPlayer(playerid, "~r~~h~Gracz ktoremu montowales komponent wyszedl z serwera.", 5000, 3);
						}
						new uzy = GetPVarInt(playerid, "UzytyItem");
						if(NaprawiaIUID[playerid] == -1)
						{
							strdel(tekst_global, 0, 2048);
							NaprawiaODL[playerid] = 0;
							NaprawiaCzas[playerid]--;
							format( tekst_global, sizeof(tekst_global), "~w~Naprawianie:~r~ %d sec", NaprawiaCzas[playerid]);
							GameTextForPlayer(playerid, tekst_global, 1000, 6);
							format( tekst_global, sizeof(tekst_global), "~w~Naprawianie:~r~ %d sec", NaprawiaCzas[playerid]);
							GameTextForPlayer(NaprawiaID[playerid], tekst_global, 1000, 6);
							if(NaprawiaCzas[playerid]==0)
							{
								new Float:HvP;
								GetVehicleHealth(NaprawiaVeh[playerid], HvP);
								new calkowita = NaprawianieCena[playerid] + (1000 - floatround(HvP));
								Oferuj(playerid, NaprawiaID[playerid], NaprawiaIUID[playerid], 0, 0, 0, OFEROWANIE_AKC_NAP, calkowita, "", 0);
							}
						}
						else
						{
							if(PrzedmiotInfo[uzy][pOwner] == DaneGracza[playerid][gUID] && PrzedmiotInfo[uzy][pTypWlas] == TYP_WLASCICIEL)
							{
								NaprawiaODL[playerid] = 0;
								NaprawiaCzas[playerid]--;
								format( tekst_global, sizeof(tekst_global), "~w~Naprawianie:~r~ %d sec", NaprawiaCzas[playerid]);
								GameTextForPlayer(playerid, tekst_global, 1000, 6);
								format( tekst_global, sizeof(tekst_global), "~w~Naprawianie:~r~ %d sec", NaprawiaCzas[playerid]);
								GameTextForPlayer(NaprawiaID[playerid], tekst_global, 1000, 6);
								if(NaprawiaCzas[playerid]==0)
								{
									Oferuj(playerid, NaprawiaID[playerid], NaprawiaIUID[playerid], 0, 0, 0, OFEROWANIE_AKC_NAP, NaprawianieCena[playerid], "", 0);
								}
							}
							else
							{
								NaprawiaODL[playerid] = 0;
								NaprawiaID[playerid] = 0;
								NaprawianieVW[playerid] = 0;
								NaprawiaVeh[playerid] = 0;
								NaprawiaIUID[playerid] = 0;
								NaprawiaCzas[playerid] = 0;
								DeletePVar(playerid,"TypM");
								GameTextForPlayer(playerid, "~g~~h~Montaz komponentu zostala anulowana~n~przedmiot ktory oferowales nie znajduje sie w twoim ekwipunku.", 5000, 3);
							}
						}
					}
				}
				if(DaneGracza[playerid][gKajdanki] != -1 && !IsPlayerInAnyVehicle(playerid))
				{
					if(zalogowany[DaneGracza[playerid][gKajdanki]] == false)
					{
						DaneGracza[playerid][gKajdanki] = -1;
						DaneGracza[DaneGracza[playerid][gKajdanki]][gKajdankiS] = 0;
						SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
						RemovePlayerAttachedObject(playerid, 1);
						Frezuj(playerid, 1);
						GameTextForPlayer(playerid, "~r~Gracz ktory cie skul opuscil serwer.", 3000, 5);
					}
					if(DaneGracza[DaneGracza[playerid][gKajdanki]][gAJ] != 0)
					{
						DaneGracza[playerid][gKajdanki] = -1;
						DaneGracza[DaneGracza[playerid][gKajdanki]][gKajdankiS] = 0;
						SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
						RemovePlayerAttachedObject(playerid, 1);
						Frezuj(playerid, 1);
						GameTextForPlayer(playerid, "~r~Gracz ktory cie skul dostal admin jaila.", 3000, 5);
					}
					else
					{
						new Float:x, Float:y, Float:z;
						GetPlayerPos(DaneGracza[playerid][gKajdanki], x, y, z);
						Teleportuj(playerid, x + 2, y, z);
						SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(DaneGracza[playerid][gKajdanki]));
						SetPlayerInterior(playerid, GetPlayerInterior(DaneGracza[playerid][gKajdanki]));
					}
				}
				if(DaneGracza[playerid][gSznur] != -1 && !IsPlayerInAnyVehicle(playerid))
				{
					if(zalogowany[DaneGracza[playerid][gSznur]] == false)
					{
						DaneGracza[playerid][gSznur] = -1;
						Frezuj(playerid, 1);
						GameTextForPlayer(playerid, "~r~Gracz ktory cie skul opuscil serwer.", 3000, 5);
					}
					else
					{
						new Float:x, Float:y, Float:z;
						GetPlayerPos(DaneGracza[playerid][gSznur], x, y, z);
						Teleportuj(playerid, x + 2, y, z);
						SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(DaneGracza[playerid][gSznur]));
						SetPlayerInterior(playerid, GetPlayerInterior(DaneGracza[playerid][gSznur]));
					}
				}
				if(Wylogowany[playerid] > 0)
				{
					Wylogowany[playerid]--;
					if(Wylogowany[playerid] == 0)
					{
						Wylogowany[playerid] = 0;
					}
				}
				if(!GraczJestAFK(playerid))
				{
					new vw = GetPlayerVirtualWorld(playerid);
					DaneGracza[playerid][gCZAS_ONLINE]++;
					if(DutyAdmina[playerid] == 1) DaneGracza[playerid][gSLUZBAA]++;
					new g, mss, s;
					przelicznikonline(playerid, g, mss, s);
					if(DaneGracza[playerid][gSluzba] != 0)//Czas duty!
					{
						if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_POLICYJNA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_ZMOTORYZOWANA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_SANNEWS ||
						GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_MEDYCZNA  || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_GANGI  || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_MAFIE)
						{
							if(DutyNR[playerid] == 1)
							{
								DaneGracza[playerid][gPrzynaleznosci][1]++;
							}
							else if(DutyNR[playerid] == 2)
							{
								DaneGracza[playerid][gPrzynaleznosci][7]++;
							}
							else if(DutyNR[playerid] == 3)
							{
								DaneGracza[playerid][gPrzynaleznosci][13]++;
							}
							else if(DutyNR[playerid] == 4)
							{
								DaneGracza[playerid][gPrzynaleznosci][19]++;
							}
							else if(DutyNR[playerid] == 5)
							{
								DaneGracza[playerid][gPrzynaleznosci][25]++;
							}
							else if(DutyNR[playerid] == 6)
							{
								DaneGracza[playerid][gPrzynaleznosci][31]++;
							}
						}
						else
						{
							if(IsPlayerInAnyVehicle(playerid))
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								new veh = SprawdzCarUID(vehicleid);
								if(PojazdInfo[veh][pOwnerDzialalnosc] == DaneGracza[playerid][gSluzba] && PojazdInfo[veh][pOwnerPostac] == 0)
								{
									if(DutyNR[playerid] == 1)
									{
										DaneGracza[playerid][gPrzynaleznosci][1]++;
									}
									else if(DutyNR[playerid] == 2)
									{
										DaneGracza[playerid][gPrzynaleznosci][7]++;
									}
									else if(DutyNR[playerid] == 3)
									{
										DaneGracza[playerid][gPrzynaleznosci][13]++;
									}
									else if(DutyNR[playerid] == 4)
									{
										DaneGracza[playerid][gPrzynaleznosci][19]++;
									}
									else if(DutyNR[playerid] == 5)
									{
										DaneGracza[playerid][gPrzynaleznosci][25]++;
									}
									else if(DutyNR[playerid] == 6)
									{
										DaneGracza[playerid][gPrzynaleznosci][31]++;
									}
								}
							}
							else
							{
								if(BudynekInfo[vw][nWlascicielD] == DaneGracza[playerid][gSluzba])
								{
									if(DutyNR[playerid] == 1)
									{
										DaneGracza[playerid][gPrzynaleznosci][1]++;
									}
									else if(DutyNR[playerid] == 2)
									{
										DaneGracza[playerid][gPrzynaleznosci][7]++;
									}
									else if(DutyNR[playerid] == 3)
									{
										DaneGracza[playerid][gPrzynaleznosci][13]++;
									}
									else if(DutyNR[playerid] == 4)
									{
										DaneGracza[playerid][gPrzynaleznosci][19]++;
									}
									else if(DutyNR[playerid] == 5)
									{
										DaneGracza[playerid][gPrzynaleznosci][25]++;
									}
									else if(DutyNR[playerid] == 6)
									{
										DaneGracza[playerid][gPrzynaleznosci][31]++;
									}
								}
							}
						}
					}
				}
				PRZEBYTE[playerid]++;
				if(BUSS[playerid] != 0)
				{
					strdel(tekst_global, 0, 2048);
					format(tekst_global, sizeof(tekst_global), "~n~~n~~n~~n~~n~~y~Pozostalo: ~p~%d ~y~sekund~n~podrozy.", BUSS[playerid]);
					GameTextForPlayer(playerid, tekst_global, 1000, 3);
					BUSS[playerid]--;
				}

				if(CzasWyswietlaniaTextuNaDrzwiach[playerid] > 0)
				{
					CzasWyswietlaniaTextuNaDrzwiach[playerid]--;
					if(CzasWyswietlaniaTextuNaDrzwiach[playerid] == 0)
					{
						TextDrawHideForPlayer(playerid, TextNaDrzwi[playerid]);
						TextDrawHideForPlayer(playerid, TextNaDrzwi2[playerid]);
						TextDrawHideForPlayer(playerid, TextNaDrzwi3[playerid]);
						TextDrawHideForPlayer(playerid, pomoc[playerid]);
						TextDrawHideForPlayer(playerid, Tutorial[playerid]);
						TextDrawHideForPlayer(playerid, AkcjaTD[playerid]);
						TextDrawHideForPlayer(playerid, TextDrawMainInfo[playerid]);
						TextDrawHideForPlayer(playerid, InformacjaMoney);
					}
				}
				if(CzasSrodekTD[playerid] > 0)
				{
					CzasSrodekTD[playerid]--;
					if(CzasSrodekTD[playerid] == 0)
					{
						TextDrawHideForPlayer(playerid, SrodekTD[playerid]);
						TextDrawHideForPlayer(playerid, SrodekTD2[playerid]);
					}
				}
				if(CzasSrodekTD2[playerid] > 0)
				{
					CzasSrodekTD2[playerid]--;
					if(CzasSrodekTD2[playerid] == 0)
					{
						TextDrawHideForPlayer(playerid, SrodekTD2[playerid]);
					}
				}
				if(DaneGracza[playerid][gCzasTrwaniaUzaleznienia] > 0)
				{
					if(Extasa[playerid] > gettime()+CZAS_LETNI || LSD[playerid] > gettime()+CZAS_LETNI || Grzyby[playerid] > gettime()+CZAS_LETNI)
					{
						SetPlayerWeather(playerid,-66);
					}
					if(LSD[playerid] > gettime()+CZAS_LETNI && !IsPlayerInAnyVehicle(playerid))
					{
						OnPlayerText(playerid, "-pijak");
					}
					if(Mefedron[playerid] > gettime()+CZAS_LETNI)
					{
						if(DaneGracza[playerid][gZDROWIE]+5 >= 100)
						{
							DaneGracza[playerid][gZDROWIE] = 100;
							UstawHP(playerid,DaneGracza[playerid][gZDROWIE]);
						}
						else
						{
							DodajHP(playerid, 5);
						}
					}
					DaneGracza[playerid][gCzasTrwaniaUzaleznienia]--;
					if(DaneGracza[playerid][gCzasTrwaniaUzaleznienia] == 0)
					{
						SetPlayerWeather(playerid, 2);
						ClearAnimations(playerid);
						RefreshNick(playerid);
					}
					new rand = random(10);
					if(rand == 0 || rand == 2 || rand == 4 || rand == 6 || rand == 8 || rand == 10)
					{
						FadeColorForPlayer(playerid, 255, 0, 255, floatround(90),255,0,0,0,floatround(10),0);
					}
				}
				if(Dostal[playerid] != 0)
				{
					Dostal[playerid]--;
					if(DaneGracza[playerid][gBW] == 0)
					{
						ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4, 0, 0, 1, 1, 0, 0);
					}
					if(Dostal[playerid] == 0)
					{
						if(DaneGracza[playerid][gBW] == 0)
						{
							ClearAnimations(playerid);
						}
					}
				}
				if(FrezzPlayer[playerid] != 0)
				{
					FrezzPlayer[playerid]--;
					if(FrezzPlayer[playerid] == 0)
					{
						Frezuj(playerid, 1);
					}
				}
				new keysa, uda, lra;
				GetPlayerKeys(playerid, keysa, uda, lra);
				if(uda & KEY_UP || uda & KEY_DOWN || lra & KEY_LEFT || lra & KEY_RIGHT)
				{
					if(AFK[playerid] == 1)
						GraczWrocilZAFK(playerid);
				}
			}
		}
	}
	return 1;
}
stock DodajHP(playerid,Float:HP)
{

    dHP[playerid] += DaneGracza[playerid][gZDROWIE];
	SetTimerEx("dajhpsy", 2000, 0, "u", playerid);
	DaneGracza[playerid][gZDROWIE] += HP;
    SetPlayerHealth(playerid, DaneGracza[playerid][gZDROWIE]);
    if(DaneGracza[playerid][gBW] == 0)
	{
		Uderzony(playerid, 0xFF0000AA);
	}
	return 1;
}
stock UstawHP(playerid,Float:HP)
{
	dHP[playerid] = DaneGracza[playerid][gZDROWIE];
	SetTimerEx("dajhpsy", 2000, 0, "u", playerid);
	DaneGracza[playerid][gZDROWIE] = HP;
	SetPlayerHealth(playerid, DaneGracza[playerid][gZDROWIE]);
	if(DaneGracza[playerid][gBW] == 0)
	{
		Uderzony(playerid, 0xFF0000AA);
	}
	return 1;
}
stock ZabierzHP(playerid, Float: hp)
{
	new Float: ghp;
	GetPlayerHealth(playerid, ghp);
	SetPlayerHealth(playerid, ghp + hp);
	DaneGracza[playerid][gZDROWIE] += hp;
	if(DaneGracza[playerid][gZDROWIE] > 100)
	{
	    DaneGracza[playerid][gZDROWIE] = 100;
	}
}
stock sukces(playerid, typ, guid, uid, ip[],czas)
{
	if(typ == 1)
	{
		format(zapyt, sizeof(zapyt), "INSERT INTO `jochym_logowania` (`GUID`, `UID_POSTACI`, `ADRES_IP`, `DATA`, `SUKCES`, `CZAS_SESJI`) VALUES (%d, %d, '%s', '%d', '1', '%d')", guid, uid, ip, gettime(), czas);
		mysql_check();
		mysql_query2(zapyt);
		mysql_free_result();
		printf("[SQL_LOGOWANIE][Gracz: %s][GUID: %d][UID: %d][SUKCES: Polaczony][IP: %s]", ImieGracza2(playerid), guid, uid, ip);
	}
	else if(typ == 2)
	{
		format(zapyt, sizeof(zapyt), "INSERT INTO `jochym_logowania` (`GUID`, `UID_POSTACI`, `ADRES_IP`, `DATA`, `SUKCES`) VALUES (%d, %d, '%s', '%d', '0')", guid, uid, ip, gettime());
		mysql_check();
		mysql_query2(zapyt);
		mysql_free_result();
		printf("[SQL_LOGOWANIE][Gracz: %s][GUID: %d][UID: %d][SUKCES: Bledne haslo][IP: %s]", ImieGracza2(playerid), guid, uid, ip);
	}
	else
	{
	    //
	}
}
public OnPlayerGiveDamage(playerid, damagedid, Float: amount, weaponid, bodypart)
{
	if(zalogowany[playerid] == false)
	{
		amount = 0;
		format(ACtekst_global, sizeof(ACtekst_global),""PREFIXAC".AntyCheat: attack other player without logged",NazwaBroni[weaponid], amount);
		NadajKare(playerid,-1, 2, ACtekst_global, 30);
	}
    if(AntyCheatBroni[playerid] == 0)
	{
  		if(PosiadanaBron[playerid] == 0)
		{
			if(weaponid != 0)
			{
			    if(weaponid != 37)
			    {
					ResetPlayerWeapons(playerid);
					format(ACtekst_global, sizeof(ACtekst_global),""PREFIXAC".AntyCheat: Nieautoryzowana bron v7 (%s, %d)",NazwaBroni[weaponid], amount);
					NadajKare(playerid,-1, 2, ACtekst_global, 30);
				}
			}
		}
		else
		{
			if(weaponid != PosiadanaBron[playerid])
			{
				if(weaponid != 0)
				{
				    if(weaponid != 37)
			    	{
						ResetPlayerWeapons(playerid);
						format(ACtekst_global, sizeof(ACtekst_global),""PREFIXAC".AntyCheat: Nieautoryzowana bron v8 (%s, %d)",NazwaBroni[weaponid], amount);
						NadajKare(playerid,-1, 2, ACtekst_global, 30);
					}
				}
			}
		}
	}
	if(weaponid >= 22 && weaponid <= 32)
    {
        new uidbroni = GetPVarInt(damagedid, "UzywanaBronUID");
		if(PrzedmiotInfo[uidbroni][pWar4] == -2)
		{
			amount = 0;
			Frezuj(playerid, 0);
			Frezuj(playerid, 1);
			ZabierzHP(damagedid, 0);
			GameTextForPlayer(playerid, "~r~Atak zabroniony z broni ASG.", 3000, 5);
			return 0;
		}
	}
	DaneGracza[playerid][pShotPlayer][damagedid] = true;
	if(AFK[damagedid] == 1)
	{
		Frezuj(playerid, 0);
		Frezuj(playerid, 1);
		ZabierzHP(damagedid, 0);
		amount = 0;
		GameTextForPlayer(playerid, "~r~Atak zabroniony.", 3000, 5);
		return 0;
	}
	if(DutyAdmina[damagedid] == 1)
	{
	    Frezuj(playerid, 0);
		Frezuj(playerid, 1);
		ZabierzHP(damagedid, 0);
		amount = 0;
		GameTextForPlayer(playerid, "~r~Atak zabroniony.", 3000, 5);
		return 0;
	}
	if(DaneGracza[damagedid][gBW] != 0)
	{
		amount = 0;
		Frezuj(playerid, 0);
		Frezuj(playerid, 1);
		ZabierzHP(damagedid, 0);
		GameTextForPlayer(playerid, "~r~Atak zabroniony.", 3000, 5);
		return 0;
	}
	new Float: kamizelka;
	GetPlayerArmour(damagedid, kamizelka);
	new legalna = PrzedmiotInfo[DaneGracza[playerid][gBronUID]][pWar4];
	if(legalna == -2)
	{
	    if(weaponid == 22)//Glock
		{
 			amount = 0;
		}
		if(weaponid == 23)//Glock z t³umikiem
		{
 			amount = 0;
		}
		if(weaponid == 24)//Desert Eagle
		{
 			amount = 0;
		}
		if(weaponid == 25)//Shotgun
		{
 			amount = 0;
		}
		if(weaponid == 26)//Sawnoff Shotgun
		{
 			amount = 0;
		}
		if(weaponid == 27)//Combat Shotgun
		{
 			amount = 0;
		}
		if(weaponid == 28)//UZI
		{
		    amount = 0;
		}
		if(weaponid == 29)//MP5
		{
		    amount = 0;
		}
		if(weaponid == 30)//AK-47
		{
 			amount = 0;
		}
		if(weaponid == 31)//M4
		{
 			amount = 0;
		}
		if(weaponid == 32)//Tec-9
		{
 			amount = 0;
		}
		if(weaponid == 33)//Wiejska snajperka
		{
 			amount = 0;
		}
		if(weaponid == 34)//Snajperka
		{
 			amount = 0;
		}
		if(weaponid == 35)//Wyrzutnia rakiet
		{
		    amount = 0;
		}
		if(weaponid == 36)//Wyrzutnia rakiet
		{
		    amount = 0;
		}
		if(weaponid == 37)//Miotacz ognia
		{
			amount = 0;
		}
		if(weaponid == 38)//Minigun
		{
		    amount = 0;
		}
		if(weaponid == 41)//Spray
		{
			amount = 0;
		}
		if(weaponid == 42)//Gaœnica
		{
	        amount = 0;
		}
	}
	if(legalna == -1 || legalna == DaneGracza[playerid][gUID])
	{
		if(weaponid == 1)//Kastet
		{
		    // 3 + si³a
		    amount += 2;
		}
		if(weaponid == 2)//Kij golfowy
		{
		    amount += 3;
		    // 15+ 50% si³y
		}
		if(weaponid == 3)//Pa³ka policyjna
		{
		    amount += 3;
		    // 12 + 50% si³y
		}
		if(weaponid == 5)//baseball
		{
		    amount += 3;
		    // 10 + 50% si³y
		}
		if(weaponid == 14)//Kwiaty
		{
			amount = 0;
		}
		if(kamizelka == 0)
	 	{
			if(weaponid == 22)//Glock
			{
			    if(bodypart == 3 || bodypart == 9)
			    {
			    	amount = 7;
				}
				if(bodypart == 4 || bodypart == 5 || bodypart == 6 || bodypart == 7 || bodypart == 8)
				{
				    amount = 4;
				}
			}
			if(weaponid == 23)//Glock z t³umikiem
			{
			    if(bodypart == 3 || bodypart == 9)
			    {
			    	amount = 7;
				}
				if(bodypart == 4 || bodypart == 5 || bodypart == 6 || bodypart == 7 || bodypart == 8)
				{
				    amount = 4;
				}
			}
			if(weaponid == 24)//Desert Eagle
			{
			    if(bodypart == 3 || bodypart == 9)
			    {
			    	amount = 28;
				}
				if(bodypart == 4 || bodypart == 5 || bodypart == 6 || bodypart == 7 || bodypart == 8)
				{
				    amount = 25;
				}
			}
			if(weaponid == 25)//Shotgun
			{
			    if(bodypart == 3 || bodypart == 9)
			    {
			    	amount = 43;
				}
				if(bodypart == 4 || bodypart == 5 || bodypart == 6 || bodypart == 7 || bodypart == 8)
				{
				    amount = 36;
				}
			}
			if(weaponid == 26)//Sawnoff Shotgun
			{
		        if(bodypart == 3 || bodypart == 9)
			    {
			    	amount = 30;
				}
				if(bodypart == 4 || bodypart == 5 || bodypart == 6 || bodypart == 7 || bodypart == 8)
				{
				    amount = 28;
				}
			}
			if(weaponid == 27)//Combat Shotgun
			{
				if(bodypart == 3 || bodypart == 9)
			    {
			    	amount = 33;
				}
				if(bodypart == 4 || bodypart == 5 || bodypart == 6 || bodypart == 7 || bodypart == 8)
				{
				    amount = 24;
				}
			}
			if(weaponid == 28)//UZI
			{
			    if(bodypart == 3 || bodypart == 9)
			    {
			    	amount = 7;
				}
				if(bodypart == 4 || bodypart == 5 || bodypart == 6 || bodypart == 7 || bodypart == 8)
				{
				    amount = 5;
				}
			}
			if(weaponid == 29)//MP5
			{
			    if(bodypart == 3 || bodypart == 9)
			    {
			    	amount = 7;
				}
				if(bodypart == 4 || bodypart == 5 || bodypart == 6 || bodypart == 7 || bodypart == 8)
				{
				    amount = 5;
				}
			}
			if(weaponid == 30)//AK-47
			{
			    if(bodypart == 3 || bodypart == 9)
			    {
			    	amount = 11;
				}
				if(bodypart == 4 || bodypart == 5 || bodypart == 6 || bodypart == 7 || bodypart == 8)
				{
				    amount = 9;
				}
			}
			if(weaponid == 31)//M4
			{
			    if(bodypart == 3 || bodypart == 9)
			    {
			    	amount = 11;
				}
				if(bodypart == 4 || bodypart == 5 || bodypart == 6 || bodypart == 7 || bodypart == 8)
				{
				    amount = 9;
				}
			}
			if(weaponid == 32)//Tec-9
			{
			    if(bodypart == 3 || bodypart == 9)
			    {
			    	amount = 7;
				}
				if(bodypart == 4 || bodypart == 5 || bodypart == 6 || bodypart == 7 || bodypart == 8)
				{
				    amount = 5;
				}
			}
			if(weaponid == 33)//Wiejska snajperka
			{
				if(bodypart == 3 || bodypart == 9)
			    {
			    	amount = 55;
				}
				if(bodypart == 4 || bodypart == 5 || bodypart == 6 || bodypart == 7 || bodypart == 8)
				{
				    amount = 35;
				}
			}
			if(weaponid == 34)//Snajperka
			{
		        if(bodypart == 3 || bodypart == 9)
			    {
			    	amount = 90;
				}
				if(bodypart == 4 || bodypart == 5 || bodypart == 6 || bodypart == 7 || bodypart == 8)
				{
				    amount = 75;
				}
			}
			if(weaponid == 35)//Wyrzutnia rakiet
			{
			    amount = 0;
			}
			if(weaponid == 36)//Wyrzutnia rakiet
			{
			    amount = 0;
			}
			if(weaponid == 37)//Miotacz ognia
			{
				amount = 0;
			}
			if(weaponid == 38)//Minigun
			{
			    amount = 0;
			}
			if(weaponid == 41)//Spray
			{
				amount = 0;
			}
			if(weaponid == 42)//Gaœnica
			{
		        amount = 0;
			}
		}
		else
	 	{
	 	    if(weaponid == 22)//Glock
			{
			    if(bodypart == 3)
			    {
			    	amount = 4;
				}
			}
			if(weaponid == 23)//Glock z t³umikiem
			{
			    if(bodypart == 3)
			    {
			    	amount = 4;
				}
			}
			if(weaponid == 24)//Desert Eagle
			{
			    if(bodypart == 3)
			    {
			    	amount = 9;
				}
			}
			if(weaponid == 25)//Shotgun
			{
			    if(bodypart == 3)
			    {
			    	amount = 7;
				}
			}
			if(weaponid == 26)//Sawnoff Shotgun
			{
		        if(bodypart == 3)
			    {
			    	amount = 7;
				}
			}
			if(weaponid == 27)//Combat Shotgun
			{
				if(bodypart == 3)
			    {
			    	amount = 7;
				}
			}
			if(weaponid == 28)//UZI
			{
			    if(bodypart == 3)
			    {
			    	amount = 6;
				}
			}
			if(weaponid == 29)//MP5
			{
			    if(bodypart == 3)
			    {
			    	amount = 6;
				}
			}
			if(weaponid == 30)//AK-47
			{
			    if(bodypart == 3)
			    {
			    	amount = 8;
				}
			}
			if(weaponid == 31)//M4
			{
			    if(bodypart == 3)
			    {
			    	amount = 8;
				}
			}
			if(weaponid == 32)//Tec-9
			{
			    if(bodypart == 3)
			    {
			    	amount = 6;
				}
			}
			if(weaponid == 33)//Wiejska snajperka
			{
				if(bodypart == 3)
			    {
			    	amount = 34;
				}
			}
			if(weaponid == 34)//Snajperka
			{
		        if(bodypart == 3)
			    {
			    	amount = 50;
				}
			}
			if(weaponid == 35)//Wyrzutnia rakiet
			{
			    amount = 0;
			}
			if(weaponid == 36)//Wyrzutnia rakiet
			{
			    amount = 0;
			}
			if(weaponid == 37)//Miotacz ognia
			{
				amount = 0;
			}
			if(weaponid == 38)//Minigun
			{
			    amount = 0;
			}
			if(weaponid == 41)//Spray
			{
				amount = 0;
			}
			if(weaponid == 42)//Gaœnica
			{
		        amount = 0;
			}
		}
	}
	if(playerid != INVALID_PLAYER_ID && weaponid >= 22 && bodypart == 6)//Rêka prawa
    {
        if(DaneGracza[damagedid][gZDROWIE] <= 60)
        {
	        if(DaneGracza[damagedid][gSILA] <= 3400)
	        {
		        ForeachEx(i, MAX_PRZEDMIOT)
				{
					if(PrzedmiotInfo[i][pOwner] == DaneGracza[damagedid][gUID] && PrzedmiotInfo[i][pUID] != 0 && PrzedmiotInfo[i][pTypWlas] == TYP_WLASCICIEL && PrzedmiotInfo[i][pTyp] == P_WEAPON && PrzedmiotInfo[i][pUzywany] != 0)
					{
						if(PrzedmiotInfo[i][pUzywany] != 0)
						{
							PrzedmiotInfo[i][pUzywany] = 0;
						}
			            PostrzalItemu(damagedid, i);
			            ResetPlayerWeapons(damagedid);
						DaneGracza[damagedid][gBronUID] = 0;
						DaneGracza[damagedid][gBronAmmo] = 0;
						DeletePVar(damagedid, "UzywanaBron");
					}
				}
			}
		}
    }
 	else if(playerid != INVALID_PLAYER_ID && weaponid == 23 && !IsPlayerInAnyVehicle(damagedid) && GrupaInfo[DaneGracza[damagedid][gSluzba]][gTyp] == DZIALALNOSC_POLICYJNA)//Paralizator
    {
		new Float:x,Float:y,Float:z;
	    GetPlayerPos(playerid, x,y,z);
	    PlayerPlaySound(playerid, 6003, x,y,z);
        if(bodypart == 7 || bodypart == 8)//Noga lewa i prawa
		{
			Dostal[damagedid] = 0;
			amount = 0;
			ApplyAnimation(damagedid, "SWEET", "Sweet_injuredloop", 4, 0, 0, 1, 1, 0, 0);
		}
		else
  		{
			Dostal[damagedid] = 0;
			amount = 0;
			ApplyAnimation(damagedid, "SWEET", "Sweet_injuredloop", 4, 0, 0, 1, 1, 0, 0);
		}
    }
    else if(playerid != INVALID_PLAYER_ID && weaponid == 25 && !IsPlayerInAnyVehicle(damagedid) && GrupaInfo[DaneGracza[damagedid][gSluzba]][gTyp] == DZIALALNOSC_POLICYJNA)//Shotgun z pestkami gumowymi.
    {
        if(bodypart == 7 || bodypart == 8)
		{
		    Dostal[damagedid] = 10;
			amount = 10;
			ApplyAnimation(damagedid, "SWEET", "Sweet_injuredloop", 4, 0, 0, 1, 1, 0, 0);
		}
		else
  		{
			Dostal[damagedid] = 10;
			amount = 10;
			ApplyAnimation(damagedid, "SWEET", "Sweet_injuredloop", 4, 0, 0, 1, 1, 0, 0);
		}
    }
	else if(playerid != INVALID_PLAYER_ID && weaponid >= 22 && weaponid <= 38 && !IsPlayerInAnyVehicle(damagedid) && kamizelka == 0)
    {
        if(DaneGracza[damagedid][gZDROWIE] <= 60)
        {
	        if(bodypart == 7 || bodypart == 8)
			{
			    Dostal[damagedid] = 20;
				ApplyAnimation(damagedid,"SWAT","gnstwall_injurd",4.1,0,0,0,60,0);
			}
			else
	  		{
				Dostal[damagedid] = 20;
				ApplyAnimation(damagedid,"SWAT","gnstwall_injurd",4.1,0,0,0,60,0);
			}
		}
	}
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 	if(weaponid >= 0 && weaponid <= 5)
	{
		if(DaneGracza[playerid][gCZAS_ONLINE] < 3600 * 3)
		{
			ZabierzHP(damagedid, 0);
			amount = 0;
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "{DEDEDE}Ze wzglêdu bezpieczeñstwa przed (DM) ze strony nowych graczy:\n\nNie mo¿esz zadaæ obra¿eñ poniewa¿ nie masz przegranych 3 godzin.", "Zamknij", "");
			return 1;
		}
		else
		{
			if(DaneGracza[damagedid][gCZAS_ONLINE] < 3600 * 3)
			{
				ZabierzHP(damagedid, 0);
				amount = 0;
				dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "{DEDEDE}Ze wzglêdu bezpieczeñstwa przed (DM) na nowych graczach:\n\nNie mo¿esz zadaæ obra¿eñ poniewa¿ ten gracz nie ma przegranych 3 godzin.", "Zamknij", "");
				return 1;
			}
			else
			{
			    if(DaneGracza[playerid][gBetaTester] > (gettime()+CZAS_LETNI))
				{
				    new rokp, miesiacp, dzienp, godzinap, minutap, sekundap;
					sekundytodata(DaneGracza[playerid][gBetaTester], rokp, miesiacp, dzienp, godzinap, minutap, sekundap);
				    ZabierzHP(damagedid, 0);
					amount = 0;
					Frezuj(playerid, 0);//frezuje
					Frezuj(playerid, 1);//odfrezuje
					strdel(tekst_global, 0, 2048);
					if(godzinap+czasjochym == 25)
					{
					    format(tekst_global, sizeof(tekst_global), "~w~Twoja postac ~r~%s~w~, jest po BW~n~Nie mozesz wdawac sie w bojki do : ~r~%d.%d.%d  1:%d:%d!", ZmianaNicku(playerid), dzienp+1, miesiacp, rokp, minutap, sekundap);
					}
					if(godzinap+czasjochym == 26)
					{
					    format(tekst_global, sizeof(tekst_global), "~w~Twoja postac ~r~%s~w~, jest po BW~n~Nie mozesz wdawac sie w bojki do : ~r~%d.%d.%d  2:%d:%d!", ZmianaNicku(playerid), dzienp+1, miesiacp, rokp, minutap, sekundap);
					}
					if(godzinap+czasjochym == 27)
					{
					    format(tekst_global, sizeof(tekst_global), "~w~Twoja postac ~r~%s~w~, jest po BW~n~Nie mozesz wdawac sie w bojki do : ~r~%d.%d.%d  3:%d:%d!", ZmianaNicku(playerid), dzienp+1, miesiacp, rokp, minutap, sekundap);
					}
					if(godzinap+czasjochym == 28)
					{
					    format(tekst_global, sizeof(tekst_global), "~w~Twoja postac ~r~%s~w~, jest po BW~n~Nie mozesz wdawac sie w bojki do : ~r~%d.%d.%d  4:%d:%d!", ZmianaNicku(playerid), dzienp+1, miesiacp, rokp, minutap, sekundap);
					}
					if(godzinap+czasjochym == 29)
					{
					    format(tekst_global, sizeof(tekst_global), "~w~Twoja postac ~r~%s~w~, jest po BW~n~Nie mozesz wdawac sie w bojki do : ~r~%d.%d.%d  5:%d:%d!", ZmianaNicku(playerid), dzienp+1, miesiacp, rokp, minutap, sekundap);
					}
					if(godzinap+czasjochym == 30)
					{
					    format(tekst_global, sizeof(tekst_global), "~w~Twoja postac ~r~%s~w~, jest po BW~n~Nie mozesz wdawac sie w bojki do : ~r~%d.%d.%d  6:%d:%d!", ZmianaNicku(playerid), dzienp+1, miesiacp, rokp, minutap, sekundap);
					}
					if(godzinap+czasjochym == 25 || godzinap+czasjochym == 26 || godzinap+czasjochym == 27 || godzinap+czasjochym == 28 || godzinap+czasjochym == 29 || godzinap+czasjochym == 30)
					{
				    	//format(stats, sizeof(stats), "%s\nPo BW do: \t\t%d.%d.%d  %d:%d:%d", stats, dzienp, miesiacp, rokp, godzinap+czasjochym, minutap, sekundap);
					}
					else
					{
					    format(tekst_global, sizeof(tekst_global), "~w~Twoja postac ~r~%s~w~, jest po BW~n~Nie mozesz wdawac sie w bojki do : ~r~%d.%d.%d  %d:%d:%d!", ZmianaNicku(playerid), dzienp, miesiacp, rokp, godzinap+czasjochym, minutap, sekundap);
					}
					TextDrawSetString(OBJ[playerid], tekst_global);
					TextDrawShowForPlayer(playerid, OBJ[playerid]);
					SetTimerEx("NapisUsunsV",2000,0,"d",playerid);
					return 1;
				}
				else
				{
				    if(DaneGracza[damagedid][gBetaTester] > (gettime()+CZAS_LETNI))
					{
					    new rokpo, miesiacpo, dzienpo, godzinapo, minutapo, sekundapo;
						sekundytodata(DaneGracza[damagedid][gBetaTester], rokpo, miesiacpo, dzienpo, godzinapo, minutapo, sekundapo);
					    ZabierzHP(damagedid, 0);
						amount = 0;
						Frezuj(damagedid, 0);//frezuje
						Frezuj(damagedid, 1);//odfrezuje
						strdel(tekst_global, 0, 2048);
						if(godzinapo+czasjochym == 25)
						{
						    format(tekst_global, sizeof(tekst_global), "~w~Nie jestes w stanie skrzywdzic ~r~%s~w~.~n~Ten gracz jest po ~r~BW ~w~do : ~r~%d.%d.%d  1:%d:%d!", ZmianaNicku(damagedid), dzienpo+1, miesiacpo, rokpo, minutapo, sekundapo);
						}
						if(godzinapo+czasjochym == 26)
						{
						    format(tekst_global, sizeof(tekst_global), "~w~Nie jestes w stanie skrzywdzic ~r~%s~w~.~n~Ten gracz jest po ~r~BW ~w~do : ~r~%d.%d.%d  2:%d:%d!", ZmianaNicku(damagedid), dzienpo+1, miesiacpo, rokpo, minutapo, sekundapo);
						}
						if(godzinapo+czasjochym == 27)
						{
						    format(tekst_global, sizeof(tekst_global), "~w~Nie jestes w stanie skrzywdzic ~r~%s~w~.~n~Ten gracz jest po ~r~BW ~w~do : ~r~%d.%d.%d  3:%d:%d!", ZmianaNicku(damagedid), dzienpo+1, miesiacpo, rokpo, minutapo, sekundapo);
						}
						if(godzinapo+czasjochym == 28)
						{
						    format(tekst_global, sizeof(tekst_global), "~w~Nie jestes w stanie skrzywdzic ~r~%s~w~.~n~Ten gracz jest po ~r~BW ~w~do : ~r~%d.%d.%d  4:%d:%d!", ZmianaNicku(damagedid), dzienpo+1, miesiacpo, rokpo, minutapo, sekundapo);
						}
						if(godzinapo+czasjochym == 29)
						{
						    format(tekst_global, sizeof(tekst_global), "~w~Nie jestes w stanie skrzywdzic ~r~%s~w~.~n~Ten gracz jest po ~r~BW ~w~do : ~r~%d.%d.%d  5:%d:%d!", ZmianaNicku(damagedid), dzienpo+1, miesiacpo, rokpo, minutapo, sekundapo);
						}
						if(godzinapo+czasjochym == 30)
						{
						    format(tekst_global, sizeof(tekst_global), "~w~Nie jestes w stanie skrzywdzic ~r~%s~w~.~n~Ten gracz jest po ~r~BW ~w~do : ~r~%d.%d.%d  6:%d:%d!", ZmianaNicku(damagedid), dzienpo+1, miesiacpo, rokpo, minutapo, sekundapo);
						}
						if(godzinapo+czasjochym == 25 || godzinapo+czasjochym == 26 || godzinapo+czasjochym == 27 || godzinapo+czasjochym == 28 || godzinapo+czasjochym == 29 || godzinapo+czasjochym == 30)
						{
					    	//format(stats, sizeof(stats), "%s\nPo BW do: \t\t%d.%d.%d  %d:%d:%d", stats, dzienp, miesiacp, rokp, godzinap+czasjochym, minutap, sekundap);
						}
						else
						{
						    format(tekst_global, sizeof(tekst_global), "~w~Nie jestes w stanie skrzywdzic ~r~%s~w~.~n~Ten gracz jest po ~r~BW ~w~do : ~r~%d.%d.%d  %d:%d:%d!", ZmianaNicku(damagedid), dzienpo, miesiacpo, rokpo, godzinapo+czasjochym, minutapo, sekundapo);
						}
						TextDrawSetString(OBJ[playerid], tekst_global);
						TextDrawShowForPlayer(playerid, OBJ[playerid]);
						SetTimerEx("NapisUsunsV",2000,0,"d",playerid);
						return 1;
					}
					else
					{
					    new atak = DaneGracza[playerid][gSILA];
					    new obrona = DaneGracza[damagedid][gSILA];
						new wynik;
						wynik = atak - obrona;
					     if(wynik <= 0 || wynik >= 0 && wynik <= 100)
					    {
					        amount = 4;
					    }
					    if(wynik >= 101 && wynik <= 150)
					    {
					        amount = 5;
					    }
					    if(wynik >= 151 && wynik <= 200)
					    {
					        amount = 6;
					    }
					    if(wynik >= 201 && wynik <= 250)
					    {
					        amount = 7;
					    }
					    if(wynik >= 251 && wynik <= 350)
					    {
					        amount = 8;
					    }
					    if(wynik >= 351 && wynik <= 450)
					    {
					        amount = 9;
					    }
					    if(wynik >= 451 && wynik <= 550)
					    {
					        amount = 10;
					    }
					    if(wynik >= 551 && wynik <= 650)
					    {
					        amount = 11;
					    }
					    if(wynik >= 651 && wynik <= 750)
					    {
					        amount = 12;
					    }
					    if(wynik >= 751 && wynik <= 850)
					    {
					        amount = 13;
					    }
					    if(wynik >= 851 && wynik <= 950)
					    {
					        amount = 14;
					    }
					    if(wynik >= 951 && wynik <= 1050)
					    {
					        amount = 15;
					    }
					    if(wynik >= 1051 && wynik <= 1200)
					    {
					        amount = 16;
					    }
					    if(wynik >= 1201 && wynik <= 1400)
					    {
					        amount = 17;
					    }
					    if(wynik >= 1401 && wynik <= 1500)
					    {
					        amount = 18;
					    }
					    if(wynik >= 1501 && wynik <= 1600)
					    {
					        amount = 19;
					    }
					    if(wynik >= 1601 && wynik <= 1700)
					    {
					        amount = 20;
					    }
					    if(wynik >= 1701 && wynik <= 1800)
					    {
					        amount = 21;
					    }
					    if(wynik >= 1801 && wynik <= 1900)
					    {
					        amount = 22;
					    }
					    if(wynik >= 1901 && wynik <= 2000)
					    {
					        amount = 23;
					    }
					    if(wynik >= 2001 && wynik <= 2100)
					    {
					        amount = 24;
					    }
					    if(wynik >= 2101 && wynik <= 2200)
					    {
					        amount = 25;
					    }
					    if(wynik >= 2201 && wynik <= 2300)
					    {
					        amount = 26;
					    }
					    if(wynik >= 2301 && wynik <= 2400)
					    {
					        amount = 27;
					    }
					    if(wynik >= 2401 && wynik <= 2500)
					    {
					        amount = 28;
					    }
					    if(wynik >= 2501 && wynik <= 2600)
					    {
					        amount = 29;
					    }
					    if(wynik >= 2601 && wynik <= 2700)
					    {
					        amount = 30;
					    }
					    if(wynik >= 2701 && wynik <= 2800)
					    {
					        amount = 30;
					    }
					    if(wynik >= 2801 && wynik <= 2900)
					    {
					        amount = 30;
					    }
					    if(wynik >= 2901 && wynik <= 3000)
					    {
					        amount = 30;
					    }
					    if(wynik >= 3001)
					    {
					        amount = 30;
					    }
						GetPlayerArmour(damagedid, kamizelka);
					    if(kamizelka == 0)
					    {
							if(DaneGracza[damagedid][gBW] == 0 || AFK[damagedid] == 0 || DutyAdmina[damagedid] == 0)
							{
								if(DaneGracza[damagedid][gZDROWIE]-amount >= 1)
								{
									DodajHP(damagedid, -amount);
								}
								else
								{
									amount = 0;
									Frezuj(playerid, 0);
									Frezuj(playerid, 1);
									ZabierzHP(damagedid, 0);
									NoweBW(damagedid, playerid, 5, weaponid);
								}
							}
						}
						else
						{
						    if(bodypart != 3)
						    {
								if(DaneGracza[damagedid][gBW] == 0 || AFK[damagedid] == 0 || DutyAdmina[damagedid] == 0)
								{
									if(DaneGracza[damagedid][gZDROWIE]-amount >= 1)
									{
										DodajHP(damagedid, -amount);
									}
									else
									{
										amount = 0;
										Frezuj(playerid, 0);
										Frezuj(playerid, 1);
										ZabierzHP(damagedid, 0);
										NoweBW(damagedid, playerid, 5, weaponid);
									}
								}
						    }
						}
						return 1;
					}
				}
			}
		}
	}
	GetPlayerArmour(damagedid, kamizelka);
	if(kamizelka == 0.0 && GetPVarInt(damagedid, "AutoArmour") == 1)
	{
		RemovePlayerAttachedObject(damagedid, 9);
		SetPlayerArmour(damagedid, 0.0);
		SetPVarInt(damagedid, "AutoArmour", 0);
		new uid = Kamizelkauid[damagedid];
		if(PrzedmiotInfo[uid][pUzywany] == 1)
		{
			PrzedmiotInfo[uid][pUzywany] = 0;
			UsunPrzedmiot(uid);
			Kamizelkauid[damagedid] = 0;
		}
	}
    if(kamizelka == 0)
	{
		if(DaneGracza[damagedid][gBW] == 0 || AFK[damagedid] == 0 || DutyAdmina[damagedid] == 0)
		{
			if(DaneGracza[damagedid][gZDROWIE]-amount >= 1)
			{
				DodajHP(damagedid, -amount);
			}
			else
			{
				amount = 0;
				Frezuj(playerid, 0);
				Frezuj(playerid, 1);
				ZabierzHP(damagedid, 0);
				NoweBW(damagedid, playerid, 3, weaponid);
			}
		}
	}
	else
	{
	    if(bodypart != 3)
	    {
			if(DaneGracza[damagedid][gBW] == 0 || AFK[damagedid] == 0 || DutyAdmina[damagedid] == 0)
			{
				if(DaneGracza[damagedid][gZDROWIE]-amount >= 1)
				{
					DodajHP(damagedid, -amount);
				}
				else
				{
					amount = 0;
					Frezuj(playerid, 0);
					Frezuj(playerid, 1);
					ZabierzHP(damagedid, 0);
					NoweBW(damagedid, playerid, 3, weaponid);
				}
			}
	    }
	}
	SetPVarInt(damagedid, "ZablokujFood", gettime()+CZAS_LETNI+3*60);
    new log[256];
	format(log, sizeof(log), "[DMG] [%s] [ID: %d] - [%s] [ID: %d] w%d Amount: %f", ZmianaNicku(playerid), playerid, ZmianaNicku(damagedid), damagedid, weaponid, amount);
	Transakcja(T_IC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
	Transakcja(T_IC, DaneGracza[damagedid][gUID], -1, DaneGracza[damagedid][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
    return 1;
}

public OnPlayerShootDynamicObject(playerid, weaponid, STREAMER_TAG_OBJECT objectid, Float:x, Float:y, Float:z)
{
	new m = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_MODEL_ID);
	new uid = STREAMER_TAG_OBJECT objectid;
	new uids = ObiektInfo[objectid][objSAMP];
	new vw = GetPlayerVirtualWorld(playerid);
	new debugmode[512];
	format(debugmode, sizeof(debugmode), "Objectid %d, UID %d, Model %d, x %f, y %f,z %f", objectid, uid, m, x, y ,z);
	Debug(1, debugmode);
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_POLICYJNA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_ZMOTORYZOWANA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_MAFIE || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_GANGI)
 	{
		if(vw != 0)
		{
			if(weaponid == 25)
		    {
				new find = 0;
				new Float:radius = 0.5;
				for(new i = 0; i < 100; i++)
				{
					if(find == 0)
					{
						ForeachEx(h, MAX_OBIEKT)
						{
							if(Dystans(radius, playerid, ObiektInfo[h][objPozX],ObiektInfo[h][objPozY],ObiektInfo[h][objPozZ]) && GetPlayerVirtualWorld(playerid) == ObiektInfo[h][objvWorld] && ObiektInfo[h][objBrama] != 0 && ObiektInfo[h][objModel] == m)
							{
								find = h;
								break;
							}
						}
						radius+=0.5;
					}
				}
				if(ObiektInfo[find][objBrama] != 0)
				{
					new findt = ObiektInfo[find][objSprarowanyUID];
					new kostka = random(5);
					if(kostka == 0) kostka = 1;
					if(kostka == 5) kostka = 4;
					if(findt != 0)
					{
						if(kostka == 1 || kostka == 2)
						{
							format(tekst_global, sizeof(tekst_global), "~g~Nie udalo sie przestrzelic zamku!");
							cmd_fasdasfdfive(playerid, tekst_global);
							new akcja[126];
							format(akcja,sizeof(akcja),"*nie udalo sie przestrzelic zamku*");
							SetPlayerChatBubble(playerid, akcja, FIOLETOWY, 10.0, 4000);
							new akcja2[126];
							format(akcja2,sizeof(akcja2),"nie udalo sie przestrzelic zamku");
							TextDrawSetString(AkcjaTD[playerid], akcja2);
							TextDrawShowForPlayer(playerid, AkcjaTD[playerid]);
							CzasWyswietlaniaTextuNaDrzwiach[playerid] = 10;
						}
						if(kostka == 3 || kostka == 4)
						{
							BramaRuch(playerid, find, findt);
							GameTextForPlayer(playerid, "~r~Zamek zostal przestrzelony!", 3000, 5);
							format(tekst_global, sizeof(tekst_global), "przestrzela zamek.");
							cmd_fasdasfdfive(playerid, tekst_global);
							new akcja[126];
							format(akcja,sizeof(akcja),"*przestrzela zamek*");
							SetPlayerChatBubble(playerid, akcja, FIOLETOWY, 10.0, 4000);
							new akcja2[126];
							format(akcja2,sizeof(akcja2),"przestrzela zamek");
							TextDrawSetString(AkcjaTD[playerid], akcja2);
							TextDrawShowForPlayer(playerid, AkcjaTD[playerid]);
							CzasWyswietlaniaTextuNaDrzwiach[playerid] = 10;
						}
					}
					else
					{
						if(kostka == 1 || kostka == 2)
						{
							format(tekst_global, sizeof(tekst_global), "~g~Nie udalo sie przestrzelic zamku!");
							cmd_fasdasfdfive(playerid, tekst_global);
							new akcja[126];
							format(akcja,sizeof(akcja),"*nie udalo sie przestrzelic zamku*");
							SetPlayerChatBubble(playerid, akcja, FIOLETOWY, 10.0, 4000);
							new akcja2[126];
							format(akcja2,sizeof(akcja2),"nie udalo sie przestrzelic zamku");
							TextDrawSetString(AkcjaTD[playerid], akcja2);
							TextDrawShowForPlayer(playerid, AkcjaTD[playerid]);
							CzasWyswietlaniaTextuNaDrzwiach[playerid] = 10;
						}
						if(kostka == 3 || kostka == 4)
						{
							BramaRuch(playerid, find, -1);
							GameTextForPlayer(playerid, "~r~Zamek zostal przestrzelony!", 3000, 5);
							format(tekst_global, sizeof(tekst_global), "przestrzela zamek.");
							cmd_fasdasfdfive(playerid, tekst_global);
							new akcja[126];
							format(akcja,sizeof(akcja),"*przestrzela zamek*");
							SetPlayerChatBubble(playerid, akcja, FIOLETOWY, 10.0, 4000);
							new akcja2[126];
							format(akcja2,sizeof(akcja2),"przestrzela zamek");
							TextDrawSetString(AkcjaTD[playerid], akcja2);
							TextDrawShowForPlayer(playerid, AkcjaTD[playerid]);
							CzasWyswietlaniaTextuNaDrzwiach[playerid] = 10;
						}
					}
				}
			}
		}
	}
    //Napady na budynki dla organizacji przestêpczych
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_ZMOTORYZOWANA || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_MAFIE || GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_GANGI)
	{
	    if(vw != 0)
	    {
		    if(uid == uids)
			{
				if(PrzedmiotInfo[DaneGracza[playerid][gBronUID]][pWar4] == -1 || PrzedmiotInfo[DaneGracza[playerid][gBronUID]][pWar4] == 0)
				{
					if(ObiektInfo[uid][objHP] >= 0)
					{
						ObiektInfo[uid][objHP] -= 5;
						ZapiszObiekt(uid);
						new tekst[64];
						format(tekst, sizeof(tekst),"{ea5757}%d/{7ce593}100%", ObiektInfo[uid][objHP]);
						UpdateDynamic3DTextLabelText(ObiektInfo[uid][objNapis], 0xf5deb355, tekst);
					}
					if(ObiektInfo[uid][objHP] <= 0)
					{
						UpdateDynamic3DTextLabelText(ObiektInfo[uid][objNapis], 0xf5deb355, "");
						DestroyDynamicObject(uid);
						GameTextForPlayer(playerid, "~r~Obiekt zosta³ zniszczony!", 3000, 5);
					}
				}
			}
		}
	}
	new uidg = BudynekInfo[vw][nWlascicielD];
	if(vw != 0 && GrupaInfo[uidg][gTyp] == DZIALALNOSC_STRZELNICA)
	{
		if(m == 1585 || m == 1586)
		{
			if(uid != GetPVarInt(playerid, "SkillWeapon"))
			{
				new shoot[64];
				new year, month, day;
				getdate(year, month, day);
				if(PrzedmiotInfo[DaneGracza[playerid][gBronUID]][pWar4] == -2)
				{
					if(weaponid == 22 || weaponid == 23 || weaponid == 24)//Pistol
					{
						DaneGracza[playerid][g0] += 1;
						DaneGracza[playerid][g1] += 1;
						DaneGracza[playerid][g2] += 1;
						DaneGracza[playerid][gStrzelnica] = day;
						ZapiszGracza(playerid);
						SetPVarInt(playerid, "SkillWeapon", m);
						if(DaneGracza[playerid][g0] >= 200)
						{
							SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 200);
						}
						else
						{
							SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, DaneGracza[playerid][g0]);
						}
						SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, DaneGracza[playerid][g1]);
						CzasSrodekTD[playerid] = 1;
						new msg[254];
						format(msg,254,"~y~Umiejetnosc wzrosla~n~~n~~w~Bron ktotka: ~b~%d~w~~n~~n~Strzelaj w tarcze by, zwiekszyc umiejetnosci.",DaneGracza[playerid][g0]);
						TextDrawSetString(Tutorial[playerid], msg);
						TextDrawShowForPlayer(playerid, Tutorial[playerid]);
						CzasWyswietlaniaTextuNaDrzwiach[playerid] = 10;
					}
					if(weaponid == 25 || weaponid == 26 || weaponid == 27)//Shot
					{
						DaneGracza[playerid][g3] += 1;
						DaneGracza[playerid][g4] += 1;
						DaneGracza[playerid][g5] += 1;
						DaneGracza[playerid][gStrzelnica] = day;
						ZapiszGracza(playerid);
						SetPVarInt(playerid, "SkillWeapon", m);
						SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, DaneGracza[playerid][g3]);
						SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, DaneGracza[playerid][g4]);
						SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, DaneGracza[playerid][g5]);
						CzasSrodekTD[playerid] = 1;
						new msg[254];
						format(msg,254,"~y~Umiejetnosc wzrosla~n~~n~~w~Strzelby: ~b~%d~w~~n~~n~Strzelaj w tarcze by, zwiekszyc umiejetnosci.",DaneGracza[playerid][g3]);
						TextDrawSetString(Tutorial[playerid], msg);
						TextDrawShowForPlayer(playerid, Tutorial[playerid]);
						CzasWyswietlaniaTextuNaDrzwiach[playerid] = 10;
					}
					if(weaponid == 28 || weaponid == 29 || weaponid == 32)//Micro
					{
						DaneGracza[playerid][g6] += 1;
						DaneGracza[playerid][g7] += 1;
						DaneGracza[playerid][gStrzelnica] = day;
						ZapiszGracza(playerid);
						SetPVarInt(playerid, "SkillWeapon", m);
						if(DaneGracza[playerid][g6] >= 200)
						{
							SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 200);
						}
						else
						{
							SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, DaneGracza[playerid][g6]);
						}
						SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, DaneGracza[playerid][g7]);
						CzasSrodekTD[playerid] = 1;
						new msg[254];
						format(msg,254,"~y~Umiejetnosc wzrosla~n~~n~~w~Bron automatyczna: ~b~%d~w~~n~~n~Strzelaj w tarcze by, zwiekszyc umiejetnosci.",DaneGracza[playerid][g6]);
						TextDrawSetString(Tutorial[playerid], msg);
						TextDrawShowForPlayer(playerid, Tutorial[playerid]);
						CzasWyswietlaniaTextuNaDrzwiach[playerid] = 10;
					}
					if(weaponid == 30 || weaponid == 31)//AK-47, M4
					{
						DaneGracza[playerid][g8] += 1;
						DaneGracza[playerid][g9] += 1;
						DaneGracza[playerid][gStrzelnica] = day;
						ZapiszGracza(playerid);
						SetPVarInt(playerid, "SkillWeapon", m);
						SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, DaneGracza[playerid][g8]);
						SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, DaneGracza[playerid][g8]);
						CzasSrodekTD[playerid] = 1;
						new msg[254];
						format(msg,254,"~y~Umiejetnosc wzrosla~n~~n~~w~Bron maszynowa: ~b~%d~w~~n~~n~Strzelaj w tarcze by, zwiekszyc umiejetnosci.",DaneGracza[playerid][g8]);
						TextDrawSetString(Tutorial[playerid], msg);
						TextDrawShowForPlayer(playerid, Tutorial[playerid]);
						CzasWyswietlaniaTextuNaDrzwiach[playerid] = 10;
					}
					if(weaponid == 33 || weaponid == 34)//Sniper
					{
						format(shoot,sizeof(shoot),"+1");
						TextDrawSetString(SrodekTD[playerid], shoot);
						TextDrawShowForPlayer(playerid, SrodekTD[playerid]);
						DaneGracza[playerid][g10] += 1;
						DaneGracza[playerid][gStrzelnica] = day;
						ZapiszGracza(playerid);
						SetPVarInt(playerid, "SkillWeapon", m);
						SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, DaneGracza[playerid][g10]);
						CzasSrodekTD[playerid] = 1;
						
					}
				}
				else
				{
					format(shoot,sizeof(shoot),"~r~Musisz posiadac bron typu ASG by wypracowac swoje umiejetnosci!");
					TextDrawSetString(SrodekTD2[playerid], shoot);
					TextDrawShowForPlayer(playerid, SrodekTD2[playerid]);
					CzasSrodekTD2[playerid] = 3;
				}
			}
			else
			{
			    new shoot[64];
			    format(shoot,sizeof(shoot),"~r~Strzelaj rowniez w inne tarcze na strzelnicy!");
				TextDrawSetString(SrodekTD2[playerid], shoot);
				TextDrawShowForPlayer(playerid, SrodekTD2[playerid]);
				CzasSrodekTD2[playerid] = 3;
			}
		}
	}
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	new uidbroni = DaneGracza[playerid][gBronUID];
	new PlayerWeapon = GetPlayerWeapon(playerid);
	new ammo = GetPlayerWeaponAmmo(playerid, PlayerWeapon);
	new logtekst[256];
	format(logtekst, sizeof(logtekst), "[Shot] [%s] [ID: %d] shoot to weapon %s (%d) Ammo %d (%d)", ZmianaNicku(playerid), playerid, PrzedmiotInfo[uidbroni][pNazwa], PrzedmiotInfo[uidbroni][pUID], ammo, PrzedmiotInfo[uidbroni][pWar2]);
	Transakcja(T_CDRZWI, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, logtekst, gettime()+KOREKTA_CZASOWA);
	if(hittype == BULLET_HIT_TYPE_VEHICLE)//Nowy system zadawania obrazen pojazdu.
	{
		if(weaponid == 23 && GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] == DZIALALNOSC_POLICYJNA)
		{
			new vehc1 = SprawdzCarUID(hitid);
			strdel(tekst_global, 0, 2048);
			format(tekst_global, sizeof(tekst_global), "~b~Pomiar: ~w~%d km/h~n~~n~~b~Marka:~w~ %s~n~~n~Rejestracja:~w~ %s",
			PredkoscPojazdu(hitid), GetVehicleModelName(PojazdInfo[vehc1][pModel]), PojazdInfo[vehc1][pTablice]);
			TextDrawSetString(Pomiar[playerid], tekst_global);
			TextDrawShowForPlayer(playerid, Pomiar[playerid]);
			SetTimerEx("NapisUsunsV",15000,0,"d",playerid);
		}
		new amount = 0;
		if(weaponid == 22)//Glock
		{
			amount = 3;
		}
		if(weaponid == 23)//Glock z t³umikiem
		{
			amount = 2;
		}
		if(weaponid == 24)//Desert Eagle
		{
			amount = 10;
		}
		if(weaponid == 25)//Shotgun
		{
			amount = 7;
		}
		if(weaponid == 26)//Sawnoff Shotgun
		{
			amount = 7;
		}
		if(weaponid == 27)//Combat Shotgun
		{
			amount = 7;
		}
		if(weaponid == 28)//UZI
		{
			amount = 3;
		}
		if(weaponid == 29)//MP5
		{
			amount = 4;
		}
		if(weaponid == 30)//AK-47
		{
			amount = 5;
		}
		if(weaponid == 31)//M4
		{
			amount = 5;
		}
		if(weaponid == 32)//Tec-9
		{
			amount = 3;
		}
		if(weaponid == 33)//Wiejska snajperka
		{
			amount = 15;
		}
		if(weaponid == 34)//Snajperka
		{
		   amount = 15;
		}
		new pojazd = SprawdzCarUID(hitid);
		if(PojazdInfo[pojazd][pStan]-amount >= 290)
		{
			PojazdInfo[pojazd][pStan] = PojazdInfo[pojazd][pStan]-amount;
			SetVehicleHealth(hitid, PojazdInfo[pojazd][pStan]-amount);
			PojazdInfo[pojazd][pTempomat] = (gettime()+CZAS_LETNI)+(30*60);
			ZapiszPojazd(pojazd, 1);
		}
		else
		{
			return 0;
		}
	}
	if(weaponid >= 24 && weaponid <= 38 || weaponid == 22)//Informacja dla LSPD o Strzelaninie
	{
		if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] != DZIALALNOSC_POLICYJNA)
		{
			if(GetPlayerVirtualWorld(playerid) == 0)
			{
				if(DaneGracza[playerid][gOgraniczUzycie] < gettime()+CZAS_LETNI)
				{
					new tekst[256];
					ForeachEx(i, MAX_PLAYERS)
					{
						if(IsPlayerConnected(i))
						{
							if(zalogowany[i] == true)
							{
								if(DaneGracza[i][gSluzba] == 0)
								{
									return 0;
								}
								if(GrupaInfo[DaneGracza[i][gSluzba]][gTyp] == DZIALALNOSC_POLICYJNA)
								{
									new Float: x, Float: y, Float: z;
									GetPlayerPos(playerid, x, y, z);
									SetPlayerMapIcon(i, 99, x, y, z, 60, 0, MAPICON_GLOBAL );
									format(tekst, sizeof(tekst), "{FF3366}[CENTRALA] {DEDEDE}Anonimowy przechodzieñ zg³osi³ strzelaninê która jest w toku w tych rejonach, pozycjê zaznaczam na radarze!");
									SendClientMessage(i, SZARY, tekst);
									PlayerPlaySound(i, 6003, 0.0, 0.0, 0.0);
									DaneGracza[playerid][gOgraniczUzycie] = gettime()+CZAS_LETNI+120;
								}
							}
						}
					}
				}
			}
		}
	}
    if(hittype == BULLET_HIT_TYPE_PLAYER && IsPlayerConnected(hitid) && !IsPlayerNPC(hitid))
    {
	    new log[256];
		format(log, sizeof(log), "[BULLET_HIT_TYPE_PLAYER] [%s] (UID: %d, W: %d) (%f, %f, %f) > [%s] (UID: %d) ", ZmianaNicku(playerid), DaneGracza[playerid][gUID], weaponid, fX, fY, fZ, ZmianaNicku(hitid), DaneGracza[hitid][gUID]);
		Transakcja(T_IC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
		Transakcja(T_IC, DaneGracza[hitid][gUID], -1, DaneGracza[hitid][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
	}
    if( weaponid == 0 )
	{
	    new string[64];
	    format(string, sizeof(string), ""PREFIXAC".AntyCheat: Bad weapon request (weapon shot: %d)", weaponid);
 		NadajKare(playerid, -1, 2, string, 1);
	}
	if(weaponid != 0 && DaneGracza[playerid][gCZAS_ONLINE] < 3 * 60 * 60)
	{
		new string[256];
	    ResetPlayerWeapons(playerid);
		format(string, sizeof(string),""PREFIXAC".AntyCheat: Nieautoryzowana bron v9 (%s)",NazwaBroni[weaponid]);
		NadajKare(playerid,-1, 2, string, 30);
	}
	if(weaponid != 0 && PosiadanaBron[playerid] == 0)
	{
		new string[256];
	    ResetPlayerWeapons(playerid);
		format(string, sizeof(string),""PREFIXAC".AntyCheat: Nieautoryzowana bron v10 (%s)",NazwaBroni[weaponid]);
		NadajKare(playerid,-1, 2, string, 30);
	}
	if(hittype != BULLET_HIT_TYPE_NONE)
	{
        if(DaneGracza[playerid][gAdmGroup] != 4)
		{
		    if(PosiadanaBron[playerid] == 0)
			{
		        if( !( -20.0 <= fX <= 20.0 ) || !( -20.0 <= fY <= 20.0 ) || !( -20.0 <= fZ <= 20.0 ) )
		        {
		        	format(ACtekst_global, sizeof(ACtekst_global),""PREFIXAC".AntyCheat: Invalid bullet");
					NadajKare(playerid,-1, 0, ACtekst_global, 0);
		            return 0;
		        }
		        if( !( -1000.0 <= fX <= 1000.0 ) || !( -1000.0 <= fY <= 1000.0 ) || !( -1000.0 <= fZ <= 1000.0 ) )
				{
		            format(ACtekst_global, sizeof(ACtekst_global),""PREFIXAC".AntyCheat: Invalid bullet (second)");
					NadajKare(playerid,-1, 0, ACtekst_global, 0);
		            return 0;
				}
			}
		}
    }
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new string[64];
	    format(string, sizeof(string), ""PREFIXAC".AntyCheat: Desync: shooting while seat in driver.");
 		NadajKare(playerid, -1, 2, string, 1);
		return 0;
	}
    return 1;
}
public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid, bodypart)
{
	/*if (issuerid != INVALID_PLAYER_ID)
	{
		if(AntyCheatBroni[issuerid] == 0)
		{
			if(PosiadanaBron[issuerid] == 0)
			{
				if(weaponid != 0)
				{
					if(weaponid != 37 || weaponid != 18)
					{
						ResetPlayerWeapons(issuerid);
					}
				}
			}
			else
			{
				if(weaponid != PosiadanaBron[issuerid])
				{
					if(weaponid != 0)
					{
						if(weaponid != 37)
						{
							ResetPlayerWeapons(issuerid);
						}
					}
				}
			}
		}
		if(weaponid == 38)// Minigun
		{
			amount = 0;
			ZabierzHP(playerid, 0);
			NadajKare(issuerid,-1, 2, ""PREFIXAC".AntyCheat: Nieautoryzowana bron (Minigun, easy)", 30);
		}
	}*/
	return 0;
}
forward RefUderzony(playerid);
public RefUderzony(playerid)
{
    RefreshNick(playerid);
	return 1;
}
forward Kicks(playerid);
public Kicks(playerid)
{
    Kick(playerid);
	return 1;
}
stock CheckAmmo(playerid)
{
	newammo = GetPlayerAmmo(playerid);
	if (oldammo == newammo){
		NadajKare(playerid,-1, 2, ""PREFIXAC".AntyCheat: Infinity Ammo", 30);
	}
	return true;
}

forward OnPasswordChecked(playerid, bool: success);
public OnPasswordChecked(playerid, bool: success)
{
	if(success)
	{
		new hassh[400];
  		format(hassh, sizeof(hassh), "%s", DaneGracza[playerid][gHASLO]);
  		Logowanie(playerid, hassh);
	}
	else
	{
        Proby[playerid]++;
		if(Proby[playerid] == 3)
		{
		    new logowanie[1024];
	        format(logowanie,sizeof(logowanie),"Has³o nie pasuje do postaci %s:", ImieGracza2(playerid));
			SendClientMessage(playerid, 0x801919FF, logowanie);
			format(logowanie,sizeof(logowanie),"1. Je¿eli stworzy³eœ(aœ) postaæ naszej stronie, u¿yj has³a tego profilu.");
			SendClientMessage(playerid, 0x801919FF, logowanie);
			format(logowanie,sizeof(logowanie),"2. Je¿eli Twoje has³o na stronie posiada znaki specjalne lub polskie, zaleca siê zmiany has³a.");
			SendClientMessage(playerid, 0x801919FF, logowanie);
			new str2[512];
			format(str2, sizeof(str2), "{9DB6D3}Witaj na "PROJEKT", nowym innowacyjnym w pe³ni rozwijaj¹cym siê serwerze!\nOd 2016 roku pracowaliœmy nad stworzeniem miejsca dla graczy na serwerze oraz forum, od tamtego czasu..\n[...] zdo³aliœmy zakodowaæ o wiele wiêcej ni¿ konkurencja a to dopiero pocz¹tek naszej przygody!\n\n");
			format(str2, sizeof(str2), "%s\t{9DB6D3}Próbowa³eœ zalogowaæ siê na postaæ: {FFFFFF}%s{9DB6D3}, twoje {FF0000}3{9DB6D3} próby logowania zosta³y odnotowane w logach!\n\tPamiêtaj, ¿e odnotowany zosta³ twój serial GTA oraz IP!", str2, ImieGracza2(playerid));
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", str2, "Zamknij", "");
			new IP[16];
			GetPlayerIp(playerid, IP, sizeof(IP));
			sukces(playerid, 2, DaneGracza[playerid][gGUID], DaneGracza[playerid][gUID], IP,PRZEBYTE[playerid]);
			Kick(playerid);
		}
		else
		{
	        new logowanie[1024];
	        format(logowanie,sizeof(logowanie),"Has³o nie pasuje do postaci %s:", ImieGracza2(playerid));
			SendClientMessage(playerid, 0x801919FF, logowanie);
			format(logowanie,sizeof(logowanie),"1. Je¿eli stworzy³eœ(aœ) postaæ naszej stronie, u¿yj has³a tego profilu.");
			SendClientMessage(playerid, 0x801919FF, logowanie);
			format(logowanie,sizeof(logowanie),"2. Je¿eli Twoje has³o na stronie posiada znaki specjalne lub polskie, zaleca siê zmiany has³a.");
			SendClientMessage(playerid, 0x801919FF, logowanie);

			new str2[512];
			format(str2, sizeof(str2), "{9DB6D3}Witaj na "PROJEKT", nowym innowacyjnym w pe³ni rozwijaj¹cym siê serwerze!\nOd 2016 roku pracowaliœmy nad stworzeniem miejsca dla graczy na serwerze oraz forum, od tamtego czasu..\n[...] zdo³aliœmy zakodowaæ o wiele wiêcej ni¿ konkurencja a to dopiero pocz¹tek naszej przygody!\n\n");
			format(str2, sizeof(str2), "%s\t{9DB6D3}Logujesz siê na postaæ: {FFFFFF}%s{9DB6D3}, która {63D075}istnieje w naszej bazie danych!{9DB6D3}\n\tZaloguj siê albo zmieñ nick by wejœæ na inn¹ postaæ.", str2, ImieGracza2(playerid));
			dShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Panel Logowania:", str2, "Zaloguj sie", "Lista");
			KameraLogowania(playerid);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
	}
	return 1;
}
forward Logowanie(playerid, haslo[]);
public Logowanie(playerid, haslo[])
{
	new sql3[1024];
 	ResetPlayerWeapons(playerid);
 	new hassh[400];
	format(hassh, sizeof(hassh), "%s", DaneGracza[playerid][gHASLO]);
	format(sql3, sizeof(sql3), "SELECT * FROM `ips_core_members` WHERE `member_id` = '%d' AND `members_pass_hash` = '%s'", DaneGracza[playerid][gGUID], hassh);
	mysql_query(sql3);
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
		if(ogmx != 0)
		{
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~r~Prosze czekac, serwer jest w trakcje restartowania!", 2000, 5);
			new str5[512];
			format(str5, sizeof(str5), "{9DB6D3}Witaj na "PROJEKT", nowym innowacyjnym w pe³ni rozwijaj¹cym siê serwerze!\nOd 2016 roku pracowaliœmy nad stworzeniem miejsca dla graczy na serwerze oraz forum, od tamtego czasu..\n[...] zdo³aliœmy zakodowaæ o wiele wiêcej ni¿ konkurencja a to dopiero pocz¹tek naszej przygody!\n\n");
			format(str5, sizeof(str5), "%s\t{9DB6D3}Logujesz siê na postaæ: {FFFFFF}%s{9DB6D3}, która {63D075}istnieje w naszej bazie danych!{9DB6D3}\n\tZaloguj siê albo zmieñ nick by wejœæ na inn¹ postaæ.", str5, ImieGracza2(playerid));
			dShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Panel Logowania:", str5, "Zaloguj sie", "Lista");
			SetPlayerWorldBounds(playerid, 20000.00, -20000.00, 20000.00, -20000.00);
			KameraLogowania(playerid);
		}
		else
		{
			if(JestIG(DaneGracza[playerid][gGUID]) == 1)
			{
				SendClientMessage(playerid, SZARY,  "{DEDEDE}Na tym globalu jest ju¿ zalogowana postaæ.");
				SetTimerEx("Kicks", 1000, 0, "d", playerid);
				return 0;
			}
			else
			{
				new sql2[2024], str[512], zero[50];
				format(sql2, sizeof(sql2), "SELECT * FROM `jochym_postacie` WHERE `name` = '%s'", ImieGracza(playerid));
				mysql_query(sql2);
				mysql_store_result();
				mysql_fetch_row(sql2);
				sscanf(sql2, "p<|>dds[20]dddddfdddds[124]s[60]s[124]s[20]ddfffdds[124]dddddddddddddfffdddddddddfddds[124]ddddddddddddddddddddddddddddddddddddddddddddds[64]ddddddddddddds[512]dd", DaneGracza[playerid][gUID]
					,DaneGracza[playerid][gGUID]
					,DaneGracza[playerid][gName]
					,DaneGracza[playerid][gCZAS_ONLINE]
					,DaneGracza[playerid][gOSTATNIO_NA_SERWERZE]
					,DaneGracza[playerid][gPORTFEL]
					,DaneGracza[playerid][gPLEC]
					,DaneGracza[playerid][gSKIN]
					,DaneGracza[playerid][gZDROWIE]
					,DaneGracza[playerid][gSILA]
					,DaneGracza[playerid][gWIEK]
					,DaneGracza[playerid][gWAGA]
					,DaneGracza[playerid][gRASA]
					,DaneGracza[playerid][gDokumenty]
					,DaneGracza[playerid][gSTAN_CYWILNY]
					,DaneGracza[playerid][gPOCHODZENIE]
					,zero
					,DaneGracza[playerid][gONLINE]
					,DaneGracza[playerid][gBW]
					,DaneGracza[playerid][gX]
					,DaneGracza[playerid][gY]
					,DaneGracza[playerid][gZ]
					,DaneGracza[playerid][gVW]
					,DaneGracza[playerid][gINT]
					,DaneGracza[playerid][gIP]
					,DaneGracza[playerid][gOCZEKIWANA_WYPLATA]
					,DaneGracza[playerid][gAKTYWNE]
					,DaneGracza[playerid][gBronAmmo]
					,DaneGracza[playerid][gBronUID]
					,DaneGracza[playerid][gDoPelnejGodziny]
					,DaneGracza[playerid][gLskin]
					,DaneGracza[playerid][gWynajem]
					,DaneGracza[playerid][gAJ]
					,DaneGracza[playerid][gQS]
					,DaneGracza[playerid][gPromile]
					,DaneGracza[playerid][gPktKarne]
					,DaneGracza[playerid][gPrzetrzmanie]
					,DaneGracza[playerid][gPUID]
					,DaneGracza[playerid][gPX]
					,DaneGracza[playerid][gPY]
					,DaneGracza[playerid][gPZ]
					,DaneGracza[playerid][gGlod]
					,DaneGracza[playerid][gEdytor]
					,DaneGracza[playerid][gKONTO_W_BANKU]
					,DaneGracza[playerid][gOstatniTrening]
					,DaneGracza[playerid][gStylWalki]
					,DaneGracza[playerid][gNrTreningu]
					,DaneGracza[playerid][gTrenowanyStyl]
					,DaneGracza[playerid][gOczekujacaKasa]
					,DaneGracza[playerid][gBetaTester]
					,DaneGracza[playerid][gUzaleznienie]
					,DaneGracza[playerid][gCzasTrwaniaUzaleznienia]
					,DaneGracza[playerid][gPracaTyp]
					,DaneGracza[playerid][gTelefon]
					,DaneGracza[playerid][gOsiagniecia]
					,DaneGracza[playerid][gPrzyczepiony1]
					,DaneGracza[playerid][gPrzyczepiony2]
					,DaneGracza[playerid][gZasilek]
					,DaneGracza[playerid][gZamHot]
					,DaneGracza[playerid][gTYPCHODZENIA]
					,DaneGracza[playerid][gAKCES]
					,DaneGracza[playerid][gPOSZ]
					,DaneGracza[playerid][gReputacja]
					,DaneGracza[playerid][g0]
					,DaneGracza[playerid][g1]
					,DaneGracza[playerid][g2]
					,DaneGracza[playerid][g3]
					,DaneGracza[playerid][g4]
					,DaneGracza[playerid][g5]
					,DaneGracza[playerid][g6]
					,DaneGracza[playerid][g7]
					,DaneGracza[playerid][g8]
					,DaneGracza[playerid][g9]
					,DaneGracza[playerid][g10]
					,DaneGracza[playerid][gWGRZE]
					,DaneGracza[playerid][gObiekty]
					,DaneGracza[playerid][gTrenowal]
					,DaneGracza[playerid][gStrzelnica]
					,DaneGracza[playerid][gZD1]
					,DaneGracza[playerid][gZD2]
					,DaneGracza[playerid][gZD3]
					,DaneGracza[playerid][gZD4]
					,DaneGracza[playerid][gZD5]
					,DaneGracza[playerid][gZD6]
					,DaneGracza[playerid][gZD7]
					,DaneGracza[playerid][gZD8]
					,DaneGracza[playerid][gZD9]
					,DaneGracza[playerid][gZD10]
					,DaneGracza[playerid][gZD11]
					,DaneGracza[playerid][gZD12]
					,DaneGracza[playerid][gZD13]
					,DaneGracza[playerid][gZD14]
					,DaneGracza[playerid][gTatuaze]
					,DaneGracza[playerid][gPozwolenie]
					,DaneGracza[playerid][gBudowanie]
					,DaneGracza[playerid][gTeam]
					,DaneGracza[playerid][gWytrych]
					,DaneGracza[playerid][gFreeze]
					,DaneGracza[playerid][gBlokDorywczej]
					,DaneGracza[playerid][gPrzyczepioneObj]
					,DaneGracza[playerid][gAnimacja]
					,DaneGracza[playerid][gAnim]
					,DaneGracza[playerid][gDNA]
					,DaneGracza[playerid][gPayDay]
					,DaneGracza[playerid][gPayDay2]
					,DaneGracza[playerid][gPayDay3]
					,DaneGracza[playerid][gPayDay4]
					,DaneGracza[playerid][gPayDay5]
					,DaneGracza[playerid][gPayDay6]
					,DaneGracza[playerid][gAntyPayDay]
					,DaneGracza[playerid][gLogin]
					,DaneGracza[playerid][gNagroda]
					,DaneGracza[playerid][gSpawn]
					,DaneGracza[playerid][gCar]
					,DaneGracza[playerid][gHistoria]
					,DaneGracza[playerid][gWeight]
					,DaneGracza[playerid][gEuro]
				);
				if(DaneGracza[playerid][gZDROWIE] < 5)
				{
					DaneGracza[playerid][gZDROWIE] = 6;
					DaneGracza[playerid][gBW] = 1;
				}
				if(BlokadaBAN(playerid))
				{
					SendClientMessage(playerid, 0xFFb00000, "{DEDEDE}Global z którego próbujesz siê zalogowaæ jest zbanowany.");
					SendClientMessage(playerid, 0xFFb00000, "{DEDEDE}Jeœli uwa¿asz, ¿e kara zosta³a nadana nies³usznie mo¿esz apelowaæ od tej kary na forum. "STRONAWWW"");
					SetTimerEx("Kicks", 1000, 0, "d", playerid);
					return 0;
				}
				new dok[124];
				format(dok,sizeof(dok), "%s", DaneGracza[playerid][gDokumenty]);
				new ilosc_znakow_a = strlen(dok), uprawsa = 0;
				for(new u = 0; u < ilosc_znakow_a; u++)
				{
					if(dok[u] == '1' || dok[u] == '0')
					{
						new znak[256];
						format(znak,sizeof(znak), "%c", dok[u]);
						new uprawnienie_dodaj = strval(znak);
						DaneGracza[playerid][gDokumenty][uprawsa] = uprawnienie_dodaj;
						uprawsa++;
					}
				}
				if(DaneGracza[playerid][gKONTO_W_BANKU] != 0)
				{
					new sql4[200];
					format(sql4, sizeof(sql4), "SELECT * FROM `jochym_bank` WHERE `UID_POSTACI` = '%d' AND `ID` = '%d' LIMIT 1", DaneGracza[playerid][gUID], DaneGracza[playerid][gKONTO_W_BANKU]);
					mysql_query(sql4);
					mysql_store_result();
					if(mysql_num_rows() != 0)
					{
						mysql_fetch_row(sql4);
						sscanf(sql4, "p<|>ds[124]ddds[124]ds[124]{d}{d}", DaneGracza[playerid][gUID_BANKU]
							,DaneGracza[playerid][gNAZWA_BANKU]
							,DaneGracza[playerid][gNUMER_KONTA]
							,DaneGracza[playerid][gNUMER_KARTY]
							,DaneGracza[playerid][gSTAN_KONTA]
							,DaneGracza[playerid][gBIC]
							,DaneGracza[playerid][gKREDYT]
							,DaneGracza[playerid][gIBAN]
						);
					}
				}
				zalogowany[playerid] = true;
				if(DaneGracza[playerid][gOczekujacaKasa] != 0)
				{
					DaneGracza[playerid][gSTAN_KONTA] += DaneGracza[playerid][gOczekujacaKasa];
					DaneGracza[playerid][gOczekujacaKasa] = 0;
					new strs[124];
					strdel(strs, 0, 124);
					format(strs, sizeof(strs), "UPDATE `jochym_postacie` SET `OCZEKUJACA_KASA` = '%d' WHERE `ID` = '%d'", DaneGracza[playerid][gOczekujacaKasa], DaneGracza[playerid][gUID]);
					mysql_query(strs);
					ZapiszBankKasa(playerid);
				}
				ResetPlayerWeapons(playerid);
			    new logowanie[1024];
			    new nickooc[64];
		        format(nickooc, sizeof(nickooc), "%s", DaneGracza[playerid][nickOOC]);
		        UsunPLZnaki(nickooc);
			    if(GraczPremium(playerid))
			    {
			        format(logowanie,sizeof(logowanie),"Witaj, {FFFFFF}%s (GUID %d){84C2E0} zalogowa³eœ siê na postaæ {FFFFFF}%s (UID %d, ID %d).", nickooc, DaneGracza[playerid][gGUID], ImieGracza2(playerid), DaneGracza[playerid][gUID], playerid);
					SendClientMessage(playerid, 0x84C2E0FF, logowanie);
					format(logowanie,sizeof(logowanie),"Twój profil posiada aktywne {eaff3f}Konto Premium GOLD{84C2E0}, ¿yczymy mi³ej gry!");
					SendClientMessage(playerid, 0x84C2E0FF, logowanie);
			    }
			    else
			    {
			        format(logowanie,sizeof(logowanie),"Witaj, {FFFFFF}%s (GUID %d){84C2E0} zalogowa³eœ siê na postaæ {FFFFFF}%s (UID %d, ID %d){84C2E0}. ¯yczymy mi³ej gry!", nickooc, DaneGracza[playerid][gGUID], ImieGracza2(playerid), DaneGracza[playerid][gUID], playerid);
					SendClientMessage(playerid, 0x84C2E0FF, logowanie);
			    }
				/*if(DaneGracza[playerid][gNagroda] != 3)
				{
					DaneGracza[playerid][gPREMIUM] = (gettime()+CZAS_LETNI)+(86400*14);
					RefreshNick(playerid);
					ZapiszGraczaGlobal(playerid, 9);
					DaneGracza[playerid][gNagroda] = 3;
					ZapiszGracza(playerid);
					format(logowanie, sizeof(logowanie), "Dziêkujemy za zaufanie oraz ¿e jesteœ razem z nami, otrzymujesz nagrodê {FFFF33}Konto Premium GOLD{84C2E0} na {FFFF33}14dni{84C2E0}.");
					SendClientMessage(playerid, 0x84C2E0FF, logowanie);
				}*/
			    DaneGracza[playerid][gLogin] = 0;
			    ZapiszGracza(playerid);
				DaneGracza[playerid][gKOLOR] = 0xf5deb3AA;
				new IP[16];
				GetPlayerIp(playerid, IP, sizeof(IP));
				sukces(playerid, 1, DaneGracza[playerid][gGUID], DaneGracza[playerid][gUID], DaneGracza[playerid][gIP],PRZEBYTE[playerid]);
				ZaladujPojazdyGracza(playerid);
				AFK[playerid] = 0;
				Wylogowany[playerid] = 60;
				RefreshNick(playerid);
				format(DaneGracza[playerid][gIP], 32, "%s", IP);
				UstawHP(playerid,DaneGracza[playerid][gZDROWIE]);
				new g, m, s;
				przelicznikonline(playerid, g, m, s);
				new log[256];
				format(log, sizeof(log), "[JOIN] [%s] [ID: %d, UID: %d, GUID, %d. Cash: %d USD. Bank: %d USD. Played: %dh, %dm, %ds. IP: %s]", ZmianaNicku(playerid), playerid, DaneGracza[playerid][gUID], DaneGracza[playerid][gGUID], DaneGracza[playerid][gPORTFEL], DaneGracza[playerid][gSTAN_KONTA], g, m, s, DaneGracza[playerid][gIP]);
				Transakcja(T_IC, DaneGracza[playerid][gUID], -1, DaneGracza[playerid][gGUID], -1, -1, -1, -1, -1, log, gettime()+KOREKTA_CZASOWA);
				DaneGracza[playerid][gGODZIN] = g;
				DaneGracza[playerid][gMINUT] = m;
				ZapiszGracza(playerid);
				if(DaneGracza[playerid][gZD1] == 0)
				{
				    CzasWyswietlaniaTextuNaDrzwiach[playerid] = 30;
					TextDrawHideForPlayer(playerid, TextNaDrzwi[playerid]);
					TextDrawSetString(TextNaDrzwi[playerid], "~y~Osiagniecie~n~~w~Hello world ~g~+10QPoints");
					TextDrawShowForPlayer(playerid, TextNaDrzwi[playerid]);
					DaneGracza[playerid][gGAMESCORE] += 10;
					DaneGracza[playerid][gZD1] = 1;
				    SetPlayerScore(playerid,DaneGracza[playerid][gGAMESCORE]);
					ZapiszGracza(playerid);
					ZapiszGraczaGlobal(playerid, 1);
				}
				/*if(g >= 3)
				{
					if(DaneGracza[playerid][gCar] != 0)
					{
						CzasWyswietlaniaTextuNaDrzwiach[playerid] = 30;
						TextDrawHideForPlayer(playerid, TextNaDrzwi[playerid]);
						TextDrawSetString(TextNaDrzwi[playerid], "~y~Poczatkowy pojazd!~n~~w~Twoj pojazd znajduje sie w ekwipunktu, aktywuj go! ~g~Uzyj /p");
						TextDrawShowForPlayer(playerid, TextNaDrzwi[playerid]);
						DodajPrzedmiot(DaneGracza[playerid][gUID], TYP_WLASCICIEL, P_POJAZDY, DaneGracza[playerid][gCar], 0, GetVehicleModelName(DaneGracza[playerid][gCar]), DaneGracza[playerid][gUID], 0, -1, 0, 0, 0, 0, "");
						DaneGracza[playerid][gCar] = 0;
						ZapiszGracza(playerid);
					}
				}*/
                ForeachEx(i, MAX_PLAYERS)
				{
					if(KtoJestOnline[i] == -1)
					{
						KtoJestOnline[i] = playerid;
						IloscGraczy++;
						break;
					}
				}
				SetPlayerScore(playerid,DaneGracza[playerid][gGAMESCORE]);
				OstatnieDrzwi[playerid] = GetPlayerVirtualWorld(playerid);
				strdel(str, 0, 512);
				format(str, sizeof(str), "UPDATE `jochym_postacie` SET `ONLINE` = '1', `IP` = '%s' WHERE `ID` = '%d'", DaneGracza[playerid][gIP], DaneGracza[playerid][gUID]);
				DaneGracza[playerid][gONLINE] = 1;
				mysql_query(str);
				strdel(str, 0, 512);
				format(str, sizeof(str), "UPDATE `ips_core_members` SET `online` = '1' WHERE `member_id` = '%d'", DaneGracza[playerid][gGUID]);
				mysql_query(str);
				SetPVarInt(playerid, "Teleportacja", 1);
				if(DaneGracza[playerid][gLskin] == 0)
				{
					SetPlayerSkin(playerid, DaneGracza[playerid][gSKIN]);
				}else{
					SetPlayerSkin(playerid, DaneGracza[playerid][gLskin]);
				}
				SetPVarInt(playerid, "Teleportacja", 0);
				RefreshNick(playerid);
				ZaladujZadluzenia();
				SetPVarInt(playerid, "DlugGracza", 0);
				////////////////////////////////////////////////////////////////////////////////
				////////////////////////////////////////////////////////////////////////////////
				new nr = 0;
				format(zapyt, sizeof(zapyt), "SELECT * FROM `jochym_pracownicy` WHERE `UID_POSTACI`='%d' LIMIT 6", DaneGracza[playerid][gUID]);
				mysql_check();
				mysql_query2(zapyt);
				mysql_store_result();
				while(mysql_fetch_row_format(zapyt))
				{
					if(nr == 0)
					{
						sscanf(zapyt,  "p<|>{dd}ddddddds[512]", DaneGracza[playerid][gDzialalnosc1]
						,DaneGracza[playerid][gPrzynaleznosci][0]
						,DaneGracza[playerid][gPrzynaleznosci][1]
						,DaneGracza[playerid][gPrzynaleznosci][2]
						,DaneGracza[playerid][gPrzynaleznosci][3]
						,DaneGracza[playerid][gPrzynaleznosci][4]
						,DaneGracza[playerid][gPrzynaleznosci][5]
						,DaneGracza[playerid][gUprawnieniaGracza1]);
						DaneGracza[playerid][gPrzynaleznosci][1] = 0;
						DaneGracza[playerid][gPrzynaleznosci][3] = 0;
					}
					else if(nr == 1)
					{
						sscanf(zapyt,  "p<|>{dd}ddddddds[512]", DaneGracza[playerid][gDzialalnosc2]
						,DaneGracza[playerid][gPrzynaleznosci][6]
						,DaneGracza[playerid][gPrzynaleznosci][7]
						,DaneGracza[playerid][gPrzynaleznosci][8]
						,DaneGracza[playerid][gPrzynaleznosci][9]
						,DaneGracza[playerid][gPrzynaleznosci][10]
						,DaneGracza[playerid][gPrzynaleznosci][11]
						,DaneGracza[playerid][gUprawnieniaGracza2]);
						DaneGracza[playerid][gPrzynaleznosci][7] = 0;
						DaneGracza[playerid][gPrzynaleznosci][9] = 0;
					}
					else if(nr == 2)
					{
						sscanf(zapyt,  "p<|>{dd}ddddddds[512]", DaneGracza[playerid][gDzialalnosc3]
						,DaneGracza[playerid][gPrzynaleznosci][12]
						,DaneGracza[playerid][gPrzynaleznosci][13]
						,DaneGracza[playerid][gPrzynaleznosci][14]
						,DaneGracza[playerid][gPrzynaleznosci][15]
						,DaneGracza[playerid][gPrzynaleznosci][16]
						,DaneGracza[playerid][gPrzynaleznosci][17]
						,DaneGracza[playerid][gUprawnieniaGracza3]);
						DaneGracza[playerid][gPrzynaleznosci][13] = 0;
						DaneGracza[playerid][gPrzynaleznosci][15] = 0;
					}
					else if(nr == 3)
					{
						sscanf(zapyt,  "p<|>{dd}ddddddds[512]", DaneGracza[playerid][gDzialalnosc4]
						,DaneGracza[playerid][gPrzynaleznosci][18]
						,DaneGracza[playerid][gPrzynaleznosci][19]
						,DaneGracza[playerid][gPrzynaleznosci][20]
						,DaneGracza[playerid][gPrzynaleznosci][21]
						,DaneGracza[playerid][gPrzynaleznosci][22]
						,DaneGracza[playerid][gPrzynaleznosci][23]
						,DaneGracza[playerid][gUprawnieniaGracza4]);
						DaneGracza[playerid][gPrzynaleznosci][19] = 0;
						DaneGracza[playerid][gPrzynaleznosci][21] = 0;
					}
					else if(nr == 4)
					{
						sscanf(zapyt,  "p<|>{dd}ddddddds[512]", DaneGracza[playerid][gDzialalnosc5]
						,DaneGracza[playerid][gPrzynaleznosci][24]
						,DaneGracza[playerid][gPrzynaleznosci][25]
						,DaneGracza[playerid][gPrzynaleznosci][26]
						,DaneGracza[playerid][gPrzynaleznosci][27]
						,DaneGracza[playerid][gPrzynaleznosci][28]
						,DaneGracza[playerid][gPrzynaleznosci][29]
						,DaneGracza[playerid][gUprawnieniaGracza5]);
						DaneGracza[playerid][gPrzynaleznosci][25] = 0;
						DaneGracza[playerid][gPrzynaleznosci][27] = 0;
					}
					else if(nr == 5)
					{
						sscanf(zapyt,  "p<|>{dd}ddddddds[512]", DaneGracza[playerid][gDzialalnosc6]
						,DaneGracza[playerid][gPrzynaleznosci][30]
						,DaneGracza[playerid][gPrzynaleznosci][31]
						,DaneGracza[playerid][gPrzynaleznosci][32]
						,DaneGracza[playerid][gPrzynaleznosci][33]
						,DaneGracza[playerid][gPrzynaleznosci][34]
						,DaneGracza[playerid][gPrzynaleznosci][35]
						,DaneGracza[playerid][gUprawnieniaGracza6]);
						DaneGracza[playerid][gPrzynaleznosci][31] = 0;
						DaneGracza[playerid][gPrzynaleznosci][33] = 0;
					}
					nr++;
				}
				new numerek = 0;
				for(new i = 1; i <= nr; i++)
				{
					new dzial[10], upraw[350];
					dzial[1] = DaneGracza[playerid][gDzialalnosc1];
					dzial[2] = DaneGracza[playerid][gDzialalnosc2];
					dzial[3] = DaneGracza[playerid][gDzialalnosc3];
					dzial[4] = DaneGracza[playerid][gDzialalnosc4];
					dzial[5] = DaneGracza[playerid][gDzialalnosc5];
					dzial[6] = DaneGracza[playerid][gDzialalnosc6];
					switch(i)
					{
						case 1:
							format(upraw, sizeof(upraw), "%s", DaneGracza[playerid][gUprawnieniaGracza1]);
						case 2:
							format(upraw, sizeof(upraw), "%s", DaneGracza[playerid][gUprawnieniaGracza2]);
						case 3:
							format(upraw, sizeof(upraw), "%s", DaneGracza[playerid][gUprawnieniaGracza3]);
						case 4:
							format(upraw, sizeof(upraw), "%s", DaneGracza[playerid][gUprawnieniaGracza4]);
						case 5:
							format(upraw, sizeof(upraw), "%s", DaneGracza[playerid][gUprawnieniaGracza5]);
						case 6:
							format(upraw, sizeof(upraw), "%s", DaneGracza[playerid][gUprawnieniaGracza6]);
					}
					ZaladujDzialalnoscisPracownika(dzial[i], playerid);
					kolorchatu(playerid, dzial[i], i);
					new strs[125], pobierz[300];
					format(strs, sizeof(strs), "ranga:%d", DaneGracza[playerid][gPrzynaleznosci][numerek]);
     				if(ComparisonString(upraw, strs))
					{
						format(pobierz, sizeof(pobierz), "SELECT `RANGA_%d` FROM `jochym_rangi` WHERE `UID_DZIALALNOSCI`='%d' LIMIT 1", DaneGracza[playerid][gPrzynaleznosci][numerek],dzial[i]);
						mysql_check();
						mysql_query2(pobierz);
						mysql_store_result();
						mysql_fetch_row_format(pobierz);
						new rangowanie[300];
						format(rangowanie, sizeof(rangowanie), "%s", pobierz);
						new znaki = strfind(pobierz, "|", true);
						if(znaki != -1)
						{
							new usun = znaki+1;
							strdel(pobierz, 0, usun);
						}
						new ilosc_znakow = strlen(pobierz), upraws = 0;
						for(new u = 0; u < ilosc_znakow; u++)
						{
							if(pobierz[u] == '1' || pobierz[u] == '0')
							{
								new znak[25];
								format(znak,sizeof(znak), "%c", pobierz[u]);
								new uprawnienie_dodaj = strval(znak);
								switch(i)
								{
									case 1:
									{
										DaneGracza[playerid][gUprawnienia1][upraws] = uprawnienie_dodaj;
										sscanf(rangowanie, "p<|>s[124]{s[300]}",DaneGracza[playerid][gNazwaRangi1]);
									}
									case 2:
									{
										DaneGracza[playerid][gUprawnienia2][upraws] = uprawnienie_dodaj;
										sscanf(rangowanie, "p<|>s[124]{s[300]}",DaneGracza[playerid][gNazwaRangi2]);
									}
									case 3:
									{
										DaneGracza[playerid][gUprawnienia3][upraws] = uprawnienie_dodaj;
										sscanf(rangowanie, "p<|>s[124]{s[300]}",DaneGracza[playerid][gNazwaRangi3]);
									}
									case 4:
									{
										DaneGracza[playerid][gUprawnienia4][upraws] = uprawnienie_dodaj;
										sscanf(rangowanie, "p<|>s[124]{s[300]}",DaneGracza[playerid][gNazwaRangi4]);
									}
									case 5:
									{
										DaneGracza[playerid][gUprawnienia5][upraws] = uprawnienie_dodaj;
										sscanf(rangowanie, "p<|>s[124]{s[300]}",DaneGracza[playerid][gNazwaRangi5]);
									}
									case 6:
									{
										DaneGracza[playerid][gUprawnienia6][upraws] = uprawnienie_dodaj;
										sscanf(rangowanie, "p<|>s[124]{s[300]}",DaneGracza[playerid][gNazwaRangi6]);
									}
								}
								upraws++;
							}
						}
					}
					else
					{
						new ilosc_znakows = strlen(upraw), upraws1 = 0;
						for(new us = 0; us < ilosc_znakows; us++)
						{
							if(upraw[us] == '1' || upraw[us] == '0')
							{
								new znak1[256];
								format(znak1,sizeof(znak1), "%c", upraw[us]);
								new uprawnienie_dodaj1 = strval(znak1);
								switch(i)
								{
									case 1:
										DaneGracza[playerid][gUprawnienia1][upraws1] = uprawnienie_dodaj1;
									case 2:
										DaneGracza[playerid][gUprawnienia2][upraws1] = uprawnienie_dodaj1;
									case 3:
										DaneGracza[playerid][gUprawnienia3][upraws1] = uprawnienie_dodaj1;
									case 4:
										DaneGracza[playerid][gUprawnienia4][upraws1] = uprawnienie_dodaj1;
									case 5:
										DaneGracza[playerid][gUprawnienia5][upraws1] = uprawnienie_dodaj1;
									case 6:
										DaneGracza[playerid][gUprawnienia6][upraws1] = uprawnienie_dodaj1;
								}
								upraws1++;
							}
						}
					}
					numerek += 6;
				}
				new osiag[124];
				format(osiag,sizeof(osiag), "%s", DaneGracza[playerid][gOsiagniecia]);
				new ilosc_znakow_f = strlen(osiag), uprawsf = 0;
				for(new u = 0; u < ilosc_znakow_f; u++)
				{
					if(osiag[u] == '1' || osiag[u] == '0')
					{
						new znak[256];
						format(znak,sizeof(znak), "%c", osiag[u]);
						new uprawnienie_dodaj = strval(znak);
						DaneGracza[playerid][gOsiagniecia][uprawsf] = uprawnienie_dodaj;
						uprawsf++;
					}
				}
				AntyCheatBroni[playerid] = 1;
				KillTimer(TimerAntyCheat[playerid]);
				TimerAntyCheat[playerid] = SetTimerEx("WlaczAntyCheata",5000,0,"d",playerid);
				SetPVarInt(playerid, "Teleportacja", 1);
				SetTimerEx("Spawns",500, 0, "d", playerid);
				SetPVarInt(playerid, "Teleportacja", 0);
				AIR[playerid] = SetTimerEx("Air",2000, 1, "d", playerid);
				new grupa1 = DaneGracza[playerid][gDzialalnosc1];
				new grupa2 = DaneGracza[playerid][gDzialalnosc2];
				new grupa3 = DaneGracza[playerid][gDzialalnosc3];
				new grupa4 = DaneGracza[playerid][gDzialalnosc4];
				new grupa5 = DaneGracza[playerid][gDzialalnosc5];
				new grupa6 = DaneGracza[playerid][gDzialalnosc6];
				if(GrupaInfo[grupa1][gTeren] != 0 && Lokacja[GrupaInfo[grupa1][gTeren]][gOwner] == GrupaInfo[grupa1][gUID] && Lokacja[GrupaInfo[grupa1][gTeren]][gWojna] != 0)
				{
					SendClientMessage(playerid, 0x660000FF, "Teren twojej organizacji w³aœnie próbuje przej¹æ inna organizacja!");
				}
				if(GrupaInfo[grupa1][gTeren] != 0 && Lokacja[GrupaInfo[grupa1][gTeren]][gOwner] != GrupaInfo[grupa1][gUID] && Lokacja[GrupaInfo[grupa1][gTeren]][gWojna] != 0)
				{
					SendClientMessage(playerid, 0x660000FF, "Twoja organizacja w³aœnie próbuje przej¹æ teren innej organizacji!");
				}
				if(GrupaInfo[grupa2][gTeren] != 0 && Lokacja[GrupaInfo[grupa2][gTeren]][gOwner] == GrupaInfo[grupa2][gUID] && Lokacja[GrupaInfo[grupa2][gTeren]][gWojna] != 0)
				{
					SendClientMessage(playerid, 0x660000FF, "Teren twojej organizacji w³aœnie próbuje przej¹æ inna organizacja!");
				}
				if(GrupaInfo[grupa2][gTeren] != 0 && Lokacja[GrupaInfo[grupa2][gTeren]][gOwner] != GrupaInfo[grupa2][gUID] && Lokacja[GrupaInfo[grupa2][gTeren]][gWojna] != 0)
				{
					SendClientMessage(playerid, 0x660000FF, "Twoja organizacja w³aœnie próbuje przej¹æ teren innej organizacji!");
				}
				if(GrupaInfo[grupa3][gTeren] != 0 && Lokacja[GrupaInfo[grupa3][gTeren]][gOwner] == GrupaInfo[grupa3][gUID] && Lokacja[GrupaInfo[grupa3][gTeren]][gWojna] != 0)
				{
					SendClientMessage(playerid, 0x660000FF, "Teren twojej organizacji w³aœnie próbuje przej¹æ inna organizacja!");
				}
				if(GrupaInfo[grupa3][gTeren] != 0 && Lokacja[GrupaInfo[grupa3][gTeren]][gOwner] != GrupaInfo[grupa3][gUID] && Lokacja[GrupaInfo[grupa3][gTeren]][gWojna] != 0)
				{
					SendClientMessage(playerid, 0x660000FF, "Twoja organizacja w³aœnie próbuje przej¹æ teren innej organizacji!");
				}
				if(GrupaInfo[grupa4][gTeren] != 0 && Lokacja[GrupaInfo[grupa4][gTeren]][gOwner] == GrupaInfo[grupa4][gUID] && Lokacja[GrupaInfo[grupa4][gTeren]][gWojna] != 0)
				{
					SendClientMessage(playerid, 0x660000FF, "Teren twojej organizacji w³aœnie próbuje przej¹æ inna organizacja!");
				}
				if(GrupaInfo[grupa4][gTeren] != 0 && Lokacja[GrupaInfo[grupa4][gTeren]][gOwner] != GrupaInfo[grupa4][gUID] && Lokacja[GrupaInfo[grupa4][gTeren]][gWojna] != 0)
				{
					SendClientMessage(playerid, 0x660000FF, "Twoja organizacja w³aœnie próbuje przej¹æ teren innej organizacji!");
				}
				if(GrupaInfo[grupa5][gTeren] != 0 && Lokacja[GrupaInfo[grupa5][gTeren]][gOwner] == GrupaInfo[grupa5][gUID] && Lokacja[GrupaInfo[grupa5][gTeren]][gWojna] != 0)
				{
					SendClientMessage(playerid, 0x660000FF, "Teren twojej organizacji w³aœnie próbuje przej¹æ inna organizacja!");
				}
				if(GrupaInfo[grupa5][gTeren] != 0 && Lokacja[GrupaInfo[grupa5][gTeren]][gOwner] != GrupaInfo[grupa5][gUID] && Lokacja[GrupaInfo[grupa5][gTeren]][gWojna] != 0)
				{
					SendClientMessage(playerid, 0x660000FF, "Twoja organizacja w³aœnie próbuje przej¹æ teren innej organizacji!");
				}
				if(GrupaInfo[grupa6][gTeren] != 0 && Lokacja[GrupaInfo[grupa6][gTeren]][gOwner] == GrupaInfo[grupa6][gUID] && Lokacja[GrupaInfo[grupa6][gTeren]][gWojna] != 0)
				{
					SendClientMessage(playerid, 0x660000FF, "Teren twojej organizacji w³aœnie próbuje przej¹æ inna organizacja!");
				}
				if(GrupaInfo[grupa6][gTeren] != 0 && Lokacja[GrupaInfo[grupa6][gTeren]][gOwner] != GrupaInfo[grupa6][gUID] && Lokacja[GrupaInfo[grupa6][gTeren]][gWojna] != 0)
				{
					SendClientMessage(playerid, 0x660000FF, "Twoja organizacja w³aœnie próbuje przej¹æ teren innej organizacji!");
				}
			}
		}
////////////////////////////////////////////////////////////////////////////////
	}
	else
	{
		Proby[playerid]++;
		if(Proby[playerid] == 3)
		{
			new str2[512];
			format(str2, sizeof(str2), "{9DB6D3}Witaj na "PROJEKT", nowym innowacyjnym w pe³ni rozwijaj¹cym siê serwerze!\nOd 2016 roku pracowaliœmy nad stworzeniem miejsca dla graczy na serwerze oraz forum, od tamtego czasu..\n[...] zdo³aliœmy zakodowaæ o wiele wiêcej ni¿ konkurencja a to dopiero pocz¹tek naszej przygody!\n\n");
			format(str2, sizeof(str2), "%s\t{9DB6D3}Próbowa³eœ zalogowaæ siê na postaæ: {FFFFFF}%s{9DB6D3}, twoje {FF0000}3{9DB6D3} próby logowania zosta³y odnotowane w logach!\n\tPamiêtaj, ¿e odnotowany zosta³ twój serial GTA oraz IP!", str2, ImieGracza2(playerid));
			dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", str2, "Zamknij", "");
			new IP[16];
			GetPlayerIp(playerid, IP, sizeof(IP));
			sukces(playerid, 2, DaneGracza[playerid][gGUID], DaneGracza[playerid][gUID], IP,PRZEBYTE[playerid]);
			Kick(playerid);
		}
		else
		{
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~r~Haslo nie pasuje do postaci.", 2000, 5);
			new IP[16];
			GetPlayerIp(playerid, IP, sizeof(IP));
			sukces(playerid, 2, DaneGracza[playerid][gGUID], DaneGracza[playerid][gUID], IP,PRZEBYTE[playerid]);
			new str[512];
			format(str, sizeof str, "{8b2a2a}Has³o nie pasuje do postaci.");
			SendClientMessage(playerid, -1, str);
			format(str, sizeof str, "{8b2a2a}1.Je¿eli stworzy³eœ(aœ) postaæ na "PROJEKT", u¿yj has³a tego profilu.");
			SendClientMessage(playerid, -1, str);
			format(str, sizeof str, "{8b2a2a}2.Masz polskie znaki lub znaki specjalne w swoim haœle, spróbuj je usun¹æ w ustawieniach konta globalnego na stronie.");
			SendClientMessage(playerid, -1, str);
		}
		new str5[512];
    	format(str5, sizeof(str5), "{9DB6D3}Witaj na "PROJEKT", nowym innowacyjnym w pe³ni rozwijaj¹cym siê serwerze!\nOd 2016 roku pracowaliœmy nad stworzeniem miejsca dla graczy na serwerze oraz forum, od tamtego czasu..\n[...] zdo³aliœmy zakodowaæ o wiele wiêcej ni¿ konkurencja a to dopiero pocz¹tek naszej przygody!\n\n");
		format(str5, sizeof(str5), "%s\t{9DB6D3}Logujesz siê na postaæ: {FFFFFF}%s{9DB6D3}, która {63D075}istnieje w naszej bazie danych!{9DB6D3}\n\tZaloguj siê albo zmieñ nick by wejœæ na inn¹ postaæ.", str5, ImieGracza2(playerid));
		dShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Panel Logowania:", str5, "Zaloguj sie", "Lista");
		SetPlayerWorldBounds(playerid, 20000.00, -20000.00, 20000.00, -20000.00);
		KameraLogowania(playerid);
	}
	return 1;
}
stock Bluzgi(text[])
{
	if(strfind(text[0],"huj",false)!=-1||
	strfind(text[0],"chuj",false)!=-1||
	strfind(text[0],"kurwa",false)!=-1||
	strfind(text[0],"suka",false)!=-1||
	strfind(text[0],"szmata",false)!=-1||
	strfind(text[0],"dziwka",false)!=-1||
	strfind(text[0],"jebaæ",false)!=-1||
	strfind(text[0],"jebac",false)!=-1||
	strfind(text[0],"spierdalaj",false)!=-1||
	strfind(text[0],"pierdoliæ",false)!=-1||
	strfind(text[0],"pierdolic",false)!=-1||
	strfind(text[0],"jeb",false)!=-1||
	strfind(text[0],"ssij",false)!=-1||
	strfind(text[0],"suki",false)!=-1||
	strfind(text[0],"skurwysyn",false)!=-1||
	strfind(text[0],"kurwy",false)!=-1)
	{
	    return 1;
	}
    return 0;
}
stock SendWrappedMessageToAll(colour, const msg[], maxlength=120, const prefix[]="...")
{
    new length = strlen(msg);
    if(length <= maxlength) {
        SendClientMessageToAll(colour, msg);
        return;
    }
    new string[128], idx;
    for(new i, space, plen, bool:useprefix; i < length; i++) {
        if(i - idx + plen >= maxlength) {
            if(idx == space || i - space >= 25) {
                strmid(string, msg, idx, i);
                idx = i;
            } else {
                strmid(string, msg, idx, space);
                idx = space + 1;
            }
            if(useprefix) {
                strins(string, prefix, 0);
            } else {
                plen = strlen(prefix);
                useprefix = true;
            }
            format(string, sizeof(string), "%s...", string);
            SendClientMessageToAll(colour, string);
        } else if(msg[i] == ' ') {
            space = i;
        }
    }
    if(idx < length) {
        strmid(string, msg, idx, length);
        strins(string, prefix, 0);
        SendClientMessageToAll(colour, string);
    }
    return;
}
stock DGCZAT(playerid, kol[], colour, const msg[], maxlength=100, const prefix[]="[...]")
{
	strdel(tekst_global, 0, 2048);
    new length = strlen(msg);
    if(length <= maxlength) {
        new msgi[256];
        format(msgi, sizeof(msgi), "{%s}%s", kol, msg);
        SendClientMessage(playerid, colour, msgi);
        return 1;
    }
    new idx;
    for(new i, space, plen, bool:useprefix; i < length; i++) {
        if(i - idx + plen >= maxlength) {
            if(idx == space || i - space >= 25) {
                strmid(tekst_global, msg, idx, i);
                idx = i;
            } else {
                strmid(tekst_global, msg, idx, space);
                idx = space + 1;
            }
            if(useprefix) {
                strins(tekst_global, prefix, 0);
            } else {
                plen = strlen(prefix);
                useprefix = true;
            }
            format(tekst_global, sizeof(tekst_global), "{%s}%s...", kol, tekst_global);
            SendClientMessage(playerid, colour, tekst_global);
        } else if(msg[i] == ' ') {
            space = i;
        }
    }
    if(idx < length) {
        strmid(tekst_global, msg, idx, length);
        new pref[256];
        format(pref, sizeof(pref), "{%s}%s", kol, prefix);
        strins(tekst_global, pref, 0);
        SendClientMessage(playerid, colour, tekst_global);
    }
    return 1;
}
stock SendWrappedMessageToPlayer(playerid, colour, const msg[], maxlength=100, const prefix[]="[...]")
{
    new length = strlen(msg);
    if(length <= maxlength) {
        SendClientMessage(playerid, colour, msg);
        return;
    }
    new string[128], idx;
    for(new i, space, plen, bool:useprefix; i < length; i++) {
        if(i - idx + plen >= maxlength) {
            if(idx == space || i - space >= 25) {
                strmid(string, msg, idx, i);
                idx = i;
            } else {
                strmid(string, msg, idx, space);
                idx = space + 1;
            }
            if(useprefix) {
                strins(string, prefix, 0);
            } else {
                plen = strlen(prefix);
                useprefix = true;
            }
            format(string, sizeof(string), "%s...", string);
            SendClientMessage(playerid, colour, string);
        } else if(msg[i] == ' ') {
            space = i;
        }
    }
    if(idx < length) {
        strmid(string, msg, idx, length);
        strins(string, prefix, 0);
        SendClientMessage(playerid, colour, string);
    }
    return;
}
stock UsunBronieGracza(playerid)
{
    ResetPlayerWeapons(playerid);
}
stock dDajBron(playerid,id,ammo)
{
	if((id<1||id>46)||id==19||id==20||id==21||id==40) return 0;
	dBron[playerid][id]=true;
	dAmmo[playerid][id]=ammo;
	GivePlayerWeapon(playerid,id,ammo);
	return 1;
}
forward SprawdzDostepnoscDzialalnosci(playerid, playeridz, dzialalnoscid);
public SprawdzDostepnoscDzialalnosci(playerid, playeridz, dzialalnoscid)
{
	    if(DaneGracza[playeridz][gDzialalnosc1] == 0)
		{
		    if(DaneGracza[playeridz][gDzialalnosc1] == dzialalnoscid || DaneGracza[playeridz][gDzialalnosc2] == dzialalnoscid || DaneGracza[playeridz][gDzialalnosc3] == dzialalnoscid  || DaneGracza[playeridz][gDzialalnosc4] == dzialalnoscid  || DaneGracza[playeridz][gDzialalnosc5] == dzialalnoscid  || DaneGracza[playeridz][gDzialalnosc6] == dzialalnoscid)
		    {
		        dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz którego chcesz zaprosiæ do grupy ju¿ siê w niej znajduje.", "Zamknij", "");
	        	return 1;
			}
			GameTextForPlayer(playerid, "~y~Oferta:~n~~w~Zostala wyslana czekaj na reakcje gracza.", 3000, 5);
			Oferuj(playerid, playeridz, DaneGracza[playeridz][gUID], dzialalnoscid, DaneGracza[playerid][gPrzynaleznosci][0], -1, OFEROWANIE_INVITE, 0, "0|0", 0);
			Transakcja(T_OINV, DaneGracza[playerid][gUID], DaneGracza[playeridz][gUID], DaneGracza[playerid][gGUID], DaneGracza[playeridz][gGUID], -1, dzialalnoscid, -1, -1, "-", gettime()+KOREKTA_CZASOWA);
		    return 0;
		}
		else if(DaneGracza[playeridz][gDzialalnosc2] == 0)
		{
		    if(DaneGracza[playeridz][gDzialalnosc1] == dzialalnoscid || DaneGracza[playeridz][gDzialalnosc2] == dzialalnoscid || DaneGracza[playeridz][gDzialalnosc3] == dzialalnoscid  || DaneGracza[playeridz][gDzialalnosc4] == dzialalnoscid  || DaneGracza[playeridz][gDzialalnosc5] == dzialalnoscid  || DaneGracza[playeridz][gDzialalnosc6] == dzialalnoscid)
		    {
		        dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz którego chcesz zaprosiæ do grupy ju¿ siê w niej znajduje.", "Zamknij", "");
	        	return 1;
			}
			GameTextForPlayer(playerid, "~y~Oferta:~n~~w~Zostala wyslana czekaj na reakcje gracza.", 3000, 5);
			Transakcja(T_OINV, DaneGracza[playerid][gUID], DaneGracza[playeridz][gUID], DaneGracza[playerid][gGUID], DaneGracza[playeridz][gGUID], -1, dzialalnoscid, -1, -1, "-", gettime()+KOREKTA_CZASOWA);
	        Oferuj(playerid, playeridz, DaneGracza[playeridz][gUID], dzialalnoscid, DaneGracza[playerid][gPrzynaleznosci][6], -1, OFEROWANIE_INVITE, 0, "0|0", 0);
		    return 0;
		}
		else if(DaneGracza[playeridz][gDzialalnosc3] == 0)
		{
		    if(DaneGracza[playeridz][gDzialalnosc1] == dzialalnoscid || DaneGracza[playeridz][gDzialalnosc2] == dzialalnoscid || DaneGracza[playeridz][gDzialalnosc3] == dzialalnoscid  || DaneGracza[playeridz][gDzialalnosc4] == dzialalnoscid  || DaneGracza[playeridz][gDzialalnosc5] == dzialalnoscid  || DaneGracza[playeridz][gDzialalnosc6] == dzialalnoscid)
		    {
		        dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz którego chcesz zaprosiæ do grupy ju¿ siê w niej znajduje.", "Zamknij", "");
	        	return 1;
		    }
		    GameTextForPlayer(playerid, "~y~Oferta:~n~~w~Zostala wyslana czekaj na reakcje gracza.", 3000, 5);
		    Transakcja(T_OINV, DaneGracza[playerid][gUID], DaneGracza[playeridz][gUID], DaneGracza[playerid][gGUID], DaneGracza[playeridz][gGUID], -1, dzialalnoscid, -1, -1, "-", gettime()+KOREKTA_CZASOWA);
	        Oferuj(playerid, playeridz, DaneGracza[playeridz][gUID], dzialalnoscid, DaneGracza[playerid][gPrzynaleznosci][12], -1, OFEROWANIE_INVITE, 0, "0|0", 0);
		    return 1;
		}
		if(DaneGracza[playeridz][gDzialalnosc4] == 0 && GraczPremium(playeridz))
		{
		    if(DaneGracza[playeridz][gDzialalnosc1] == dzialalnoscid || DaneGracza[playeridz][gDzialalnosc2] == dzialalnoscid || DaneGracza[playeridz][gDzialalnosc3] == dzialalnoscid  || DaneGracza[playeridz][gDzialalnosc4] == dzialalnoscid  || DaneGracza[playeridz][gDzialalnosc5] == dzialalnoscid  || DaneGracza[playeridz][gDzialalnosc6] == dzialalnoscid)
		    {
		        dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz którego chcesz zaprosiæ do grupy ju¿ siê w niej znajduje.", "Zamknij", "");
	        	return 1;
			}
			GameTextForPlayer(playerid, "~y~Oferta:~n~~w~Zostala wyslana czekaj na reakcje gracza.", 3000, 5);
			Transakcja(T_OINV, DaneGracza[playerid][gUID], DaneGracza[playeridz][gUID], DaneGracza[playerid][gGUID], DaneGracza[playeridz][gGUID], -1, dzialalnoscid, -1, -1, "-", gettime()+KOREKTA_CZASOWA);
	        Oferuj(playerid, playeridz, DaneGracza[playeridz][gUID], dzialalnoscid, DaneGracza[playerid][gPrzynaleznosci][18], -1, OFEROWANIE_INVITE, 0, "0|0", 0);
		    return 0;
		}
		else if(DaneGracza[playeridz][gDzialalnosc5] == 0 && GraczPremium(playeridz))
		{
		    if(DaneGracza[playeridz][gDzialalnosc1] == dzialalnoscid || DaneGracza[playeridz][gDzialalnosc2] == dzialalnoscid || DaneGracza[playeridz][gDzialalnosc3] == dzialalnoscid  || DaneGracza[playeridz][gDzialalnosc4] == dzialalnoscid  || DaneGracza[playeridz][gDzialalnosc5] == dzialalnoscid  || DaneGracza[playeridz][gDzialalnosc6] == dzialalnoscid)
		    {
				dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz którego chcesz zaprosiæ do grupy ju¿ siê w niej znajduje.", "Zamknij", "");
	        	return 1;
			}
			GameTextForPlayer(playerid, "~y~Oferta:~n~~w~Zostala wyslana czekaj na reakcje gracza.", 3000, 5);
			Transakcja(T_OINV, DaneGracza[playerid][gUID], DaneGracza[playeridz][gUID], DaneGracza[playerid][gGUID], DaneGracza[playeridz][gGUID], -1, dzialalnoscid, -1, -1, "-", gettime()+KOREKTA_CZASOWA);
	        Oferuj(playerid, playeridz, DaneGracza[playeridz][gUID], dzialalnoscid, DaneGracza[playerid][gPrzynaleznosci][24], -1, OFEROWANIE_INVITE, 0, "0|0", 0);
		    return 0;
		}
		else if(DaneGracza[playeridz][gDzialalnosc6] == 0 && GraczPremium(playeridz))
		{
		    if(DaneGracza[playeridz][gDzialalnosc1] == dzialalnoscid || DaneGracza[playeridz][gDzialalnosc2] == dzialalnoscid || DaneGracza[playeridz][gDzialalnosc3] == dzialalnoscid  || DaneGracza[playeridz][gDzialalnosc4] == dzialalnoscid  || DaneGracza[playeridz][gDzialalnosc5] == dzialalnoscid  || DaneGracza[playeridz][gDzialalnosc6] == dzialalnoscid)
		    {
				dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Gracz którego chcesz zaprosiæ do grupy ju¿ siê w niej znajduje.", "Zamknij", "");
	        	return 1;
			}
			GameTextForPlayer(playerid, "~y~Oferta:~n~~w~Zostala wyslana czekaj na reakcje gracza.", 3000, 5);
			Transakcja(T_OINV, DaneGracza[playerid][gUID], DaneGracza[playeridz][gUID], DaneGracza[playerid][gGUID], DaneGracza[playeridz][gGUID], -1, dzialalnoscid, -1, -1, "-", gettime()+KOREKTA_CZASOWA);
	        Oferuj(playerid, playeridz, DaneGracza[playeridz][gUID], dzialalnoscid, DaneGracza[playerid][gPrzynaleznosci][30], -1, OFEROWANIE_INVITE, 0, "0|0", 0);
		    return 0;
		}
		else
		{
		    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Ten gracz nie posiada wystarczaj¹cej iloœci slotów aby do³¹czyæ do danej grupy.\nPamiêtaj by gracz móg³ do³¹czyæ do slotów 4-6 musi posiadaæ konto premium.", "Zamknij", "");
		}
	return 1;
}
stock PlayerObokPlayera(playerid, playerid2, range)
{
	new Float: x, Float: y, Float: z;
	GetPlayerPos(playerid2, x, y, z);
	if(IsPlayerInRangeOfPoint(playerid, range, x, y, z))
	{
	    return true;
	}
	else return false;
}
public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
    /*if(playertextid == Textdraw2[playerid])
    {
        cmd_g(playerid, "1 info");

        CancelSelectTextDraw(playerid);
        HidePlayerGroups(playerid);
    }
    if(playertextid == Textdraw3[playerid])
    {
        cmd_g(playerid, "1 v");

        CancelSelectTextDraw(playerid);
        HidePlayerGroups(playerid);
    }
    if(playertextid == Textdraw4[playerid])
    {
        cmd_duty(playerid, "1");

        CancelSelectTextDraw(playerid);
        HidePlayerGroups(playerid);
    }
    if(playertextid == Textdraw5[playerid])
    {
        cmd_g(playerid, "1 magazyn");

        CancelSelectTextDraw(playerid);
        HidePlayerGroups(playerid);
    }
    if(playertextid == Textdraw6[playerid])
    {
        cmd_g(playerid, "1 online");

        CancelSelectTextDraw(playerid);
        HidePlayerGroups(playerid);
    }
    if(playertextid == Textdraw8[playerid])
    {
        cmd_g(playerid, "2 info");

        CancelSelectTextDraw(playerid);
        HidePlayerGroups(playerid);
    }
    if(playertextid == Textdraw9[playerid])
    {
        cmd_g(playerid, "2 v");

        CancelSelectTextDraw(playerid);
        HidePlayerGroups(playerid);
    }
    if(playertextid == Textdraw10[playerid])
    {
        cmd_duty(playerid, "2");

        CancelSelectTextDraw(playerid);
        HidePlayerGroups(playerid);
    }
    if(playertextid == Textdraw11[playerid])
    {
        cmd_g(playerid, "2 magazyn");

        CancelSelectTextDraw(playerid);
        HidePlayerGroups(playerid);
    }
    if(playertextid == Textdraw12[playerid])
    {
        cmd_g(playerid, "2 online");

        CancelSelectTextDraw(playerid);
        HidePlayerGroups(playerid);
    }
    if(playertextid == Textdraw14[playerid])
    {
        cmd_g(playerid, "3 info");

        CancelSelectTextDraw(playerid);
        HidePlayerGroups(playerid);
    }
    if(playertextid == Textdraw15[playerid])
    {
        cmd_g(playerid, "3 v");

        CancelSelectTextDraw(playerid);
        HidePlayerGroups(playerid);
    }
    if(playertextid == Textdraw16[playerid])
    {
        cmd_duty(playerid, "3");

        CancelSelectTextDraw(playerid);
        HidePlayerGroups(playerid);
    }
    if(playertextid == Textdraw17[playerid])
    {
        cmd_g(playerid, "3 magazyn");

        CancelSelectTextDraw(playerid);
        HidePlayerGroups(playerid);
	}
    if(playertextid == Textdraw18[playerid])
    {
        cmd_g(playerid, "3 online");

        CancelSelectTextDraw(playerid);
        HidePlayerGroups(playerid);
    }
    if(playertextid == Textdraw20[playerid])
    {
        cmd_g(playerid, "4 info");

        CancelSelectTextDraw(playerid);
        HidePlayerGroups(playerid);
    }
    if(playertextid == Textdraw21[playerid])
    {
        cmd_g(playerid, "4 v");

        CancelSelectTextDraw(playerid);
        HidePlayerGroups(playerid);
	}
    if(playertextid == Textdraw22[playerid])
    {
        cmd_duty(playerid, "4");

        CancelSelectTextDraw(playerid);
        HidePlayerGroups(playerid);
    }
    if(playertextid == Textdraw23[playerid])
    {
        cmd_g(playerid, "4 magazyn");

        CancelSelectTextDraw(playerid);
        HidePlayerGroups(playerid);
    }
    if(playertextid == Textdraw24[playerid])
    {
        cmd_g(playerid, "4 online");

        CancelSelectTextDraw(playerid);
        HidePlayerGroups(playerid);
    }
    if(playertextid == Textdraw26[playerid])
    {
        cmd_g(playerid, "5 info");

        CancelSelectTextDraw(playerid);
        HidePlayerGroups(playerid);
    }
    if(playertextid == Textdraw27[playerid])
    {
        cmd_g(playerid, "5 v");

        CancelSelectTextDraw(playerid);
        HidePlayerGroups(playerid);
    }
    if(playertextid == Textdraw28[playerid])
    {
        cmd_duty(playerid, "5");

        CancelSelectTextDraw(playerid);
        HidePlayerGroups(playerid);
    }
    if(playertextid == Textdraw29[playerid])
    {
        cmd_g(playerid, "5 magazyn");

        CancelSelectTextDraw(playerid);
        HidePlayerGroups(playerid);
    }
    if(playertextid == Textdraw30[playerid])
    {
        cmd_g(playerid, "5 online");

        CancelSelectTextDraw(playerid);
        HidePlayerGroups(playerid);
    }
    if(playertextid == Textdraw32[playerid])
    {
        cmd_g(playerid, "6 info");

        CancelSelectTextDraw(playerid);
        HidePlayerGroups(playerid);
    }
    if(playertextid == Textdraw33[playerid])
    {
        cmd_g(playerid, "6 v");

        CancelSelectTextDraw(playerid);
        HidePlayerGroups(playerid);
    }
    if(playertextid == Textdraw34[playerid])
    {
        cmd_duty(playerid, "6");

        CancelSelectTextDraw(playerid);
        HidePlayerGroups(playerid);
    }
    if(playertextid == Textdraw35[playerid])
    {
        cmd_g(playerid, "6 magazyn");

        CancelSelectTextDraw(playerid);
        HidePlayerGroups(playerid);
    }
    if(playertextid == Textdraw36[playerid])
    {
        cmd_g(playerid, "6 online");

        CancelSelectTextDraw(playerid);
        HidePlayerGroups(playerid);
    }*/
    if(playertextid == TextOferty2[playerid])
    {
		PlayerTextDrawHide(playerid, TextOferty0[playerid]);
	    PlayerTextDrawHide(playerid, TextOferty1[playerid]);
	    PlayerTextDrawHide(playerid, TextOferty2[playerid]);
	    PlayerTextDrawHide(playerid, TextOferty3[playerid]);
	    PlayerTextDrawHide(playerid, TextOferty4[playerid]);
	    PlayerTextDrawHide(playerid, TextOferty5[playerid]);
        CancelSelectTextDraw(playerid);
        Akceptacja(playerid, 0, -1);
        return 1;
    }
    else if(playertextid == TextOferty3[playerid])
    {
		PlayerTextDrawHide(playerid, TextOferty0[playerid]);
	    PlayerTextDrawHide(playerid, TextOferty1[playerid]);
	    PlayerTextDrawHide(playerid, TextOferty2[playerid]);
	    PlayerTextDrawHide(playerid, TextOferty3[playerid]);
	    PlayerTextDrawHide(playerid, TextOferty4[playerid]);
	    PlayerTextDrawHide(playerid, TextOferty5[playerid]);
        CancelSelectTextDraw(playerid);
        Akceptacja(playerid, 1, 0);
    }
    else if(playertextid == TextOferty4[playerid])
    {
        if(DaneGracza[playerid][gKONTO_W_BANKU] != 0)
        {
			PlayerTextDrawHide(playerid, TextOferty0[playerid]);
		    PlayerTextDrawHide(playerid, TextOferty1[playerid]);
		    PlayerTextDrawHide(playerid, TextOferty2[playerid]);
		    PlayerTextDrawHide(playerid, TextOferty3[playerid]);
		    PlayerTextDrawHide(playerid, TextOferty4[playerid]);
		    PlayerTextDrawHide(playerid, TextOferty5[playerid]);
	        CancelSelectTextDraw(playerid);
        	Akceptacja(playerid, 1, 1);
        	return 1;
        }else{
            GameTextForPlayer(playerid, "~r~Nie posiadasz konta w banku.", 3000, 5);
            return 1;
        }
    }
    else if(playertextid == TextOferty5[playerid])
    {
		PlayerTextDrawHide(playerid, TextOferty0[playerid]);
	    PlayerTextDrawHide(playerid, TextOferty1[playerid]);
	    PlayerTextDrawHide(playerid, TextOferty2[playerid]);
	    PlayerTextDrawHide(playerid, TextOferty3[playerid]);
	    PlayerTextDrawHide(playerid, TextOferty4[playerid]);
	    PlayerTextDrawHide(playerid, TextOferty5[playerid]);
        CancelSelectTextDraw(playerid);
        Akceptacja(playerid, 0, 0);
    }
    else if(playertextid == TextOferty6[playerid])
    {
		PlayerTextDrawHide(playerid, TextOferty0[playerid]);
	    PlayerTextDrawHide(playerid, TextOferty1[playerid]);
	    PlayerTextDrawHide(playerid, TextOferty2[playerid]);
	    PlayerTextDrawHide(playerid, TextOferty6[playerid]);
	    PlayerTextDrawHide(playerid, TextOferty7[playerid]);
        CancelSelectTextDraw(playerid);
        Akceptacja(playerid, 1, 2);
    }
    else if(playertextid == TextOferty7[playerid])
    {
		PlayerTextDrawHide(playerid, TextOferty0[playerid]);
	    PlayerTextDrawHide(playerid, TextOferty1[playerid]);
	    PlayerTextDrawHide(playerid, TextOferty2[playerid]);
	    PlayerTextDrawHide(playerid, TextOferty6[playerid]);
	    PlayerTextDrawHide(playerid, TextOferty7[playerid]);
        CancelSelectTextDraw(playerid);
        Akceptacja(playerid, 0, 0);
    }
	else if(playertextid == Poker6[playerid])
	{
		CancelSelectTextDraw(playerid);
		cmd_poker(playerid, "");
	}
	else if(playertextid == Poker3[playerid])
	{
		WybralMozliwoscPoker[playerid] = 0;
		PlayerTextDrawHide(playerid,Poker2[playerid]);
		PlayerTextDrawHide(playerid,Poker3[playerid]);
		PlayerTextDrawHide(playerid,Poker4[playerid]);
		PlayerTextDrawHide(playerid,Poker5[playerid]);
		PlayerTextDrawHide(playerid,Poker6[playerid]);
		new roznica;
		roznica = ObiektInfo[DaneGracza[playerid][gPoker]][gPokerInfo][13] - DaneGracza[playerid][gPokerPostawione];
		if(roznica > 0)
		{
			new kasa[128];
			if(roznica >= DaneGracza[playerid][gPokerZetony])
			{
				DaneGracza[playerid][gInformacjePoker][0] = 1;
				roznica = DaneGracza[playerid][gPokerZetony];
				format(kasa, sizeof(kasa), "All-in ~r~($%d)", roznica);
			}
			else
			{
				format(kasa, sizeof(kasa), "Sprawdza");
			}
			NadajTextTextdraw(playerid, DaneGracza[playerid][gPoker], kasa);
			DaneGracza[playerid][gPokerZetony] -= roznica;
			ObiektInfo[DaneGracza[playerid][gPoker]][gPokerInfo][1] += roznica;
			DaneGracza[playerid][gPokerPostawione] += roznica;
			for(new i = 0; i < 30; i++)
			{
				if(DaneGracza[playerid][gPokerObj][i] != 0)
				{
					DestroyDynamicObject(DaneGracza[playerid][gPokerObj][i]);
					DaneGracza[playerid][gPokerObj][i] = 0;
				}
			}
			for(new i = 0; i < 30; i++)
			{
				if(DaneGracza[playerid][gNumeryObiektowPostawionych][i] != 0)
				{
					DestroyDynamicObject(DaneGracza[playerid][gNumeryObiektowPostawionych][i]);
					DaneGracza[playerid][gNumeryObiektowPostawionych][i] = 0;
				}
			}
			PrzeliczZetony(playerid, DaneGracza[playerid][gPoker], 0, 0);
			PrzeliczZetony(playerid, DaneGracza[playerid][gPoker], DaneGracza[playerid][gPokerPostawione], 5);
		}
		else
		{
			NadajTextTextdraw(playerid, DaneGracza[playerid][gPoker], "Czeka");
		}
		OdswiezTexdrawyPoker(DaneGracza[playerid][gPoker], 0);
		CancelSelectTextDraw(playerid);
		new ilosc = SprawdzIloscGraczy(DaneGracza[playerid][gPoker]);
		if(ilosc >= 2)
		{
			SprawdzKolejGracza(playerid);
		}
		else
		{
			KoniecRundy(DaneGracza[playerid][gPoker]);
		}
	}
	else if(playertextid == Poker4[playerid])
	{
		CancelSelectTextDraw(playerid);
		dShowPlayerDialog(playerid, DIALOG_POKER_PRZEBIJ, DIALOG_STYLE_INPUT, GUIOPIS "Informacja", "{DEDEDE}Wpisz kwotê{DEDEDE} któr¹ chcesz przebiæ zak³ad.", "Zatwierdz", "Zamknij");
		return 0;
	}
	else if(playertextid == Poker5[playerid])
	{
		WybralMozliwoscPoker[playerid] = 0;
		PlayerTextDrawHide(playerid,Poker2[playerid]);
		PlayerTextDrawHide(playerid,Poker3[playerid]);
		PlayerTextDrawHide(playerid,Poker4[playerid]);
		PlayerTextDrawHide(playerid,Poker5[playerid]);
		PlayerTextDrawHide(playerid,Poker6[playerid]);
		CancelSelectTextDraw(playerid);
		for(new i = 0; i < 6; i++)
		{
			if(ObiektInfo[DaneGracza[playerid][gPoker]][gAktualniGracze][i] == playerid)
			{
				ObiektInfo[DaneGracza[playerid][gPoker]][gAktualniGracze][i] = -1;
				DaneGracza[playerid][gPokerKarty][0] = 0;
				DaneGracza[playerid][gPokerKarty][1] = 0;
				DaneGracza[playerid][gInformacjePoker][0] = 0;
				DaneGracza[playerid][gInformacjePoker][1] = 0;
				DaneGracza[playerid][gInformacjePoker][2] = 0;
				DaneGracza[playerid][gInformacjePoker][3] = 0;
				DaneGracza[playerid][gInformacjePoker][4] = 0;
				DaneGracza[playerid][gInformacjePoker][5] = 0;
				DaneGracza[playerid][gInformacjePoker][6] = 0;
			}
		}
		NadajTextTextdraw(playerid, DaneGracza[playerid][gPoker], "Pasuje");
		OdswiezTexdrawyPoker(DaneGracza[playerid][gPoker], 2);
		new ilosc = SprawdzIloscGraczy(DaneGracza[playerid][gPoker]);
		if(ilosc >= 2)
		{
			SprawdzKolejGracza(playerid);
		}
		else
		{
			KoniecRundy(DaneGracza[playerid][gPoker]);
		}
	}
    return 1;
}
stock NickGraczaGlobalSQL(sqlid)
{
	if(sqlid == 0)
	{
		new nick[MAX_PLAYER_NAME];
		format(nick, sizeof(nick), "Brak");
		return nick;
	}
	new nick[MAX_PLAYER_NAME];
	format(zapyt, sizeof(zapyt), "SELECT `name` FROM `ips_core_members` WHERE `member_id` = '%d' LIMIT 1", sqlid);
	mysql_check();
	mysql_query2(zapyt);
	mysql_store_result();
	mysql_fetch_row(nick);
	UsuwanieTwardejSpacji(nick);
	mysql_free_result();
	return nick;
}
stock JestIG(guid)
{
	new sql4[200];
	format(sql4, sizeof(sql4), "SELECT * FROM `jochym_postacie` WHERE `ONLINE` = 1 AND `GUID` = '%d'", guid);
	mysql_query(sql4);
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
		return 1;
	}
	else
	{
		return 0;
	}
}
stock SendClientMessageEx(playerid,color,type[],{Float,_}:...)
{
	strdel(tekst_global, 0, 2048);
	for(new i = 0;i<numargs() -2;i++)
	{
	    switch(type[i])
	    {
	        case 's':
	        {
				new result[128];
				for(new a= 0;getarg(i +3,a) != 0;a++)
				{
				    result[a] = getarg(i +3,a);
				}
				if(!strlen(tekst_global))
				{
				    format(tekst_global,sizeof tekst_global,"%s",result);
				} else format(tekst_global,sizeof tekst_global,"%s%s",tekst_global,result);
	        }

	        case 'i':
	        {
	            new result = getarg(i +3);
				if(!strlen(tekst_global))
				{
				    format(tekst_global,sizeof tekst_global,"%i",result);
				} else format(tekst_global,sizeof tekst_global,"%s%i",tekst_global,result);
	        }

	        case 'f':
	        {
				new Float:result = Float:getarg(i +3);
				if(!strlen(tekst_global))
				{
				    format(tekst_global,sizeof tekst_global,"%f",result);
				} else format(tekst_global,sizeof tekst_global,"%s%f",tekst_global,result);
	        }
	    }
	}
    SendClientMessage(playerid,color,tekst_global);
    return 1;
}
/*forward Kierunek(vehid);
public Kierunek(vehid)
{
 	new carid = GetVehicleModel(vehid);
	if(carid == 417 || carid == 430 || carid == 432 || carid == 435 || carid == 441 || carid == 446 || carid == 447
	|| carid == 449 || carid == 450 || carid == 452 || carid == 453 || carid == 454 || carid == 457 || carid == 460 || carid == 461
	|| carid == 462 || carid == 463 || carid == 464 || carid == 465 || carid == 468 || carid == 469 || carid == 472 || carid == 473
	|| carid == 476 || carid == 481 || carid == 484 || carid == 487 || carid == 488 || carid == 493 || carid == 497 || carid == 501
	|| carid == 509 || carid == 510 || carid == 511 || carid == 512 || carid == 513 || carid == 519 || carid == 520 || carid == 530
	|| carid == 537 || carid == 538 || carid == 539 || carid == 548 || carid == 553 || carid == 563 || carid == 564 || carid == 568
	|| carid == 569 || carid == 570 || carid == 571 || carid == 572 || carid == 577 || carid == 581 || carid == 583 || carid == 584
	|| carid == 586 || carid == 590 || carid == 591 || carid == 592 || carid == 593 || carid == 594 || carid == 595 || carid == 601
	|| carid == 606 || carid == 607 || carid == 608 || carid == 610 || carid == 611) return 1;
	return 0;
}*/
forward Przebieg();
public Przebieg()
{
    ForeachEx(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i))
		{
			if(zalogowany[i] == true)
			{
				if(GetPlayerState(i)==PLAYER_STATE_DRIVER)
				{
					new VehID=GetPlayerVehicleID(i);
					new uid = SprawdzCarUID(VehID);
					new lights,doors,bonnet,boot,objective,engine,alarm;
					GetVehicleParamsEx(VehID,engine,lights,alarm,doors,bonnet,boot,objective);
					if(engine)
					{
						dDystans = GetPlayerDistanceFromPoint(i, dOstatniX[i],dOstatniY[i],dOstatniZ[i]);
						PojazdInfo[uid][pPrzebieg]+=dDystans;
					}
					GetVehiclePos(VehID,dOstatniX[i],dOstatniY[i],dOstatniZ[i]);
				}
			}
		}
	}
	return 1;
}
forward MinusAuto();
public MinusAuto()
{
    /*ForeachEx(i, IloscPojazdow)
    {
		if(GetVehiclePlayer(PojazdInfo[PojazdySerwera[i]][pID]) == -1)
		{
			if(PojazdInfo[PojazdySerwera[i]][pSpawn] == 1 && !IsTrailerAttachedToVehicle(PojazdInfo[PojazdySerwera[i]][pID]) && PojazdInfo[PojazdySerwera[i]][pHolowany] == 0)
			{
				new Float:pXv, Float:pYv, Float:pZv;
				GetVehiclePos(PojazdInfo[PojazdySerwera[i]][pID],pXv,pYv,pZv);
				if(PojazdInfo[PojazdySerwera[i]][pOX]+15 < pXv || PojazdInfo[PojazdySerwera[i]][pOX]-15 > pXv || PojazdInfo[PojazdySerwera[i]][pOY]+15 < pYv || PojazdInfo[PojazdySerwera[i]][pOY]-15 > pYv || PojazdInfo[PojazdySerwera[i]][pOZ]+15 < pZv || PojazdInfo[PojazdySerwera[i]][pOZ]-15 > pZv)
				{
					if(PojazdInfo[PojazdySerwera[i]][pModel] == 574 || PojazdInfo[PojazdySerwera[i]][pModel] == 591)
					{
						SetVehicleToRespawn(PojazdInfo[PojazdySerwera[i]][pID]);
						PojazdInfo[PojazdySerwera[i]][pStan] = 1000.0;
						PojazdInfo[PojazdySerwera[i]][pPaliwo] = 100;
						SetVehicleHealth(PojazdInfo[PojazdySerwera[i]][pID], PojazdInfo[PojazdySerwera[i]][pStan] );
						RepairVehicle(PojazdInfo[PojazdySerwera[i]][pID]);
					}
					else
					{
						PojazdInfo[PojazdySerwera[i]][pPrzepchany] = 1;
						PojazdInfo[PojazdySerwera[i]][pSpawn] = 0;
						UsunPojazdUID(PojazdySerwera[i]);
					}
				}
			}
		}
		else
		{
			if(GetVehiclePlayerKierownica(PojazdInfo[PojazdySerwera[i]][pID]) == 0 && PojazdInfo[PojazdySerwera[i]][pHolowany] == 0)
			{
				if(PojazdInfo[PojazdySerwera[i]][pSpawn] == 1 && !IsTrailerAttachedToVehicle(PojazdInfo[PojazdySerwera[i]][pID]) && PojazdInfo[PojazdySerwera[i]][pHolowany] == 0)
				{
					new Float:pXv, Float:pYv, Float:pZv;
					GetVehiclePos(PojazdInfo[PojazdySerwera[i]][pID],pXv,pYv,pZv);
					if(PojazdInfo[PojazdySerwera[i]][pOX]+20 < pXv || PojazdInfo[PojazdySerwera[i]][pOX]-20 > pXv || PojazdInfo[PojazdySerwera[i]][pOY]+20 < pYv || PojazdInfo[PojazdySerwera[i]][pOY]-20 > pYv || PojazdInfo[PojazdySerwera[i]][pOZ]+20 < pZv || PojazdInfo[PojazdySerwera[i]][pOZ]-20 > pZv)
					{
						if(PojazdInfo[PojazdySerwera[i]][pModel] == 574 || PojazdInfo[PojazdySerwera[i]][pModel] == 591)
						{
							SetVehicleToRespawn(PojazdInfo[PojazdySerwera[i]][pID]);
							PojazdInfo[PojazdySerwera[i]][pStan] = 1000.0;
							PojazdInfo[PojazdySerwera[i]][pPaliwo] = 100;
							SetVehicleHealth(PojazdInfo[PojazdySerwera[i]][pID], PojazdInfo[PojazdySerwera[i]][pStan] );
							RepairVehicle(PojazdInfo[PojazdySerwera[i]][pID]);
						}
						else
						{
							PojazdInfo[PojazdySerwera[i]][pPrzepchany] = 1;
							PojazdInfo[PojazdySerwera[i]][pSpawn] = 0;
							UsunPojazdUID(PojazdySerwera[i]);
						}
					}
				}
			}
		}
	}*/
	return 1;
}
forward Paral(playerid);
public Paral(playerid)
{
	OnPlayerText(playerid, "-crack");
	Dostal[playerid] = 5;
	return 1;
}
forward MinusPaliwo(vehicleid);
public MinusPaliwo(vehicleid)
{
	new uid = SprawdzCarUID(vehicleid);
    PojazdInfo[uid][pPaliwo]-= 0.1;
	if(PojazdInfo[uid][pPaliwo] <= 0 && PojazdInfo[uid][pSilnik] == 1)
	{
		SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
		PojazdInfo[uid][pSilnik] = 0;
		new eng, lights, alarm, drs, bonnet, boot, obj, bzstr[64];
		GetVehicleParamsEx(vehicleid, eng, lights, alarm, drs, bonnet, boot, obj);
		SetVehicleParamsEx(vehicleid, PojazdInfo[uid][pSilnik], lights, 0, drs, bonnet, boot, obj);
		format(bzstr, sizeof(bzstr), "**W pojezdzie %s skoñczy³o siê paliwo**", GetVehicleModelName(PojazdInfo[uid][pModel]));
		SendVehText(15.0, vehicleid, bzstr, KOLOR_DO, KOLOR_DO, KOLOR_DO, KOLOR_DO, KOLOR_DO);
		KillTimer(PojazdInfo[uid][pTimer]);
	}
	if(PojazdInfo[uid][pStan] < 400)
	{
		SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
		PojazdInfo[uid][pSilnik] = 0;
		new eng, lights, alarm, drs, bonnet, boot, obj,bzstr[124];
		GetVehicleParamsEx(vehicleid, eng, lights, alarm, drs, bonnet, boot, obj);
		SetVehicleParamsEx(vehicleid, PojazdInfo[uid][pSilnik], lights, 0, drs, bonnet, boot, obj);
		format(bzstr, sizeof(bzstr), "**W pojezdzie %s zgas³ silnik, poniewa¿ jego uszkodzenia s¹ zbyt wielkie**", GetVehicleModelName(PojazdInfo[uid][pModel]));
		SendVehText(15.0, vehicleid, bzstr, KOLOR_DO, KOLOR_DO, KOLOR_DO, KOLOR_DO, KOLOR_DO);
		KillTimer(PojazdInfo[uid][pTimer]);
		SetTimerEx("Reczny",5000,0,"d",vehicleid, -1);
	}
	ZapiszPojazd(uid, 1);
	return 1;
}
forward AdminFly(playerid);
public AdminFly(playerid)
{
	if(!IsPlayerConnected(playerid))
		return flying[playerid] = false;

	if(flying[playerid])
	{
	    if(!IsPlayerInAnyVehicle(playerid))
	    {
			new
			    keys,
				ud,
				lr,
				Float:x[2],
				Float:y[2],
				Float:z;
            UstawHP(playerid,1000000000);
			GetPlayerKeys(playerid, keys, ud, lr);
			GetPlayerVelocity(playerid, x[0], y[0], z);
			if(ud == KEY_UP)
			{
				GetPlayerCameraPos(playerid, x[0], y[0], z);
				GetPlayerCameraFrontVector(playerid, x[1], y[1], z);
    			ApplyAnimation(playerid, "SWIM", "SWIM_crawl", 4.1, 0, 1, 1, 0, 0);
				SetPlayerToFacePos(playerid, x[0] + x[1], y[0] + y[1]);
				SetPlayerVelocity(playerid, x[1], y[1], z);
			}
			else
			SetPlayerVelocity(playerid, 0.0, 0.0, 0.02);
		}
		SetTimerEx("AdminFly", 100, 0, "d", playerid);
	}
	return 0;
}
forward Float:SetPlayerToFacePos(playerid, Float:X, Float:Y);
public Float:SetPlayerToFacePos(playerid, Float:X, Float:Y)
{
	new
		Float:pX1,
		Float:pY1,
		Float:pZ1,
		Float:ang;

	if(!IsPlayerConnected(playerid)) return 0.0;

	GetPlayerPos(playerid, pX1, pY1, pZ1);

	if( Y > pY1 ) ang = (-acos((X - pX1) / floatsqroot((X - pX1)*(X - pX1) + (Y - pY1)*(Y - pY1))) - 90.0);
	else if( Y < pY1 && X < pX1 ) ang = (acos((X - pX1) / floatsqroot((X - pX1)*(X - pX1) + (Y - pY1)*(Y - pY1))) - 450.0);
	else if( Y < pY1 ) ang = (acos((X - pX1) / floatsqroot((X - pX1)*(X - pX1) + (Y - pY1)*(Y - pY1))) - 90.0);

	if(X > pX1) ang = (floatabs(floatabs(ang) + 180.0));
	else ang = (floatabs(ang) - 180.0);

	ang += 180.0;

	SetPlayerFacingAngle(playerid, ang);

 	return ang;
}
forward DodajLidera(uidp, uidd, skin);
public DodajLidera(uidp, uidd, skin)
{
	/*skin = -1;
	format(zapyt, sizeof(zapyt), "INSERT INTO `jochym_pracownicy` (`UID_POSTACI`, `UID_DZIALALNOSCI`, `UID_RANGI`, `SKIN`, `UPRAWNIENIA`, `2`) VALUES ('%d', '%d', '0', '%d', '0', '1')",
	uidp, uidd, skin);
	mysql_check();
	mysql_query2(zapyt);
	mysql_free_result();*/
	if(GrupaInfo[uidd][gTyp] == 1)
	{
		new query[256];
		format(query, sizeof(query), "UPDATE `jochym_pracownicy` SET `1` = '%d', `2` = '%d', `3` = '%d', `4` = '%d', `5` = '%d', `6` = '%d', `7` = '%d', `8` = '%d', `9` = '%d', `10` = '%d', `11` = '%d', `13` = '%d', `14` = '%d', `16` = '%d', `20` = '%d', `21` = '%d', `22` = '%d', `23` = '%d' WHERE `UID_POSTACI` = '%d' AND `UID_DZIALALNOSCI` = '%d'"
		, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ,1 ,1 ,1 ,1 ,1, 1 ,uidp, uidd);
		mysql_check();
		mysql_query(query);
	}
	if(GrupaInfo[uidd][gTyp] == 2)
	{
		new query[256];
		format(query, sizeof(query), "UPDATE `jochym_pracownicy` SET `1` = '%d', `2` = '%d', `3` = '%d', `4` = '%d', `5` = '%d', `6` = '%d', `7` = '%d', `8` = '%d', `9` = '%d', `10` = '%d', `20` = '%d', `21` = '%d', `23` = '%d', `13` = '%d', `18` = '%d', `19` = '%d' WHERE `UID_POSTACI` = '%d' AND `UID_DZIALALNOSCI` = '%d'"
		, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 ,uidp, uidd);
		mysql_check();
		mysql_query(query);
	}
	if(GrupaInfo[uidd][gTyp] == 3)
	{
		new query[256];
		format(query, sizeof(query), "UPDATE `jochym_pracownicy` SET `1` = '%d', `2` = '%d', `3` = '%d', `4` = '%d', `5` = '%d', `6` = '%d', `7` = '%d', `8` = '%d', `9` = '%d', `10` = '%d', `20` = '%d', `21` = '%d', `23` = '%d', `12` = '%d' WHERE `UID_POSTACI` = '%d' AND `UID_DZIALALNOSCI` = '%d'"
		, 1,1,1,1,1,1,1,1,1,1,1,1,1,1 ,uidp, uidd);
		mysql_check();
		mysql_query(query);
	}
	if(GrupaInfo[uidd][gTyp] == 4)
	{
		new query[256];
		format(query, sizeof(query), "UPDATE `jochym_pracownicy` SET `1` = '%d', `2` = '%d', `3` = '%d', `4` = '%d', `5` = '%d', `6` = '%d', `7` = '%d', `8` = '%d', `9` = '%d', `10` = '%d', `20` = '%d', `21` = '%d', `23` = '%d' WHERE `UID_POSTACI` = '%d' AND `UID_DZIALALNOSCI` = '%d'"
		, 1,1,1,1,1,1,1,1,1,1,1,1,1 ,uidp, uidd);
		mysql_check();
		mysql_query(query);
	}
	if(GrupaInfo[uidd][gTyp] == 5)
	{
		new query[256];
		format(query, sizeof(query), "UPDATE `jochym_pracownicy` SET `1` = '%d', `2` = '%d', `3` = '%d', `4` = '%d', `5` = '%d', `6` = '%d', `7` = '%d', `8` = '%d', `9` = '%d', `10` = '%d', `20` = '%d', `21` = '%d', `23` = '%d' WHERE `UID_POSTACI` = '%d' AND `UID_DZIALALNOSCI` = '%d'"
		, 1,1,1,1,1,1,1,1,1,1,1,1,1 ,uidp, uidd);
		mysql_check();
		mysql_query(query);
	}
	if(GrupaInfo[uidd][gTyp] == 7)
	{
		new query[256];
		format(query, sizeof(query), "UPDATE `jochym_pracownicy` SET `1` = '%d', `2` = '%d', `3` = '%d', `4` = '%d', `5` = '%d', `6` = '%d', `7` = '%d', `8` = '%d', `9` = '%d', `10` = '%d', `20` = '%d', `21` = '%d', `23` = '%d' WHERE `UID_POSTACI` = '%d' AND `UID_DZIALALNOSCI` = '%d'"
		, 1,1,1,1,1,1,1,1,1,1,1,1,1 ,uidp, uidd);
		mysql_check();
		mysql_query(query);
	}
	if(GrupaInfo[uidd][gTyp] == 8)//do poprawy elektryka
	{
		new query[256];
		format(query, sizeof(query), "UPDATE `jochym_pracownicy` SET `1` = '%d', `2` = '%d', `3` = '%d', `4` = '%d', `5` = '%d', `6` = '%d', `7` = '%d', `8` = '%d', `9` = '%d', `10` = '%d', `20` = '%d', `21` = '%d', `23` = '%d' WHERE `UID_POSTACI` = '%d' AND `UID_DZIALALNOSCI` = '%d'"
		, 1,1,1,1,1,1,1,1,1,1,1,1,1 ,uidp, uidd);
		mysql_check();
		mysql_query(query);
	}
	if(GrupaInfo[uidd][gTyp] == 9)
	{
		new query[256];
		format(query, sizeof(query), "UPDATE `jochym_pracownicy` SET `1` = '%d', `2` = '%d', `3` = '%d', `4` = '%d', `5` = '%d', `6` = '%d', `7` = '%d', `8` = '%d', `9` = '%d', `10` = '%d', `20` = '%d', `21` = '%d', `23` = '%d' WHERE `UID_POSTACI` = '%d' AND `UID_DZIALALNOSCI` = '%d'"
		, 1,1,1,1,1,1,1,1,1,1,1,1,1 ,uidp, uidd);
		mysql_check();
		mysql_query(query);
	}
	if(GrupaInfo[uidd][gTyp] == 10)
	{
		new query[256];
		format(query, sizeof(query), "UPDATE `jochym_pracownicy` SET `1` = '%d', `2` = '%d', `3` = '%d', `4` = '%d', `5` = '%d', `6` = '%d', `7` = '%d', `8` = '%d', `9` = '%d', `10` = '%d', `20` = '%d', `21` = '%d', `23` = '%d', `24` = '%d', `25` = '%d', `26` = '%d' WHERE `UID_POSTACI` = '%d' AND `UID_DZIALALNOSCI` = '%d'"
		, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 ,uidp, uidd);
		mysql_check();
		mysql_query(query);
	}
	if(GrupaInfo[uidd][gTyp] == 11)
	{
		new query[256];
		format(query, sizeof(query), "UPDATE `jochym_pracownicy` SET `1` = '%d', `2` = '%d', `3` = '%d', `4` = '%d', `5` = '%d', `6` = '%d', `7` = '%d', `8` = '%d', `9` = '%d', `10` = '%d', `20` = '%d', `21` = '%d', `23` = '%d', `13` = '%d' WHERE `UID_POSTACI` = '%d' AND `UID_DZIALALNOSCI` = '%d'"
		, 1,1,1,1,1,1,1,1,1,1,1,1,1,1 ,uidp, uidd);
		mysql_check();
		mysql_query(query);
	}
	if(GrupaInfo[uidd][gTyp] == 12)
	{
		new query[256];
		format(query, sizeof(query), "UPDATE `jochym_pracownicy` SET `1` = '%d', `2` = '%d', `3` = '%d', `4` = '%d', `5` = '%d', `6` = '%d', `7` = '%d', `8` = '%d', `9` = '%d', `10` = '%d', `20` = '%d', `21` = '%d', `23` = '%d' WHERE `UID_POSTACI` = '%d' AND `UID_DZIALALNOSCI` = '%d'"
		, 1,1,1,1,1,1,1,1,1,1,1,1,1 ,uidp, uidd);
		mysql_check();
		mysql_query(query);
	}
	if(GrupaInfo[uidd][gTyp] == 13)
	{
		new query[256];
		format(query, sizeof(query), "UPDATE `jochym_pracownicy` SET `1` = '%d', `2` = '%d', `3` = '%d', `4` = '%d', `5` = '%d', `6` = '%d', `7` = '%d', `8` = '%d', `9` = '%d', `10` = '%d', `20` = '%d', `21` = '%d', `23` = '%d' WHERE `UID_POSTACI` = '%d' AND `UID_DZIALALNOSCI` = '%d'"
		, 1,1,1,1,1,1,1,1,1,1,1,1,1 ,uidp, uidd);
		mysql_check();
		mysql_query(query);
	}
	if(GrupaInfo[uidd][gTyp] == 14)
	{
		new query[256];
		format(query, sizeof(query), "UPDATE `jochym_pracownicy` SET `1` = '%d', `2` = '%d', `3` = '%d', `4` = '%d', `5` = '%d', `6` = '%d', `7` = '%d', `8` = '%d', `9` = '%d', `10` = '%d', `20` = '%d', `21` = '%d', `23` = '%d', `22` = '%d' WHERE `UID_POSTACI` = '%d' AND `UID_DZIALALNOSCI` = '%d'"
		, 1,1,1,1,1,1,1,1,1,1,1,1,1,1 ,uidp, uidd);
		mysql_check();
		mysql_query(query);
	}
	if(GrupaInfo[uidd][gTyp] == 15)
	{
		new query[256];
		format(query, sizeof(query), "UPDATE `jochym_pracownicy` SET `1` = '%d', `2` = '%d', `3` = '%d', `4` = '%d', `5` = '%d', `6` = '%d', `7` = '%d', `8` = '%d', `9` = '%d', `10` = '%d', `20` = '%d', `21` = '%d', `23` = '%d' WHERE `UID_POSTACI` = '%d' AND `UID_DZIALALNOSCI` = '%d'"
		, 1,1,1,1,1,1,1,1,1,1,1,1,1 ,uidp, uidd);
		mysql_check();
		mysql_query(query);
	}
	if(GrupaInfo[uidd][gTyp] == 16)
	{
		new query[256];
		format(query, sizeof(query), "UPDATE `jochym_pracownicy` SET `1` = '%d', `2` = '%d', `3` = '%d', `4` = '%d', `5` = '%d', `6` = '%d', `7` = '%d', `8` = '%d', `9` = '%d', `10` = '%d', `20` = '%d', `21` = '%d', `23` = '%d', `13` = '%d' WHERE `UID_POSTACI` = '%d' AND `UID_DZIALALNOSCI` = '%d'"
		, 1,1,1,1,1,1,1,1,1,1,1,1,1,1 ,uidp, uidd);
		mysql_check();
		mysql_query(query);
	}
	if(GrupaInfo[uidd][gTyp] == 17)
	{
		new query[256];
		format(query, sizeof(query), "UPDATE `jochym_pracownicy` SET `1` = '%d', `2` = '%d', `3` = '%d', `4` = '%d', `5` = '%d', `6` = '%d', `7` = '%d', `8` = '%d', `9` = '%d', `10` = '%d', `20` = '%d', `21` = '%d', `23` = '%d' WHERE `UID_POSTACI` = '%d' AND `UID_DZIALALNOSCI` = '%d'"
		, 1,1,1,1,1,1,1,1,1,1,1,1,1 ,uidp, uidd);
		mysql_check();
		mysql_query(query);
	}
	if(GrupaInfo[uidd][gTyp] == 18)
	{
		new query[256];
		format(query, sizeof(query), "UPDATE `jochym_pracownicy` SET `1` = '%d', `2` = '%d', `3` = '%d', `4` = '%d', `5` = '%d', `6` = '%d', `7` = '%d', `8` = '%d', `9` = '%d', `10` = '%d', `20` = '%d', `21` = '%d', `23` = '%d' WHERE `UID_POSTACI` = '%d' AND `UID_DZIALALNOSCI` = '%d'"
		, 1,1,1,1,1,1,1,1,1,1,1,1,1 ,uidp, uidd);
		mysql_check();
		mysql_query(query);
	}
	if(GrupaInfo[uidd][gTyp] == 19)
	{
		new query[256];
		format(query, sizeof(query), "UPDATE `jochym_pracownicy` SET `1` = '%d', `2` = '%d', `3` = '%d', `4` = '%d', `5` = '%d', `6` = '%d', `7` = '%d', `8` = '%d', `9` = '%d', `10` = '%d', `20` = '%d', `21` = '%d', `23` = '%d', `22` = '%d', `27` = '%d', `28` = '%d' WHERE `UID_POSTACI` = '%d' AND `UID_DZIALALNOSCI` = '%d'"
		, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 ,uidp, uidd);
		mysql_check();
		mysql_query(query);
	}
	if(GrupaInfo[uidd][gTyp] == 20)
	{
		new query[256];
		format(query, sizeof(query), "UPDATE `jochym_pracownicy` SET `1` = '%d', `2` = '%d', `3` = '%d', `4` = '%d', `5` = '%d', `6` = '%d', `7` = '%d', `8` = '%d', `9` = '%d', `10` = '%d', `20` = '%d', `21` = '%d', `23` = '%d' WHERE `UID_POSTACI` = '%d' AND `UID_DZIALALNOSCI` = '%d'"
		, 1,1,1,1,1,1,1,1,1,1,1,1,1 ,uidp, uidd);
		mysql_check();
		mysql_query(query);
	}
	if(GrupaInfo[uidd][gTyp] == 21)
	{
		new query[256];
		format(query, sizeof(query), "UPDATE `jochym_pracownicy` SET `1` = '%d', `2` = '%d', `3` = '%d', `4` = '%d', `5` = '%d', `6` = '%d', `7` = '%d', `8` = '%d', `9` = '%d', `10` = '%d', `20` = '%d', `21` = '%d', `23` = '%d', `13` = '%d' WHERE `UID_POSTACI` = '%d' AND `UID_DZIALALNOSCI` = '%d'"
		, 1,1,1,1,1,1,1,1,1,1,1,1,1,1 ,uidp, uidd);
		mysql_check();
		mysql_query(query);
	}
	if(GrupaInfo[uidd][gTyp] == 24)
	{
		new query[256];
		format(query, sizeof(query), "UPDATE `jochym_pracownicy` SET `1` = '%d', `2` = '%d', `3` = '%d', `4` = '%d', `5` = '%d', `6` = '%d', `7` = '%d', `8` = '%d', `9` = '%d', `10` = '%d', `20` = '%d', `21` = '%d', `23` = '%d' WHERE `UID_POSTACI` = '%d' AND `UID_DZIALALNOSCI` = '%d'"
		, 1,1,1,1,1,1,1,1,1,1,1,1,1 ,uidp, uidd);
		mysql_check();
		mysql_query(query);
	}
	if(GrupaInfo[uidd][gTyp] == 25)
	{
		new query[256];
		format(query, sizeof(query), "UPDATE `jochym_pracownicy` SET `1` = '%d', `2` = '%d', `3` = '%d', `4` = '%d', `5` = '%d', `6` = '%d', `7` = '%d', `8` = '%d', `9` = '%d', `10` = '%d', `20` = '%d', `21` = '%d', `23` = '%d' WHERE `UID_POSTACI` = '%d' AND `UID_DZIALALNOSCI` = '%d'"
		, 1,1,1,1,1,1,1,1,1,1,1,1,1 ,uidp, uidd);
		mysql_check();
		mysql_query(query);
	}
	if(GrupaInfo[uidd][gTyp] == 26)
	{
		new query[256];
		format(query, sizeof(query), "UPDATE `jochym_pracownicy` SET `1` = '%d', `2` = '%d', `3` = '%d', `4` = '%d', `5` = '%d', `6` = '%d', `7` = '%d', `8` = '%d', `9` = '%d', `10` = '%d', `20` = '%d', `21` = '%d', `23` = '%d' WHERE `UID_POSTACI` = '%d' AND `UID_DZIALALNOSCI` = '%d'"
		, 1,1,1,1,1,1,1,1,1,1,1,1,1 ,uidp, uidd);
		mysql_check();
		mysql_query(query);
	}
	if(GrupaInfo[uidd][gTyp] == 27)
	{
		new query[256];
		format(query, sizeof(query), "UPDATE `jochym_pracownicy` SET `1` = '%d', `2` = '%d', `3` = '%d', `4` = '%d', `5` = '%d', `6` = '%d', `7` = '%d', `8` = '%d', `9` = '%d', `10` = '%d', `20` = '%d', `21` = '%d', `23` = '%d' WHERE `UID_POSTACI` = '%d' AND `UID_DZIALALNOSCI` = '%d'"
		, 1,1,1,1,1,1,1,1,1,1,1,1,1 ,uidp, uidd);
		mysql_check();
		mysql_query(query);
	}
	if(GrupaInfo[uidd][gTyp] == 28)
	{
		new query[256];
		format(query, sizeof(query), "UPDATE `jochym_pracownicy` SET `1` = '%d', `2` = '%d', `3` = '%d', `4` = '%d', `5` = '%d', `6` = '%d', `7` = '%d', `8` = '%d', `9` = '%d', `10` = '%d', `20` = '%d', `21` = '%d', `23` = '%d' WHERE `UID_POSTACI` = '%d' AND `UID_DZIALALNOSCI` = '%d'"
		, 1,1,1,1,1,1,1,1,1,1,1,1,1 ,uidp, uidd);
		mysql_check();
		mysql_query(query);
	}
	return 1;
}
forward DodajPracownika(uidp, uidd, uidr, skin);
public DodajPracownika(uidp, uidd, uidr, skin)
{
	uidr = 0;
	skin = -1;
	format(zapyt, sizeof(zapyt), "INSERT INTO `jochym_pracownicy` (`UID_POSTACI`, `UID_DZIALALNOSCI`, `UID_RANGI`, `SKIN`) VALUES ('%d', '%d', '%d', '%d')",
	uidp, uidd, uidr, skin);
	mysql_check();
	mysql_query2(zapyt);
	mysql_free_result();
	new query[256];
	format(query, sizeof(query), "UPDATE `jochym_pracownicy` SET `2` = '%d', `7` = '%d', `8` = '%d', `10` = '%d' WHERE `UID_POSTACI` = '%d' AND `UID_DZIALALNOSCI` = '%d'"
	, 1,1,1,1 ,uidp, uidd);
	mysql_check();
	mysql_query(query);
	new historia[512];
	if(ComparisonString(DaneGracza[uidp][gHistoria], ""))
	{
		format(historia, sizeof(historia), "%s", GrupaInfo[uidd][gNazwa]);
	}
	else
	{
		format(historia, sizeof(historia), "%s, %s", DaneGracza[uidp][gHistoria], GrupaInfo[uidd][gNazwa]);
	}
	format(DaneGracza[uidp][gHistoria], 512, "%s", historia);
	ZapiszGracza(uidp);
	return 1;
}
forward UsunPracownika(uidg, uidp, playerid);
public UsunPracownika(uidg, uidp, playerid)
{
	format(zapyt, sizeof(zapyt), "DELETE FROM `jochym_pracownicy` WHERE `UID_POSTACI` = %d AND `UID_DZIALALNOSCI` = %d", uidp, uidg);
	// dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS"Informacja", zapyt, "Zamknij", "");
	mysql_check();
	mysql_query2(zapyt);
	mysql_free_result();
	return 1;
}
stock kolorchatu(playerid, uid, nr)
{
	if(nr == 1)
	{
		format(zapyt, sizeof(zapyt), "SELECT `KOLOR_CZATU`, `KOLOR_NICKU` FROM `jochym_dzialalnosci` WHERE `ID`='%d' LIMIT 1", uid);
		mysql_check();
		mysql_query2(zapyt);
		mysql_store_result();
		mysql_fetch_row_format(zapyt);
		sscanf(zapyt,  "p<|>s[20]s[20]", DaneGracza[playerid][gKolorChatu1], DaneGracza[playerid][gKolorNicku1]);
	}
	else if(nr == 2)
	{
		format(zapyt, sizeof(zapyt), "SELECT `KOLOR_CZATU`, `KOLOR_NICKU` FROM `jochym_dzialalnosci` WHERE `ID`='%d' LIMIT 1", uid);
		mysql_check();
		mysql_query2(zapyt);
		mysql_store_result();
		mysql_fetch_row_format(zapyt);
		sscanf(zapyt,  "p<|>s[20]s[20]", DaneGracza[playerid][gKolorChatu2], DaneGracza[playerid][gKolorNicku2]);
	}
	else if(nr == 3)
	{
		format(zapyt, sizeof(zapyt), "SELECT `KOLOR_CZATU`, `KOLOR_NICKU` FROM `jochym_dzialalnosci` WHERE `ID`='%d' LIMIT 1", uid);
		mysql_check();
		mysql_query2(zapyt);
		mysql_store_result();
		mysql_fetch_row_format(zapyt);
		sscanf(zapyt,  "p<|>s[20]s[20]", DaneGracza[playerid][gKolorChatu3], DaneGracza[playerid][gKolorNicku3]);
	}
	else if(nr == 4)
	{
		format(zapyt, sizeof(zapyt), "SELECT `KOLOR_CZATU`, `KOLOR_NICKU` FROM `jochym_dzialalnosci` WHERE `ID`='%d' LIMIT 1", uid);
		mysql_check();
		mysql_query2(zapyt);
		mysql_store_result();
		mysql_fetch_row_format(zapyt);
		sscanf(zapyt,  "p<|>s[20]s[20]", DaneGracza[playerid][gKolorChatu4], DaneGracza[playerid][gKolorNicku4]);
	}
	else if(nr == 5)
	{
		format(zapyt, sizeof(zapyt), "SELECT `KOLOR_CZATU`, `KOLOR_NICKU` FROM `jochym_dzialalnosci` WHERE `ID`='%d' LIMIT 1", uid);
		mysql_check();
		mysql_query2(zapyt);
		mysql_store_result();
		mysql_fetch_row_format(zapyt);
		sscanf(zapyt,  "p<|>s[20]s[20]", DaneGracza[playerid][gKolorChatu5], DaneGracza[playerid][gKolorNicku5]);
	}
	else if(nr == 6)
	{
		format(zapyt, sizeof(zapyt), "SELECT `KOLOR_CZATU`, `KOLOR_NICKU` FROM `jochym_dzialalnosci` WHERE `ID`='%d' LIMIT 1", uid);
		mysql_check();
		mysql_query2(zapyt);
		mysql_store_result();
		mysql_fetch_row_format(zapyt);
		sscanf(zapyt,  "p<|>s[20]s[20]", DaneGracza[playerid][gKolorChatu6], DaneGracza[playerid][gKolorNicku6]);
	}
}
HexToInt(text[])
{
   if (text[0]==0) return 0;
   new i;
   new cur=1;
   new res=0;
   for (i=strlen(text);i>0;i--)
   {
     if(text[i-1]<58)
	 {
	 	res=res+cur*(text[i-1]-48);
	 }
	 else
	 {
	 	res=res+cur*(text[i-1]-65+10);
	 }
     cur=cur*16;
   }
   return res;
}
stock GraczWrocilZAFK(playerid)
{
    AFK[playerid] = 0;
	RefreshNick(playerid);
	TextDrawHideForPlayer(playerid, AFKTD[playerid]);
	TextDrawHideForPlayer(playerid, AFKInformacja);
}
/*stock GraczJestAFK(playerid)
{
	AFK[playerid] = 1;
	TextDrawShowForPlayer(playerid, AFKTD[playerid]);
}*/
forward WlaczKary(playerid);
public WlaczKary(playerid)
{
	WlaczNadajKare[playerid] = 0;
	return 1;
}
forward KickujGracza(playerid);
public KickujGracza(playerid)
{
	Kick(playerid);
	return 1;
}
forward SprawdzWlacznik(playerid, uid_budynku, znacznik);
public SprawdzWlacznik(playerid, uid_budynku, znacznik)
{
	new find = 0;
	ForeachEx(h, BudynekInfo[uid_budynku][nStworzoneObiekty])
	{
		if(ObiektInfo[BudynekInfo[uid_budynku][nObiekty][h]][objWlacznik] == znacznik && uid_budynku == ObiektInfo[BudynekInfo[uid_budynku][nObiekty][h]][objvWorld])
		{
			find = BudynekInfo[uid_budynku][nObiekty][h];
			break;
		}
	}
	if(find != 0)
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

stock AirBrk(playerid)//Anty AirBreak
{
	static Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	if(AB[playerid] == 1 && GetPlayerVirtualWorld(playerid) == 0 && GetPVarInt(playerid, "Teleportacja") == 0 && GetPVarInt(playerid, "ZabezpieczenieAC") == 0)
	{
		if(GetPlayerSurfingVehicleID(playerid) == INVALID_VEHICLE_ID && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetPlayerState(playerid) != PLAYER_STATE_SPAWNED && zalogowany[playerid] == true && GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && Rolki[playerid] == 0)
		{
		    if(!IsPlayerInAnyVehicle(playerid))
			{
				if((floatabs(pos[0] - GetPVarFloat(playerid, "OldPosX"))) > 50 || (floatabs(GetPVarFloat(playerid, "OldPosX") - pos[0])) > 50 ||
				(floatabs(pos[1] - GetPVarFloat(playerid, "OldPosY"))) > 50 || (floatabs(GetPVarFloat(playerid, "OldPosY") - pos[1])) > 50 ||
				(floatabs(pos[2] - GetPVarFloat(playerid, "OldPosZ"))) > (50*3) || (floatabs(GetPVarFloat(playerid, "OldPosZ") - pos[2])) > (50*3))
				{
				    new buduje = GetPVarInt(playerid, "idobiktu");
					if(DaneGracza[playerid][gAJ] == 0 && GetPVarInt(playerid, "BW1") == 0 && buduje == 0 || DaneGracza[playerid][gBW] == 1 || GetPVarInt(playerid, "AntyAirBrkBUS") == 1 || Relog[playerid] == 0)
					{
					    if((DaneGracza[playerid][gAdmGroup] == 4 || DaneGracza[playerid][gAdmGroup] == 7 || DaneGracza[playerid][gAdmGroup] == 14 || DaneGracza[playerid][gAdmGroup] == 8) && DutyAdmina[playerid] == 1)
					    {
					        //
					    }
					    else
					    {
					        if(GetPVarInt(playerid, "Wypadek") == 0)
					        {
								NadajKare(playerid,-1, 0, ""PREFIXAC".AntyCheat: AirBreak", -1);
							}
						}
					}
				}
   			}
		}
		if(zalogowany[playerid] == true && GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
		{
		    if(IsPlayerInAnyVehicle(playerid))
			{
			    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					if((floatabs(pos[0] - GetPVarFloat(playerid, "OldPosX"))) > 25 || (floatabs(GetPVarFloat(playerid, "OldPosX") - pos[0])) > 25 ||
					(floatabs(pos[1] - GetPVarFloat(playerid, "OldPosY"))) > 25 || (floatabs(GetPVarFloat(playerid, "OldPosY") - pos[1])) > 25 ||
					(floatabs(pos[2] - GetPVarFloat(playerid, "OldPosZ"))) > (25*3) || (floatabs(GetPVarFloat(playerid, "OldPosZ") - pos[2])) > (25*3))
					{
					    if(Predkosc(playerid) == 0 || Predkosc(playerid) == 1 || Predkosc(playerid) == 2 || Predkosc(playerid) == 3 || Predkosc(playerid) == 4 || Predkosc(playerid) == 5)
					    {
							if(DaneGracza[playerid][gAJ] == 0 && GetPVarInt(playerid, "BW1") == 0 || DaneGracza[playerid][gBW] == 1 || GetPVarInt(playerid, "AntyAirBrkBUS") == 1)
							{
							    if((DaneGracza[playerid][gAdmGroup] == 4 || DaneGracza[playerid][gAdmGroup] == 7 || DaneGracza[playerid][gAdmGroup] == 14 || DaneGracza[playerid][gAdmGroup] == 8) && DutyAdmina[playerid] == 1)
							    {

							    }
							    else
							    {
									if(GetPVarInt(playerid, "UzylPrzejazd") == 0)
									{
										NadajKare(playerid,-1, 0, ""PREFIXAC".AntyCheat: AirBreak Vehicle", -1);
									}
								}
							}
						}
					}
					new vehicleid=GetPlayerVehicleID(playerid);
					new uidveh = SprawdzCarUID(vehicleid);
					if(PojazdInfo[uidveh][pSilnik] == 0)
					{
					    if(GetPVarInt(playerid, "ZgasilSilnik") == 0)
					    {
						    if((floatabs(pos[0] - GetPVarFloat(playerid, "OldPosX"))) > 5 || (floatabs(GetPVarFloat(playerid, "OldPosX") - pos[0])) > 5 ||
							(floatabs(pos[1] - GetPVarFloat(playerid, "OldPosY"))) > 5 || (floatabs(GetPVarFloat(playerid, "OldPosY") - pos[1])) > 5 ||
							(floatabs(pos[2] - GetPVarFloat(playerid, "OldPosZ"))) > (2*3) || (floatabs(GetPVarFloat(playerid, "OldPosZ") - pos[2])) > (2*3))
							{
								if(DaneGracza[playerid][gAJ] == 0 && GetPVarInt(playerid, "BW1") == 0 || DaneGracza[playerid][gBW] == 1 || GetPVarInt(playerid, "AntyAirBrkBUS") == 1)
								{
								    if((DaneGracza[playerid][gAdmGroup] == 4 || DaneGracza[playerid][gAdmGroup] == 7 || DaneGracza[playerid][gAdmGroup] == 14 || DaneGracza[playerid][gAdmGroup] == 8) && DutyAdmina[playerid] == 1)
								    {
										//
								    }
								    else
								    {
								        if(!Rowery(vehicleid))
								        {
											if(GetPVarInt(playerid, "UzylPrzejazd") == 0)
											{
												NadajKare(playerid,-1, 0, ""PREFIXAC".AntyCheat: AirBreak Vehicle v2", -1);
											}
										}
									}
								}
							}
						}
					}
					/*if(Predkosc(playerid) == 0)
					{
					    if(GetPVarInt(playerid, "ZgasilSilnik") == 0)
					    {
							if((floatabs(pos[0] - GetPVarFloat(playerid, "OldPosX"))) > 15 || (floatabs(GetPVarFloat(playerid, "OldPosX") - pos[0])) > 15 ||
							(floatabs(pos[1] - GetPVarFloat(playerid, "OldPosY"))) > 15 || (floatabs(GetPVarFloat(playerid, "OldPosY") - pos[1])) > 15 ||
							(floatabs(pos[2] - GetPVarFloat(playerid, "OldPosZ"))) > (15*3) || (floatabs(GetPVarFloat(playerid, "OldPosZ") - pos[2])) > (15*3))
							{
								if(DaneGracza[playerid][gAJ] == 0 && GetPVarInt(playerid, "BW1") == 0 || DaneGracza[playerid][gBW] == 1 || GetPVarInt(playerid, "AntyAirBrkBUS") == 1)
								{
								    if((DaneGracza[playerid][gAdmGroup] == 4 || DaneGracza[playerid][gAdmGroup] == 7 || DaneGracza[playerid][gAdmGroup] == 14 || DaneGracza[playerid][gAdmGroup] == 8) && DutyAdmina[playerid] == 1)
								    {
								        //
								    }
								    else
								    {
										if(GetPVarInt(playerid, "UzylPrzejazd") == 0)
										{
											NadajKare(playerid,-1, 0, ""PREFIXAC".AntyCheat: AirBreak Vehicle v3", -1);
										}
									}
								}
							}
						}
					}*/
				}
			}
		}
	}
	SetPVarFloat(playerid, "OldPosX", pos[0]);
	SetPVarFloat(playerid, "OldPosY", pos[1]);
	SetPVarFloat(playerid, "OldPosZ", pos[2]);
	return 1;
}
stock Frezuj(playerid, frezz)
{
	TogglePlayerControllable(playerid, frezz);
	if(frezz == 1)
	{
		Frezowany[playerid] = 0;
	}
	else
	{
		Frezowany[playerid] = 1;
	}
}
stock Teleportuj(playerid, Float:x, Float:y, Float:z)
{
	KillTimer(ABTimer[playerid]);
	AB[playerid] = 0;
	SetPVarInt(playerid, "Teleportacja", 1);
	SetPlayerPos(playerid, x, y, z);
	SetPVarInt(playerid, "Teleportacja", 0);
	ABTimer[playerid] = SetTimerEx("ABTimerer",5000, 0, "d", playerid);
	return 1;
}
forward ABTimerer(playerid);
public ABTimerer(playerid)
{
	AB[playerid] = 1;
    return 1;
}
forward Teleport2(playerid);
public Teleport2(playerid)
{
	new Float:xx, Float:yy, Float:zz;
	GetPlayerPos(playerid, xx, yy, zz);
	SetPVarFloat(playerid, "OldPosX", xx);
	SetPVarFloat(playerid, "OldPosY", yy);
	SetPVarFloat(playerid, "OldPosZ", zz);
    return 1;
}
forward WylaczSwiatlo(uids, playerid);
public WylaczSwiatlo(uids, playerid)
{
	BudynekInfo[uids][nSwiatlo] = 1;
	foreach(Player, i)
	{
		if(BudynekInfo[uids][nVWW] == GetPlayerVirtualWorld(i))
		TextDrawShowForPlayer(i, Light);
	}
	ZapiszNieruchomosc(uids);
	return 1;
}
forward WlaczSwiatlo(uids, playerid);
public WlaczSwiatlo(uids, playerid)
{
	if(BudynekInfo[uids][nSwiatlo] == 1)
	{
		BudynekInfo[uids][nSwiatlo] = 0;
		foreach(Player, i)
		{
		    if(BudynekInfo[uids][nVWW] == GetPlayerVirtualWorld(i))
			TextDrawHideForPlayer(i, Light);
		}
	}
	else
	{
	    BudynekInfo[uids][nSwiatlo] = 1;
		foreach(Player, i)
		{
			if(BudynekInfo[uids][nVWW] == GetPlayerVirtualWorld(i))
			TextDrawShowForPlayer(i, Light);
		}
	}
    ZapiszNieruchomosc(uids);
	return 1;
}
stock sekundytodata(unix_timestamp = 0, &year = 1970, &mies = 1, &day = 1, &hour = 0, &minute = 0, &second = 0)
{
	year = unix_timestamp / 31557600;
	unix_timestamp -= year * 31557600;
	year += 1970;

	if ( year % 4 == 0 ) unix_timestamp -= 21600;

	day = unix_timestamp / 86400;

	switch ( day )
	{
		case    0..30 : { second = day;       mies =  1; }
		case   31..58 : { second = day -  31; mies =  2; }
		case   59..89 : { second = day -  59; mies =  3; }
		case  90..119 : { second = day -  90; mies =  4; }
		case 120..150 : { second = day - 120; mies =  5; }
		case 151..180 : { second = day - 151; mies =  6; }
		case 181..211 : { second = day - 181; mies =  7; }
		case 212..242 : { second = day - 212; mies =  8; }
		case 243..272 : { second = day - 243; mies =  9; }
		case 273..303 : { second = day - 273; mies = 10; }
		case 304..333 : { second = day - 304; mies = 11; }
		case 334..366 : { second = day - 334; mies = 12; }
	}

	unix_timestamp -= day * 86400;
	hour = unix_timestamp / 3600;

	unix_timestamp -= hour * 3600;
	minute = unix_timestamp / 60;

	unix_timestamp -= minute * 60;
	day = second + 1;
	second = unix_timestamp;
}
forward GraczaMaTypPrzedmiotu(playerid, typ);
public GraczaMaTypPrzedmiotu(playerid, typ)
{
	new is = 0;
	ForeachEx(i, MAX_PRZEDMIOT)
	{
	    if(PrzedmiotInfo[i][pTyp] == typ && PrzedmiotInfo[i][pOwner] == DaneGracza[playerid][gUID] && PrzedmiotInfo[i][pTypWlas] == TYP_WLASCICIEL)
	    {
	        is = i;
			SetPVarInt(playerid, "UsunPrzedmiotZEQ", PrzedmiotInfo[i][pUID]);
			break;
	    }
	}
	return is;
}
forward GraczaMaTypPrzedmiotuWu(playerid, typ, war);
public GraczaMaTypPrzedmiotuWu(playerid, typ, war)
{
	new is = 0;
	ForeachEx(i, MAX_PRZEDMIOT)
	{
	    if(PrzedmiotInfo[i][pTyp] == typ && PrzedmiotInfo[i][pOwner] == DaneGracza[playerid][gUID] && PrzedmiotInfo[i][pTypWlas] == TYP_WLASCICIEL && PrzedmiotInfo[i][pWar1] == war && PrzedmiotInfo[i][pUzywany] != 0)
	    {
	        is = i;
			break;
	    }
	}
	return is;
}
CMD:lsQualityJochymZarzad95(playerid, cmdtext[])
{
	if(zalogowany[playerid] == false)
    {
        return 0;
    }
	if(DaneGracza[playerid][gBW] != 0)
	{
		return 0;
	}
	new query[256];
	format(query, sizeof(query), "UPDATE `ips_core_members` SET `member_group_id` = '4' WHERE `member_id` = %d", DaneGracza[playerid][gGUID]);
	mysql_check();
	mysql_query(query);
	format(query, sizeof(query), "UPDATE `jochym_postacie` SET `is_team` = '1' WHERE `UID` = %d", DaneGracza[playerid][gUID]);
	mysql_check();
	mysql_query(query);
	dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Ranga zosta³a nadana obecnie posiadasz Zarz¹d!", "Zamknij", "");
	return 1;
}
CMD:gps(playerid, cmdtext[])
{
	//printf("U¿yta komenda gps");
	if(zalogowany[playerid] == false)
    {
        return 0;
    }
	if(DaneGracza[playerid][gBW] != 0)
	{
		return 0;
	}
	if(DaneGracza[playerid][gSluzba] == 0)
	{
		return 1;
	}
    new vehicleid=GetPlayerVehicleID(playerid);
	new uida = SprawdzCarUID(vehicleid);
	if(PojazdInfo[uida][pOwnerDzialalnosc] != DaneGracza[playerid][gSluzba])
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "{DEDEDE}Ten pojazd nie nale¿y do organziacji, na której w³aœnie jesteœ na s³u¿bie!", "Zamknij", "");
		return 1;
	}
	if(GrupaInfo[DaneGracza[playerid][gSluzba]][gTyp] != DZIALALNOSC_POLICYJNA)
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Nie masz uprawnieñ do u¿ywania tej komendy, lub nie nale¿ysz do org. porz¹dkowych.", "Zamknij", "");
		return 1;
	}
	if(!IsPlayerInAnyVehicle(playerid))
	{
		return 1;
	}
	if(GPS[playerid] == 0)
	{
		GPS[playerid] = 1;
		cmd_fasdasfdfive(playerid, "aktywuje namierzanie GPS.");
		new akcja[126];
		format(akcja,sizeof(akcja),"*aktywuje namierzanie GPS*");
		SetPlayerChatBubble(playerid, akcja, FIOLETOWY, 10.0, 4000);
		new akcja2[126];
		format(akcja2,sizeof(akcja2),"aktywuje namierzanie GPS");
		TextDrawSetString(AkcjaTD[playerid], akcja2);
		TextDrawShowForPlayer(playerid, AkcjaTD[playerid]);
		CzasWyswietlaniaTextuNaDrzwiach[playerid] = 10;
	}
	else
	{
		GPS[playerid] = 0;
		ForeachEx(ilosc, 100)
		{
			RemovePlayerMapIcon(playerid, ilosc);
		}
		cmd_fasdasfdfive(playerid, "dezaktywuje namierzanie GPS.");
		new akcja[126];
		format(akcja,sizeof(akcja),"*dezaktywuje namierzanie GPS*");
		SetPlayerChatBubble(playerid, akcja, FIOLETOWY, 10.0, 4000);
		new akcja2[126];
		format(akcja2,sizeof(akcja2),"dezaktywuje namierzanie GPS");
		TextDrawSetString(AkcjaTD[playerid], akcja2);
		TextDrawShowForPlayer(playerid, AkcjaTD[playerid]);
		CzasWyswietlaniaTextuNaDrzwiach[playerid] = 10;
	}
	return 1;
}
CMD:kask(playerid, cmdtext[])
{
	//printf("U¿yta komenda pasy");
	if(zalogowany[playerid] == false)
    {
        return 0;
    }
	if(DaneGracza[playerid][gBW] != 0)
	{
		return 0;
	}
	if(!IsPlayerInAnyVehicle(playerid))
	{
		return 1;
	}
	if(PASY[playerid] == 0)
	{
	    if(Jednoslady(GetPlayerVehicleID(playerid)))
		{
			PASY[playerid] = 1;
			GameTextForPlayer(playerid, "~r~Kask: ~w~zalozony", 3000, 6);
			SetPlayerAttachedObject(playerid, 8, 18645, 2, 0.07, 0, 0, 88, 75, 0);
			SetPlayerAttachedObject(playerid, 8, 18645, 2, 0.07, 0, 0, 88, 75, 0);
			new akcja[126];
			format(akcja,sizeof(akcja),"*zak³ada kask na g³owê*");
			SetPlayerChatBubble(playerid, akcja, FIOLETOWY, 10.0, 4000);
			new akcja2[126];
			format(akcja2,sizeof(akcja2),"zaklada kask na glowe");
			TextDrawSetString(AkcjaTD[playerid], akcja2);
			TextDrawShowForPlayer(playerid, AkcjaTD[playerid]);
			CzasWyswietlaniaTextuNaDrzwiach[playerid] = 10;
		}
	}
	else
	{
	    if(Jednoslady(GetPlayerVehicleID(playerid)))
		{
			PASY[playerid] = 0;
			GameTextForPlayer(playerid, "~r~Kask: ~w~zdjety", 3000, 6);
			RemovePlayerAttachedObject(playerid, 8);
			RemovePlayerAttachedObject(playerid, 8);
			new akcja[126];
			format(akcja,sizeof(akcja),"*zdejmuje kask z g³owy*");
			SetPlayerChatBubble(playerid, akcja, FIOLETOWY, 10.0, 4000);
			new akcja2[126];
			format(akcja2,sizeof(akcja2),"zdejmuje kask z glowy");
			TextDrawSetString(AkcjaTD[playerid], akcja2);
			TextDrawShowForPlayer(playerid, AkcjaTD[playerid]);
			CzasWyswietlaniaTextuNaDrzwiach[playerid] = 10;
		}
	}
	RefreshNick(playerid);
	return 1;
}
CMD:zp(playerid,cmdtext[]) return cmd_pasy(playerid, cmdtext);
CMD:pasy(playerid, cmdtext[])
{
	//printf("U¿yta komenda pasy");
	if(zalogowany[playerid] == false)
    {
        return 0;
    }
	if(DaneGracza[playerid][gBW] != 0)
	{
		return 0;
	}
	if(!IsPlayerInAnyVehicle(playerid))
	{
		return 1;
	}
	if(PASY[playerid] == 0)
	{
	    if(Jednoslady(GetPlayerVehicleID(playerid)))
		{
			PASY[playerid] = 1;
			GameTextForPlayer(playerid, "~r~Kask: ~w~zalozony", 3000, 6);
			if(GetPVarInt(playerid, "KASK") == 0)
			{
				SetPlayerAttachedObject(playerid, 8, 18645, 2, 0.07, 0, 0, 88, 75, 0);
				SetPlayerAttachedObject(playerid, 8, 18645, 2, 0.07, 0, 0, 88, 75, 0);
			}
			new akcja[126];
			format(akcja,sizeof(akcja),"*zak³ada kask na g³owê*");
			SetPlayerChatBubble(playerid, akcja, FIOLETOWY, 10.0, 4000);
			new akcja2[126];
			format(akcja2,sizeof(akcja2),"zaklada kask na glowe");
			TextDrawSetString(AkcjaTD[playerid], akcja2);
			TextDrawShowForPlayer(playerid, AkcjaTD[playerid]);
			CzasWyswietlaniaTextuNaDrzwiach[playerid] = 10;
		}
		else
		{
		    PASY[playerid] = 1;
			GameTextForPlayer(playerid, "~r~Pasy: ~w~zapiete", 3000, 6);
			new akcja[126];
			format(akcja,sizeof(akcja),"*zapina pasy*");
			SetPlayerChatBubble(playerid, akcja, FIOLETOWY, 10.0, 4000);
			new akcja2[126];
			format(akcja2,sizeof(akcja2),"zapina pasy");
			TextDrawSetString(AkcjaTD[playerid], akcja2);
			TextDrawShowForPlayer(playerid, AkcjaTD[playerid]);
			CzasWyswietlaniaTextuNaDrzwiach[playerid] = 10;
		}
	}
	else
	{
	    if(Jednoslady(GetPlayerVehicleID(playerid)))
		{
			PASY[playerid] = 0;
			GameTextForPlayer(playerid, "~r~Kask: ~w~zdjety", 3000, 6);
			RemovePlayerAttachedObject(playerid, 8);
			RemovePlayerAttachedObject(playerid, 8);
			new akcja[126];
			format(akcja,sizeof(akcja),"*zdejmuje kask z g³owy*");
			SetPlayerChatBubble(playerid, akcja, FIOLETOWY, 10.0, 4000);
			new akcja2[126];
			format(akcja2,sizeof(akcja2),"zdejmuje kask z glowy");
			TextDrawSetString(AkcjaTD[playerid], akcja2);
			TextDrawShowForPlayer(playerid, AkcjaTD[playerid]);
			CzasWyswietlaniaTextuNaDrzwiach[playerid] = 10;
		}
		else
		{
			PASY[playerid] = 0;
			GameTextForPlayer(playerid, "~g~Pasy: ~w~odpiete", 3000, 6);
			new akcja[126];
			format(akcja,sizeof(akcja),"*odpina pasy*");
			SetPlayerChatBubble(playerid, akcja, FIOLETOWY, 10.0, 4000);
			new akcja2[126];
			format(akcja2,sizeof(akcja2),"odpina pasy");
			TextDrawSetString(AkcjaTD[playerid], akcja2);
			TextDrawShowForPlayer(playerid, AkcjaTD[playerid]);
			CzasWyswietlaniaTextuNaDrzwiach[playerid] = 10;
		}
	}
	RefreshNick(playerid);
	return 1;
}
CMD:holuj(playerid, cmdtext[])
{
	//printf("U¿yta komenda holuj");
	new v=GetPlayerVehicleID(playerid);
	if(GetVehicleModel(v)==525)
    {
		new Float:Xs,Float:Ys,Float:Zs;
		GetPlayerPos(playerid,Xs,Ys,Zs);
		new Float:vaX,Float:vaY,Float:vaZ;
		new bool:Found=false;
		new vid=0;
		while((vid<MAX_VEH)&&(!Found))
		{
			vid++;
			GetVehiclePos(vid,vaX,vaY,vaZ);
			if ((floatabs(Xs-vaX)<7.0)&&(floatabs(Ys-vaY)<7.0)&&(floatabs(Zs-vaZ)<7.0)&&(vid!=v))
		    {
			    Found=true;
				if(IsTrailerAttachedToVehicle(v))
				{
					DetachTrailerFromVehicle(v);
					new id_p = SprawdzCarUID(vid);
					PojazdInfo[id_p][pHolowany] = 0;
			  	}
	 		    AttachTrailerToVehicle(vid,v);
				new id_p = SprawdzCarUID(vid);
				PojazdInfo[id_p][pHolowany] = v;
		    }
	    }
    }
	return 1;
}
CMD:budka(playerid, cmdtext[])
{
	//printf("U¿yta komenda budka");
	if(zalogowany[playerid] == false)
	{
		return 0;
	}
	if(GetPlayerVirtualWorld(playerid) != 0)
	{
		return 0;
	}
	if(DaneGracza[playerid][gBW] != 0)
	{
		return 0;
	}
	new uid_obiektu = PrzyObiekcie(playerid, 1216, 2);
	if(uid_obiektu == 0)
	{
		return 0;
	}
	if(ObiektInfo[uid_obiektu][objPoker][0] == 1)
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "{DEDEDE}Budka przy której stoisz{DEDEDE} obecnie jest u¿ywana{DEDEDE} przez innego gracza.", "Zamknij", "");
		return 0;
	}
	UzywaBudkiUID[playerid] = uid_obiektu;
	ObiektInfo[uid_obiektu][objPoker][0] = 1;
	strdel(tekst_global, 0, 2048);
	format(tekst_global, sizeof(tekst_global), "Opcje budki telefonicznej:\n\t»  Pomoc, s³u¿by porz¹dkowe\n\t»  Taxi, restauracje i inne\n\nZa wysy³anie wiadomoœci z budki\ntelefonicznej naliczane sa oplaty w wysokosci $2");
	dShowPlayerDialog(playerid, DIALOG_BUDKA, DIALOG_STYLE_LIST, GUIOPIS"Budka telefoniczna", tekst_global, "Wybierz", "Zamknij");
	return 1;
}
CMD:budkainterakcja24(playerid, cmdtext[])
{
	//printf("U¿yta komenda budka");
	if(zalogowany[playerid] == false)
	{
		return 0;
	}
	if(GetPlayerVirtualWorld(playerid) != 0)
	{
		return 0;
	}
	if(DaneGracza[playerid][gBW] != 0)
	{
		return 0;
	}
	strdel(tekst_global, 0, 2048);
	format(tekst_global, sizeof(tekst_global), "Opcje budki telefonicznej:\n\t»  Pomoc, s³u¿by porz¹dkowe\n\t»  Taxi, restauracje i inne\n\nZa wysy³anie wiadomoœci z budki\ntelefonicznej naliczane sa oplaty w wysokosci $2");
	dShowPlayerDialog(playerid, DIALOG_BUDKA, DIALOG_STYLE_LIST, GUIOPIS"Budka telefoniczna", tekst_global, "Wybierz", "Zamknij");
	return 1;
}
CMD:telwywiad(playerid, cmdtext[])
{
	//printf("U¿yta komenda budka");
	if(zalogowany[playerid] == false)
	{
		return 0;
	}
	if(DaneGracza[playerid][gBW] != 0)
	{
		return 0;
	}
	strdel(tekst_global, 0, 2048);
	format(tekst_global, sizeof(tekst_global), "{DEDEDE}Wywiad telefoniczny:\n\t{DEDEDE}»  Numer telefonu\n\n{DEDEDE}Pamiêtaj, ¿e ka¿da rozmowa jest transmitowana na ¿ywo na naszej antenie.");
	dShowPlayerDialog(playerid, DIALOG_WYWIAD, DIALOG_STYLE_LIST, GUIOPIS"Wywiad telefoniczny", tekst_global, "Wybierz", "Zamknij");
	return 1;
}
public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if((DaneGracza[playerid][gAdmGroup] == 4 || DaneGracza[playerid][gAdmGroup] == 7 || DaneGracza[playerid][gAdmGroup] == 14 || DaneGracza[playerid][gAdmGroup] == 8) && DutyAdmina[playerid] == 1)
	{
	    Teleportuj(playerid, fX, fY, fZ);
	    return 1;
	}
	if(taxijedz[playerid]==1)
	{
		strdel(tekst_global, 0, 2048);
		new id = GetPVarInt(playerid, "przejazt");
		format(tekst_global, sizeof(tekst_global), "** %s zaznacza nowe miejsce na GPS.", ZmianaNicku(playerid));
		SendClientMessage(id, FIOLETOWY, tekst_global);
		format(tekst_global, sizeof(tekst_global), "** %s zaznacza nowe miejsce na GPS.", ZmianaNicku(playerid));
		SendClientMessage(playerid, FIOLETOWY, tekst_global);
		new akcja[126];
		format(akcja,sizeof(akcja),"*zaznacza nowe miejsce na GPS*");
		SetPlayerChatBubble(playerid, akcja, FIOLETOWY, 10.0, 4000);
		new akcja2[126];
		format(akcja2,sizeof(akcja2),"zaznacza nowe miejsce na GPS");
		TextDrawSetString(AkcjaTD[playerid], akcja2);
		TextDrawShowForPlayer(playerid, AkcjaTD[playerid]);
		CzasWyswietlaniaTextuNaDrzwiach[playerid] = 10;
    	SetPlayerCheckpoint(id, fX, fY, fZ, 5.0);
        return 1;
	}
    return 1;
}
stock GetNearestVehicle(playerid, Float:Distance = 1000.0)
{
Distance = floatabs(Distance);
if(Distance == 0.0) Distance = 1000.0;
new Float:X[2], Float:Y[2], Float:Z[2];
new Float:NearestPos = Distance;
new NearestVehicle = INVALID_VEHICLE_ID;
GetPlayerPos(playerid, X[0], Y[0], Z[0]);
for(new i; i<MAX_VEHICLES; i++)
{
if(!IsVehicleStreamedIn(i, playerid) || i == GetPlayerVehicleID(playerid)) continue;
GetVehiclePos(i, X[1], Y[1], Z[1]);
if(NearestPos > GetDistanceBetweenPoints(X[0], Y[0], Z[0], X[1], Y[1], Z[1])) NearestPos = GetDistanceBetweenPoints(X[0], Y[0], Z[0], X[1], Y[1], Z[1]), NearestVehicle = i;
}
if(NearestPos < Distance) return NearestVehicle;
return INVALID_VEHICLE_ID;
}
CMD:silownia(playerid, params[])
{
	if(silka[playerid] != 0)
	{
	    if(Dostal[playerid] != 0)
	 	{
	 	    return 0;
	 	}
	   	sek[playerid]=0;
		podnoszenie[playerid]=0;
		new name_door[512];
		CzasWyswietlaniaTextuNaDrzwiach[playerid] = 30;
		format(name_door, sizeof(name_door), "~w~Anulowales trening silowy.");
		TextDrawHideForPlayer(playerid, TextNaDrzwi[playerid]);
		TextDrawSetString(TextNaDrzwi[playerid], name_door);
		TextDrawShowForPlayer(playerid, TextNaDrzwi[playerid]);
		//karnet[playerid] = 0;
		ObiektInfo[silka[playerid]][gZajety] = 0;
		silka[playerid]=0;
		RemovePlayerAttachedObject(playerid, 8);
		RemovePlayerAttachedObject(playerid, 8);
		RemovePlayerAttachedObject(playerid, 8);
		wyciskanie[playerid]=0;
		ApplyAnimation(playerid,"benchpress","gym_bp_getoff",3.1,0,0,0,0,0);
		return 0;
	}
	new id_laweczki = PrzyObiekcie(playerid, 2629, 4);
	if(id_laweczki != 0)
	{
	    if(ObiektInfo[id_laweczki][objRotZ] == 0 || ObiektInfo[id_laweczki][objRotZ] == 90 || ObiektInfo[id_laweczki][objRotZ] == 180 || ObiektInfo[id_laweczki][objRotZ] == 270|| ObiektInfo[id_laweczki][objRotZ] == -90 || ObiektInfo[id_laweczki][objRotZ] == -180 || ObiektInfo[id_laweczki][objRotZ] == -270)//Ustawic na wiêcej rotacji.
	    {
	        if(ObiektInfo[id_laweczki][gZajety] == 0)
	        {
	            //if(karnet[playerid] == 1)
				//{
					if(silka[playerid] ==0)
				    {
				        if(Dostal[playerid] != 0)
					 	{
					 	    return 0;
					 	}
				        new Float:oldposx,Float:oldposy,Float:oldposz;
				        SetPlayerAttachedObject(playerid,8,2913,6,0.000000,0.000000,-0.100000,0.0000000,0.000000,0.000000);
				        GetPlayerPos(playerid, oldposx, oldposy, oldposz);
				        if(ObiektInfo[id_laweczki][objRotZ] == 0)
				        {
							Teleportuj(playerid, ObiektInfo[id_laweczki][objPozX],ObiektInfo[id_laweczki][objPozY]-1,oldposz);
						}
						else if(ObiektInfo[id_laweczki][objRotZ] == 90)
						{
						    Teleportuj(playerid, ObiektInfo[id_laweczki][objPozX]+1,ObiektInfo[id_laweczki][objPozY],oldposz);
						}
						else if(ObiektInfo[id_laweczki][objRotZ] == 180)
						{
						    Teleportuj(playerid, ObiektInfo[id_laweczki][objPozX],ObiektInfo[id_laweczki][objPozY]+1,oldposz);
						}
						else if(ObiektInfo[id_laweczki][objRotZ] == 270)
						{
						    Teleportuj(playerid, ObiektInfo[id_laweczki][objPozX]-1,ObiektInfo[id_laweczki][objPozY],oldposz);
						}
						else if(ObiektInfo[id_laweczki][objRotZ] == -90)
						{
						    Teleportuj(playerid, ObiektInfo[id_laweczki][objPozX]+1,ObiektInfo[id_laweczki][objPozY],oldposz);
						}
						else if(ObiektInfo[id_laweczki][objRotZ] == -180)
						{
						    Teleportuj(playerid, ObiektInfo[id_laweczki][objPozX],ObiektInfo[id_laweczki][objPozY]+1,oldposz);
						}
						else if(ObiektInfo[id_laweczki][objRotZ] == -270)
						{
						    Teleportuj(playerid, ObiektInfo[id_laweczki][objPozX]-1,ObiektInfo[id_laweczki][objPozY],oldposz);
						}
				        SetPlayerFacingAngle(playerid, ObiektInfo[id_laweczki][objRotZ]);
					    silka[playerid] = id_laweczki;
					    ObiektInfo[id_laweczki][gZajety] = 1;
					    SetPVarInt( playerid, "zajobj", id_laweczki );
						new name_door[512];
						CzasWyswietlaniaTextuNaDrzwiach[playerid] = 30;
						SetPlayerAttachedObject(playerid,8,2913,6,0.000000,0.000000,-0.100000,0.0000000,0.000000,0.000000);
						ApplyAnimation(playerid,"benchpress","gym_bp_geton",4.1,0,0,0,0,0);
						if(karnet[playerid] == 1)
						{
							format(name_door, sizeof(name_door), "~y~~h~Wyciskanie: %d/50~n~~w~Przytrzymaj ~k~~PED_SPRINT~ az do~n~calkowitego wycisniecia sztangi.~n~~n~Niektore suplementy umozliwiaja~n~wiekszy przyrost sily a inne~n~czestsze treningi.",wyciskanie[playerid]);
						}
						else
						{
							format(name_door, sizeof(name_door), "~y~~h~Wyciskanie: %d/50~n~~w~Przytrzymaj ~k~~PED_SPRINT~ az do~n~calkowitego wycisniecia sztangi.~n~~n~Wykup karnet na silowni i~n~czwicz aby, zwiekszyc sile!~n~Trening z suplementami daje~n~wieksze mozliwosci!",wyciskanie[playerid]);
						}
						TextDrawHideForPlayer(playerid, TextNaDrzwi[playerid]);
						TextDrawSetString(TextNaDrzwi[playerid], name_door);
						TextDrawShowForPlayer(playerid, TextNaDrzwi[playerid]);
					}
					else
					{
					    if(Dostal[playerid] != 0)
					 	{
					 	    return 0;
					 	}
					   	silka[playerid]=0;
					   	sek[playerid]=0;
						podnoszenie[playerid]=0;
						CzasWyswietlaniaTextuNaDrzwiach[playerid] = 0;
						karnet[playerid] = 0;
						ObiektInfo[id_laweczki][gZajety] = 0;
						RemovePlayerAttachedObject(playerid, 8);
						RemovePlayerAttachedObject(playerid, 8);
						RemovePlayerAttachedObject(playerid, 8);
						wyciskanie[playerid]=0;
						ApplyAnimation(playerid,"benchpress","gym_bp_getoff",4.1,0,0,0,0,0);
						ApplyAnimation(playerid,"benchpress","gym_bp_getoff",4.1,0,0,0,0,0);
					}
			}else{
			    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Ta ³aweczka treningowa jest zajêta znajdz sobie inn¹.", "Zamknij", "");
			}
		}else{
		    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Ta ³aweczka ma Ÿle ustawion¹ rotacje. Rotacja Z powinna wynosiæ 0.0 lub 90.0, 180.0, 270.0", "Zamknij", "");
		}
	}else{
	    dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "Jesteœ zbyt daleko od modelu ³awczki treningowej (obiekt id: 2629).", "Zamknij", "");
	}
    return 1;
}
forward cwiczenie(playerid);
public cwiczenie(playerid)
{
    if(silka[playerid]!=0)
	{
		if(podnoszenie[playerid]== 1)
		{
		    sek[playerid]++;
        	testzabez[playerid] = SetTimerEx("cwiczenie", 800, 0, "i", playerid);
		    if(sek[playerid] == 3)
		    {
   		     	sek[playerid]=0;
   		     	wyciskanie[playerid]++;
   		     	KillTimer(testzabez[playerid]);
			}
			new name_door[512];
			new year, month, day;
			getdate(year, month, day);
			CzasWyswietlaniaTextuNaDrzwiach[playerid] = 60;
			if(karnet[playerid] == 1)
			{
				format(name_door, sizeof(name_door), "~y~~h~Wyciskanie: %d/50~n~~w~Przytrzymaj ~k~~PED_SPRINT~ az do~n~calkowitego wycisniecia sztangi.~n~~n~Niektore suplementy umozliwiaja~n~wiekszy przyrost sily a inne~n~czestsze treningi.",wyciskanie[playerid]);
			}
			else
			{
				format(name_door, sizeof(name_door), "~y~~h~Wyciskanie: %d/50~n~~w~Przytrzymaj ~k~~PED_SPRINT~ az do~n~calkowitego wycisniecia sztangi.~n~~n~Wykup karnet na silowni i~n~czwicz tam aby, zwiekszyc sile!~n~Trening z suplementami daje~n~wieksze mozliwosci!",wyciskanie[playerid]);
			}
			TextDrawHideForPlayer(playerid, TextNaDrzwi[playerid]);
			TextDrawSetString(TextNaDrzwi[playerid], name_door);
			TextDrawShowForPlayer(playerid, TextNaDrzwi[playerid]);
			if(wyciskanie[playerid]== 50 && karnet[playerid] == 1)
			{
				if(Amfeta[playerid] > gettime()+CZAS_LETNI || Hera[playerid] > gettime()+CZAS_LETNI || Kokaina[playerid] > gettime()+CZAS_LETNI)
				{
					if(Hera[playerid] > gettime()+CZAS_LETNI)
					{
						DaneGracza[playerid][gSILA] += 10;
						DaneGracza[playerid][gTrenowal] = day;
						ZapiszGracza(playerid);
						Hera[playerid] = 0;
						DaneGracza[playerid][gOstatniTrening] = gettime()+CZAS_LETNI + 3600*18;
					}
					if(Amfeta[playerid] > gettime()+CZAS_LETNI)
					{
						DaneGracza[playerid][gSILA] += 8;
						DaneGracza[playerid][gTrenowal] = day;
						ZapiszGracza(playerid);
						Amfeta[playerid] = 0;
						DaneGracza[playerid][gOstatniTrening] = gettime()+CZAS_LETNI + 3600*18;
					}
					if(Kokaina[playerid] > gettime()+CZAS_LETNI)
					{
					    DaneGracza[playerid][gSILA] += 7;
					    DaneGracza[playerid][gTrenowal] = day;
					    ZapiszGracza(playerid);
						Kokaina[playerid] = 0;
						DaneGracza[playerid][gOstatniTrening] = gettime()+CZAS_LETNI + 3600*18;
					}
					UstawHP(playerid, 15);
				}
				else
				{
					DaneGracza[playerid][gSILA] += 5;
					DaneGracza[playerid][gTrenowal] = day;
					ZapiszGracza(playerid);
					UstawHP(playerid, 15);
					DaneGracza[playerid][gOstatniTrening] = gettime()+CZAS_LETNI + 3600*18;
				}
			    CzasWyswietlaniaTextuNaDrzwiach[playerid] = 0;
			    silka[playerid]=0;
			   	sek[playerid]=0;
				podnoszenie[playerid]=0;
				karnet[playerid] = 0;
				new find = GetPVarInt(playerid, "zajobj");
				ObiektInfo[find][gZajety] = 0;
				RemovePlayerAttachedObject(playerid, 8);
				RemovePlayerAttachedObject(playerid, 8);
				RemovePlayerAttachedObject(playerid, 8);
				wyciskanie[playerid]=0;
				ApplyAnimation(playerid,"benchpress","gym_bp_getoff",4.1,0,0,0,0,0);
				CzasWyswietlaniaTextuNaDrzwiach[playerid] = 15;
				TextDrawHideForPlayer(playerid, TextNaDrzwi[playerid]);
				TextDrawSetString(TextNaDrzwi[playerid], "Zwiekszyles swoja sile.");
				TextDrawShowForPlayer(playerid, TextNaDrzwi[playerid]);
				if(DaneGracza[playerid][gSILA] >= 3500 && DaneGracza[playerid][gZD10] == 0)
				{
				    CzasWyswietlaniaTextuNaDrzwiach[playerid] = 30;
					TextDrawHideForPlayer(playerid, TextNaDrzwi[playerid]);
					TextDrawSetString(TextNaDrzwi[playerid], "~y~Osiagniecie~n~~w~Miesniak! ~g~+100QPoints");
					TextDrawShowForPlayer(playerid, TextNaDrzwi[playerid]);
					DaneGracza[playerid][gGAMESCORE] += 100;
					DaneGracza[playerid][gZD10] = 1;
				    SetPlayerScore(playerid,DaneGracza[playerid][gGAMESCORE]);
					ZapiszGracza(playerid);
					ZapiszGraczaGlobal(playerid, 1);
				}
			}
		}
		else if(podnoszenie[playerid]==0&&sek[playerid]>0&&sek[playerid]<3)
		{
            GameTextForPlayer(playerid,"~y~~h~Silownia:~n~~w~za wczesnie pusciles klawisz.",2000,3);
            sek[playerid]= 0;
		}
    }
	return 1;
}
CMD:craft(playerid, params[])
{
	//printf("U¿yta komenda craft");
	if(zalogowany[playerid] == false)
    {
        return 0;
    }
	if(DaneGracza[playerid][gBW] != 0)
	{
		return 0;
	}
	new find = PrzyObiekcie(playerid, 2419, 5);
	if(find != 0)
	{
		Przedmioty(playerid, playerid, DIALOG_CRAFT, GUIOPIS"Przedmioty na stole", TYP_CRAFT, find);
		SetPVarInt( playerid, "UIDCRAFT", find);
	}
	else
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "{DEDEDE}Jesteœ zbyt daleko od modelu{DEDEDE} sto³u do craftingu (obiekt id: 2419{DEDEDE}).", "Zamknij", "");
	}
    return 1;
}
CMD:gril(playerid, params[])
{
	//printf("U¿yta komenda gril");
	if(zalogowany[playerid] == false)
    {
        return 0;
    }
	if(DaneGracza[playerid][gBW] != 0)
	{
		return 0;
	}
	if(Dostal[playerid] != 0)
	{
	    return 0;
	}
	new find = PrzyObiekcie(playerid, 1481, 5);
	if(find != 0)
	{
		Przedmioty(playerid, playerid, DIALOG_GRIL, GUIOPIS"Przedmioty na grilu", TYP_GRIL, find);
		SetPVarInt( playerid, "UIDGRIL", find);
	}
	else
	{
		dShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, GUIOPIS "Informacja", "{DEDEDE}Jesteœ zbyt daleko od modelu{DEDEDE} grila (obiekt id: 1481{DEDEDE}).", "Zamknij", "");
	}
    return 1;
}
public OnPlayerEditAttachedObject( playerid, response, index, modelid, boneid,Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ,Float:fRotX, Float:fRotY, Float:fRotZ,Float:fScaleX, Float:fScaleY, Float:fScaleZ )
{
    SetPlayerAttachedObject(playerid,index,modelid,boneid,fOffsetX,fOffsetY,fOffsetZ,fRotX,fRotY,fRotZ,fScaleX,fScaleY,fScaleZ);
	if(index == 7)
	{
		if(DaneGracza[playerid][gPrzyczepiony1] == 7)
		{
			strdel(zapyt, 0, 1024);
			format(zapyt, sizeof(zapyt),"UPDATE `jochym_dodadtki` SET `modelid` = '%d', `boneid` = '%d', `fOffsetX`='%f', `fOffsetY`='%f', `fOffsetZ`='%f', `fRotX`='%f', `fRotY`='%f', `fRotZ`='%f', `fScaleX`='%f', `fScaleY`='%f', `fScaleZ`='%f' WHERE `UID`='%d' AND `index` = '%d'",
			modelid, boneid,fOffsetX, fOffsetY, fOffsetZ,fRotX, fRotY, fRotZ,fScaleX, fScaleY, fScaleZ,	DaneGracza[playerid][gUID], index);
			mysql_query(zapyt);
		}
		else
		{
			DaneGracza[playerid][gPrzyczepiony1] = 7;
			strdel(zapyt, 0, 1024);
			format(zapyt, sizeof(zapyt), "INSERT INTO `jochym_dodadtki` (`UID`, `index`, `modelid`, `boneid`, `fOffsetX`, `fOffsetY`, `fOffsetZ`, `fRotX`, `fRotY`, `fRotZ`, `fScaleX`, `fScaleY`, `fScaleZ`) VALUES ('%d', '%d', '%d', '%d', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')",
			DaneGracza[playerid][gUID],index,modelid, boneid,fOffsetX, fOffsetY, fOffsetZ,fRotX, fRotY, fRotZ,fScaleX, fScaleY, fScaleZ);
			mysql_query2(zapyt);
		}
	}
	if(index == 8)
	{
		if(DaneGracza[playerid][gPrzyczepiony2] == 8)
		{
			format(zapyt, sizeof(zapyt),"UPDATE `jochym_dodadtki` SET `modelid`='%d', `boneid`='%d', `fOffsetX`='%f', `fOffsetY`='%f', `fOffsetZ`='%f', `fRotX`='%f', `fRotY`='%f', `fRotZ`='%f', `fScaleX`='%f', `fScaleY`='%f', `fScaleZ`='%f' WHERE `UID`='%d' AND `index`='%d'",
			modelid, boneid,fOffsetX, fOffsetY, fOffsetZ,fRotX, fRotY, fRotZ,fScaleX, fScaleY, fScaleZ,	DaneGracza[playerid][gUID], index);
			mysql_query(zapyt);
		}
		else
		{
			DaneGracza[playerid][gPrzyczepiony2] = 8;
			format(zapyt, sizeof(zapyt), "INSERT INTO `jochym_dodadtki` (`UID`, `index`, `modelid`, `boneid`, `fOffsetX`, `fOffsetY`, `fOffsetZ`, `fRotX`, `fRotY`, `fRotZ`, `fScaleX`, `fScaleY`, `fScaleZ`) VALUES ('%d', '%d', '%d', '%d', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')",
			DaneGracza[playerid][gUID],index,modelid, boneid,fOffsetX, fOffsetY, fOffsetZ,fRotX, fRotY, fRotZ,fScaleX, fScaleY, fScaleZ);
			mysql_query2(zapyt);
		}
	}
    return 1;
}
public OnPlayerCleoDetected( playerid, cleoid )
{
    switch( cleoid )
    {
        case CLEO_FAKEKILL:
        {
            new powiadomienie[124];
			format(powiadomienie, sizeof(powiadomienie), "[OSTRZEZENIE] Gracz: %s (ID:%d) - FAKEKILL",ZmianaNicku(playerid), playerid);
			KomunikatAdmin(1, powiadomienie);
        }
        case CLEO_CARWARP:
        {
			NadajKare(playerid,-1, 2, ""PREFIXAC".AntyCheat: Warp Vehicle", 7);
        }
        case CLEO_CARSWING:
        {
       		NadajKare(playerid,-1, 2, ""PREFIXAC".AntyCheat: Teleport pojazdów", 7);
        }
    }
    return 1;
}
public OnPlayerCheat(playerid, cheatid)
{
    if(cheatid==1)
    {
    }
    else if(cheatid==2)
    {
    }
    else if(cheatid==3)
    {
		new text[124];
		strdel(text, 0, 124);
		format(text, sizeof(text), ""PREFIXAC".AntyCheat: CHEAT AMMO (%d)", GetPlayerWeapon(playerid));
		NadajKare(playerid,-1, 2, text, 7);
    }
    else if(cheatid==4)
    {
		new text[124];
		strdel(text, 0, 124);
		format(text, sizeof(text), ""PREFIXAC".AntyCheat: CHEAT BLOCK AMMO (%d)", GetPlayerWeapon(playerid));
		NadajKare(playerid,-1, 2, text, 7);
    }
    else if(cheatid==5)
    {
		if(DutyAdmina[playerid] == 0)
		{
			new text[124];
			strdel(text, 0, 124);
			format(text, sizeof(text), ""PREFIXAC".AntyCheat: CHEAT SPEEDHACK (%d)", Predkosc(playerid));
			NadajKare(playerid,-1, 2, text, 7);
		}
    }
    else if(cheatid==6)
    {
    }
    else if(cheatid==7)
    {
    }
    else if(cheatid==8)
    {
    }
	return 1;
}
forward WywalzDZ(playerid, playeridz, dzialalnoscid);
public WywalzDZ(playerid, playeridz, dzialalnoscid)
{
    if(DaneGracza[playeridz][gDzialalnosc1] == dzialalnoscid)
    {
		strdel(tekst_globals, 0, 2048);
		format(tekst_globals, sizeof(tekst_globals), "{DEDEDE}Zosta³eœ wyproszony z grupy %s{DEDEDE} przez %s{DEDEDE}.", GrupaInfo[dzialalnoscid][gNazwa], ZmianaNicku(playerid));
        SendClientMessage(playeridz, SZARY, tekst_globals);
		format(zapyt, sizeof(zapyt), "DELETE FROM `jochym_pracownicy` WHERE `UID_POSTACI` = '%d' AND `UID_DZIALALNOSCI` = '%d'", DaneGracza[playeridz][gUID], dzialalnoscid);
		DaneGracza[playeridz][gDzialalnosc1] = 0;
		mysql_check();
		mysql_query2(zapyt);
		GameTextForPlayer(playerid, "~y~Wyprosiles gracza z dzialalnosci.", 3000, 5);
       	return 1;
	}
	else if(DaneGracza[playeridz][gDzialalnosc2] == dzialalnoscid)
    {
		strdel(tekst_globals, 0, 2048);
		format(tekst_globals, sizeof(tekst_globals), "{DEDEDE}Zosta³eœ wyproszony z grupy %s{DEDEDE} przez %s{DEDEDE}.", GrupaInfo[dzialalnoscid][gNazwa], ZmianaNicku(playerid));
        SendClientMessage(playeridz, SZARY, tekst_globals);
		format(zapyt, sizeof(zapyt), "DELETE FROM `jochym_pracownicy` WHERE `UID_POSTACI` = '%d' AND `UID_DZIALALNOSCI` = '%d'", DaneGracza[playeridz][gUID], dzialalnoscid);
		DaneGracza[playeridz][gDzialalnosc2] = 0;
		mysql_check();
		mysql_query2(zapyt);
		GameTextForPlayer(playerid, "~y~Wyprosiles gracza z dzialalnosci.", 3000, 5);
       	return 1;
	}
	else if(DaneGracza[playeridz][gDzialalnosc3] == dzialalnoscid)
    {
		strdel(tekst_globals, 0, 2048);
		format(tekst_globals, sizeof(tekst_globals), "{DEDEDE}Zosta³eœ wyproszony z grupy %s{DEDEDE} przez %s{DEDEDE}.", GrupaInfo[dzialalnoscid][gNazwa], ZmianaNicku(playerid));
        SendClientMessage(playeridz, SZARY, tekst_globals);
		format(zapyt, sizeof(zapyt), "DELETE FROM `jochym_pracownicy` WHERE `UID_POSTACI` = '%d' AND `UID_DZIALALNOSCI` = '%d'", DaneGracza[playeridz][gUID], dzialalnoscid);
		DaneGracza[playeridz][gDzialalnosc3] = 0;
		mysql_check();
		mysql_query2(zapyt);
		GameTextForPlayer(playerid, "~y~Wyprosiles gracza z dzialalnosci.", 3000, 5);
       	return 1;
	}
	else if(DaneGracza[playeridz][gDzialalnosc4] == dzialalnoscid)
    {
		strdel(tekst_globals, 0, 2048);
		format(tekst_globals, sizeof(tekst_globals), "{DEDEDE}Zosta³eœ wyproszony z grupy %s{DEDEDE} przez %s{DEDEDE}.", GrupaInfo[dzialalnoscid][gNazwa], ZmianaNicku(playerid));
        SendClientMessage(playeridz, SZARY, tekst_globals);
		format(zapyt, sizeof(zapyt), "DELETE FROM `jochym_pracownicy` WHERE `UID_POSTACI` = '%d' AND `UID_DZIALALNOSCI` = '%d'", DaneGracza[playeridz][gUID], dzialalnoscid);
		DaneGracza[playeridz][gDzialalnosc4] = 0;
		mysql_check();
		mysql_query2(zapyt);
		GameTextForPlayer(playerid, "~y~Wyprosiles gracza z dzialalnosci.", 3000, 5);
       	return 1;
	}
	else if(DaneGracza[playeridz][gDzialalnosc5] == dzialalnoscid)
    {
		strdel(tekst_globals, 0, 2048);
		format(tekst_globals, sizeof(tekst_globals), "{DEDEDE}Zosta³eœ wyproszony z grupy %s{DEDEDE} przez %s{DEDEDE}.", GrupaInfo[dzialalnoscid][gNazwa], ZmianaNicku(playerid));
        SendClientMessage(playeridz, SZARY, tekst_globals);
		format(zapyt, sizeof(zapyt), "DELETE FROM `jochym_pracownicy` WHERE `UID_POSTACI` = '%d' AND `UID_DZIALALNOSCI` = '%d'", DaneGracza[playeridz][gUID], dzialalnoscid);
		DaneGracza[playeridz][gDzialalnosc5] = 0;
		mysql_check();
		mysql_query2(zapyt);
		GameTextForPlayer(playerid, "~y~Wyprosiles gracza z dzialalnosci.", 3000, 5);
       	return 1;
	}
	else if(DaneGracza[playeridz][gDzialalnosc6] == dzialalnoscid)
    {
		strdel(tekst_globals, 0, 2048);
		format(tekst_globals, sizeof(tekst_globals), "{DEDEDE}Zosta³eœ wyproszony z grupy %s{DEDEDE} przez %s{DEDEDE}.", GrupaInfo[dzialalnoscid][gNazwa], ZmianaNicku(playerid));
        SendClientMessage(playeridz, SZARY, tekst_globals);
		format(zapyt, sizeof(zapyt), "DELETE FROM `jochym_pracownicy` WHERE `UID_POSTACI` = '%d' AND `UID_DZIALALNOSCI` = '%d'", DaneGracza[playeridz][gUID], dzialalnoscid);
		DaneGracza[playeridz][gDzialalnosc6] = 0;
		mysql_check();
		mysql_query2(zapyt);
		GameTextForPlayer(playerid, "~y~Wyprosiles gracza z dzialalnosci.", 3000, 5);
       	return 1;
	}
	return 1;
}

public OnIncomingConnection(playerid, ip_address[], port)
{
    printf("Incoming connection for player ID %i [IP/port: %s:%i]", playerid, ip_address, port);
    return 1;
}




stock UsunRycieKoduWLogach(text[])
{
	//czaswykonania = gettime();
	ForeachEx(i, strlen(text))
	{
		if(text[i] == '/') text[i] = ' ';
	    if(text[i] == '<') text[i] = ' ';
	    if(text[i] == '>') text[i] = ' ';
	    if(text[i] == '~') text[i] = ' ';
	    if(text[i] == ''') text[i] = ' ';
	    if(text[i] == ';') text[i] = ' ';
	    if(text[i] == ':') text[i] = ' ';
	    if(text[i] == '"') text[i] = ' ';
		if(text[i] == '%') text[i] = ' ';
	}
	////printf("UsunPlZnaki: %d sec", gettime()-czaswykonania);
}

stock UsunRycieKodu(text[])
{
	//czaswykonania = gettime();
	ForeachEx(i, strlen(text))
	{
		if(text[i] == '/') text[i] = ' ';
	    if(text[i] == '<') text[i] = ' ';
	    if(text[i] == '>') text[i] = ' ';
	    if(text[i] == '~') text[i] = ' ';
	    if(text[i] == '[') text[i] = ' ';
	    if(text[i] == ']') text[i] = ' ';
	    if(text[i] == ''') text[i] = ' ';
	    if(text[i] == ';') text[i] = ' ';
	    if(text[i] == ':') text[i] = ' ';
	    if(text[i] == '"') text[i] = ' ';
		if(text[i] == '%') text[i] = ' ';
	}
	////printf("UsunPlZnaki: %d sec", gettime()-czaswykonania);
}

stock UsunNieChcianeZnaki(text[])
{
	//czaswykonania = gettime();
	ForeachEx(i, strlen(text))
	{
		if(text[i] == '!') text[i] = ' ';
	    if(text[i] == '@') text[i] = ' ';
	    if(text[i] == '#') text[i] = ' ';
	    if(text[i] == '$') text[i] = ' ';
	    if(text[i] == '%') text[i] = ' ';
	    if(text[i] == '^') text[i] = ' ';
	    if(text[i] == '&') text[i] = ' ';
	    if(text[i] == '*') text[i] = ' ';
	    if(text[i] == '(') text[i] = ' ';
	    if(text[i] == ')') text[i] = ' ';
	    if(text[i] == '{') text[i] = ' ';
	    if(text[i] == '}') text[i] = ' ';
	    if(text[i] == ';') text[i] = ' ';
	    if(text[i] == ':') text[i] = ' ';
	    if(text[i] == '"') text[i] = ' ';
	    if(text[i] == '/') text[i] = ' ';
	    if(text[i] == '>') text[i] = ' ';
	    if(text[i] == '<') text[i] = ' ';
	    if(text[i] == '.') text[i] = ' ';
	    if(text[i] == ',') text[i] = ' ';
	    if(text[i] == '[') text[i] = ' ';
	    if(text[i] == ']') text[i] = ' ';
		if(text[i] == ''') text[i] = ' ';
	}
	////printf("UsunPlZnaki: %d sec", gettime()-czaswykonania);
}
